[
  {
    "nodeType": "program",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "ファイル全体の構文テンプレートであり、言語仕様という制度的規約に従う反復形式。"
    }
  },
  {
    "nodeType": "functionDeclaration",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "キーワード＋ブロック構造という固定宣言パターンで、規約的意味を担う。"
    }
  },
  {
    "nodeType": "function",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "無名・ラムダなどを含む関数定義全般。構文規範の反復であり制度的。"
    }
  },
  {
    "nodeType": "formalParameters",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "パラメータリストという文法スロットを示す抽象テンプレート。"
    }
  },
  {
    "nodeType": "variableDeclaration",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "`const` / `let` / `var` による宣言文は文法規則の反復的様式。"
    }
  },
  {
    "nodeType": "variableDeclarator",
    "default": {
      "representamen": "sinsign",
      "relationToObject": "symbol",
      "rationale": "個々の宣言インスタンスとしてコード上に一度だけ現れる具体的出現。"
    }
  },
  {
    "nodeType": "identifier",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "字句パターン（[a-zA-Z_][a-zA-Z0-9_]*) が規約に従うため。"
    },
    "contextualConditions": {
      "parentIs:VariableDeclarator": {
        "representamen": "sinsign",
        "relationToObject": "symbol",
        "rationale": "定義位置では一意の個別出現として扱う。"
      },
      "parentIs:CallExpression": {
        "representamen": "sinsign",
        "relationToObject": "index",
        "rationale": "関数呼び出し参照として対象との連関を持つ。"
      },
      "parentIs:MemberExpression": {
        "representamen": "sinsign",
        "relationToObject": "index",
        "rationale": "プロパティ参照としてオブジェクトとの位置的因果関係を帯びる。"
      }
    }
  },
  {
    "nodeType": "arguments",
    "default": {
      "representamen": "sinsign",
      "relationToObject": "index",
      "rationale": "呼び出しごとに並びが固有で、実引数が位置的に対象へ渡される。"
    }
  },
  {
    "nodeType": "callExpression",
    "default": {
      "representamen": "sinsign",
      "relationToObject": "index",
      "rationale": "呼び出しノードは実行時に対象と因果的関係を結ぶ操作位置の具体出現。"
    }
  },
  {
    "nodeType": "assignmentExpression",
    "default": {
      "representamen": "sinsign",
      "relationToObject": "index",
      "rationale": "左辺→右辺の値移送を一度の記述で具現化し、因果連関を示す。"
    }
  },
  {
    "nodeType": "binaryExpression",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "演算子＋オペランド並びという規則化書式で抽象演算を表す。"
    }
  },
  {
    "nodeType": "unaryExpression",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "単項演算も固定構文テンプレートとして制度的に規定される。"
    }
  },
  {
    "nodeType": "updateExpression",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "`++` / `--` などの更新演算子構文が規約化された形で反復される。"
    }
  },
  {
    "nodeType": "number",
    "default": {
      "representamen": "sinsign",
      "relationToObject": "symbol",
      "rationale": "数値リテラルは一出現の抽象値を慣習的符号で示す。"
    }
  },
  {
    "nodeType": "string",
    "default": {
      "representamen": "sinsign",
      "relationToObject": "symbol",
      "rationale": "文字列リテラルは具体的テキストを一度だけ提示し、意味は慣習依存。"
    }
  },
  {
    "nodeType": "arrayExpression",
    "default": {
      "representamen": "sinsign",
      "relationToObject": "index",
      "rationale": "要素順序がアクセス結果へ因果的に影響する具体構造。"
    }
  },
  {
    "nodeType": "objectExpression",
    "default": {
      "representamen": "sinsign",
      "relationToObject": "symbol",
      "rationale": "キーと値の対応を示す一度きりの具体的構造体。"
    }
  },
  {
    "nodeType": "memberExpression",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "ドット／ブラケット記法という規約化アクセス形式。"
    }
  },
  {
    "nodeType": "subscriptExpression",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "添字アクセス構文そのものが固定テンプレートとして機能。"
    }
  },
  {
    "nodeType": "parenthesizedExpression",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "括弧による優先順位明示という共通記法の反復。"
    }
  },
  {
    "nodeType": "expressionStatement",
    "default": {
      "representamen": "sinsign",
      "relationToObject": "index",
      "rationale": "式が単独で文となり副作用を持つ位置的実体。"
    }
  },
  {
    "nodeType": "blockStatement",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "波括弧で囲む文ブロックは規約化された構文単位。"
    }
  },
  {
    "nodeType": "ifStatement",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "`if (cond) {}` という条件分岐テンプレートが制度的に確立。"
    }
  },
  {
    "nodeType": "forStatement",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "反復構文の固定フォーマットとして文法に属する。"
    }
  },
  {
    "nodeType": "whileStatement",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "`while (cond) {}` も同様に制度的テンプレート。"
    }
  },
  {
    "nodeType": "tryStatement",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "`try–catch–finally` 構文ブロックは例外制御の規約形。"
    }
  },
  {
    "nodeType": "catchClause",
    "default": {
      "representamen": "legisign",
      "relationToObject": "symbol",
      "rationale": "例外ハンドラ部の固定書式であり制度的。"
    }
  },
  {
    "nodeType": "comment",
    "default": {
      "representamen": "sinsign",
      "relationToObject": "symbol",
      "rationale": "コード中に一度だけ現れる自然言語テキストで、意味は慣習依存。"
    }
  }
]
