{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 31,
    "column": 65
  },
  "text": "def hybrid_forward(self, F, inputs, token_types, valid_length=None, masked_positions=None):\n        # pylint: disable=arguments-differ\n        # pylint: disable=unused-argument\n        \"\"\"Generate the representation given the inputs.\n\n        This is used in training or fine-tuning a static (hybridized) BERT model.\n        \"\"\"\n        outputs = []\n        seq_out, attention_out = self._encode_sequence(F, inputs, token_types, valid_length)\n        outputs.append(seq_out)\n\n        if self.encoder._output_all_encodings:\n            assert isinstance(seq_out, list)\n            output = seq_out[-1]\n        else:\n            output = seq_out\n\n        if attention_out:\n            outputs.append(attention_out)\n\n        if self._use_pooler:\n            pooled_out = self._apply_pooling(output)\n            outputs.append(pooled_out)\n            if self._use_classifier:\n                next_sentence_classifier_out = self.classifier(pooled_out)\n                outputs.append(next_sentence_classifier_out)\n        if self._use_decoder:\n            assert masked_positions is not None, \\\n                'masked_positions tensor is required for decoding masked language model'\n            decoder_out = self._decode(output, masked_positions)\n            outputs.append(decoder_out)\n        return tuple(outputs) if len(outputs) > 1 else outputs[0]",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 31,
        "column": 65
      },
      "text": "def hybrid_forward(self, F, inputs, token_types, valid_length=None, masked_positions=None):\n        # pylint: disable=arguments-differ\n        # pylint: disable=unused-argument\n        \"\"\"Generate the representation given the inputs.\n\n        This is used in training or fine-tuning a static (hybridized) BERT model.\n        \"\"\"\n        outputs = []\n        seq_out, attention_out = self._encode_sequence(F, inputs, token_types, valid_length)\n        outputs.append(seq_out)\n\n        if self.encoder._output_all_encodings:\n            assert isinstance(seq_out, list)\n            output = seq_out[-1]\n        else:\n            output = seq_out\n\n        if attention_out:\n            outputs.append(attention_out)\n\n        if self._use_pooler:\n            pooled_out = self._apply_pooling(output)\n            outputs.append(pooled_out)\n            if self._use_classifier:\n                next_sentence_classifier_out = self.classifier(pooled_out)\n                outputs.append(next_sentence_classifier_out)\n        if self._use_decoder:\n            assert masked_positions is not None, \\\n                'masked_positions tensor is required for decoding masked language model'\n            decoder_out = self._decode(output, masked_positions)\n            outputs.append(decoder_out)\n        return tuple(outputs) if len(outputs) > 1 else outputs[0]",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 18
          },
          "text": "hybrid_forward"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 18
          },
          "end": {
            "row": 0,
            "column": 90
          },
          "text": "(self, F, inputs, token_types, valid_length=None, masked_positions=None)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 18
              },
              "end": {
                "row": 0,
                "column": 19
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 19
              },
              "end": {
                "row": 0,
                "column": 23
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 23
              },
              "end": {
                "row": 0,
                "column": 24
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 25
              },
              "end": {
                "row": 0,
                "column": 26
              },
              "text": "F"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 26
              },
              "end": {
                "row": 0,
                "column": 27
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 28
              },
              "end": {
                "row": 0,
                "column": 34
              },
              "text": "inputs"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 34
              },
              "end": {
                "row": 0,
                "column": 35
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 36
              },
              "end": {
                "row": 0,
                "column": 47
              },
              "text": "token_types"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 47
              },
              "end": {
                "row": 0,
                "column": 48
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 49
              },
              "end": {
                "row": 0,
                "column": 66
              },
              "text": "valid_length=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 49
                  },
                  "end": {
                    "row": 0,
                    "column": 61
                  },
                  "text": "valid_length"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 61
                  },
                  "end": {
                    "row": 0,
                    "column": 62
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 62
                  },
                  "end": {
                    "row": 0,
                    "column": 66
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 66
              },
              "end": {
                "row": 0,
                "column": 67
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 68
              },
              "end": {
                "row": 0,
                "column": 89
              },
              "text": "masked_positions=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 68
                  },
                  "end": {
                    "row": 0,
                    "column": 84
                  },
                  "text": "masked_positions"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 84
                  },
                  "end": {
                    "row": 0,
                    "column": 85
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 85
                  },
                  "end": {
                    "row": 0,
                    "column": 89
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 89
              },
              "end": {
                "row": 0,
                "column": 90
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 90
          },
          "end": {
            "row": 0,
            "column": 91
          },
          "text": ":"
        },
        {
          "type": "comment",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 1,
            "column": 42
          },
          "text": "# pylint: disable=arguments-differ"
        },
        {
          "type": "comment",
          "start": {
            "row": 2,
            "column": 8
          },
          "end": {
            "row": 2,
            "column": 41
          },
          "text": "# pylint: disable=unused-argument"
        },
        {
          "type": "block",
          "start": {
            "row": 3,
            "column": 8
          },
          "end": {
            "row": 31,
            "column": 65
          },
          "text": "\"\"\"Generate the representation given the inputs.\n\n        This is used in training or fine-tuning a static (hybridized) BERT model.\n        \"\"\"\n        outputs = []\n        seq_out, attention_out = self._encode_sequence(F, inputs, token_types, valid_length)\n        outputs.append(seq_out)\n\n        if self.encoder._output_all_encodings:\n            assert isinstance(seq_out, list)\n            output = seq_out[-1]\n        else:\n            output = seq_out\n\n        if attention_out:\n            outputs.append(attention_out)\n\n        if self._use_pooler:\n            pooled_out = self._apply_pooling(output)\n            outputs.append(pooled_out)\n            if self._use_classifier:\n                next_sentence_classifier_out = self.classifier(pooled_out)\n                outputs.append(next_sentence_classifier_out)\n        if self._use_decoder:\n            assert masked_positions is not None, \\\n                'masked_positions tensor is required for decoding masked language model'\n            decoder_out = self._decode(output, masked_positions)\n            outputs.append(decoder_out)\n        return tuple(outputs) if len(outputs) > 1 else outputs[0]",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 3,
                "column": 8
              },
              "end": {
                "row": 6,
                "column": 11
              },
              "text": "\"\"\"Generate the representation given the inputs.\n\n        This is used in training or fine-tuning a static (hybridized) BERT model.\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 3,
                    "column": 8
                  },
                  "end": {
                    "row": 6,
                    "column": 11
                  },
                  "text": "\"\"\"Generate the representation given the inputs.\n\n        This is used in training or fine-tuning a static (hybridized) BERT model.\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 3,
                        "column": 8
                      },
                      "end": {
                        "row": 3,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 3,
                        "column": 11
                      },
                      "end": {
                        "row": 6,
                        "column": 8
                      },
                      "text": "Generate the representation given the inputs.\n\n        This is used in training or fine-tuning a static (hybridized) BERT model.\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 6,
                        "column": 8
                      },
                      "end": {
                        "row": 6,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 7,
                "column": 8
              },
              "end": {
                "row": 7,
                "column": 20
              },
              "text": "outputs = []",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 7,
                    "column": 8
                  },
                  "end": {
                    "row": 7,
                    "column": 20
                  },
                  "text": "outputs = []",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 7,
                        "column": 8
                      },
                      "end": {
                        "row": 7,
                        "column": 15
                      },
                      "text": "outputs"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 7,
                        "column": 16
                      },
                      "end": {
                        "row": 7,
                        "column": 17
                      },
                      "text": "="
                    },
                    {
                      "type": "list",
                      "start": {
                        "row": 7,
                        "column": 18
                      },
                      "end": {
                        "row": 7,
                        "column": 20
                      },
                      "text": "[]",
                      "children": [
                        {
                          "type": "[",
                          "start": {
                            "row": 7,
                            "column": 18
                          },
                          "end": {
                            "row": 7,
                            "column": 19
                          },
                          "text": "["
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 7,
                            "column": 19
                          },
                          "end": {
                            "row": 7,
                            "column": 20
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 8,
                "column": 8
              },
              "end": {
                "row": 8,
                "column": 92
              },
              "text": "seq_out, attention_out = self._encode_sequence(F, inputs, token_types, valid_length)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 8,
                    "column": 8
                  },
                  "end": {
                    "row": 8,
                    "column": 92
                  },
                  "text": "seq_out, attention_out = self._encode_sequence(F, inputs, token_types, valid_length)",
                  "children": [
                    {
                      "type": "pattern_list",
                      "start": {
                        "row": 8,
                        "column": 8
                      },
                      "end": {
                        "row": 8,
                        "column": 30
                      },
                      "text": "seq_out, attention_out",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 8,
                            "column": 8
                          },
                          "end": {
                            "row": 8,
                            "column": 15
                          },
                          "text": "seq_out"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 8,
                            "column": 15
                          },
                          "end": {
                            "row": 8,
                            "column": 16
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 8,
                            "column": 17
                          },
                          "end": {
                            "row": 8,
                            "column": 30
                          },
                          "text": "attention_out"
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 8,
                        "column": 31
                      },
                      "end": {
                        "row": 8,
                        "column": 32
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 8,
                        "column": 33
                      },
                      "end": {
                        "row": 8,
                        "column": 92
                      },
                      "text": "self._encode_sequence(F, inputs, token_types, valid_length)",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 8,
                            "column": 33
                          },
                          "end": {
                            "row": 8,
                            "column": 54
                          },
                          "text": "self._encode_sequence",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 8,
                                "column": 33
                              },
                              "end": {
                                "row": 8,
                                "column": 37
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 8,
                                "column": 37
                              },
                              "end": {
                                "row": 8,
                                "column": 38
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 8,
                                "column": 38
                              },
                              "end": {
                                "row": 8,
                                "column": 54
                              },
                              "text": "_encode_sequence"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 8,
                            "column": 54
                          },
                          "end": {
                            "row": 8,
                            "column": 92
                          },
                          "text": "(F, inputs, token_types, valid_length)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 8,
                                "column": 54
                              },
                              "end": {
                                "row": 8,
                                "column": 55
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 8,
                                "column": 55
                              },
                              "end": {
                                "row": 8,
                                "column": 56
                              },
                              "text": "F"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 8,
                                "column": 56
                              },
                              "end": {
                                "row": 8,
                                "column": 57
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 8,
                                "column": 58
                              },
                              "end": {
                                "row": 8,
                                "column": 64
                              },
                              "text": "inputs"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 8,
                                "column": 64
                              },
                              "end": {
                                "row": 8,
                                "column": 65
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 8,
                                "column": 66
                              },
                              "end": {
                                "row": 8,
                                "column": 77
                              },
                              "text": "token_types"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 8,
                                "column": 77
                              },
                              "end": {
                                "row": 8,
                                "column": 78
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 8,
                                "column": 79
                              },
                              "end": {
                                "row": 8,
                                "column": 91
                              },
                              "text": "valid_length"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 8,
                                "column": 91
                              },
                              "end": {
                                "row": 8,
                                "column": 92
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 9,
                "column": 8
              },
              "end": {
                "row": 9,
                "column": 31
              },
              "text": "outputs.append(seq_out)",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 9,
                    "column": 8
                  },
                  "end": {
                    "row": 9,
                    "column": 31
                  },
                  "text": "outputs.append(seq_out)",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 9,
                        "column": 8
                      },
                      "end": {
                        "row": 9,
                        "column": 22
                      },
                      "text": "outputs.append",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 9,
                            "column": 8
                          },
                          "end": {
                            "row": 9,
                            "column": 15
                          },
                          "text": "outputs"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 9,
                            "column": 15
                          },
                          "end": {
                            "row": 9,
                            "column": 16
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 9,
                            "column": 16
                          },
                          "end": {
                            "row": 9,
                            "column": 22
                          },
                          "text": "append"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 9,
                        "column": 22
                      },
                      "end": {
                        "row": 9,
                        "column": 31
                      },
                      "text": "(seq_out)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 9,
                            "column": 22
                          },
                          "end": {
                            "row": 9,
                            "column": 23
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 9,
                            "column": 23
                          },
                          "end": {
                            "row": 9,
                            "column": 30
                          },
                          "text": "seq_out"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 9,
                            "column": 30
                          },
                          "end": {
                            "row": 9,
                            "column": 31
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 11,
                "column": 8
              },
              "end": {
                "row": 15,
                "column": 28
              },
              "text": "if self.encoder._output_all_encodings:\n            assert isinstance(seq_out, list)\n            output = seq_out[-1]\n        else:\n            output = seq_out",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 11,
                    "column": 8
                  },
                  "end": {
                    "row": 11,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "attribute",
                  "start": {
                    "row": 11,
                    "column": 11
                  },
                  "end": {
                    "row": 11,
                    "column": 45
                  },
                  "text": "self.encoder._output_all_encodings",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 11,
                        "column": 11
                      },
                      "end": {
                        "row": 11,
                        "column": 23
                      },
                      "text": "self.encoder",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 11,
                            "column": 11
                          },
                          "end": {
                            "row": 11,
                            "column": 15
                          },
                          "text": "self"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 11,
                            "column": 15
                          },
                          "end": {
                            "row": 11,
                            "column": 16
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 11,
                            "column": 16
                          },
                          "end": {
                            "row": 11,
                            "column": 23
                          },
                          "text": "encoder"
                        }
                      ]
                    },
                    {
                      "type": ".",
                      "start": {
                        "row": 11,
                        "column": 23
                      },
                      "end": {
                        "row": 11,
                        "column": 24
                      },
                      "text": "."
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 11,
                        "column": 24
                      },
                      "end": {
                        "row": 11,
                        "column": 45
                      },
                      "text": "_output_all_encodings"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 11,
                    "column": 45
                  },
                  "end": {
                    "row": 11,
                    "column": 46
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 12,
                    "column": 12
                  },
                  "end": {
                    "row": 13,
                    "column": 32
                  },
                  "text": "assert isinstance(seq_out, list)\n            output = seq_out[-1]",
                  "children": [
                    {
                      "type": "assert_statement",
                      "start": {
                        "row": 12,
                        "column": 12
                      },
                      "end": {
                        "row": 12,
                        "column": 44
                      },
                      "text": "assert isinstance(seq_out, list)",
                      "children": [
                        {
                          "type": "assert",
                          "start": {
                            "row": 12,
                            "column": 12
                          },
                          "end": {
                            "row": 12,
                            "column": 18
                          },
                          "text": "assert"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 12,
                            "column": 19
                          },
                          "end": {
                            "row": 12,
                            "column": 44
                          },
                          "text": "isinstance(seq_out, list)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 12,
                                "column": 19
                              },
                              "end": {
                                "row": 12,
                                "column": 29
                              },
                              "text": "isinstance"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 12,
                                "column": 29
                              },
                              "end": {
                                "row": 12,
                                "column": 44
                              },
                              "text": "(seq_out, list)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 12,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 30
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 12,
                                    "column": 30
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 37
                                  },
                                  "text": "seq_out"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 12,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 38
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 12,
                                    "column": 39
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 43
                                  },
                                  "text": "list"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 12,
                                    "column": 43
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 44
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 13,
                        "column": 12
                      },
                      "end": {
                        "row": 13,
                        "column": 32
                      },
                      "text": "output = seq_out[-1]",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 13,
                            "column": 12
                          },
                          "end": {
                            "row": 13,
                            "column": 32
                          },
                          "text": "output = seq_out[-1]",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 13,
                                "column": 12
                              },
                              "end": {
                                "row": 13,
                                "column": 18
                              },
                              "text": "output"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 13,
                                "column": 19
                              },
                              "end": {
                                "row": 13,
                                "column": 20
                              },
                              "text": "="
                            },
                            {
                              "type": "subscript",
                              "start": {
                                "row": 13,
                                "column": 21
                              },
                              "end": {
                                "row": 13,
                                "column": 32
                              },
                              "text": "seq_out[-1]",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 13,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 13,
                                    "column": 28
                                  },
                                  "text": "seq_out"
                                },
                                {
                                  "type": "[",
                                  "start": {
                                    "row": 13,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 13,
                                    "column": 29
                                  },
                                  "text": "["
                                },
                                {
                                  "type": "unary_operator",
                                  "start": {
                                    "row": 13,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 13,
                                    "column": 31
                                  },
                                  "text": "-1",
                                  "children": [
                                    {
                                      "type": "-",
                                      "start": {
                                        "row": 13,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 13,
                                        "column": 30
                                      },
                                      "text": "-"
                                    },
                                    {
                                      "type": "integer",
                                      "start": {
                                        "row": 13,
                                        "column": 30
                                      },
                                      "end": {
                                        "row": 13,
                                        "column": 31
                                      },
                                      "text": "1"
                                    }
                                  ]
                                },
                                {
                                  "type": "]",
                                  "start": {
                                    "row": 13,
                                    "column": 31
                                  },
                                  "end": {
                                    "row": 13,
                                    "column": 32
                                  },
                                  "text": "]"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start": {
                    "row": 14,
                    "column": 8
                  },
                  "end": {
                    "row": 15,
                    "column": 28
                  },
                  "text": "else:\n            output = seq_out",
                  "children": [
                    {
                      "type": "else",
                      "start": {
                        "row": 14,
                        "column": 8
                      },
                      "end": {
                        "row": 14,
                        "column": 12
                      },
                      "text": "else"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 14,
                        "column": 12
                      },
                      "end": {
                        "row": 14,
                        "column": 13
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 15,
                        "column": 12
                      },
                      "end": {
                        "row": 15,
                        "column": 28
                      },
                      "text": "output = seq_out",
                      "children": [
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 15,
                            "column": 12
                          },
                          "end": {
                            "row": 15,
                            "column": 28
                          },
                          "text": "output = seq_out",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 15,
                                "column": 12
                              },
                              "end": {
                                "row": 15,
                                "column": 28
                              },
                              "text": "output = seq_out",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 15,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 15,
                                    "column": 18
                                  },
                                  "text": "output"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 15,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 15,
                                    "column": 20
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 15,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 15,
                                    "column": 28
                                  },
                                  "text": "seq_out"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 17,
                "column": 8
              },
              "end": {
                "row": 18,
                "column": 41
              },
              "text": "if attention_out:\n            outputs.append(attention_out)",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 17,
                    "column": 8
                  },
                  "end": {
                    "row": 17,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 17,
                    "column": 11
                  },
                  "end": {
                    "row": 17,
                    "column": 24
                  },
                  "text": "attention_out"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 17,
                    "column": 24
                  },
                  "end": {
                    "row": 17,
                    "column": 25
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 18,
                    "column": 12
                  },
                  "end": {
                    "row": 18,
                    "column": 41
                  },
                  "text": "outputs.append(attention_out)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 18,
                        "column": 12
                      },
                      "end": {
                        "row": 18,
                        "column": 41
                      },
                      "text": "outputs.append(attention_out)",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 18,
                            "column": 12
                          },
                          "end": {
                            "row": 18,
                            "column": 41
                          },
                          "text": "outputs.append(attention_out)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 18,
                                "column": 12
                              },
                              "end": {
                                "row": 18,
                                "column": 26
                              },
                              "text": "outputs.append",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 18,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 18,
                                    "column": 19
                                  },
                                  "text": "outputs"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 18,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 18,
                                    "column": 20
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 18,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 18,
                                    "column": 26
                                  },
                                  "text": "append"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 18,
                                "column": 26
                              },
                              "end": {
                                "row": 18,
                                "column": 41
                              },
                              "text": "(attention_out)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 18,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 18,
                                    "column": 27
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 18,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 18,
                                    "column": 40
                                  },
                                  "text": "attention_out"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 18,
                                    "column": 40
                                  },
                                  "end": {
                                    "row": 18,
                                    "column": 41
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 20,
                "column": 8
              },
              "end": {
                "row": 25,
                "column": 60
              },
              "text": "if self._use_pooler:\n            pooled_out = self._apply_pooling(output)\n            outputs.append(pooled_out)\n            if self._use_classifier:\n                next_sentence_classifier_out = self.classifier(pooled_out)\n                outputs.append(next_sentence_classifier_out)",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 20,
                    "column": 8
                  },
                  "end": {
                    "row": 20,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "attribute",
                  "start": {
                    "row": 20,
                    "column": 11
                  },
                  "end": {
                    "row": 20,
                    "column": 27
                  },
                  "text": "self._use_pooler",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 20,
                        "column": 11
                      },
                      "end": {
                        "row": 20,
                        "column": 15
                      },
                      "text": "self"
                    },
                    {
                      "type": ".",
                      "start": {
                        "row": 20,
                        "column": 15
                      },
                      "end": {
                        "row": 20,
                        "column": 16
                      },
                      "text": "."
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 20,
                        "column": 16
                      },
                      "end": {
                        "row": 20,
                        "column": 27
                      },
                      "text": "_use_pooler"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 20,
                    "column": 27
                  },
                  "end": {
                    "row": 20,
                    "column": 28
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 21,
                    "column": 12
                  },
                  "end": {
                    "row": 25,
                    "column": 60
                  },
                  "text": "pooled_out = self._apply_pooling(output)\n            outputs.append(pooled_out)\n            if self._use_classifier:\n                next_sentence_classifier_out = self.classifier(pooled_out)\n                outputs.append(next_sentence_classifier_out)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 21,
                        "column": 12
                      },
                      "end": {
                        "row": 21,
                        "column": 52
                      },
                      "text": "pooled_out = self._apply_pooling(output)",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 21,
                            "column": 12
                          },
                          "end": {
                            "row": 21,
                            "column": 52
                          },
                          "text": "pooled_out = self._apply_pooling(output)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 21,
                                "column": 12
                              },
                              "end": {
                                "row": 21,
                                "column": 22
                              },
                              "text": "pooled_out"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 21,
                                "column": 23
                              },
                              "end": {
                                "row": 21,
                                "column": 24
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 21,
                                "column": 25
                              },
                              "end": {
                                "row": 21,
                                "column": 52
                              },
                              "text": "self._apply_pooling(output)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 21,
                                    "column": 25
                                  },
                                  "end": {
                                    "row": 21,
                                    "column": 44
                                  },
                                  "text": "self._apply_pooling",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 21,
                                        "column": 25
                                      },
                                      "end": {
                                        "row": 21,
                                        "column": 29
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 21,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 21,
                                        "column": 30
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 21,
                                        "column": 30
                                      },
                                      "end": {
                                        "row": 21,
                                        "column": 44
                                      },
                                      "text": "_apply_pooling"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 21,
                                    "column": 44
                                  },
                                  "end": {
                                    "row": 21,
                                    "column": 52
                                  },
                                  "text": "(output)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 21,
                                        "column": 44
                                      },
                                      "end": {
                                        "row": 21,
                                        "column": 45
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 21,
                                        "column": 45
                                      },
                                      "end": {
                                        "row": 21,
                                        "column": 51
                                      },
                                      "text": "output"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 21,
                                        "column": 51
                                      },
                                      "end": {
                                        "row": 21,
                                        "column": 52
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 22,
                        "column": 12
                      },
                      "end": {
                        "row": 22,
                        "column": 38
                      },
                      "text": "outputs.append(pooled_out)",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 22,
                            "column": 12
                          },
                          "end": {
                            "row": 22,
                            "column": 38
                          },
                          "text": "outputs.append(pooled_out)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 22,
                                "column": 12
                              },
                              "end": {
                                "row": 22,
                                "column": 26
                              },
                              "text": "outputs.append",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 19
                                  },
                                  "text": "outputs"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 22,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 20
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 26
                                  },
                                  "text": "append"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 22,
                                "column": 26
                              },
                              "end": {
                                "row": 22,
                                "column": 38
                              },
                              "text": "(pooled_out)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 22,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 27
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 37
                                  },
                                  "text": "pooled_out"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 22,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 38
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 23,
                        "column": 12
                      },
                      "end": {
                        "row": 25,
                        "column": 60
                      },
                      "text": "if self._use_classifier:\n                next_sentence_classifier_out = self.classifier(pooled_out)\n                outputs.append(next_sentence_classifier_out)",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 23,
                            "column": 12
                          },
                          "end": {
                            "row": 23,
                            "column": 14
                          },
                          "text": "if"
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 23,
                            "column": 15
                          },
                          "end": {
                            "row": 23,
                            "column": 35
                          },
                          "text": "self._use_classifier",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 15
                              },
                              "end": {
                                "row": 23,
                                "column": 19
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 23,
                                "column": 19
                              },
                              "end": {
                                "row": 23,
                                "column": 20
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 20
                              },
                              "end": {
                                "row": 23,
                                "column": 35
                              },
                              "text": "_use_classifier"
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 23,
                            "column": 35
                          },
                          "end": {
                            "row": 23,
                            "column": 36
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 24,
                            "column": 16
                          },
                          "end": {
                            "row": 25,
                            "column": 60
                          },
                          "text": "next_sentence_classifier_out = self.classifier(pooled_out)\n                outputs.append(next_sentence_classifier_out)",
                          "children": [
                            {
                              "type": "expression_statement",
                              "start": {
                                "row": 24,
                                "column": 16
                              },
                              "end": {
                                "row": 24,
                                "column": 74
                              },
                              "text": "next_sentence_classifier_out = self.classifier(pooled_out)",
                              "children": [
                                {
                                  "type": "assignment",
                                  "start": {
                                    "row": 24,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 24,
                                    "column": 74
                                  },
                                  "text": "next_sentence_classifier_out = self.classifier(pooled_out)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 24,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 24,
                                        "column": 44
                                      },
                                      "text": "next_sentence_classifier_out"
                                    },
                                    {
                                      "type": "=",
                                      "start": {
                                        "row": 24,
                                        "column": 45
                                      },
                                      "end": {
                                        "row": 24,
                                        "column": 46
                                      },
                                      "text": "="
                                    },
                                    {
                                      "type": "call",
                                      "start": {
                                        "row": 24,
                                        "column": 47
                                      },
                                      "end": {
                                        "row": 24,
                                        "column": 74
                                      },
                                      "text": "self.classifier(pooled_out)",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "start": {
                                            "row": 24,
                                            "column": 47
                                          },
                                          "end": {
                                            "row": 24,
                                            "column": 62
                                          },
                                          "text": "self.classifier",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 24,
                                                "column": 47
                                              },
                                              "end": {
                                                "row": 24,
                                                "column": 51
                                              },
                                              "text": "self"
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 24,
                                                "column": 51
                                              },
                                              "end": {
                                                "row": 24,
                                                "column": 52
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 24,
                                                "column": 52
                                              },
                                              "end": {
                                                "row": 24,
                                                "column": 62
                                              },
                                              "text": "classifier"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "start": {
                                            "row": 24,
                                            "column": 62
                                          },
                                          "end": {
                                            "row": 24,
                                            "column": 74
                                          },
                                          "text": "(pooled_out)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start": {
                                                "row": 24,
                                                "column": 62
                                              },
                                              "end": {
                                                "row": 24,
                                                "column": 63
                                              },
                                              "text": "("
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 24,
                                                "column": 63
                                              },
                                              "end": {
                                                "row": 24,
                                                "column": 73
                                              },
                                              "text": "pooled_out"
                                            },
                                            {
                                              "type": ")",
                                              "start": {
                                                "row": 24,
                                                "column": 73
                                              },
                                              "end": {
                                                "row": 24,
                                                "column": 74
                                              },
                                              "text": ")"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start": {
                                "row": 25,
                                "column": 16
                              },
                              "end": {
                                "row": 25,
                                "column": 60
                              },
                              "text": "outputs.append(next_sentence_classifier_out)",
                              "children": [
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 25,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 60
                                  },
                                  "text": "outputs.append(next_sentence_classifier_out)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 25,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 25,
                                        "column": 30
                                      },
                                      "text": "outputs.append",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 25,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 25,
                                            "column": 23
                                          },
                                          "text": "outputs"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 25,
                                            "column": 23
                                          },
                                          "end": {
                                            "row": 25,
                                            "column": 24
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 25,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 25,
                                            "column": 30
                                          },
                                          "text": "append"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 25,
                                        "column": 30
                                      },
                                      "end": {
                                        "row": 25,
                                        "column": 60
                                      },
                                      "text": "(next_sentence_classifier_out)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 25,
                                            "column": 30
                                          },
                                          "end": {
                                            "row": 25,
                                            "column": 31
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 25,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 25,
                                            "column": 59
                                          },
                                          "text": "next_sentence_classifier_out"
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 25,
                                            "column": 59
                                          },
                                          "end": {
                                            "row": 25,
                                            "column": 60
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 26,
                "column": 8
              },
              "end": {
                "row": 30,
                "column": 39
              },
              "text": "if self._use_decoder:\n            assert masked_positions is not None, \\\n                'masked_positions tensor is required for decoding masked language model'\n            decoder_out = self._decode(output, masked_positions)\n            outputs.append(decoder_out)",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 26,
                    "column": 8
                  },
                  "end": {
                    "row": 26,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "attribute",
                  "start": {
                    "row": 26,
                    "column": 11
                  },
                  "end": {
                    "row": 26,
                    "column": 28
                  },
                  "text": "self._use_decoder",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 26,
                        "column": 11
                      },
                      "end": {
                        "row": 26,
                        "column": 15
                      },
                      "text": "self"
                    },
                    {
                      "type": ".",
                      "start": {
                        "row": 26,
                        "column": 15
                      },
                      "end": {
                        "row": 26,
                        "column": 16
                      },
                      "text": "."
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 26,
                        "column": 16
                      },
                      "end": {
                        "row": 26,
                        "column": 28
                      },
                      "text": "_use_decoder"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 26,
                    "column": 28
                  },
                  "end": {
                    "row": 26,
                    "column": 29
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 27,
                    "column": 12
                  },
                  "end": {
                    "row": 30,
                    "column": 39
                  },
                  "text": "assert masked_positions is not None, \\\n                'masked_positions tensor is required for decoding masked language model'\n            decoder_out = self._decode(output, masked_positions)\n            outputs.append(decoder_out)",
                  "children": [
                    {
                      "type": "assert_statement",
                      "start": {
                        "row": 27,
                        "column": 12
                      },
                      "end": {
                        "row": 28,
                        "column": 88
                      },
                      "text": "assert masked_positions is not None, \\\n                'masked_positions tensor is required for decoding masked language model'",
                      "children": [
                        {
                          "type": "assert",
                          "start": {
                            "row": 27,
                            "column": 12
                          },
                          "end": {
                            "row": 27,
                            "column": 18
                          },
                          "text": "assert"
                        },
                        {
                          "type": "comparison_operator",
                          "start": {
                            "row": 27,
                            "column": 19
                          },
                          "end": {
                            "row": 27,
                            "column": 47
                          },
                          "text": "masked_positions is not None",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 27,
                                "column": 19
                              },
                              "end": {
                                "row": 27,
                                "column": 35
                              },
                              "text": "masked_positions"
                            },
                            {
                              "type": "is not",
                              "start": {
                                "row": 27,
                                "column": 36
                              },
                              "end": {
                                "row": 27,
                                "column": 38
                              },
                              "text": "is"
                            },
                            {
                              "type": "is not",
                              "start": {
                                "row": 27,
                                "column": 39
                              },
                              "end": {
                                "row": 27,
                                "column": 42
                              },
                              "text": "not"
                            },
                            {
                              "type": "none",
                              "start": {
                                "row": 27,
                                "column": 43
                              },
                              "end": {
                                "row": 27,
                                "column": 47
                              },
                              "text": "None"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 27,
                            "column": 47
                          },
                          "end": {
                            "row": 27,
                            "column": 48
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 28,
                            "column": 16
                          },
                          "end": {
                            "row": 28,
                            "column": 88
                          },
                          "text": "'masked_positions tensor is required for decoding masked language model'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 28,
                                "column": 16
                              },
                              "end": {
                                "row": 28,
                                "column": 17
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 28,
                                "column": 17
                              },
                              "end": {
                                "row": 28,
                                "column": 87
                              },
                              "text": "masked_positions tensor is required for decoding masked language model"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 28,
                                "column": 87
                              },
                              "end": {
                                "row": 28,
                                "column": 88
                              },
                              "text": "'"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 29,
                        "column": 12
                      },
                      "end": {
                        "row": 29,
                        "column": 64
                      },
                      "text": "decoder_out = self._decode(output, masked_positions)",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 29,
                            "column": 12
                          },
                          "end": {
                            "row": 29,
                            "column": 64
                          },
                          "text": "decoder_out = self._decode(output, masked_positions)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 29,
                                "column": 12
                              },
                              "end": {
                                "row": 29,
                                "column": 23
                              },
                              "text": "decoder_out"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 29,
                                "column": 24
                              },
                              "end": {
                                "row": 29,
                                "column": 25
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 29,
                                "column": 26
                              },
                              "end": {
                                "row": 29,
                                "column": 64
                              },
                              "text": "self._decode(output, masked_positions)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 29,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 29,
                                    "column": 38
                                  },
                                  "text": "self._decode",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 29,
                                        "column": 26
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 30
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 29,
                                        "column": 30
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 31
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 29,
                                        "column": 31
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 38
                                      },
                                      "text": "_decode"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 29,
                                    "column": 38
                                  },
                                  "end": {
                                    "row": 29,
                                    "column": 64
                                  },
                                  "text": "(output, masked_positions)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 29,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 39
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 29,
                                        "column": 39
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 45
                                      },
                                      "text": "output"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 29,
                                        "column": 45
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 46
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 29,
                                        "column": 47
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 63
                                      },
                                      "text": "masked_positions"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 29,
                                        "column": 63
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 64
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 30,
                        "column": 12
                      },
                      "end": {
                        "row": 30,
                        "column": 39
                      },
                      "text": "outputs.append(decoder_out)",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 30,
                            "column": 12
                          },
                          "end": {
                            "row": 30,
                            "column": 39
                          },
                          "text": "outputs.append(decoder_out)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 30,
                                "column": 12
                              },
                              "end": {
                                "row": 30,
                                "column": 26
                              },
                              "text": "outputs.append",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 30,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 30,
                                    "column": 19
                                  },
                                  "text": "outputs"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 30,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 30,
                                    "column": 20
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 30,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 30,
                                    "column": 26
                                  },
                                  "text": "append"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 30,
                                "column": 26
                              },
                              "end": {
                                "row": 30,
                                "column": 39
                              },
                              "text": "(decoder_out)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 30,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 30,
                                    "column": 27
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 30,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 30,
                                    "column": 38
                                  },
                                  "text": "decoder_out"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 30,
                                    "column": 38
                                  },
                                  "end": {
                                    "row": 30,
                                    "column": 39
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 31,
                "column": 8
              },
              "end": {
                "row": 31,
                "column": 65
              },
              "text": "return tuple(outputs) if len(outputs) > 1 else outputs[0]",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 31,
                    "column": 8
                  },
                  "end": {
                    "row": 31,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "conditional_expression",
                  "start": {
                    "row": 31,
                    "column": 15
                  },
                  "end": {
                    "row": 31,
                    "column": 65
                  },
                  "text": "tuple(outputs) if len(outputs) > 1 else outputs[0]",
                  "children": [
                    {
                      "type": "call",
                      "start": {
                        "row": 31,
                        "column": 15
                      },
                      "end": {
                        "row": 31,
                        "column": 29
                      },
                      "text": "tuple(outputs)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 31,
                            "column": 15
                          },
                          "end": {
                            "row": 31,
                            "column": 20
                          },
                          "text": "tuple"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 31,
                            "column": 20
                          },
                          "end": {
                            "row": 31,
                            "column": 29
                          },
                          "text": "(outputs)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 31,
                                "column": 20
                              },
                              "end": {
                                "row": 31,
                                "column": 21
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 31,
                                "column": 21
                              },
                              "end": {
                                "row": 31,
                                "column": 28
                              },
                              "text": "outputs"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 31,
                                "column": 28
                              },
                              "end": {
                                "row": 31,
                                "column": 29
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "if",
                      "start": {
                        "row": 31,
                        "column": 30
                      },
                      "end": {
                        "row": 31,
                        "column": 32
                      },
                      "text": "if"
                    },
                    {
                      "type": "comparison_operator",
                      "start": {
                        "row": 31,
                        "column": 33
                      },
                      "end": {
                        "row": 31,
                        "column": 49
                      },
                      "text": "len(outputs) > 1",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 31,
                            "column": 33
                          },
                          "end": {
                            "row": 31,
                            "column": 45
                          },
                          "text": "len(outputs)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 31,
                                "column": 33
                              },
                              "end": {
                                "row": 31,
                                "column": 36
                              },
                              "text": "len"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 31,
                                "column": 36
                              },
                              "end": {
                                "row": 31,
                                "column": 45
                              },
                              "text": "(outputs)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 31,
                                    "column": 36
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 37
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 31,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 44
                                  },
                                  "text": "outputs"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 31,
                                    "column": 44
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 45
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ">",
                          "start": {
                            "row": 31,
                            "column": 46
                          },
                          "end": {
                            "row": 31,
                            "column": 47
                          },
                          "text": ">"
                        },
                        {
                          "type": "integer",
                          "start": {
                            "row": 31,
                            "column": 48
                          },
                          "end": {
                            "row": 31,
                            "column": 49
                          },
                          "text": "1"
                        }
                      ]
                    },
                    {
                      "type": "else",
                      "start": {
                        "row": 31,
                        "column": 50
                      },
                      "end": {
                        "row": 31,
                        "column": 54
                      },
                      "text": "else"
                    },
                    {
                      "type": "subscript",
                      "start": {
                        "row": 31,
                        "column": 55
                      },
                      "end": {
                        "row": 31,
                        "column": 65
                      },
                      "text": "outputs[0]",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 31,
                            "column": 55
                          },
                          "end": {
                            "row": 31,
                            "column": 62
                          },
                          "text": "outputs"
                        },
                        {
                          "type": "[",
                          "start": {
                            "row": 31,
                            "column": 62
                          },
                          "end": {
                            "row": 31,
                            "column": 63
                          },
                          "text": "["
                        },
                        {
                          "type": "integer",
                          "start": {
                            "row": 31,
                            "column": 63
                          },
                          "end": {
                            "row": 31,
                            "column": 64
                          },
                          "text": "0"
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 31,
                            "column": 64
                          },
                          "end": {
                            "row": 31,
                            "column": 65
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}