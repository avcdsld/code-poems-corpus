{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 33,
    "column": 79
  },
  "text": "def shap_values(self, X, ranked_outputs=None, output_rank_order='max'):\n        \"\"\" Return approximate SHAP values for the model applied to the data given by X.\n\n        Parameters\n        ----------\n        X : list,\n            if framework == 'tensorflow': numpy.array, or pandas.DataFrame\n            if framework == 'pytorch': torch.tensor\n            A tensor (or list of tensors) of samples (where X.shape[0] == # samples) on which to\n            explain the model's output.\n\n        ranked_outputs : None or int\n            If ranked_outputs is None then we explain all the outputs in a multi-output model. If\n            ranked_outputs is a positive integer then we only explain that many of the top model\n            outputs (where \"top\" is determined by output_rank_order). Note that this causes a pair\n            of values to be returned (shap_values, indexes), where shap_values is a list of numpy\n            arrays for each of the output ranks, and indexes is a matrix that indicates for each sample\n            which output indexes were choses as \"top\".\n\n        output_rank_order : \"max\", \"min\", or \"max_abs\"\n            How to order the model outputs when using ranked_outputs, either by maximum, minimum, or\n            maximum absolute value.\n\n        Returns\n        -------\n        For a models with a single output this returns a tensor of SHAP values with the same shape\n        as X. For a model with multiple outputs this returns a list of SHAP value tensors, each of\n        which are the same shape as X. If ranked_outputs is None then this list of tensors matches\n        the number of model outputs. If ranked_outputs is a positive integer a pair is returned\n        (shap_values, indexes), where shap_values is a list of tensors with a length of\n        ranked_outputs, and indexes is a matrix that indicates for each sample which output indexes\n        were chosen as \"top\".\n        \"\"\"\n        return self.explainer.shap_values(X, ranked_outputs, output_rank_order)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 33,
        "column": 79
      },
      "text": "def shap_values(self, X, ranked_outputs=None, output_rank_order='max'):\n        \"\"\" Return approximate SHAP values for the model applied to the data given by X.\n\n        Parameters\n        ----------\n        X : list,\n            if framework == 'tensorflow': numpy.array, or pandas.DataFrame\n            if framework == 'pytorch': torch.tensor\n            A tensor (or list of tensors) of samples (where X.shape[0] == # samples) on which to\n            explain the model's output.\n\n        ranked_outputs : None or int\n            If ranked_outputs is None then we explain all the outputs in a multi-output model. If\n            ranked_outputs is a positive integer then we only explain that many of the top model\n            outputs (where \"top\" is determined by output_rank_order). Note that this causes a pair\n            of values to be returned (shap_values, indexes), where shap_values is a list of numpy\n            arrays for each of the output ranks, and indexes is a matrix that indicates for each sample\n            which output indexes were choses as \"top\".\n\n        output_rank_order : \"max\", \"min\", or \"max_abs\"\n            How to order the model outputs when using ranked_outputs, either by maximum, minimum, or\n            maximum absolute value.\n\n        Returns\n        -------\n        For a models with a single output this returns a tensor of SHAP values with the same shape\n        as X. For a model with multiple outputs this returns a list of SHAP value tensors, each of\n        which are the same shape as X. If ranked_outputs is None then this list of tensors matches\n        the number of model outputs. If ranked_outputs is a positive integer a pair is returned\n        (shap_values, indexes), where shap_values is a list of tensors with a length of\n        ranked_outputs, and indexes is a matrix that indicates for each sample which output indexes\n        were chosen as \"top\".\n        \"\"\"\n        return self.explainer.shap_values(X, ranked_outputs, output_rank_order)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 15
          },
          "text": "shap_values"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 15
          },
          "end": {
            "row": 0,
            "column": 70
          },
          "text": "(self, X, ranked_outputs=None, output_rank_order='max')",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 15
              },
              "end": {
                "row": 0,
                "column": 16
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 20
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 22
              },
              "end": {
                "row": 0,
                "column": 23
              },
              "text": "X"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 23
              },
              "end": {
                "row": 0,
                "column": 24
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 25
              },
              "end": {
                "row": 0,
                "column": 44
              },
              "text": "ranked_outputs=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 25
                  },
                  "end": {
                    "row": 0,
                    "column": 39
                  },
                  "text": "ranked_outputs"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 39
                  },
                  "end": {
                    "row": 0,
                    "column": 40
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 40
                  },
                  "end": {
                    "row": 0,
                    "column": 44
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 44
              },
              "end": {
                "row": 0,
                "column": 45
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 46
              },
              "end": {
                "row": 0,
                "column": 69
              },
              "text": "output_rank_order='max'",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 46
                  },
                  "end": {
                    "row": 0,
                    "column": 63
                  },
                  "text": "output_rank_order"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 63
                  },
                  "end": {
                    "row": 0,
                    "column": 64
                  },
                  "text": "="
                },
                {
                  "type": "string",
                  "start": {
                    "row": 0,
                    "column": 64
                  },
                  "end": {
                    "row": 0,
                    "column": 69
                  },
                  "text": "'max'",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 0,
                        "column": 64
                      },
                      "end": {
                        "row": 0,
                        "column": 65
                      },
                      "text": "'"
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 0,
                        "column": 65
                      },
                      "end": {
                        "row": 0,
                        "column": 68
                      },
                      "text": "max"
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 0,
                        "column": 68
                      },
                      "end": {
                        "row": 0,
                        "column": 69
                      },
                      "text": "'"
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 69
              },
              "end": {
                "row": 0,
                "column": 70
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 70
          },
          "end": {
            "row": 0,
            "column": 71
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 33,
            "column": 79
          },
          "text": "\"\"\" Return approximate SHAP values for the model applied to the data given by X.\n\n        Parameters\n        ----------\n        X : list,\n            if framework == 'tensorflow': numpy.array, or pandas.DataFrame\n            if framework == 'pytorch': torch.tensor\n            A tensor (or list of tensors) of samples (where X.shape[0] == # samples) on which to\n            explain the model's output.\n\n        ranked_outputs : None or int\n            If ranked_outputs is None then we explain all the outputs in a multi-output model. If\n            ranked_outputs is a positive integer then we only explain that many of the top model\n            outputs (where \"top\" is determined by output_rank_order). Note that this causes a pair\n            of values to be returned (shap_values, indexes), where shap_values is a list of numpy\n            arrays for each of the output ranks, and indexes is a matrix that indicates for each sample\n            which output indexes were choses as \"top\".\n\n        output_rank_order : \"max\", \"min\", or \"max_abs\"\n            How to order the model outputs when using ranked_outputs, either by maximum, minimum, or\n            maximum absolute value.\n\n        Returns\n        -------\n        For a models with a single output this returns a tensor of SHAP values with the same shape\n        as X. For a model with multiple outputs this returns a list of SHAP value tensors, each of\n        which are the same shape as X. If ranked_outputs is None then this list of tensors matches\n        the number of model outputs. If ranked_outputs is a positive integer a pair is returned\n        (shap_values, indexes), where shap_values is a list of tensors with a length of\n        ranked_outputs, and indexes is a matrix that indicates for each sample which output indexes\n        were chosen as \"top\".\n        \"\"\"\n        return self.explainer.shap_values(X, ranked_outputs, output_rank_order)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 32,
                "column": 11
              },
              "text": "\"\"\" Return approximate SHAP values for the model applied to the data given by X.\n\n        Parameters\n        ----------\n        X : list,\n            if framework == 'tensorflow': numpy.array, or pandas.DataFrame\n            if framework == 'pytorch': torch.tensor\n            A tensor (or list of tensors) of samples (where X.shape[0] == # samples) on which to\n            explain the model's output.\n\n        ranked_outputs : None or int\n            If ranked_outputs is None then we explain all the outputs in a multi-output model. If\n            ranked_outputs is a positive integer then we only explain that many of the top model\n            outputs (where \"top\" is determined by output_rank_order). Note that this causes a pair\n            of values to be returned (shap_values, indexes), where shap_values is a list of numpy\n            arrays for each of the output ranks, and indexes is a matrix that indicates for each sample\n            which output indexes were choses as \"top\".\n\n        output_rank_order : \"max\", \"min\", or \"max_abs\"\n            How to order the model outputs when using ranked_outputs, either by maximum, minimum, or\n            maximum absolute value.\n\n        Returns\n        -------\n        For a models with a single output this returns a tensor of SHAP values with the same shape\n        as X. For a model with multiple outputs this returns a list of SHAP value tensors, each of\n        which are the same shape as X. If ranked_outputs is None then this list of tensors matches\n        the number of model outputs. If ranked_outputs is a positive integer a pair is returned\n        (shap_values, indexes), where shap_values is a list of tensors with a length of\n        ranked_outputs, and indexes is a matrix that indicates for each sample which output indexes\n        were chosen as \"top\".\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 32,
                    "column": 11
                  },
                  "text": "\"\"\" Return approximate SHAP values for the model applied to the data given by X.\n\n        Parameters\n        ----------\n        X : list,\n            if framework == 'tensorflow': numpy.array, or pandas.DataFrame\n            if framework == 'pytorch': torch.tensor\n            A tensor (or list of tensors) of samples (where X.shape[0] == # samples) on which to\n            explain the model's output.\n\n        ranked_outputs : None or int\n            If ranked_outputs is None then we explain all the outputs in a multi-output model. If\n            ranked_outputs is a positive integer then we only explain that many of the top model\n            outputs (where \"top\" is determined by output_rank_order). Note that this causes a pair\n            of values to be returned (shap_values, indexes), where shap_values is a list of numpy\n            arrays for each of the output ranks, and indexes is a matrix that indicates for each sample\n            which output indexes were choses as \"top\".\n\n        output_rank_order : \"max\", \"min\", or \"max_abs\"\n            How to order the model outputs when using ranked_outputs, either by maximum, minimum, or\n            maximum absolute value.\n\n        Returns\n        -------\n        For a models with a single output this returns a tensor of SHAP values with the same shape\n        as X. For a model with multiple outputs this returns a list of SHAP value tensors, each of\n        which are the same shape as X. If ranked_outputs is None then this list of tensors matches\n        the number of model outputs. If ranked_outputs is a positive integer a pair is returned\n        (shap_values, indexes), where shap_values is a list of tensors with a length of\n        ranked_outputs, and indexes is a matrix that indicates for each sample which output indexes\n        were chosen as \"top\".\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 32,
                        "column": 8
                      },
                      "text": " Return approximate SHAP values for the model applied to the data given by X.\n\n        Parameters\n        ----------\n        X : list,\n            if framework == 'tensorflow': numpy.array, or pandas.DataFrame\n            if framework == 'pytorch': torch.tensor\n            A tensor (or list of tensors) of samples (where X.shape[0] == # samples) on which to\n            explain the model's output.\n\n        ranked_outputs : None or int\n            If ranked_outputs is None then we explain all the outputs in a multi-output model. If\n            ranked_outputs is a positive integer then we only explain that many of the top model\n            outputs (where \"top\" is determined by output_rank_order). Note that this causes a pair\n            of values to be returned (shap_values, indexes), where shap_values is a list of numpy\n            arrays for each of the output ranks, and indexes is a matrix that indicates for each sample\n            which output indexes were choses as \"top\".\n\n        output_rank_order : \"max\", \"min\", or \"max_abs\"\n            How to order the model outputs when using ranked_outputs, either by maximum, minimum, or\n            maximum absolute value.\n\n        Returns\n        -------\n        For a models with a single output this returns a tensor of SHAP values with the same shape\n        as X. For a model with multiple outputs this returns a list of SHAP value tensors, each of\n        which are the same shape as X. If ranked_outputs is None then this list of tensors matches\n        the number of model outputs. If ranked_outputs is a positive integer a pair is returned\n        (shap_values, indexes), where shap_values is a list of tensors with a length of\n        ranked_outputs, and indexes is a matrix that indicates for each sample which output indexes\n        were chosen as \"top\".\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 32,
                        "column": 8
                      },
                      "end": {
                        "row": 32,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 33,
                "column": 8
              },
              "end": {
                "row": 33,
                "column": 79
              },
              "text": "return self.explainer.shap_values(X, ranked_outputs, output_rank_order)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 33,
                    "column": 8
                  },
                  "end": {
                    "row": 33,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 33,
                    "column": 15
                  },
                  "end": {
                    "row": 33,
                    "column": 79
                  },
                  "text": "self.explainer.shap_values(X, ranked_outputs, output_rank_order)",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 33,
                        "column": 15
                      },
                      "end": {
                        "row": 33,
                        "column": 41
                      },
                      "text": "self.explainer.shap_values",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 33,
                            "column": 15
                          },
                          "end": {
                            "row": 33,
                            "column": 29
                          },
                          "text": "self.explainer",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 33,
                                "column": 15
                              },
                              "end": {
                                "row": 33,
                                "column": 19
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 33,
                                "column": 19
                              },
                              "end": {
                                "row": 33,
                                "column": 20
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 33,
                                "column": 20
                              },
                              "end": {
                                "row": 33,
                                "column": 29
                              },
                              "text": "explainer"
                            }
                          ]
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 33,
                            "column": 29
                          },
                          "end": {
                            "row": 33,
                            "column": 30
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 33,
                            "column": 30
                          },
                          "end": {
                            "row": 33,
                            "column": 41
                          },
                          "text": "shap_values"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 33,
                        "column": 41
                      },
                      "end": {
                        "row": 33,
                        "column": 79
                      },
                      "text": "(X, ranked_outputs, output_rank_order)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 33,
                            "column": 41
                          },
                          "end": {
                            "row": 33,
                            "column": 42
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 33,
                            "column": 42
                          },
                          "end": {
                            "row": 33,
                            "column": 43
                          },
                          "text": "X"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 33,
                            "column": 43
                          },
                          "end": {
                            "row": 33,
                            "column": 44
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 33,
                            "column": 45
                          },
                          "end": {
                            "row": 33,
                            "column": 59
                          },
                          "text": "ranked_outputs"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 33,
                            "column": 59
                          },
                          "end": {
                            "row": 33,
                            "column": 60
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 33,
                            "column": 61
                          },
                          "end": {
                            "row": 33,
                            "column": 78
                          },
                          "text": "output_rank_order"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 33,
                            "column": 78
                          },
                          "end": {
                            "row": 33,
                            "column": 79
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}