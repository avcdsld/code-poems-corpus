{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 58,
    "column": 12
  },
  "text": "def generate_random_sframe(num_rows, column_codes, random_seed = 0):\n    \"\"\"\n    Creates a random SFrame with `num_rows` rows and randomly\n    generated column types determined by `column_codes`.  The output\n    SFrame is deterministic based on `random_seed`.\n \n     `column_types` is a string with each character denoting one type\n     of column, with the output SFrame having one column for each\n     character in the string.  The legend is as follows:\n\n        n:  numeric column, uniform 0-1 distribution. \n        N:  numeric column, uniform 0-1 distribution, 1% NaNs.\n        r:  numeric column, uniform -100 to 100 distribution. \n        R:  numeric column, uniform -10000 to 10000 distribution, 1% NaNs.\n        b:  binary integer column, uniform distribution\n        z:  integer column with random integers between 1 and 10.\n        Z:  integer column with random integers between 1 and 100.\n        s:  categorical string column with 10 different unique short strings. \n        S:  categorical string column with 100 different unique short strings. \n        c:  categorical column with short string keys and 1000 unique values, triangle distribution.\n        C:  categorical column with short string keys and 100000 unique values, triangle distribution.\n        x:  categorical column with 128bit hex hashes and 1000 unique values. \n        X:  categorical column with 256bit hex hashes and 100000 unique values. \n        h:  column with unique 128bit hex hashes.\n        H:  column with unique 256bit hex hashes.\n\n        l:  categorical list with between 0 and 10 unique integer elements from a pool of 100 unique values. \n        L:  categorical list with between 0 and 100 unique integer elements from a pool of 1000 unique values.\n        M:  categorical list with between 0 and 10 unique string elements from a pool of 100 unique values. \n        m:  categorical list with between 0 and 100 unique string elements from a pool of 1000 unique values.\n\n        v:  numeric vector with 10 elements and uniform 0-1 elements.\n        V:  numeric vector with 1000 elements and uniform 0-1 elements.\n        w:  numeric vector with 10 elements and uniform 0-1 elements, 1% NANs.\n        W:  numeric vector with 1000 elements and uniform 0-1 elements, 1% NANs.\n\n        d: dictionary with with between 0 and 10 string keys from a\n           pool of 100 unique keys, and random 0-1 values.\n\n        D: dictionary with with between 0 and 100 string keys from a\n           pool of 1000 unique keys, and random 0-1 values.\n\n    For example::\n\n      X = generate_random_sframe(10, 'nnv')\n\n    will generate a 10 row SFrame with 2 floating point columns and\n    one column of length 10 vectors.\n    \"\"\"\n\n    from ..extensions import _generate_random_sframe\n\n    assert isinstance(column_codes, str)\n    assert isinstance(num_rows, int)\n    assert isinstance(random_seed, int)\n    \n    X = _generate_random_sframe(num_rows, column_codes, random_seed, False, 0)\n    X.__materialize__()\n    return X",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 58,
        "column": 12
      },
      "text": "def generate_random_sframe(num_rows, column_codes, random_seed = 0):\n    \"\"\"\n    Creates a random SFrame with `num_rows` rows and randomly\n    generated column types determined by `column_codes`.  The output\n    SFrame is deterministic based on `random_seed`.\n \n     `column_types` is a string with each character denoting one type\n     of column, with the output SFrame having one column for each\n     character in the string.  The legend is as follows:\n\n        n:  numeric column, uniform 0-1 distribution. \n        N:  numeric column, uniform 0-1 distribution, 1% NaNs.\n        r:  numeric column, uniform -100 to 100 distribution. \n        R:  numeric column, uniform -10000 to 10000 distribution, 1% NaNs.\n        b:  binary integer column, uniform distribution\n        z:  integer column with random integers between 1 and 10.\n        Z:  integer column with random integers between 1 and 100.\n        s:  categorical string column with 10 different unique short strings. \n        S:  categorical string column with 100 different unique short strings. \n        c:  categorical column with short string keys and 1000 unique values, triangle distribution.\n        C:  categorical column with short string keys and 100000 unique values, triangle distribution.\n        x:  categorical column with 128bit hex hashes and 1000 unique values. \n        X:  categorical column with 256bit hex hashes and 100000 unique values. \n        h:  column with unique 128bit hex hashes.\n        H:  column with unique 256bit hex hashes.\n\n        l:  categorical list with between 0 and 10 unique integer elements from a pool of 100 unique values. \n        L:  categorical list with between 0 and 100 unique integer elements from a pool of 1000 unique values.\n        M:  categorical list with between 0 and 10 unique string elements from a pool of 100 unique values. \n        m:  categorical list with between 0 and 100 unique string elements from a pool of 1000 unique values.\n\n        v:  numeric vector with 10 elements and uniform 0-1 elements.\n        V:  numeric vector with 1000 elements and uniform 0-1 elements.\n        w:  numeric vector with 10 elements and uniform 0-1 elements, 1% NANs.\n        W:  numeric vector with 1000 elements and uniform 0-1 elements, 1% NANs.\n\n        d: dictionary with with between 0 and 10 string keys from a\n           pool of 100 unique keys, and random 0-1 values.\n\n        D: dictionary with with between 0 and 100 string keys from a\n           pool of 1000 unique keys, and random 0-1 values.\n\n    For example::\n\n      X = generate_random_sframe(10, 'nnv')\n\n    will generate a 10 row SFrame with 2 floating point columns and\n    one column of length 10 vectors.\n    \"\"\"\n\n    from ..extensions import _generate_random_sframe\n\n    assert isinstance(column_codes, str)\n    assert isinstance(num_rows, int)\n    assert isinstance(random_seed, int)\n    \n    X = _generate_random_sframe(num_rows, column_codes, random_seed, False, 0)\n    X.__materialize__()\n    return X",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 26
          },
          "text": "generate_random_sframe"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 26
          },
          "end": {
            "row": 0,
            "column": 67
          },
          "text": "(num_rows, column_codes, random_seed = 0)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 26
              },
              "end": {
                "row": 0,
                "column": 27
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 27
              },
              "end": {
                "row": 0,
                "column": 35
              },
              "text": "num_rows"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 35
              },
              "end": {
                "row": 0,
                "column": 36
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 37
              },
              "end": {
                "row": 0,
                "column": 49
              },
              "text": "column_codes"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 49
              },
              "end": {
                "row": 0,
                "column": 50
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 51
              },
              "end": {
                "row": 0,
                "column": 66
              },
              "text": "random_seed = 0",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 51
                  },
                  "end": {
                    "row": 0,
                    "column": 62
                  },
                  "text": "random_seed"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 63
                  },
                  "end": {
                    "row": 0,
                    "column": 64
                  },
                  "text": "="
                },
                {
                  "type": "integer",
                  "start": {
                    "row": 0,
                    "column": 65
                  },
                  "end": {
                    "row": 0,
                    "column": 66
                  },
                  "text": "0"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 66
              },
              "end": {
                "row": 0,
                "column": 67
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 67
          },
          "end": {
            "row": 0,
            "column": 68
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 4
          },
          "end": {
            "row": 58,
            "column": 12
          },
          "text": "\"\"\"\n    Creates a random SFrame with `num_rows` rows and randomly\n    generated column types determined by `column_codes`.  The output\n    SFrame is deterministic based on `random_seed`.\n \n     `column_types` is a string with each character denoting one type\n     of column, with the output SFrame having one column for each\n     character in the string.  The legend is as follows:\n\n        n:  numeric column, uniform 0-1 distribution. \n        N:  numeric column, uniform 0-1 distribution, 1% NaNs.\n        r:  numeric column, uniform -100 to 100 distribution. \n        R:  numeric column, uniform -10000 to 10000 distribution, 1% NaNs.\n        b:  binary integer column, uniform distribution\n        z:  integer column with random integers between 1 and 10.\n        Z:  integer column with random integers between 1 and 100.\n        s:  categorical string column with 10 different unique short strings. \n        S:  categorical string column with 100 different unique short strings. \n        c:  categorical column with short string keys and 1000 unique values, triangle distribution.\n        C:  categorical column with short string keys and 100000 unique values, triangle distribution.\n        x:  categorical column with 128bit hex hashes and 1000 unique values. \n        X:  categorical column with 256bit hex hashes and 100000 unique values. \n        h:  column with unique 128bit hex hashes.\n        H:  column with unique 256bit hex hashes.\n\n        l:  categorical list with between 0 and 10 unique integer elements from a pool of 100 unique values. \n        L:  categorical list with between 0 and 100 unique integer elements from a pool of 1000 unique values.\n        M:  categorical list with between 0 and 10 unique string elements from a pool of 100 unique values. \n        m:  categorical list with between 0 and 100 unique string elements from a pool of 1000 unique values.\n\n        v:  numeric vector with 10 elements and uniform 0-1 elements.\n        V:  numeric vector with 1000 elements and uniform 0-1 elements.\n        w:  numeric vector with 10 elements and uniform 0-1 elements, 1% NANs.\n        W:  numeric vector with 1000 elements and uniform 0-1 elements, 1% NANs.\n\n        d: dictionary with with between 0 and 10 string keys from a\n           pool of 100 unique keys, and random 0-1 values.\n\n        D: dictionary with with between 0 and 100 string keys from a\n           pool of 1000 unique keys, and random 0-1 values.\n\n    For example::\n\n      X = generate_random_sframe(10, 'nnv')\n\n    will generate a 10 row SFrame with 2 floating point columns and\n    one column of length 10 vectors.\n    \"\"\"\n\n    from ..extensions import _generate_random_sframe\n\n    assert isinstance(column_codes, str)\n    assert isinstance(num_rows, int)\n    assert isinstance(random_seed, int)\n    \n    X = _generate_random_sframe(num_rows, column_codes, random_seed, False, 0)\n    X.__materialize__()\n    return X",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 4
              },
              "end": {
                "row": 48,
                "column": 7
              },
              "text": "\"\"\"\n    Creates a random SFrame with `num_rows` rows and randomly\n    generated column types determined by `column_codes`.  The output\n    SFrame is deterministic based on `random_seed`.\n \n     `column_types` is a string with each character denoting one type\n     of column, with the output SFrame having one column for each\n     character in the string.  The legend is as follows:\n\n        n:  numeric column, uniform 0-1 distribution. \n        N:  numeric column, uniform 0-1 distribution, 1% NaNs.\n        r:  numeric column, uniform -100 to 100 distribution. \n        R:  numeric column, uniform -10000 to 10000 distribution, 1% NaNs.\n        b:  binary integer column, uniform distribution\n        z:  integer column with random integers between 1 and 10.\n        Z:  integer column with random integers between 1 and 100.\n        s:  categorical string column with 10 different unique short strings. \n        S:  categorical string column with 100 different unique short strings. \n        c:  categorical column with short string keys and 1000 unique values, triangle distribution.\n        C:  categorical column with short string keys and 100000 unique values, triangle distribution.\n        x:  categorical column with 128bit hex hashes and 1000 unique values. \n        X:  categorical column with 256bit hex hashes and 100000 unique values. \n        h:  column with unique 128bit hex hashes.\n        H:  column with unique 256bit hex hashes.\n\n        l:  categorical list with between 0 and 10 unique integer elements from a pool of 100 unique values. \n        L:  categorical list with between 0 and 100 unique integer elements from a pool of 1000 unique values.\n        M:  categorical list with between 0 and 10 unique string elements from a pool of 100 unique values. \n        m:  categorical list with between 0 and 100 unique string elements from a pool of 1000 unique values.\n\n        v:  numeric vector with 10 elements and uniform 0-1 elements.\n        V:  numeric vector with 1000 elements and uniform 0-1 elements.\n        w:  numeric vector with 10 elements and uniform 0-1 elements, 1% NANs.\n        W:  numeric vector with 1000 elements and uniform 0-1 elements, 1% NANs.\n\n        d: dictionary with with between 0 and 10 string keys from a\n           pool of 100 unique keys, and random 0-1 values.\n\n        D: dictionary with with between 0 and 100 string keys from a\n           pool of 1000 unique keys, and random 0-1 values.\n\n    For example::\n\n      X = generate_random_sframe(10, 'nnv')\n\n    will generate a 10 row SFrame with 2 floating point columns and\n    one column of length 10 vectors.\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 4
                  },
                  "end": {
                    "row": 48,
                    "column": 7
                  },
                  "text": "\"\"\"\n    Creates a random SFrame with `num_rows` rows and randomly\n    generated column types determined by `column_codes`.  The output\n    SFrame is deterministic based on `random_seed`.\n \n     `column_types` is a string with each character denoting one type\n     of column, with the output SFrame having one column for each\n     character in the string.  The legend is as follows:\n\n        n:  numeric column, uniform 0-1 distribution. \n        N:  numeric column, uniform 0-1 distribution, 1% NaNs.\n        r:  numeric column, uniform -100 to 100 distribution. \n        R:  numeric column, uniform -10000 to 10000 distribution, 1% NaNs.\n        b:  binary integer column, uniform distribution\n        z:  integer column with random integers between 1 and 10.\n        Z:  integer column with random integers between 1 and 100.\n        s:  categorical string column with 10 different unique short strings. \n        S:  categorical string column with 100 different unique short strings. \n        c:  categorical column with short string keys and 1000 unique values, triangle distribution.\n        C:  categorical column with short string keys and 100000 unique values, triangle distribution.\n        x:  categorical column with 128bit hex hashes and 1000 unique values. \n        X:  categorical column with 256bit hex hashes and 100000 unique values. \n        h:  column with unique 128bit hex hashes.\n        H:  column with unique 256bit hex hashes.\n\n        l:  categorical list with between 0 and 10 unique integer elements from a pool of 100 unique values. \n        L:  categorical list with between 0 and 100 unique integer elements from a pool of 1000 unique values.\n        M:  categorical list with between 0 and 10 unique string elements from a pool of 100 unique values. \n        m:  categorical list with between 0 and 100 unique string elements from a pool of 1000 unique values.\n\n        v:  numeric vector with 10 elements and uniform 0-1 elements.\n        V:  numeric vector with 1000 elements and uniform 0-1 elements.\n        w:  numeric vector with 10 elements and uniform 0-1 elements, 1% NANs.\n        W:  numeric vector with 1000 elements and uniform 0-1 elements, 1% NANs.\n\n        d: dictionary with with between 0 and 10 string keys from a\n           pool of 100 unique keys, and random 0-1 values.\n\n        D: dictionary with with between 0 and 100 string keys from a\n           pool of 1000 unique keys, and random 0-1 values.\n\n    For example::\n\n      X = generate_random_sframe(10, 'nnv')\n\n    will generate a 10 row SFrame with 2 floating point columns and\n    one column of length 10 vectors.\n    \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 4
                      },
                      "end": {
                        "row": 1,
                        "column": 7
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 7
                      },
                      "end": {
                        "row": 48,
                        "column": 4
                      },
                      "text": "\n    Creates a random SFrame with `num_rows` rows and randomly\n    generated column types determined by `column_codes`.  The output\n    SFrame is deterministic based on `random_seed`.\n \n     `column_types` is a string with each character denoting one type\n     of column, with the output SFrame having one column for each\n     character in the string.  The legend is as follows:\n\n        n:  numeric column, uniform 0-1 distribution. \n        N:  numeric column, uniform 0-1 distribution, 1% NaNs.\n        r:  numeric column, uniform -100 to 100 distribution. \n        R:  numeric column, uniform -10000 to 10000 distribution, 1% NaNs.\n        b:  binary integer column, uniform distribution\n        z:  integer column with random integers between 1 and 10.\n        Z:  integer column with random integers between 1 and 100.\n        s:  categorical string column with 10 different unique short strings. \n        S:  categorical string column with 100 different unique short strings. \n        c:  categorical column with short string keys and 1000 unique values, triangle distribution.\n        C:  categorical column with short string keys and 100000 unique values, triangle distribution.\n        x:  categorical column with 128bit hex hashes and 1000 unique values. \n        X:  categorical column with 256bit hex hashes and 100000 unique values. \n        h:  column with unique 128bit hex hashes.\n        H:  column with unique 256bit hex hashes.\n\n        l:  categorical list with between 0 and 10 unique integer elements from a pool of 100 unique values. \n        L:  categorical list with between 0 and 100 unique integer elements from a pool of 1000 unique values.\n        M:  categorical list with between 0 and 10 unique string elements from a pool of 100 unique values. \n        m:  categorical list with between 0 and 100 unique string elements from a pool of 1000 unique values.\n\n        v:  numeric vector with 10 elements and uniform 0-1 elements.\n        V:  numeric vector with 1000 elements and uniform 0-1 elements.\n        w:  numeric vector with 10 elements and uniform 0-1 elements, 1% NANs.\n        W:  numeric vector with 1000 elements and uniform 0-1 elements, 1% NANs.\n\n        d: dictionary with with between 0 and 10 string keys from a\n           pool of 100 unique keys, and random 0-1 values.\n\n        D: dictionary with with between 0 and 100 string keys from a\n           pool of 1000 unique keys, and random 0-1 values.\n\n    For example::\n\n      X = generate_random_sframe(10, 'nnv')\n\n    will generate a 10 row SFrame with 2 floating point columns and\n    one column of length 10 vectors.\n    "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 48,
                        "column": 4
                      },
                      "end": {
                        "row": 48,
                        "column": 7
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "import_from_statement",
              "start": {
                "row": 50,
                "column": 4
              },
              "end": {
                "row": 50,
                "column": 52
              },
              "text": "from ..extensions import _generate_random_sframe",
              "children": [
                {
                  "type": "from",
                  "start": {
                    "row": 50,
                    "column": 4
                  },
                  "end": {
                    "row": 50,
                    "column": 8
                  },
                  "text": "from"
                },
                {
                  "type": "relative_import",
                  "start": {
                    "row": 50,
                    "column": 9
                  },
                  "end": {
                    "row": 50,
                    "column": 21
                  },
                  "text": "..extensions",
                  "children": [
                    {
                      "type": "import_prefix",
                      "start": {
                        "row": 50,
                        "column": 9
                      },
                      "end": {
                        "row": 50,
                        "column": 11
                      },
                      "text": "..",
                      "children": [
                        {
                          "type": ".",
                          "start": {
                            "row": 50,
                            "column": 9
                          },
                          "end": {
                            "row": 50,
                            "column": 10
                          },
                          "text": "."
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 50,
                            "column": 10
                          },
                          "end": {
                            "row": 50,
                            "column": 11
                          },
                          "text": "."
                        }
                      ]
                    },
                    {
                      "type": "dotted_name",
                      "start": {
                        "row": 50,
                        "column": 11
                      },
                      "end": {
                        "row": 50,
                        "column": 21
                      },
                      "text": "extensions",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 50,
                            "column": 11
                          },
                          "end": {
                            "row": 50,
                            "column": 21
                          },
                          "text": "extensions"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "import",
                  "start": {
                    "row": 50,
                    "column": 22
                  },
                  "end": {
                    "row": 50,
                    "column": 28
                  },
                  "text": "import"
                },
                {
                  "type": "dotted_name",
                  "start": {
                    "row": 50,
                    "column": 29
                  },
                  "end": {
                    "row": 50,
                    "column": 52
                  },
                  "text": "_generate_random_sframe",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 50,
                        "column": 29
                      },
                      "end": {
                        "row": 50,
                        "column": 52
                      },
                      "text": "_generate_random_sframe"
                    }
                  ]
                }
              ]
            },
            {
              "type": "assert_statement",
              "start": {
                "row": 52,
                "column": 4
              },
              "end": {
                "row": 52,
                "column": 40
              },
              "text": "assert isinstance(column_codes, str)",
              "children": [
                {
                  "type": "assert",
                  "start": {
                    "row": 52,
                    "column": 4
                  },
                  "end": {
                    "row": 52,
                    "column": 10
                  },
                  "text": "assert"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 52,
                    "column": 11
                  },
                  "end": {
                    "row": 52,
                    "column": 40
                  },
                  "text": "isinstance(column_codes, str)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 52,
                        "column": 11
                      },
                      "end": {
                        "row": 52,
                        "column": 21
                      },
                      "text": "isinstance"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 52,
                        "column": 21
                      },
                      "end": {
                        "row": 52,
                        "column": 40
                      },
                      "text": "(column_codes, str)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 52,
                            "column": 21
                          },
                          "end": {
                            "row": 52,
                            "column": 22
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 52,
                            "column": 22
                          },
                          "end": {
                            "row": 52,
                            "column": 34
                          },
                          "text": "column_codes"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 52,
                            "column": 34
                          },
                          "end": {
                            "row": 52,
                            "column": 35
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 52,
                            "column": 36
                          },
                          "end": {
                            "row": 52,
                            "column": 39
                          },
                          "text": "str"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 52,
                            "column": 39
                          },
                          "end": {
                            "row": 52,
                            "column": 40
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "assert_statement",
              "start": {
                "row": 53,
                "column": 4
              },
              "end": {
                "row": 53,
                "column": 36
              },
              "text": "assert isinstance(num_rows, int)",
              "children": [
                {
                  "type": "assert",
                  "start": {
                    "row": 53,
                    "column": 4
                  },
                  "end": {
                    "row": 53,
                    "column": 10
                  },
                  "text": "assert"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 53,
                    "column": 11
                  },
                  "end": {
                    "row": 53,
                    "column": 36
                  },
                  "text": "isinstance(num_rows, int)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 53,
                        "column": 11
                      },
                      "end": {
                        "row": 53,
                        "column": 21
                      },
                      "text": "isinstance"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 53,
                        "column": 21
                      },
                      "end": {
                        "row": 53,
                        "column": 36
                      },
                      "text": "(num_rows, int)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 53,
                            "column": 21
                          },
                          "end": {
                            "row": 53,
                            "column": 22
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 53,
                            "column": 22
                          },
                          "end": {
                            "row": 53,
                            "column": 30
                          },
                          "text": "num_rows"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 53,
                            "column": 30
                          },
                          "end": {
                            "row": 53,
                            "column": 31
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 53,
                            "column": 32
                          },
                          "end": {
                            "row": 53,
                            "column": 35
                          },
                          "text": "int"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 53,
                            "column": 35
                          },
                          "end": {
                            "row": 53,
                            "column": 36
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "assert_statement",
              "start": {
                "row": 54,
                "column": 4
              },
              "end": {
                "row": 54,
                "column": 39
              },
              "text": "assert isinstance(random_seed, int)",
              "children": [
                {
                  "type": "assert",
                  "start": {
                    "row": 54,
                    "column": 4
                  },
                  "end": {
                    "row": 54,
                    "column": 10
                  },
                  "text": "assert"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 54,
                    "column": 11
                  },
                  "end": {
                    "row": 54,
                    "column": 39
                  },
                  "text": "isinstance(random_seed, int)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 54,
                        "column": 11
                      },
                      "end": {
                        "row": 54,
                        "column": 21
                      },
                      "text": "isinstance"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 54,
                        "column": 21
                      },
                      "end": {
                        "row": 54,
                        "column": 39
                      },
                      "text": "(random_seed, int)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 54,
                            "column": 21
                          },
                          "end": {
                            "row": 54,
                            "column": 22
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 54,
                            "column": 22
                          },
                          "end": {
                            "row": 54,
                            "column": 33
                          },
                          "text": "random_seed"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 54,
                            "column": 33
                          },
                          "end": {
                            "row": 54,
                            "column": 34
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 54,
                            "column": 35
                          },
                          "end": {
                            "row": 54,
                            "column": 38
                          },
                          "text": "int"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 54,
                            "column": 38
                          },
                          "end": {
                            "row": 54,
                            "column": 39
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 56,
                "column": 4
              },
              "end": {
                "row": 56,
                "column": 78
              },
              "text": "X = _generate_random_sframe(num_rows, column_codes, random_seed, False, 0)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 56,
                    "column": 4
                  },
                  "end": {
                    "row": 56,
                    "column": 78
                  },
                  "text": "X = _generate_random_sframe(num_rows, column_codes, random_seed, False, 0)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 56,
                        "column": 4
                      },
                      "end": {
                        "row": 56,
                        "column": 5
                      },
                      "text": "X"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 56,
                        "column": 6
                      },
                      "end": {
                        "row": 56,
                        "column": 7
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 56,
                        "column": 8
                      },
                      "end": {
                        "row": 56,
                        "column": 78
                      },
                      "text": "_generate_random_sframe(num_rows, column_codes, random_seed, False, 0)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 56,
                            "column": 8
                          },
                          "end": {
                            "row": 56,
                            "column": 31
                          },
                          "text": "_generate_random_sframe"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 56,
                            "column": 31
                          },
                          "end": {
                            "row": 56,
                            "column": 78
                          },
                          "text": "(num_rows, column_codes, random_seed, False, 0)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 56,
                                "column": 31
                              },
                              "end": {
                                "row": 56,
                                "column": 32
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 56,
                                "column": 32
                              },
                              "end": {
                                "row": 56,
                                "column": 40
                              },
                              "text": "num_rows"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 56,
                                "column": 40
                              },
                              "end": {
                                "row": 56,
                                "column": 41
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 56,
                                "column": 42
                              },
                              "end": {
                                "row": 56,
                                "column": 54
                              },
                              "text": "column_codes"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 56,
                                "column": 54
                              },
                              "end": {
                                "row": 56,
                                "column": 55
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 56,
                                "column": 56
                              },
                              "end": {
                                "row": 56,
                                "column": 67
                              },
                              "text": "random_seed"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 56,
                                "column": 67
                              },
                              "end": {
                                "row": 56,
                                "column": 68
                              },
                              "text": ","
                            },
                            {
                              "type": "false",
                              "start": {
                                "row": 56,
                                "column": 69
                              },
                              "end": {
                                "row": 56,
                                "column": 74
                              },
                              "text": "False"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 56,
                                "column": 74
                              },
                              "end": {
                                "row": 56,
                                "column": 75
                              },
                              "text": ","
                            },
                            {
                              "type": "integer",
                              "start": {
                                "row": 56,
                                "column": 76
                              },
                              "end": {
                                "row": 56,
                                "column": 77
                              },
                              "text": "0"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 56,
                                "column": 77
                              },
                              "end": {
                                "row": 56,
                                "column": 78
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 57,
                "column": 4
              },
              "end": {
                "row": 57,
                "column": 23
              },
              "text": "X.__materialize__()",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 57,
                    "column": 4
                  },
                  "end": {
                    "row": 57,
                    "column": 23
                  },
                  "text": "X.__materialize__()",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 57,
                        "column": 4
                      },
                      "end": {
                        "row": 57,
                        "column": 21
                      },
                      "text": "X.__materialize__",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 57,
                            "column": 4
                          },
                          "end": {
                            "row": 57,
                            "column": 5
                          },
                          "text": "X"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 57,
                            "column": 5
                          },
                          "end": {
                            "row": 57,
                            "column": 6
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 57,
                            "column": 6
                          },
                          "end": {
                            "row": 57,
                            "column": 21
                          },
                          "text": "__materialize__"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 57,
                        "column": 21
                      },
                      "end": {
                        "row": 57,
                        "column": 23
                      },
                      "text": "()",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 57,
                            "column": 21
                          },
                          "end": {
                            "row": 57,
                            "column": 22
                          },
                          "text": "("
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 57,
                            "column": 22
                          },
                          "end": {
                            "row": 57,
                            "column": 23
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 58,
                "column": 4
              },
              "end": {
                "row": 58,
                "column": 12
              },
              "text": "return X",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 58,
                    "column": 4
                  },
                  "end": {
                    "row": 58,
                    "column": 10
                  },
                  "text": "return"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 58,
                    "column": 11
                  },
                  "end": {
                    "row": 58,
                    "column": 12
                  },
                  "text": "X"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}