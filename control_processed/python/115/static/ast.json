{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 12,
    "column": 55
  },
  "text": "def countApprox(self, timeout, confidence=0.95):\n        \"\"\"\n        .. note:: Experimental\n\n        Approximate version of count() that returns a potentially incomplete\n        result within a timeout, even if not all tasks have finished.\n\n        >>> rdd = sc.parallelize(range(1000), 10)\n        >>> rdd.countApprox(1000, 1.0)\n        1000\n        \"\"\"\n        drdd = self.mapPartitions(lambda it: [float(sum(1 for i in it))])\n        return int(drdd.sumApprox(timeout, confidence))",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 12,
        "column": 55
      },
      "text": "def countApprox(self, timeout, confidence=0.95):\n        \"\"\"\n        .. note:: Experimental\n\n        Approximate version of count() that returns a potentially incomplete\n        result within a timeout, even if not all tasks have finished.\n\n        >>> rdd = sc.parallelize(range(1000), 10)\n        >>> rdd.countApprox(1000, 1.0)\n        1000\n        \"\"\"\n        drdd = self.mapPartitions(lambda it: [float(sum(1 for i in it))])\n        return int(drdd.sumApprox(timeout, confidence))",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 15
          },
          "text": "countApprox"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 15
          },
          "end": {
            "row": 0,
            "column": 47
          },
          "text": "(self, timeout, confidence=0.95)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 15
              },
              "end": {
                "row": 0,
                "column": 16
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 20
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 22
              },
              "end": {
                "row": 0,
                "column": 29
              },
              "text": "timeout"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 29
              },
              "end": {
                "row": 0,
                "column": 30
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 31
              },
              "end": {
                "row": 0,
                "column": 46
              },
              "text": "confidence=0.95",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 31
                  },
                  "end": {
                    "row": 0,
                    "column": 41
                  },
                  "text": "confidence"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 41
                  },
                  "end": {
                    "row": 0,
                    "column": 42
                  },
                  "text": "="
                },
                {
                  "type": "float",
                  "start": {
                    "row": 0,
                    "column": 42
                  },
                  "end": {
                    "row": 0,
                    "column": 46
                  },
                  "text": "0.95"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 46
              },
              "end": {
                "row": 0,
                "column": 47
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 47
          },
          "end": {
            "row": 0,
            "column": 48
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 12,
            "column": 55
          },
          "text": "\"\"\"\n        .. note:: Experimental\n\n        Approximate version of count() that returns a potentially incomplete\n        result within a timeout, even if not all tasks have finished.\n\n        >>> rdd = sc.parallelize(range(1000), 10)\n        >>> rdd.countApprox(1000, 1.0)\n        1000\n        \"\"\"\n        drdd = self.mapPartitions(lambda it: [float(sum(1 for i in it))])\n        return int(drdd.sumApprox(timeout, confidence))",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 10,
                "column": 11
              },
              "text": "\"\"\"\n        .. note:: Experimental\n\n        Approximate version of count() that returns a potentially incomplete\n        result within a timeout, even if not all tasks have finished.\n\n        >>> rdd = sc.parallelize(range(1000), 10)\n        >>> rdd.countApprox(1000, 1.0)\n        1000\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 10,
                    "column": 11
                  },
                  "text": "\"\"\"\n        .. note:: Experimental\n\n        Approximate version of count() that returns a potentially incomplete\n        result within a timeout, even if not all tasks have finished.\n\n        >>> rdd = sc.parallelize(range(1000), 10)\n        >>> rdd.countApprox(1000, 1.0)\n        1000\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 10,
                        "column": 8
                      },
                      "text": "\n        .. note:: Experimental\n\n        Approximate version of count() that returns a potentially incomplete\n        result within a timeout, even if not all tasks have finished.\n\n        >>> rdd = sc.parallelize(range(1000), 10)\n        >>> rdd.countApprox(1000, 1.0)\n        1000\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 10,
                        "column": 8
                      },
                      "end": {
                        "row": 10,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 11,
                "column": 8
              },
              "end": {
                "row": 11,
                "column": 73
              },
              "text": "drdd = self.mapPartitions(lambda it: [float(sum(1 for i in it))])",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 11,
                    "column": 8
                  },
                  "end": {
                    "row": 11,
                    "column": 73
                  },
                  "text": "drdd = self.mapPartitions(lambda it: [float(sum(1 for i in it))])",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 11,
                        "column": 8
                      },
                      "end": {
                        "row": 11,
                        "column": 12
                      },
                      "text": "drdd"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 11,
                        "column": 13
                      },
                      "end": {
                        "row": 11,
                        "column": 14
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 11,
                        "column": 15
                      },
                      "end": {
                        "row": 11,
                        "column": 73
                      },
                      "text": "self.mapPartitions(lambda it: [float(sum(1 for i in it))])",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 11,
                            "column": 15
                          },
                          "end": {
                            "row": 11,
                            "column": 33
                          },
                          "text": "self.mapPartitions",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 11,
                                "column": 15
                              },
                              "end": {
                                "row": 11,
                                "column": 19
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 11,
                                "column": 19
                              },
                              "end": {
                                "row": 11,
                                "column": 20
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 11,
                                "column": 20
                              },
                              "end": {
                                "row": 11,
                                "column": 33
                              },
                              "text": "mapPartitions"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 11,
                            "column": 33
                          },
                          "end": {
                            "row": 11,
                            "column": 73
                          },
                          "text": "(lambda it: [float(sum(1 for i in it))])",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 11,
                                "column": 33
                              },
                              "end": {
                                "row": 11,
                                "column": 34
                              },
                              "text": "("
                            },
                            {
                              "type": "lambda",
                              "start": {
                                "row": 11,
                                "column": 34
                              },
                              "end": {
                                "row": 11,
                                "column": 72
                              },
                              "text": "lambda it: [float(sum(1 for i in it))]",
                              "children": [
                                {
                                  "type": "lambda",
                                  "start": {
                                    "row": 11,
                                    "column": 34
                                  },
                                  "end": {
                                    "row": 11,
                                    "column": 40
                                  },
                                  "text": "lambda"
                                },
                                {
                                  "type": "lambda_parameters",
                                  "start": {
                                    "row": 11,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 11,
                                    "column": 43
                                  },
                                  "text": "it",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 11,
                                        "column": 41
                                      },
                                      "end": {
                                        "row": 11,
                                        "column": 43
                                      },
                                      "text": "it"
                                    }
                                  ]
                                },
                                {
                                  "type": ":",
                                  "start": {
                                    "row": 11,
                                    "column": 43
                                  },
                                  "end": {
                                    "row": 11,
                                    "column": 44
                                  },
                                  "text": ":"
                                },
                                {
                                  "type": "list",
                                  "start": {
                                    "row": 11,
                                    "column": 45
                                  },
                                  "end": {
                                    "row": 11,
                                    "column": 72
                                  },
                                  "text": "[float(sum(1 for i in it))]",
                                  "children": [
                                    {
                                      "type": "[",
                                      "start": {
                                        "row": 11,
                                        "column": 45
                                      },
                                      "end": {
                                        "row": 11,
                                        "column": 46
                                      },
                                      "text": "["
                                    },
                                    {
                                      "type": "call",
                                      "start": {
                                        "row": 11,
                                        "column": 46
                                      },
                                      "end": {
                                        "row": 11,
                                        "column": 71
                                      },
                                      "text": "float(sum(1 for i in it))",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 11,
                                            "column": 46
                                          },
                                          "end": {
                                            "row": 11,
                                            "column": 51
                                          },
                                          "text": "float"
                                        },
                                        {
                                          "type": "argument_list",
                                          "start": {
                                            "row": 11,
                                            "column": 51
                                          },
                                          "end": {
                                            "row": 11,
                                            "column": 71
                                          },
                                          "text": "(sum(1 for i in it))",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start": {
                                                "row": 11,
                                                "column": 51
                                              },
                                              "end": {
                                                "row": 11,
                                                "column": 52
                                              },
                                              "text": "("
                                            },
                                            {
                                              "type": "call",
                                              "start": {
                                                "row": 11,
                                                "column": 52
                                              },
                                              "end": {
                                                "row": 11,
                                                "column": 70
                                              },
                                              "text": "sum(1 for i in it)",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 11,
                                                    "column": 52
                                                  },
                                                  "end": {
                                                    "row": 11,
                                                    "column": 55
                                                  },
                                                  "text": "sum"
                                                },
                                                {
                                                  "type": "generator_expression",
                                                  "start": {
                                                    "row": 11,
                                                    "column": 55
                                                  },
                                                  "end": {
                                                    "row": 11,
                                                    "column": 70
                                                  },
                                                  "text": "(1 for i in it)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "start": {
                                                        "row": 11,
                                                        "column": 55
                                                      },
                                                      "end": {
                                                        "row": 11,
                                                        "column": 56
                                                      },
                                                      "text": "("
                                                    },
                                                    {
                                                      "type": "integer",
                                                      "start": {
                                                        "row": 11,
                                                        "column": 56
                                                      },
                                                      "end": {
                                                        "row": 11,
                                                        "column": 57
                                                      },
                                                      "text": "1"
                                                    },
                                                    {
                                                      "type": "for_in_clause",
                                                      "start": {
                                                        "row": 11,
                                                        "column": 58
                                                      },
                                                      "end": {
                                                        "row": 11,
                                                        "column": 69
                                                      },
                                                      "text": "for i in it",
                                                      "children": [
                                                        {
                                                          "type": "for",
                                                          "start": {
                                                            "row": 11,
                                                            "column": 58
                                                          },
                                                          "end": {
                                                            "row": 11,
                                                            "column": 61
                                                          },
                                                          "text": "for"
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 11,
                                                            "column": 62
                                                          },
                                                          "end": {
                                                            "row": 11,
                                                            "column": 63
                                                          },
                                                          "text": "i"
                                                        },
                                                        {
                                                          "type": "in",
                                                          "start": {
                                                            "row": 11,
                                                            "column": 64
                                                          },
                                                          "end": {
                                                            "row": 11,
                                                            "column": 66
                                                          },
                                                          "text": "in"
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 11,
                                                            "column": 67
                                                          },
                                                          "end": {
                                                            "row": 11,
                                                            "column": 69
                                                          },
                                                          "text": "it"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "start": {
                                                        "row": 11,
                                                        "column": 69
                                                      },
                                                      "end": {
                                                        "row": 11,
                                                        "column": 70
                                                      },
                                                      "text": ")"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "start": {
                                                "row": 11,
                                                "column": 70
                                              },
                                              "end": {
                                                "row": 11,
                                                "column": 71
                                              },
                                              "text": ")"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "]",
                                      "start": {
                                        "row": 11,
                                        "column": 71
                                      },
                                      "end": {
                                        "row": 11,
                                        "column": 72
                                      },
                                      "text": "]"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 11,
                                "column": 72
                              },
                              "end": {
                                "row": 11,
                                "column": 73
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 12,
                "column": 8
              },
              "end": {
                "row": 12,
                "column": 55
              },
              "text": "return int(drdd.sumApprox(timeout, confidence))",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 12,
                    "column": 8
                  },
                  "end": {
                    "row": 12,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 12,
                    "column": 15
                  },
                  "end": {
                    "row": 12,
                    "column": 55
                  },
                  "text": "int(drdd.sumApprox(timeout, confidence))",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 12,
                        "column": 15
                      },
                      "end": {
                        "row": 12,
                        "column": 18
                      },
                      "text": "int"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 12,
                        "column": 18
                      },
                      "end": {
                        "row": 12,
                        "column": 55
                      },
                      "text": "(drdd.sumApprox(timeout, confidence))",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 12,
                            "column": 18
                          },
                          "end": {
                            "row": 12,
                            "column": 19
                          },
                          "text": "("
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 12,
                            "column": 19
                          },
                          "end": {
                            "row": 12,
                            "column": 54
                          },
                          "text": "drdd.sumApprox(timeout, confidence)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 12,
                                "column": 19
                              },
                              "end": {
                                "row": 12,
                                "column": 33
                              },
                              "text": "drdd.sumApprox",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 12,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 23
                                  },
                                  "text": "drdd"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 12,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 24
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 12,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 33
                                  },
                                  "text": "sumApprox"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 12,
                                "column": 33
                              },
                              "end": {
                                "row": 12,
                                "column": 54
                              },
                              "text": "(timeout, confidence)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 12,
                                    "column": 33
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 34
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 12,
                                    "column": 34
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 41
                                  },
                                  "text": "timeout"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 12,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 42
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 12,
                                    "column": 43
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 53
                                  },
                                  "text": "confidence"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 12,
                                    "column": 53
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 54
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 12,
                            "column": 54
                          },
                          "end": {
                            "row": 12,
                            "column": 55
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}