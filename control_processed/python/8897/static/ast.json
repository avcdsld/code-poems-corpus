{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 35,
    "column": 32
  },
  "text": "def scope(self, cleanup=True):\n        \"\"\"This helper method can be used with the context object to promote\n        it to the current thread local (see :func:`get_current_context`).\n        The default behavior of this is to invoke the cleanup functions which\n        can be disabled by setting `cleanup` to `False`.  The cleanup\n        functions are typically used for things such as closing file handles.\n\n        If the cleanup is intended the context object can also be directly\n        used as a context manager.\n\n        Example usage::\n\n            with ctx.scope():\n                assert get_current_context() is ctx\n\n        This is equivalent::\n\n            with ctx:\n                assert get_current_context() is ctx\n\n        .. versionadded:: 5.0\n\n        :param cleanup: controls if the cleanup functions should be run or\n                        not.  The default is to run these functions.  In\n                        some situations the context only wants to be\n                        temporarily pushed in which case this can be disabled.\n                        Nested pushes automatically defer the cleanup.\n        \"\"\"\n        if not cleanup:\n            self._depth += 1\n        try:\n            with self as rv:\n                yield rv\n        finally:\n            if not cleanup:\n                self._depth -= 1",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 35,
        "column": 32
      },
      "text": "def scope(self, cleanup=True):\n        \"\"\"This helper method can be used with the context object to promote\n        it to the current thread local (see :func:`get_current_context`).\n        The default behavior of this is to invoke the cleanup functions which\n        can be disabled by setting `cleanup` to `False`.  The cleanup\n        functions are typically used for things such as closing file handles.\n\n        If the cleanup is intended the context object can also be directly\n        used as a context manager.\n\n        Example usage::\n\n            with ctx.scope():\n                assert get_current_context() is ctx\n\n        This is equivalent::\n\n            with ctx:\n                assert get_current_context() is ctx\n\n        .. versionadded:: 5.0\n\n        :param cleanup: controls if the cleanup functions should be run or\n                        not.  The default is to run these functions.  In\n                        some situations the context only wants to be\n                        temporarily pushed in which case this can be disabled.\n                        Nested pushes automatically defer the cleanup.\n        \"\"\"\n        if not cleanup:\n            self._depth += 1\n        try:\n            with self as rv:\n                yield rv\n        finally:\n            if not cleanup:\n                self._depth -= 1",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 9
          },
          "text": "scope"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 9
          },
          "end": {
            "row": 0,
            "column": 29
          },
          "text": "(self, cleanup=True)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 9
              },
              "end": {
                "row": 0,
                "column": 10
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 10
              },
              "end": {
                "row": 0,
                "column": 14
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 14
              },
              "end": {
                "row": 0,
                "column": 15
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 28
              },
              "text": "cleanup=True",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 16
                  },
                  "end": {
                    "row": 0,
                    "column": 23
                  },
                  "text": "cleanup"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 23
                  },
                  "end": {
                    "row": 0,
                    "column": 24
                  },
                  "text": "="
                },
                {
                  "type": "true",
                  "start": {
                    "row": 0,
                    "column": 24
                  },
                  "end": {
                    "row": 0,
                    "column": 28
                  },
                  "text": "True"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 28
              },
              "end": {
                "row": 0,
                "column": 29
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 29
          },
          "end": {
            "row": 0,
            "column": 30
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 35,
            "column": 32
          },
          "text": "\"\"\"This helper method can be used with the context object to promote\n        it to the current thread local (see :func:`get_current_context`).\n        The default behavior of this is to invoke the cleanup functions which\n        can be disabled by setting `cleanup` to `False`.  The cleanup\n        functions are typically used for things such as closing file handles.\n\n        If the cleanup is intended the context object can also be directly\n        used as a context manager.\n\n        Example usage::\n\n            with ctx.scope():\n                assert get_current_context() is ctx\n\n        This is equivalent::\n\n            with ctx:\n                assert get_current_context() is ctx\n\n        .. versionadded:: 5.0\n\n        :param cleanup: controls if the cleanup functions should be run or\n                        not.  The default is to run these functions.  In\n                        some situations the context only wants to be\n                        temporarily pushed in which case this can be disabled.\n                        Nested pushes automatically defer the cleanup.\n        \"\"\"\n        if not cleanup:\n            self._depth += 1\n        try:\n            with self as rv:\n                yield rv\n        finally:\n            if not cleanup:\n                self._depth -= 1",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 27,
                "column": 11
              },
              "text": "\"\"\"This helper method can be used with the context object to promote\n        it to the current thread local (see :func:`get_current_context`).\n        The default behavior of this is to invoke the cleanup functions which\n        can be disabled by setting `cleanup` to `False`.  The cleanup\n        functions are typically used for things such as closing file handles.\n\n        If the cleanup is intended the context object can also be directly\n        used as a context manager.\n\n        Example usage::\n\n            with ctx.scope():\n                assert get_current_context() is ctx\n\n        This is equivalent::\n\n            with ctx:\n                assert get_current_context() is ctx\n\n        .. versionadded:: 5.0\n\n        :param cleanup: controls if the cleanup functions should be run or\n                        not.  The default is to run these functions.  In\n                        some situations the context only wants to be\n                        temporarily pushed in which case this can be disabled.\n                        Nested pushes automatically defer the cleanup.\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 27,
                    "column": 11
                  },
                  "text": "\"\"\"This helper method can be used with the context object to promote\n        it to the current thread local (see :func:`get_current_context`).\n        The default behavior of this is to invoke the cleanup functions which\n        can be disabled by setting `cleanup` to `False`.  The cleanup\n        functions are typically used for things such as closing file handles.\n\n        If the cleanup is intended the context object can also be directly\n        used as a context manager.\n\n        Example usage::\n\n            with ctx.scope():\n                assert get_current_context() is ctx\n\n        This is equivalent::\n\n            with ctx:\n                assert get_current_context() is ctx\n\n        .. versionadded:: 5.0\n\n        :param cleanup: controls if the cleanup functions should be run or\n                        not.  The default is to run these functions.  In\n                        some situations the context only wants to be\n                        temporarily pushed in which case this can be disabled.\n                        Nested pushes automatically defer the cleanup.\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 27,
                        "column": 8
                      },
                      "text": "This helper method can be used with the context object to promote\n        it to the current thread local (see :func:`get_current_context`).\n        The default behavior of this is to invoke the cleanup functions which\n        can be disabled by setting `cleanup` to `False`.  The cleanup\n        functions are typically used for things such as closing file handles.\n\n        If the cleanup is intended the context object can also be directly\n        used as a context manager.\n\n        Example usage::\n\n            with ctx.scope():\n                assert get_current_context() is ctx\n\n        This is equivalent::\n\n            with ctx:\n                assert get_current_context() is ctx\n\n        .. versionadded:: 5.0\n\n        :param cleanup: controls if the cleanup functions should be run or\n                        not.  The default is to run these functions.  In\n                        some situations the context only wants to be\n                        temporarily pushed in which case this can be disabled.\n                        Nested pushes automatically defer the cleanup.\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 27,
                        "column": 8
                      },
                      "end": {
                        "row": 27,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 28,
                "column": 8
              },
              "end": {
                "row": 29,
                "column": 28
              },
              "text": "if not cleanup:\n            self._depth += 1",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 28,
                    "column": 8
                  },
                  "end": {
                    "row": 28,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "not_operator",
                  "start": {
                    "row": 28,
                    "column": 11
                  },
                  "end": {
                    "row": 28,
                    "column": 22
                  },
                  "text": "not cleanup",
                  "children": [
                    {
                      "type": "not",
                      "start": {
                        "row": 28,
                        "column": 11
                      },
                      "end": {
                        "row": 28,
                        "column": 14
                      },
                      "text": "not"
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 28,
                        "column": 15
                      },
                      "end": {
                        "row": 28,
                        "column": 22
                      },
                      "text": "cleanup"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 28,
                    "column": 22
                  },
                  "end": {
                    "row": 28,
                    "column": 23
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 29,
                    "column": 12
                  },
                  "end": {
                    "row": 29,
                    "column": 28
                  },
                  "text": "self._depth += 1",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 29,
                        "column": 12
                      },
                      "end": {
                        "row": 29,
                        "column": 28
                      },
                      "text": "self._depth += 1",
                      "children": [
                        {
                          "type": "augmented_assignment",
                          "start": {
                            "row": 29,
                            "column": 12
                          },
                          "end": {
                            "row": 29,
                            "column": 28
                          },
                          "text": "self._depth += 1",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 29,
                                "column": 12
                              },
                              "end": {
                                "row": 29,
                                "column": 23
                              },
                              "text": "self._depth",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 29,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 29,
                                    "column": 16
                                  },
                                  "text": "self"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 29,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 29,
                                    "column": 17
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 29,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 29,
                                    "column": 23
                                  },
                                  "text": "_depth"
                                }
                              ]
                            },
                            {
                              "type": "+=",
                              "start": {
                                "row": 29,
                                "column": 24
                              },
                              "end": {
                                "row": 29,
                                "column": 26
                              },
                              "text": "+="
                            },
                            {
                              "type": "integer",
                              "start": {
                                "row": 29,
                                "column": 27
                              },
                              "end": {
                                "row": 29,
                                "column": 28
                              },
                              "text": "1"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "try_statement",
              "start": {
                "row": 30,
                "column": 8
              },
              "end": {
                "row": 35,
                "column": 32
              },
              "text": "try:\n            with self as rv:\n                yield rv\n        finally:\n            if not cleanup:\n                self._depth -= 1",
              "children": [
                {
                  "type": "try",
                  "start": {
                    "row": 30,
                    "column": 8
                  },
                  "end": {
                    "row": 30,
                    "column": 11
                  },
                  "text": "try"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 30,
                    "column": 11
                  },
                  "end": {
                    "row": 30,
                    "column": 12
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 31,
                    "column": 12
                  },
                  "end": {
                    "row": 32,
                    "column": 24
                  },
                  "text": "with self as rv:\n                yield rv",
                  "children": [
                    {
                      "type": "with_statement",
                      "start": {
                        "row": 31,
                        "column": 12
                      },
                      "end": {
                        "row": 32,
                        "column": 24
                      },
                      "text": "with self as rv:\n                yield rv",
                      "children": [
                        {
                          "type": "with",
                          "start": {
                            "row": 31,
                            "column": 12
                          },
                          "end": {
                            "row": 31,
                            "column": 16
                          },
                          "text": "with"
                        },
                        {
                          "type": "with_clause",
                          "start": {
                            "row": 31,
                            "column": 17
                          },
                          "end": {
                            "row": 31,
                            "column": 27
                          },
                          "text": "self as rv",
                          "children": [
                            {
                              "type": "with_item",
                              "start": {
                                "row": 31,
                                "column": 17
                              },
                              "end": {
                                "row": 31,
                                "column": 27
                              },
                              "text": "self as rv",
                              "children": [
                                {
                                  "type": "as_pattern",
                                  "start": {
                                    "row": 31,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 27
                                  },
                                  "text": "self as rv",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 31,
                                        "column": 17
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 21
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": "as",
                                      "start": {
                                        "row": 31,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 24
                                      },
                                      "text": "as"
                                    },
                                    {
                                      "type": "as_pattern_target",
                                      "start": {
                                        "row": 31,
                                        "column": 25
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 27
                                      },
                                      "text": "rv",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 31,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 31,
                                            "column": 27
                                          },
                                          "text": "rv"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 31,
                            "column": 27
                          },
                          "end": {
                            "row": 31,
                            "column": 28
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 32,
                            "column": 16
                          },
                          "end": {
                            "row": 32,
                            "column": 24
                          },
                          "text": "yield rv",
                          "children": [
                            {
                              "type": "expression_statement",
                              "start": {
                                "row": 32,
                                "column": 16
                              },
                              "end": {
                                "row": 32,
                                "column": 24
                              },
                              "text": "yield rv",
                              "children": [
                                {
                                  "type": "yield",
                                  "start": {
                                    "row": 32,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 32,
                                    "column": 24
                                  },
                                  "text": "yield rv",
                                  "children": [
                                    {
                                      "type": "yield",
                                      "start": {
                                        "row": 32,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 32,
                                        "column": 21
                                      },
                                      "text": "yield"
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 32,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 32,
                                        "column": 24
                                      },
                                      "text": "rv"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "finally_clause",
                  "start": {
                    "row": 33,
                    "column": 8
                  },
                  "end": {
                    "row": 35,
                    "column": 32
                  },
                  "text": "finally:\n            if not cleanup:\n                self._depth -= 1",
                  "children": [
                    {
                      "type": "finally",
                      "start": {
                        "row": 33,
                        "column": 8
                      },
                      "end": {
                        "row": 33,
                        "column": 15
                      },
                      "text": "finally"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 33,
                        "column": 15
                      },
                      "end": {
                        "row": 33,
                        "column": 16
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 34,
                        "column": 12
                      },
                      "end": {
                        "row": 35,
                        "column": 32
                      },
                      "text": "if not cleanup:\n                self._depth -= 1",
                      "children": [
                        {
                          "type": "if_statement",
                          "start": {
                            "row": 34,
                            "column": 12
                          },
                          "end": {
                            "row": 35,
                            "column": 32
                          },
                          "text": "if not cleanup:\n                self._depth -= 1",
                          "children": [
                            {
                              "type": "if",
                              "start": {
                                "row": 34,
                                "column": 12
                              },
                              "end": {
                                "row": 34,
                                "column": 14
                              },
                              "text": "if"
                            },
                            {
                              "type": "not_operator",
                              "start": {
                                "row": 34,
                                "column": 15
                              },
                              "end": {
                                "row": 34,
                                "column": 26
                              },
                              "text": "not cleanup",
                              "children": [
                                {
                                  "type": "not",
                                  "start": {
                                    "row": 34,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 34,
                                    "column": 18
                                  },
                                  "text": "not"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 34,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 34,
                                    "column": 26
                                  },
                                  "text": "cleanup"
                                }
                              ]
                            },
                            {
                              "type": ":",
                              "start": {
                                "row": 34,
                                "column": 26
                              },
                              "end": {
                                "row": 34,
                                "column": 27
                              },
                              "text": ":"
                            },
                            {
                              "type": "block",
                              "start": {
                                "row": 35,
                                "column": 16
                              },
                              "end": {
                                "row": 35,
                                "column": 32
                              },
                              "text": "self._depth -= 1",
                              "children": [
                                {
                                  "type": "expression_statement",
                                  "start": {
                                    "row": 35,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 35,
                                    "column": 32
                                  },
                                  "text": "self._depth -= 1",
                                  "children": [
                                    {
                                      "type": "augmented_assignment",
                                      "start": {
                                        "row": 35,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 35,
                                        "column": 32
                                      },
                                      "text": "self._depth -= 1",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "start": {
                                            "row": 35,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 35,
                                            "column": 27
                                          },
                                          "text": "self._depth",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 35,
                                                "column": 16
                                              },
                                              "end": {
                                                "row": 35,
                                                "column": 20
                                              },
                                              "text": "self"
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 35,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 35,
                                                "column": 21
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 35,
                                                "column": 21
                                              },
                                              "end": {
                                                "row": 35,
                                                "column": 27
                                              },
                                              "text": "_depth"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "-=",
                                          "start": {
                                            "row": 35,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 35,
                                            "column": 30
                                          },
                                          "text": "-="
                                        },
                                        {
                                          "type": "integer",
                                          "start": {
                                            "row": 35,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 35,
                                            "column": 32
                                          },
                                          "text": "1"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}