{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 24,
    "column": 65
  },
  "text": "def mutations_batcher(self, flush_count=FLUSH_COUNT, max_row_bytes=MAX_ROW_BYTES):\n        \"\"\"Factory to create a mutation batcher associated with this instance.\n\n        For example:\n\n        .. literalinclude:: snippets_table.py\n            :start-after: [START bigtable_mutations_batcher]\n            :end-before: [END bigtable_mutations_batcher]\n\n        :type table: class\n        :param table: class:`~google.cloud.bigtable.table.Table`.\n\n        :type flush_count: int\n        :param flush_count: (Optional) Maximum number of rows per batch. If it\n                reaches the max number of rows it calls finish_batch() to\n                mutate the current row batch. Default is FLUSH_COUNT (1000\n                rows).\n\n        :type max_row_bytes: int\n        :param max_row_bytes: (Optional) Max number of row mutations size to\n                flush. If it reaches the max number of row mutations size it\n                calls finish_batch() to mutate the current row batch.\n                Default is MAX_ROW_BYTES (5 MB).\n        \"\"\"\n        return MutationsBatcher(self, flush_count, max_row_bytes)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 24,
        "column": 65
      },
      "text": "def mutations_batcher(self, flush_count=FLUSH_COUNT, max_row_bytes=MAX_ROW_BYTES):\n        \"\"\"Factory to create a mutation batcher associated with this instance.\n\n        For example:\n\n        .. literalinclude:: snippets_table.py\n            :start-after: [START bigtable_mutations_batcher]\n            :end-before: [END bigtable_mutations_batcher]\n\n        :type table: class\n        :param table: class:`~google.cloud.bigtable.table.Table`.\n\n        :type flush_count: int\n        :param flush_count: (Optional) Maximum number of rows per batch. If it\n                reaches the max number of rows it calls finish_batch() to\n                mutate the current row batch. Default is FLUSH_COUNT (1000\n                rows).\n\n        :type max_row_bytes: int\n        :param max_row_bytes: (Optional) Max number of row mutations size to\n                flush. If it reaches the max number of row mutations size it\n                calls finish_batch() to mutate the current row batch.\n                Default is MAX_ROW_BYTES (5 MB).\n        \"\"\"\n        return MutationsBatcher(self, flush_count, max_row_bytes)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 21
          },
          "text": "mutations_batcher"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 21
          },
          "end": {
            "row": 0,
            "column": 81
          },
          "text": "(self, flush_count=FLUSH_COUNT, max_row_bytes=MAX_ROW_BYTES)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 21
              },
              "end": {
                "row": 0,
                "column": 22
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 22
              },
              "end": {
                "row": 0,
                "column": 26
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 26
              },
              "end": {
                "row": 0,
                "column": 27
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 28
              },
              "end": {
                "row": 0,
                "column": 51
              },
              "text": "flush_count=FLUSH_COUNT",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 28
                  },
                  "end": {
                    "row": 0,
                    "column": 39
                  },
                  "text": "flush_count"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 39
                  },
                  "end": {
                    "row": 0,
                    "column": 40
                  },
                  "text": "="
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 40
                  },
                  "end": {
                    "row": 0,
                    "column": 51
                  },
                  "text": "FLUSH_COUNT"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 51
              },
              "end": {
                "row": 0,
                "column": 52
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 53
              },
              "end": {
                "row": 0,
                "column": 80
              },
              "text": "max_row_bytes=MAX_ROW_BYTES",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 53
                  },
                  "end": {
                    "row": 0,
                    "column": 66
                  },
                  "text": "max_row_bytes"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 66
                  },
                  "end": {
                    "row": 0,
                    "column": 67
                  },
                  "text": "="
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 67
                  },
                  "end": {
                    "row": 0,
                    "column": 80
                  },
                  "text": "MAX_ROW_BYTES"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 80
              },
              "end": {
                "row": 0,
                "column": 81
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 81
          },
          "end": {
            "row": 0,
            "column": 82
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 24,
            "column": 65
          },
          "text": "\"\"\"Factory to create a mutation batcher associated with this instance.\n\n        For example:\n\n        .. literalinclude:: snippets_table.py\n            :start-after: [START bigtable_mutations_batcher]\n            :end-before: [END bigtable_mutations_batcher]\n\n        :type table: class\n        :param table: class:`~google.cloud.bigtable.table.Table`.\n\n        :type flush_count: int\n        :param flush_count: (Optional) Maximum number of rows per batch. If it\n                reaches the max number of rows it calls finish_batch() to\n                mutate the current row batch. Default is FLUSH_COUNT (1000\n                rows).\n\n        :type max_row_bytes: int\n        :param max_row_bytes: (Optional) Max number of row mutations size to\n                flush. If it reaches the max number of row mutations size it\n                calls finish_batch() to mutate the current row batch.\n                Default is MAX_ROW_BYTES (5 MB).\n        \"\"\"\n        return MutationsBatcher(self, flush_count, max_row_bytes)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 23,
                "column": 11
              },
              "text": "\"\"\"Factory to create a mutation batcher associated with this instance.\n\n        For example:\n\n        .. literalinclude:: snippets_table.py\n            :start-after: [START bigtable_mutations_batcher]\n            :end-before: [END bigtable_mutations_batcher]\n\n        :type table: class\n        :param table: class:`~google.cloud.bigtable.table.Table`.\n\n        :type flush_count: int\n        :param flush_count: (Optional) Maximum number of rows per batch. If it\n                reaches the max number of rows it calls finish_batch() to\n                mutate the current row batch. Default is FLUSH_COUNT (1000\n                rows).\n\n        :type max_row_bytes: int\n        :param max_row_bytes: (Optional) Max number of row mutations size to\n                flush. If it reaches the max number of row mutations size it\n                calls finish_batch() to mutate the current row batch.\n                Default is MAX_ROW_BYTES (5 MB).\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 23,
                    "column": 11
                  },
                  "text": "\"\"\"Factory to create a mutation batcher associated with this instance.\n\n        For example:\n\n        .. literalinclude:: snippets_table.py\n            :start-after: [START bigtable_mutations_batcher]\n            :end-before: [END bigtable_mutations_batcher]\n\n        :type table: class\n        :param table: class:`~google.cloud.bigtable.table.Table`.\n\n        :type flush_count: int\n        :param flush_count: (Optional) Maximum number of rows per batch. If it\n                reaches the max number of rows it calls finish_batch() to\n                mutate the current row batch. Default is FLUSH_COUNT (1000\n                rows).\n\n        :type max_row_bytes: int\n        :param max_row_bytes: (Optional) Max number of row mutations size to\n                flush. If it reaches the max number of row mutations size it\n                calls finish_batch() to mutate the current row batch.\n                Default is MAX_ROW_BYTES (5 MB).\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 23,
                        "column": 8
                      },
                      "text": "Factory to create a mutation batcher associated with this instance.\n\n        For example:\n\n        .. literalinclude:: snippets_table.py\n            :start-after: [START bigtable_mutations_batcher]\n            :end-before: [END bigtable_mutations_batcher]\n\n        :type table: class\n        :param table: class:`~google.cloud.bigtable.table.Table`.\n\n        :type flush_count: int\n        :param flush_count: (Optional) Maximum number of rows per batch. If it\n                reaches the max number of rows it calls finish_batch() to\n                mutate the current row batch. Default is FLUSH_COUNT (1000\n                rows).\n\n        :type max_row_bytes: int\n        :param max_row_bytes: (Optional) Max number of row mutations size to\n                flush. If it reaches the max number of row mutations size it\n                calls finish_batch() to mutate the current row batch.\n                Default is MAX_ROW_BYTES (5 MB).\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 23,
                        "column": 8
                      },
                      "end": {
                        "row": 23,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 24,
                "column": 8
              },
              "end": {
                "row": 24,
                "column": 65
              },
              "text": "return MutationsBatcher(self, flush_count, max_row_bytes)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 24,
                    "column": 8
                  },
                  "end": {
                    "row": 24,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 24,
                    "column": 15
                  },
                  "end": {
                    "row": 24,
                    "column": 65
                  },
                  "text": "MutationsBatcher(self, flush_count, max_row_bytes)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 24,
                        "column": 15
                      },
                      "end": {
                        "row": 24,
                        "column": 31
                      },
                      "text": "MutationsBatcher"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 24,
                        "column": 31
                      },
                      "end": {
                        "row": 24,
                        "column": 65
                      },
                      "text": "(self, flush_count, max_row_bytes)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 24,
                            "column": 31
                          },
                          "end": {
                            "row": 24,
                            "column": 32
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 24,
                            "column": 32
                          },
                          "end": {
                            "row": 24,
                            "column": 36
                          },
                          "text": "self"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 24,
                            "column": 36
                          },
                          "end": {
                            "row": 24,
                            "column": 37
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 24,
                            "column": 38
                          },
                          "end": {
                            "row": 24,
                            "column": 49
                          },
                          "text": "flush_count"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 24,
                            "column": 49
                          },
                          "end": {
                            "row": 24,
                            "column": 50
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 24,
                            "column": 51
                          },
                          "end": {
                            "row": 24,
                            "column": 64
                          },
                          "text": "max_row_bytes"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 24,
                            "column": 64
                          },
                          "end": {
                            "row": 24,
                            "column": 65
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}