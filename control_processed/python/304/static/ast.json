{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 22,
    "column": 82
  },
  "text": "def train(cls, data, lambda_=1.0):\n        \"\"\"\n        Train a Naive Bayes model given an RDD of (label, features)\n        vectors.\n\n        This is the Multinomial NB (U{http://tinyurl.com/lsdw6p}) which\n        can handle all kinds of discrete data.  For example, by\n        converting documents into TF-IDF vectors, it can be used for\n        document classification. By making every vector a 0-1 vector,\n        it can also be used as Bernoulli NB (U{http://tinyurl.com/p7c96j6}).\n        The input feature values must be nonnegative.\n\n        :param data:\n          RDD of LabeledPoint.\n        :param lambda_:\n          The smoothing parameter.\n          (default: 1.0)\n        \"\"\"\n        first = data.first()\n        if not isinstance(first, LabeledPoint):\n            raise ValueError(\"`data` should be an RDD of LabeledPoint\")\n        labels, pi, theta = callMLlibFunc(\"trainNaiveBayesModel\", data, lambda_)\n        return NaiveBayesModel(labels.toArray(), pi.toArray(), numpy.array(theta))",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 22,
        "column": 82
      },
      "text": "def train(cls, data, lambda_=1.0):\n        \"\"\"\n        Train a Naive Bayes model given an RDD of (label, features)\n        vectors.\n\n        This is the Multinomial NB (U{http://tinyurl.com/lsdw6p}) which\n        can handle all kinds of discrete data.  For example, by\n        converting documents into TF-IDF vectors, it can be used for\n        document classification. By making every vector a 0-1 vector,\n        it can also be used as Bernoulli NB (U{http://tinyurl.com/p7c96j6}).\n        The input feature values must be nonnegative.\n\n        :param data:\n          RDD of LabeledPoint.\n        :param lambda_:\n          The smoothing parameter.\n          (default: 1.0)\n        \"\"\"\n        first = data.first()\n        if not isinstance(first, LabeledPoint):\n            raise ValueError(\"`data` should be an RDD of LabeledPoint\")\n        labels, pi, theta = callMLlibFunc(\"trainNaiveBayesModel\", data, lambda_)\n        return NaiveBayesModel(labels.toArray(), pi.toArray(), numpy.array(theta))",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 9
          },
          "text": "train"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 9
          },
          "end": {
            "row": 0,
            "column": 33
          },
          "text": "(cls, data, lambda_=1.0)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 9
              },
              "end": {
                "row": 0,
                "column": 10
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 10
              },
              "end": {
                "row": 0,
                "column": 13
              },
              "text": "cls"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 13
              },
              "end": {
                "row": 0,
                "column": 14
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 15
              },
              "end": {
                "row": 0,
                "column": 19
              },
              "text": "data"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 19
              },
              "end": {
                "row": 0,
                "column": 20
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 21
              },
              "end": {
                "row": 0,
                "column": 32
              },
              "text": "lambda_=1.0",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 21
                  },
                  "end": {
                    "row": 0,
                    "column": 28
                  },
                  "text": "lambda_"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 28
                  },
                  "end": {
                    "row": 0,
                    "column": 29
                  },
                  "text": "="
                },
                {
                  "type": "float",
                  "start": {
                    "row": 0,
                    "column": 29
                  },
                  "end": {
                    "row": 0,
                    "column": 32
                  },
                  "text": "1.0"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 32
              },
              "end": {
                "row": 0,
                "column": 33
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 33
          },
          "end": {
            "row": 0,
            "column": 34
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 22,
            "column": 82
          },
          "text": "\"\"\"\n        Train a Naive Bayes model given an RDD of (label, features)\n        vectors.\n\n        This is the Multinomial NB (U{http://tinyurl.com/lsdw6p}) which\n        can handle all kinds of discrete data.  For example, by\n        converting documents into TF-IDF vectors, it can be used for\n        document classification. By making every vector a 0-1 vector,\n        it can also be used as Bernoulli NB (U{http://tinyurl.com/p7c96j6}).\n        The input feature values must be nonnegative.\n\n        :param data:\n          RDD of LabeledPoint.\n        :param lambda_:\n          The smoothing parameter.\n          (default: 1.0)\n        \"\"\"\n        first = data.first()\n        if not isinstance(first, LabeledPoint):\n            raise ValueError(\"`data` should be an RDD of LabeledPoint\")\n        labels, pi, theta = callMLlibFunc(\"trainNaiveBayesModel\", data, lambda_)\n        return NaiveBayesModel(labels.toArray(), pi.toArray(), numpy.array(theta))",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 17,
                "column": 11
              },
              "text": "\"\"\"\n        Train a Naive Bayes model given an RDD of (label, features)\n        vectors.\n\n        This is the Multinomial NB (U{http://tinyurl.com/lsdw6p}) which\n        can handle all kinds of discrete data.  For example, by\n        converting documents into TF-IDF vectors, it can be used for\n        document classification. By making every vector a 0-1 vector,\n        it can also be used as Bernoulli NB (U{http://tinyurl.com/p7c96j6}).\n        The input feature values must be nonnegative.\n\n        :param data:\n          RDD of LabeledPoint.\n        :param lambda_:\n          The smoothing parameter.\n          (default: 1.0)\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 17,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Train a Naive Bayes model given an RDD of (label, features)\n        vectors.\n\n        This is the Multinomial NB (U{http://tinyurl.com/lsdw6p}) which\n        can handle all kinds of discrete data.  For example, by\n        converting documents into TF-IDF vectors, it can be used for\n        document classification. By making every vector a 0-1 vector,\n        it can also be used as Bernoulli NB (U{http://tinyurl.com/p7c96j6}).\n        The input feature values must be nonnegative.\n\n        :param data:\n          RDD of LabeledPoint.\n        :param lambda_:\n          The smoothing parameter.\n          (default: 1.0)\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 17,
                        "column": 8
                      },
                      "text": "\n        Train a Naive Bayes model given an RDD of (label, features)\n        vectors.\n\n        This is the Multinomial NB (U{http://tinyurl.com/lsdw6p}) which\n        can handle all kinds of discrete data.  For example, by\n        converting documents into TF-IDF vectors, it can be used for\n        document classification. By making every vector a 0-1 vector,\n        it can also be used as Bernoulli NB (U{http://tinyurl.com/p7c96j6}).\n        The input feature values must be nonnegative.\n\n        :param data:\n          RDD of LabeledPoint.\n        :param lambda_:\n          The smoothing parameter.\n          (default: 1.0)\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 17,
                        "column": 8
                      },
                      "end": {
                        "row": 17,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 18,
                "column": 8
              },
              "end": {
                "row": 18,
                "column": 28
              },
              "text": "first = data.first()",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 18,
                    "column": 8
                  },
                  "end": {
                    "row": 18,
                    "column": 28
                  },
                  "text": "first = data.first()",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 18,
                        "column": 8
                      },
                      "end": {
                        "row": 18,
                        "column": 13
                      },
                      "text": "first"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 18,
                        "column": 14
                      },
                      "end": {
                        "row": 18,
                        "column": 15
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 18,
                        "column": 16
                      },
                      "end": {
                        "row": 18,
                        "column": 28
                      },
                      "text": "data.first()",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 18,
                            "column": 16
                          },
                          "end": {
                            "row": 18,
                            "column": 26
                          },
                          "text": "data.first",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 18,
                                "column": 16
                              },
                              "end": {
                                "row": 18,
                                "column": 20
                              },
                              "text": "data"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 18,
                                "column": 20
                              },
                              "end": {
                                "row": 18,
                                "column": 21
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 18,
                                "column": 21
                              },
                              "end": {
                                "row": 18,
                                "column": 26
                              },
                              "text": "first"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 18,
                            "column": 26
                          },
                          "end": {
                            "row": 18,
                            "column": 28
                          },
                          "text": "()",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 18,
                                "column": 26
                              },
                              "end": {
                                "row": 18,
                                "column": 27
                              },
                              "text": "("
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 18,
                                "column": 27
                              },
                              "end": {
                                "row": 18,
                                "column": 28
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 19,
                "column": 8
              },
              "end": {
                "row": 20,
                "column": 71
              },
              "text": "if not isinstance(first, LabeledPoint):\n            raise ValueError(\"`data` should be an RDD of LabeledPoint\")",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 19,
                    "column": 8
                  },
                  "end": {
                    "row": 19,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "not_operator",
                  "start": {
                    "row": 19,
                    "column": 11
                  },
                  "end": {
                    "row": 19,
                    "column": 46
                  },
                  "text": "not isinstance(first, LabeledPoint)",
                  "children": [
                    {
                      "type": "not",
                      "start": {
                        "row": 19,
                        "column": 11
                      },
                      "end": {
                        "row": 19,
                        "column": 14
                      },
                      "text": "not"
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 19,
                        "column": 15
                      },
                      "end": {
                        "row": 19,
                        "column": 46
                      },
                      "text": "isinstance(first, LabeledPoint)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 19,
                            "column": 15
                          },
                          "end": {
                            "row": 19,
                            "column": 25
                          },
                          "text": "isinstance"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 19,
                            "column": 25
                          },
                          "end": {
                            "row": 19,
                            "column": 46
                          },
                          "text": "(first, LabeledPoint)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 19,
                                "column": 25
                              },
                              "end": {
                                "row": 19,
                                "column": 26
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 19,
                                "column": 26
                              },
                              "end": {
                                "row": 19,
                                "column": 31
                              },
                              "text": "first"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 19,
                                "column": 31
                              },
                              "end": {
                                "row": 19,
                                "column": 32
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 19,
                                "column": 33
                              },
                              "end": {
                                "row": 19,
                                "column": 45
                              },
                              "text": "LabeledPoint"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 19,
                                "column": 45
                              },
                              "end": {
                                "row": 19,
                                "column": 46
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 19,
                    "column": 46
                  },
                  "end": {
                    "row": 19,
                    "column": 47
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 20,
                    "column": 12
                  },
                  "end": {
                    "row": 20,
                    "column": 71
                  },
                  "text": "raise ValueError(\"`data` should be an RDD of LabeledPoint\")",
                  "children": [
                    {
                      "type": "raise_statement",
                      "start": {
                        "row": 20,
                        "column": 12
                      },
                      "end": {
                        "row": 20,
                        "column": 71
                      },
                      "text": "raise ValueError(\"`data` should be an RDD of LabeledPoint\")",
                      "children": [
                        {
                          "type": "raise",
                          "start": {
                            "row": 20,
                            "column": 12
                          },
                          "end": {
                            "row": 20,
                            "column": 17
                          },
                          "text": "raise"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 20,
                            "column": 18
                          },
                          "end": {
                            "row": 20,
                            "column": 71
                          },
                          "text": "ValueError(\"`data` should be an RDD of LabeledPoint\")",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 20,
                                "column": 18
                              },
                              "end": {
                                "row": 20,
                                "column": 28
                              },
                              "text": "ValueError"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 20,
                                "column": 28
                              },
                              "end": {
                                "row": 20,
                                "column": 71
                              },
                              "text": "(\"`data` should be an RDD of LabeledPoint\")",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 20,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 20,
                                    "column": 29
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 20,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 20,
                                    "column": 70
                                  },
                                  "text": "\"`data` should be an RDD of LabeledPoint\"",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 20,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 20,
                                        "column": 30
                                      },
                                      "text": "\""
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 20,
                                        "column": 30
                                      },
                                      "end": {
                                        "row": 20,
                                        "column": 69
                                      },
                                      "text": "`data` should be an RDD of LabeledPoint"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 20,
                                        "column": 69
                                      },
                                      "end": {
                                        "row": 20,
                                        "column": 70
                                      },
                                      "text": "\""
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 20,
                                    "column": 70
                                  },
                                  "end": {
                                    "row": 20,
                                    "column": 71
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 21,
                "column": 8
              },
              "end": {
                "row": 21,
                "column": 80
              },
              "text": "labels, pi, theta = callMLlibFunc(\"trainNaiveBayesModel\", data, lambda_)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 21,
                    "column": 8
                  },
                  "end": {
                    "row": 21,
                    "column": 80
                  },
                  "text": "labels, pi, theta = callMLlibFunc(\"trainNaiveBayesModel\", data, lambda_)",
                  "children": [
                    {
                      "type": "pattern_list",
                      "start": {
                        "row": 21,
                        "column": 8
                      },
                      "end": {
                        "row": 21,
                        "column": 25
                      },
                      "text": "labels, pi, theta",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 21,
                            "column": 8
                          },
                          "end": {
                            "row": 21,
                            "column": 14
                          },
                          "text": "labels"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 21,
                            "column": 14
                          },
                          "end": {
                            "row": 21,
                            "column": 15
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 21,
                            "column": 16
                          },
                          "end": {
                            "row": 21,
                            "column": 18
                          },
                          "text": "pi"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 21,
                            "column": 18
                          },
                          "end": {
                            "row": 21,
                            "column": 19
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 21,
                            "column": 20
                          },
                          "end": {
                            "row": 21,
                            "column": 25
                          },
                          "text": "theta"
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 21,
                        "column": 26
                      },
                      "end": {
                        "row": 21,
                        "column": 27
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 21,
                        "column": 28
                      },
                      "end": {
                        "row": 21,
                        "column": 80
                      },
                      "text": "callMLlibFunc(\"trainNaiveBayesModel\", data, lambda_)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 21,
                            "column": 28
                          },
                          "end": {
                            "row": 21,
                            "column": 41
                          },
                          "text": "callMLlibFunc"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 21,
                            "column": 41
                          },
                          "end": {
                            "row": 21,
                            "column": 80
                          },
                          "text": "(\"trainNaiveBayesModel\", data, lambda_)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 21,
                                "column": 41
                              },
                              "end": {
                                "row": 21,
                                "column": 42
                              },
                              "text": "("
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 21,
                                "column": 42
                              },
                              "end": {
                                "row": 21,
                                "column": 64
                              },
                              "text": "\"trainNaiveBayesModel\"",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 21,
                                    "column": 42
                                  },
                                  "end": {
                                    "row": 21,
                                    "column": 43
                                  },
                                  "text": "\""
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 21,
                                    "column": 43
                                  },
                                  "end": {
                                    "row": 21,
                                    "column": 63
                                  },
                                  "text": "trainNaiveBayesModel"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 21,
                                    "column": 63
                                  },
                                  "end": {
                                    "row": 21,
                                    "column": 64
                                  },
                                  "text": "\""
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 21,
                                "column": 64
                              },
                              "end": {
                                "row": 21,
                                "column": 65
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 21,
                                "column": 66
                              },
                              "end": {
                                "row": 21,
                                "column": 70
                              },
                              "text": "data"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 21,
                                "column": 70
                              },
                              "end": {
                                "row": 21,
                                "column": 71
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 21,
                                "column": 72
                              },
                              "end": {
                                "row": 21,
                                "column": 79
                              },
                              "text": "lambda_"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 21,
                                "column": 79
                              },
                              "end": {
                                "row": 21,
                                "column": 80
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 22,
                "column": 8
              },
              "end": {
                "row": 22,
                "column": 82
              },
              "text": "return NaiveBayesModel(labels.toArray(), pi.toArray(), numpy.array(theta))",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 22,
                    "column": 8
                  },
                  "end": {
                    "row": 22,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 22,
                    "column": 15
                  },
                  "end": {
                    "row": 22,
                    "column": 82
                  },
                  "text": "NaiveBayesModel(labels.toArray(), pi.toArray(), numpy.array(theta))",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 22,
                        "column": 15
                      },
                      "end": {
                        "row": 22,
                        "column": 30
                      },
                      "text": "NaiveBayesModel"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 22,
                        "column": 30
                      },
                      "end": {
                        "row": 22,
                        "column": 82
                      },
                      "text": "(labels.toArray(), pi.toArray(), numpy.array(theta))",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 22,
                            "column": 30
                          },
                          "end": {
                            "row": 22,
                            "column": 31
                          },
                          "text": "("
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 22,
                            "column": 31
                          },
                          "end": {
                            "row": 22,
                            "column": 47
                          },
                          "text": "labels.toArray()",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 22,
                                "column": 31
                              },
                              "end": {
                                "row": 22,
                                "column": 45
                              },
                              "text": "labels.toArray",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 31
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 37
                                  },
                                  "text": "labels"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 22,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 38
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 38
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 45
                                  },
                                  "text": "toArray"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 22,
                                "column": 45
                              },
                              "end": {
                                "row": 22,
                                "column": 47
                              },
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 22,
                                    "column": 45
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 46
                                  },
                                  "text": "("
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 22,
                                    "column": 46
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 47
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 22,
                            "column": 47
                          },
                          "end": {
                            "row": 22,
                            "column": 48
                          },
                          "text": ","
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 22,
                            "column": 49
                          },
                          "end": {
                            "row": 22,
                            "column": 61
                          },
                          "text": "pi.toArray()",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 22,
                                "column": 49
                              },
                              "end": {
                                "row": 22,
                                "column": 59
                              },
                              "text": "pi.toArray",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 49
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 51
                                  },
                                  "text": "pi"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 22,
                                    "column": 51
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 52
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 52
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 59
                                  },
                                  "text": "toArray"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 22,
                                "column": 59
                              },
                              "end": {
                                "row": 22,
                                "column": 61
                              },
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 22,
                                    "column": 59
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 60
                                  },
                                  "text": "("
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 22,
                                    "column": 60
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 61
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 22,
                            "column": 61
                          },
                          "end": {
                            "row": 22,
                            "column": 62
                          },
                          "text": ","
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 22,
                            "column": 63
                          },
                          "end": {
                            "row": 22,
                            "column": 81
                          },
                          "text": "numpy.array(theta)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 22,
                                "column": 63
                              },
                              "end": {
                                "row": 22,
                                "column": 74
                              },
                              "text": "numpy.array",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 63
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 68
                                  },
                                  "text": "numpy"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 22,
                                    "column": 68
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 69
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 69
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 74
                                  },
                                  "text": "array"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 22,
                                "column": 74
                              },
                              "end": {
                                "row": 22,
                                "column": 81
                              },
                              "text": "(theta)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 22,
                                    "column": 74
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 75
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 75
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 80
                                  },
                                  "text": "theta"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 22,
                                    "column": 80
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 81
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 22,
                            "column": 81
                          },
                          "end": {
                            "row": 22,
                            "column": 82
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}