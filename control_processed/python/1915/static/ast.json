{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 144,
    "column": 40
  },
  "text": "def to_json(self, path_or_buf=None, orient=None, date_format=None,\n                double_precision=10, force_ascii=True, date_unit='ms',\n                default_handler=None, lines=False, compression='infer',\n                index=True):\n        \"\"\"\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : string or file handle, optional\n            File path or object. If not specified, the result is returned as\n            a string.\n        orient : string\n            Indication of expected JSON string format.\n\n            * Series\n\n              - default is 'index'\n              - allowed values are: {'split','records','index','table'}\n\n            * DataFrame\n\n              - default is 'columns'\n              - allowed values are:\n                {'split','records','index','columns','values','table'}\n\n            * The format of the JSON string\n\n              - 'split' : dict like {'index' -> [index],\n                'columns' -> [columns], 'data' -> [values]}\n              - 'records' : list like\n                [{column -> value}, ... , {column -> value}]\n              - 'index' : dict like {index -> {column -> value}}\n              - 'columns' : dict like {column -> {index -> value}}\n              - 'values' : just the values array\n              - 'table' : dict like {'schema': {schema}, 'data': {data}}\n                describing the data, and the data component is\n                like ``orient='records'``.\n\n                .. versionchanged:: 0.20.0\n\n        date_format : {None, 'epoch', 'iso'}\n            Type of date conversion. 'epoch' = epoch milliseconds,\n            'iso' = ISO8601. The default depends on the `orient`. For\n            ``orient='table'``, the default is 'iso'. For all other orients,\n            the default is 'epoch'.\n        double_precision : int, default 10\n            The number of decimal places to use when encoding\n            floating point values.\n        force_ascii : bool, default True\n            Force encoded string to be ASCII.\n        date_unit : string, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : bool, default False\n            If 'orient' is 'records' write out line delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not list\n            like.\n\n            .. versionadded:: 0.19.0\n\n        compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n\n            A string representing the compression to use in the output file,\n            only used when the first argument is a filename. By default, the\n            compression is inferred from the filename.\n\n            .. versionadded:: 0.21.0\n            .. versionchanged:: 0.24.0\n               'infer' option added and set to default\n        index : bool, default True\n            Whether to include the index values in the JSON string. Not\n            including the index (``index=False``) is only supported when\n            orient is 'split' or 'table'.\n\n            .. versionadded:: 0.23.0\n\n        See Also\n        --------\n        read_json\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n        ...                   index=['row 1', 'row 2'],\n        ...                   columns=['col 1', 'col 2'])\n        >>> df.to_json(orient='split')\n        '{\"columns\":[\"col 1\",\"col 2\"],\n          \"index\":[\"row 1\",\"row 2\"],\n          \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n        Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n        Note that index labels are not preserved with this encoding.\n\n        >>> df.to_json(orient='records')\n        '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n        Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n        >>> df.to_json(orient='index')\n        '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n        >>> df.to_json(orient='columns')\n        '{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n        >>> df.to_json(orient='values')\n        '[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\n        Encoding with Table Schema\n\n        >>> df.to_json(orient='table')\n        '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                                {\"name\": \"col 1\", \"type\": \"string\"},\n                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\",\n                     \"pandas_version\": \"0.20.0\"},\n          \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                   {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n        \"\"\"\n\n        from pandas.io import json\n        if date_format is None and orient == 'table':\n            date_format = 'iso'\n        elif date_format is None:\n            date_format = 'epoch'\n        return json.to_json(path_or_buf=path_or_buf, obj=self, orient=orient,\n                            date_format=date_format,\n                            double_precision=double_precision,\n                            force_ascii=force_ascii, date_unit=date_unit,\n                            default_handler=default_handler,\n                            lines=lines, compression=compression,\n                            index=index)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 144,
        "column": 40
      },
      "text": "def to_json(self, path_or_buf=None, orient=None, date_format=None,\n                double_precision=10, force_ascii=True, date_unit='ms',\n                default_handler=None, lines=False, compression='infer',\n                index=True):\n        \"\"\"\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : string or file handle, optional\n            File path or object. If not specified, the result is returned as\n            a string.\n        orient : string\n            Indication of expected JSON string format.\n\n            * Series\n\n              - default is 'index'\n              - allowed values are: {'split','records','index','table'}\n\n            * DataFrame\n\n              - default is 'columns'\n              - allowed values are:\n                {'split','records','index','columns','values','table'}\n\n            * The format of the JSON string\n\n              - 'split' : dict like {'index' -> [index],\n                'columns' -> [columns], 'data' -> [values]}\n              - 'records' : list like\n                [{column -> value}, ... , {column -> value}]\n              - 'index' : dict like {index -> {column -> value}}\n              - 'columns' : dict like {column -> {index -> value}}\n              - 'values' : just the values array\n              - 'table' : dict like {'schema': {schema}, 'data': {data}}\n                describing the data, and the data component is\n                like ``orient='records'``.\n\n                .. versionchanged:: 0.20.0\n\n        date_format : {None, 'epoch', 'iso'}\n            Type of date conversion. 'epoch' = epoch milliseconds,\n            'iso' = ISO8601. The default depends on the `orient`. For\n            ``orient='table'``, the default is 'iso'. For all other orients,\n            the default is 'epoch'.\n        double_precision : int, default 10\n            The number of decimal places to use when encoding\n            floating point values.\n        force_ascii : bool, default True\n            Force encoded string to be ASCII.\n        date_unit : string, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : bool, default False\n            If 'orient' is 'records' write out line delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not list\n            like.\n\n            .. versionadded:: 0.19.0\n\n        compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n\n            A string representing the compression to use in the output file,\n            only used when the first argument is a filename. By default, the\n            compression is inferred from the filename.\n\n            .. versionadded:: 0.21.0\n            .. versionchanged:: 0.24.0\n               'infer' option added and set to default\n        index : bool, default True\n            Whether to include the index values in the JSON string. Not\n            including the index (``index=False``) is only supported when\n            orient is 'split' or 'table'.\n\n            .. versionadded:: 0.23.0\n\n        See Also\n        --------\n        read_json\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n        ...                   index=['row 1', 'row 2'],\n        ...                   columns=['col 1', 'col 2'])\n        >>> df.to_json(orient='split')\n        '{\"columns\":[\"col 1\",\"col 2\"],\n          \"index\":[\"row 1\",\"row 2\"],\n          \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n        Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n        Note that index labels are not preserved with this encoding.\n\n        >>> df.to_json(orient='records')\n        '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n        Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n        >>> df.to_json(orient='index')\n        '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n        >>> df.to_json(orient='columns')\n        '{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n        >>> df.to_json(orient='values')\n        '[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\n        Encoding with Table Schema\n\n        >>> df.to_json(orient='table')\n        '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                                {\"name\": \"col 1\", \"type\": \"string\"},\n                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\",\n                     \"pandas_version\": \"0.20.0\"},\n          \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                   {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n        \"\"\"\n\n        from pandas.io import json\n        if date_format is None and orient == 'table':\n            date_format = 'iso'\n        elif date_format is None:\n            date_format = 'epoch'\n        return json.to_json(path_or_buf=path_or_buf, obj=self, orient=orient,\n                            date_format=date_format,\n                            double_precision=double_precision,\n                            force_ascii=force_ascii, date_unit=date_unit,\n                            default_handler=default_handler,\n                            lines=lines, compression=compression,\n                            index=index)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 11
          },
          "text": "to_json"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 11
          },
          "end": {
            "row": 3,
            "column": 27
          },
          "text": "(self, path_or_buf=None, orient=None, date_format=None,\n                double_precision=10, force_ascii=True, date_unit='ms',\n                default_handler=None, lines=False, compression='infer',\n                index=True)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 11
              },
              "end": {
                "row": 0,
                "column": 12
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 12
              },
              "end": {
                "row": 0,
                "column": 16
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 17
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 18
              },
              "end": {
                "row": 0,
                "column": 34
              },
              "text": "path_or_buf=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 18
                  },
                  "end": {
                    "row": 0,
                    "column": 29
                  },
                  "text": "path_or_buf"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 29
                  },
                  "end": {
                    "row": 0,
                    "column": 30
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 30
                  },
                  "end": {
                    "row": 0,
                    "column": 34
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 34
              },
              "end": {
                "row": 0,
                "column": 35
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 36
              },
              "end": {
                "row": 0,
                "column": 47
              },
              "text": "orient=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 36
                  },
                  "end": {
                    "row": 0,
                    "column": 42
                  },
                  "text": "orient"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 42
                  },
                  "end": {
                    "row": 0,
                    "column": 43
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 43
                  },
                  "end": {
                    "row": 0,
                    "column": 47
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 47
              },
              "end": {
                "row": 0,
                "column": 48
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 49
              },
              "end": {
                "row": 0,
                "column": 65
              },
              "text": "date_format=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 49
                  },
                  "end": {
                    "row": 0,
                    "column": 60
                  },
                  "text": "date_format"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 60
                  },
                  "end": {
                    "row": 0,
                    "column": 61
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 61
                  },
                  "end": {
                    "row": 0,
                    "column": 65
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 65
              },
              "end": {
                "row": 0,
                "column": 66
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 1,
                "column": 16
              },
              "end": {
                "row": 1,
                "column": 35
              },
              "text": "double_precision=10",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 1,
                    "column": 16
                  },
                  "end": {
                    "row": 1,
                    "column": 32
                  },
                  "text": "double_precision"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 1,
                    "column": 32
                  },
                  "end": {
                    "row": 1,
                    "column": 33
                  },
                  "text": "="
                },
                {
                  "type": "integer",
                  "start": {
                    "row": 1,
                    "column": 33
                  },
                  "end": {
                    "row": 1,
                    "column": 35
                  },
                  "text": "10"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 1,
                "column": 35
              },
              "end": {
                "row": 1,
                "column": 36
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 1,
                "column": 37
              },
              "end": {
                "row": 1,
                "column": 53
              },
              "text": "force_ascii=True",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 1,
                    "column": 37
                  },
                  "end": {
                    "row": 1,
                    "column": 48
                  },
                  "text": "force_ascii"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 1,
                    "column": 48
                  },
                  "end": {
                    "row": 1,
                    "column": 49
                  },
                  "text": "="
                },
                {
                  "type": "true",
                  "start": {
                    "row": 1,
                    "column": 49
                  },
                  "end": {
                    "row": 1,
                    "column": 53
                  },
                  "text": "True"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 1,
                "column": 53
              },
              "end": {
                "row": 1,
                "column": 54
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 1,
                "column": 55
              },
              "end": {
                "row": 1,
                "column": 69
              },
              "text": "date_unit='ms'",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 1,
                    "column": 55
                  },
                  "end": {
                    "row": 1,
                    "column": 64
                  },
                  "text": "date_unit"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 1,
                    "column": 64
                  },
                  "end": {
                    "row": 1,
                    "column": 65
                  },
                  "text": "="
                },
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 65
                  },
                  "end": {
                    "row": 1,
                    "column": 69
                  },
                  "text": "'ms'",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 65
                      },
                      "end": {
                        "row": 1,
                        "column": 66
                      },
                      "text": "'"
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 66
                      },
                      "end": {
                        "row": 1,
                        "column": 68
                      },
                      "text": "ms"
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 1,
                        "column": 68
                      },
                      "end": {
                        "row": 1,
                        "column": 69
                      },
                      "text": "'"
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 1,
                "column": 69
              },
              "end": {
                "row": 1,
                "column": 70
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 2,
                "column": 16
              },
              "end": {
                "row": 2,
                "column": 36
              },
              "text": "default_handler=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 2,
                    "column": 16
                  },
                  "end": {
                    "row": 2,
                    "column": 31
                  },
                  "text": "default_handler"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 2,
                    "column": 31
                  },
                  "end": {
                    "row": 2,
                    "column": 32
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 2,
                    "column": 32
                  },
                  "end": {
                    "row": 2,
                    "column": 36
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 2,
                "column": 36
              },
              "end": {
                "row": 2,
                "column": 37
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 2,
                "column": 38
              },
              "end": {
                "row": 2,
                "column": 49
              },
              "text": "lines=False",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 2,
                    "column": 38
                  },
                  "end": {
                    "row": 2,
                    "column": 43
                  },
                  "text": "lines"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 2,
                    "column": 43
                  },
                  "end": {
                    "row": 2,
                    "column": 44
                  },
                  "text": "="
                },
                {
                  "type": "false",
                  "start": {
                    "row": 2,
                    "column": 44
                  },
                  "end": {
                    "row": 2,
                    "column": 49
                  },
                  "text": "False"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 2,
                "column": 49
              },
              "end": {
                "row": 2,
                "column": 50
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 2,
                "column": 51
              },
              "end": {
                "row": 2,
                "column": 70
              },
              "text": "compression='infer'",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 2,
                    "column": 51
                  },
                  "end": {
                    "row": 2,
                    "column": 62
                  },
                  "text": "compression"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 2,
                    "column": 62
                  },
                  "end": {
                    "row": 2,
                    "column": 63
                  },
                  "text": "="
                },
                {
                  "type": "string",
                  "start": {
                    "row": 2,
                    "column": 63
                  },
                  "end": {
                    "row": 2,
                    "column": 70
                  },
                  "text": "'infer'",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 2,
                        "column": 63
                      },
                      "end": {
                        "row": 2,
                        "column": 64
                      },
                      "text": "'"
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 2,
                        "column": 64
                      },
                      "end": {
                        "row": 2,
                        "column": 69
                      },
                      "text": "infer"
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 2,
                        "column": 69
                      },
                      "end": {
                        "row": 2,
                        "column": 70
                      },
                      "text": "'"
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 2,
                "column": 70
              },
              "end": {
                "row": 2,
                "column": 71
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 3,
                "column": 16
              },
              "end": {
                "row": 3,
                "column": 26
              },
              "text": "index=True",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 3,
                    "column": 16
                  },
                  "end": {
                    "row": 3,
                    "column": 21
                  },
                  "text": "index"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 3,
                    "column": 21
                  },
                  "end": {
                    "row": 3,
                    "column": 22
                  },
                  "text": "="
                },
                {
                  "type": "true",
                  "start": {
                    "row": 3,
                    "column": 22
                  },
                  "end": {
                    "row": 3,
                    "column": 26
                  },
                  "text": "True"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 3,
                "column": 26
              },
              "end": {
                "row": 3,
                "column": 27
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 3,
            "column": 27
          },
          "end": {
            "row": 3,
            "column": 28
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 4,
            "column": 8
          },
          "end": {
            "row": 144,
            "column": 40
          },
          "text": "\"\"\"\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : string or file handle, optional\n            File path or object. If not specified, the result is returned as\n            a string.\n        orient : string\n            Indication of expected JSON string format.\n\n            * Series\n\n              - default is 'index'\n              - allowed values are: {'split','records','index','table'}\n\n            * DataFrame\n\n              - default is 'columns'\n              - allowed values are:\n                {'split','records','index','columns','values','table'}\n\n            * The format of the JSON string\n\n              - 'split' : dict like {'index' -> [index],\n                'columns' -> [columns], 'data' -> [values]}\n              - 'records' : list like\n                [{column -> value}, ... , {column -> value}]\n              - 'index' : dict like {index -> {column -> value}}\n              - 'columns' : dict like {column -> {index -> value}}\n              - 'values' : just the values array\n              - 'table' : dict like {'schema': {schema}, 'data': {data}}\n                describing the data, and the data component is\n                like ``orient='records'``.\n\n                .. versionchanged:: 0.20.0\n\n        date_format : {None, 'epoch', 'iso'}\n            Type of date conversion. 'epoch' = epoch milliseconds,\n            'iso' = ISO8601. The default depends on the `orient`. For\n            ``orient='table'``, the default is 'iso'. For all other orients,\n            the default is 'epoch'.\n        double_precision : int, default 10\n            The number of decimal places to use when encoding\n            floating point values.\n        force_ascii : bool, default True\n            Force encoded string to be ASCII.\n        date_unit : string, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : bool, default False\n            If 'orient' is 'records' write out line delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not list\n            like.\n\n            .. versionadded:: 0.19.0\n\n        compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n\n            A string representing the compression to use in the output file,\n            only used when the first argument is a filename. By default, the\n            compression is inferred from the filename.\n\n            .. versionadded:: 0.21.0\n            .. versionchanged:: 0.24.0\n               'infer' option added and set to default\n        index : bool, default True\n            Whether to include the index values in the JSON string. Not\n            including the index (``index=False``) is only supported when\n            orient is 'split' or 'table'.\n\n            .. versionadded:: 0.23.0\n\n        See Also\n        --------\n        read_json\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n        ...                   index=['row 1', 'row 2'],\n        ...                   columns=['col 1', 'col 2'])\n        >>> df.to_json(orient='split')\n        '{\"columns\":[\"col 1\",\"col 2\"],\n          \"index\":[\"row 1\",\"row 2\"],\n          \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n        Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n        Note that index labels are not preserved with this encoding.\n\n        >>> df.to_json(orient='records')\n        '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n        Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n        >>> df.to_json(orient='index')\n        '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n        >>> df.to_json(orient='columns')\n        '{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n        >>> df.to_json(orient='values')\n        '[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\n        Encoding with Table Schema\n\n        >>> df.to_json(orient='table')\n        '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                                {\"name\": \"col 1\", \"type\": \"string\"},\n                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\",\n                     \"pandas_version\": \"0.20.0\"},\n          \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                   {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n        \"\"\"\n\n        from pandas.io import json\n        if date_format is None and orient == 'table':\n            date_format = 'iso'\n        elif date_format is None:\n            date_format = 'epoch'\n        return json.to_json(path_or_buf=path_or_buf, obj=self, orient=orient,\n                            date_format=date_format,\n                            double_precision=double_precision,\n                            force_ascii=force_ascii, date_unit=date_unit,\n                            default_handler=default_handler,\n                            lines=lines, compression=compression,\n                            index=index)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 4,
                "column": 8
              },
              "end": {
                "row": 131,
                "column": 11
              },
              "text": "\"\"\"\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : string or file handle, optional\n            File path or object. If not specified, the result is returned as\n            a string.\n        orient : string\n            Indication of expected JSON string format.\n\n            * Series\n\n              - default is 'index'\n              - allowed values are: {'split','records','index','table'}\n\n            * DataFrame\n\n              - default is 'columns'\n              - allowed values are:\n                {'split','records','index','columns','values','table'}\n\n            * The format of the JSON string\n\n              - 'split' : dict like {'index' -> [index],\n                'columns' -> [columns], 'data' -> [values]}\n              - 'records' : list like\n                [{column -> value}, ... , {column -> value}]\n              - 'index' : dict like {index -> {column -> value}}\n              - 'columns' : dict like {column -> {index -> value}}\n              - 'values' : just the values array\n              - 'table' : dict like {'schema': {schema}, 'data': {data}}\n                describing the data, and the data component is\n                like ``orient='records'``.\n\n                .. versionchanged:: 0.20.0\n\n        date_format : {None, 'epoch', 'iso'}\n            Type of date conversion. 'epoch' = epoch milliseconds,\n            'iso' = ISO8601. The default depends on the `orient`. For\n            ``orient='table'``, the default is 'iso'. For all other orients,\n            the default is 'epoch'.\n        double_precision : int, default 10\n            The number of decimal places to use when encoding\n            floating point values.\n        force_ascii : bool, default True\n            Force encoded string to be ASCII.\n        date_unit : string, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : bool, default False\n            If 'orient' is 'records' write out line delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not list\n            like.\n\n            .. versionadded:: 0.19.0\n\n        compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n\n            A string representing the compression to use in the output file,\n            only used when the first argument is a filename. By default, the\n            compression is inferred from the filename.\n\n            .. versionadded:: 0.21.0\n            .. versionchanged:: 0.24.0\n               'infer' option added and set to default\n        index : bool, default True\n            Whether to include the index values in the JSON string. Not\n            including the index (``index=False``) is only supported when\n            orient is 'split' or 'table'.\n\n            .. versionadded:: 0.23.0\n\n        See Also\n        --------\n        read_json\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n        ...                   index=['row 1', 'row 2'],\n        ...                   columns=['col 1', 'col 2'])\n        >>> df.to_json(orient='split')\n        '{\"columns\":[\"col 1\",\"col 2\"],\n          \"index\":[\"row 1\",\"row 2\"],\n          \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n        Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n        Note that index labels are not preserved with this encoding.\n\n        >>> df.to_json(orient='records')\n        '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n        Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n        >>> df.to_json(orient='index')\n        '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n        >>> df.to_json(orient='columns')\n        '{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n        >>> df.to_json(orient='values')\n        '[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\n        Encoding with Table Schema\n\n        >>> df.to_json(orient='table')\n        '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                                {\"name\": \"col 1\", \"type\": \"string\"},\n                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\",\n                     \"pandas_version\": \"0.20.0\"},\n          \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                   {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 4,
                    "column": 8
                  },
                  "end": {
                    "row": 131,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : string or file handle, optional\n            File path or object. If not specified, the result is returned as\n            a string.\n        orient : string\n            Indication of expected JSON string format.\n\n            * Series\n\n              - default is 'index'\n              - allowed values are: {'split','records','index','table'}\n\n            * DataFrame\n\n              - default is 'columns'\n              - allowed values are:\n                {'split','records','index','columns','values','table'}\n\n            * The format of the JSON string\n\n              - 'split' : dict like {'index' -> [index],\n                'columns' -> [columns], 'data' -> [values]}\n              - 'records' : list like\n                [{column -> value}, ... , {column -> value}]\n              - 'index' : dict like {index -> {column -> value}}\n              - 'columns' : dict like {column -> {index -> value}}\n              - 'values' : just the values array\n              - 'table' : dict like {'schema': {schema}, 'data': {data}}\n                describing the data, and the data component is\n                like ``orient='records'``.\n\n                .. versionchanged:: 0.20.0\n\n        date_format : {None, 'epoch', 'iso'}\n            Type of date conversion. 'epoch' = epoch milliseconds,\n            'iso' = ISO8601. The default depends on the `orient`. For\n            ``orient='table'``, the default is 'iso'. For all other orients,\n            the default is 'epoch'.\n        double_precision : int, default 10\n            The number of decimal places to use when encoding\n            floating point values.\n        force_ascii : bool, default True\n            Force encoded string to be ASCII.\n        date_unit : string, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : bool, default False\n            If 'orient' is 'records' write out line delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not list\n            like.\n\n            .. versionadded:: 0.19.0\n\n        compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n\n            A string representing the compression to use in the output file,\n            only used when the first argument is a filename. By default, the\n            compression is inferred from the filename.\n\n            .. versionadded:: 0.21.0\n            .. versionchanged:: 0.24.0\n               'infer' option added and set to default\n        index : bool, default True\n            Whether to include the index values in the JSON string. Not\n            including the index (``index=False``) is only supported when\n            orient is 'split' or 'table'.\n\n            .. versionadded:: 0.23.0\n\n        See Also\n        --------\n        read_json\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n        ...                   index=['row 1', 'row 2'],\n        ...                   columns=['col 1', 'col 2'])\n        >>> df.to_json(orient='split')\n        '{\"columns\":[\"col 1\",\"col 2\"],\n          \"index\":[\"row 1\",\"row 2\"],\n          \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n        Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n        Note that index labels are not preserved with this encoding.\n\n        >>> df.to_json(orient='records')\n        '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n        Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n        >>> df.to_json(orient='index')\n        '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n        >>> df.to_json(orient='columns')\n        '{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n        >>> df.to_json(orient='values')\n        '[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\n        Encoding with Table Schema\n\n        >>> df.to_json(orient='table')\n        '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                                {\"name\": \"col 1\", \"type\": \"string\"},\n                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\",\n                     \"pandas_version\": \"0.20.0\"},\n          \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                   {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 4,
                        "column": 8
                      },
                      "end": {
                        "row": 4,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 4,
                        "column": 11
                      },
                      "end": {
                        "row": 131,
                        "column": 8
                      },
                      "text": "\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : string or file handle, optional\n            File path or object. If not specified, the result is returned as\n            a string.\n        orient : string\n            Indication of expected JSON string format.\n\n            * Series\n\n              - default is 'index'\n              - allowed values are: {'split','records','index','table'}\n\n            * DataFrame\n\n              - default is 'columns'\n              - allowed values are:\n                {'split','records','index','columns','values','table'}\n\n            * The format of the JSON string\n\n              - 'split' : dict like {'index' -> [index],\n                'columns' -> [columns], 'data' -> [values]}\n              - 'records' : list like\n                [{column -> value}, ... , {column -> value}]\n              - 'index' : dict like {index -> {column -> value}}\n              - 'columns' : dict like {column -> {index -> value}}\n              - 'values' : just the values array\n              - 'table' : dict like {'schema': {schema}, 'data': {data}}\n                describing the data, and the data component is\n                like ``orient='records'``.\n\n                .. versionchanged:: 0.20.0\n\n        date_format : {None, 'epoch', 'iso'}\n            Type of date conversion. 'epoch' = epoch milliseconds,\n            'iso' = ISO8601. The default depends on the `orient`. For\n            ``orient='table'``, the default is 'iso'. For all other orients,\n            the default is 'epoch'.\n        double_precision : int, default 10\n            The number of decimal places to use when encoding\n            floating point values.\n        force_ascii : bool, default True\n            Force encoded string to be ASCII.\n        date_unit : string, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : bool, default False\n            If 'orient' is 'records' write out line delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not list\n            like.\n\n            .. versionadded:: 0.19.0\n\n        compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n\n            A string representing the compression to use in the output file,\n            only used when the first argument is a filename. By default, the\n            compression is inferred from the filename.\n\n            .. versionadded:: 0.21.0\n            .. versionchanged:: 0.24.0\n               'infer' option added and set to default\n        index : bool, default True\n            Whether to include the index values in the JSON string. Not\n            including the index (``index=False``) is only supported when\n            orient is 'split' or 'table'.\n\n            .. versionadded:: 0.23.0\n\n        See Also\n        --------\n        read_json\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n        ...                   index=['row 1', 'row 2'],\n        ...                   columns=['col 1', 'col 2'])\n        >>> df.to_json(orient='split')\n        '{\"columns\":[\"col 1\",\"col 2\"],\n          \"index\":[\"row 1\",\"row 2\"],\n          \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n        Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n        Note that index labels are not preserved with this encoding.\n\n        >>> df.to_json(orient='records')\n        '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n        Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n        >>> df.to_json(orient='index')\n        '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n        >>> df.to_json(orient='columns')\n        '{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n        >>> df.to_json(orient='values')\n        '[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\n        Encoding with Table Schema\n\n        >>> df.to_json(orient='table')\n        '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                                {\"name\": \"col 1\", \"type\": \"string\"},\n                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\",\n                     \"pandas_version\": \"0.20.0\"},\n          \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                   {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 131,
                        "column": 8
                      },
                      "end": {
                        "row": 131,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "import_from_statement",
              "start": {
                "row": 133,
                "column": 8
              },
              "end": {
                "row": 133,
                "column": 34
              },
              "text": "from pandas.io import json",
              "children": [
                {
                  "type": "from",
                  "start": {
                    "row": 133,
                    "column": 8
                  },
                  "end": {
                    "row": 133,
                    "column": 12
                  },
                  "text": "from"
                },
                {
                  "type": "dotted_name",
                  "start": {
                    "row": 133,
                    "column": 13
                  },
                  "end": {
                    "row": 133,
                    "column": 22
                  },
                  "text": "pandas.io",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 133,
                        "column": 13
                      },
                      "end": {
                        "row": 133,
                        "column": 19
                      },
                      "text": "pandas"
                    },
                    {
                      "type": ".",
                      "start": {
                        "row": 133,
                        "column": 19
                      },
                      "end": {
                        "row": 133,
                        "column": 20
                      },
                      "text": "."
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 133,
                        "column": 20
                      },
                      "end": {
                        "row": 133,
                        "column": 22
                      },
                      "text": "io"
                    }
                  ]
                },
                {
                  "type": "import",
                  "start": {
                    "row": 133,
                    "column": 23
                  },
                  "end": {
                    "row": 133,
                    "column": 29
                  },
                  "text": "import"
                },
                {
                  "type": "dotted_name",
                  "start": {
                    "row": 133,
                    "column": 30
                  },
                  "end": {
                    "row": 133,
                    "column": 34
                  },
                  "text": "json",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 133,
                        "column": 30
                      },
                      "end": {
                        "row": 133,
                        "column": 34
                      },
                      "text": "json"
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 134,
                "column": 8
              },
              "end": {
                "row": 137,
                "column": 33
              },
              "text": "if date_format is None and orient == 'table':\n            date_format = 'iso'\n        elif date_format is None:\n            date_format = 'epoch'",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 134,
                    "column": 8
                  },
                  "end": {
                    "row": 134,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "boolean_operator",
                  "start": {
                    "row": 134,
                    "column": 11
                  },
                  "end": {
                    "row": 134,
                    "column": 52
                  },
                  "text": "date_format is None and orient == 'table'",
                  "children": [
                    {
                      "type": "comparison_operator",
                      "start": {
                        "row": 134,
                        "column": 11
                      },
                      "end": {
                        "row": 134,
                        "column": 30
                      },
                      "text": "date_format is None",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 134,
                            "column": 11
                          },
                          "end": {
                            "row": 134,
                            "column": 22
                          },
                          "text": "date_format"
                        },
                        {
                          "type": "is",
                          "start": {
                            "row": 134,
                            "column": 23
                          },
                          "end": {
                            "row": 134,
                            "column": 25
                          },
                          "text": "is"
                        },
                        {
                          "type": "none",
                          "start": {
                            "row": 134,
                            "column": 26
                          },
                          "end": {
                            "row": 134,
                            "column": 30
                          },
                          "text": "None"
                        }
                      ]
                    },
                    {
                      "type": "and",
                      "start": {
                        "row": 134,
                        "column": 31
                      },
                      "end": {
                        "row": 134,
                        "column": 34
                      },
                      "text": "and"
                    },
                    {
                      "type": "comparison_operator",
                      "start": {
                        "row": 134,
                        "column": 35
                      },
                      "end": {
                        "row": 134,
                        "column": 52
                      },
                      "text": "orient == 'table'",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 134,
                            "column": 35
                          },
                          "end": {
                            "row": 134,
                            "column": 41
                          },
                          "text": "orient"
                        },
                        {
                          "type": "==",
                          "start": {
                            "row": 134,
                            "column": 42
                          },
                          "end": {
                            "row": 134,
                            "column": 44
                          },
                          "text": "=="
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 134,
                            "column": 45
                          },
                          "end": {
                            "row": 134,
                            "column": 52
                          },
                          "text": "'table'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 134,
                                "column": 45
                              },
                              "end": {
                                "row": 134,
                                "column": 46
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 134,
                                "column": 46
                              },
                              "end": {
                                "row": 134,
                                "column": 51
                              },
                              "text": "table"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 134,
                                "column": 51
                              },
                              "end": {
                                "row": 134,
                                "column": 52
                              },
                              "text": "'"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 134,
                    "column": 52
                  },
                  "end": {
                    "row": 134,
                    "column": 53
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 135,
                    "column": 12
                  },
                  "end": {
                    "row": 135,
                    "column": 31
                  },
                  "text": "date_format = 'iso'",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 135,
                        "column": 12
                      },
                      "end": {
                        "row": 135,
                        "column": 31
                      },
                      "text": "date_format = 'iso'",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 135,
                            "column": 12
                          },
                          "end": {
                            "row": 135,
                            "column": 31
                          },
                          "text": "date_format = 'iso'",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 135,
                                "column": 12
                              },
                              "end": {
                                "row": 135,
                                "column": 23
                              },
                              "text": "date_format"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 135,
                                "column": 24
                              },
                              "end": {
                                "row": 135,
                                "column": 25
                              },
                              "text": "="
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 135,
                                "column": 26
                              },
                              "end": {
                                "row": 135,
                                "column": 31
                              },
                              "text": "'iso'",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 135,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 135,
                                    "column": 27
                                  },
                                  "text": "'"
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 135,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 135,
                                    "column": 30
                                  },
                                  "text": "iso"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 135,
                                    "column": 30
                                  },
                                  "end": {
                                    "row": 135,
                                    "column": 31
                                  },
                                  "text": "'"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "elif_clause",
                  "start": {
                    "row": 136,
                    "column": 8
                  },
                  "end": {
                    "row": 137,
                    "column": 33
                  },
                  "text": "elif date_format is None:\n            date_format = 'epoch'",
                  "children": [
                    {
                      "type": "elif",
                      "start": {
                        "row": 136,
                        "column": 8
                      },
                      "end": {
                        "row": 136,
                        "column": 12
                      },
                      "text": "elif"
                    },
                    {
                      "type": "comparison_operator",
                      "start": {
                        "row": 136,
                        "column": 13
                      },
                      "end": {
                        "row": 136,
                        "column": 32
                      },
                      "text": "date_format is None",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 136,
                            "column": 13
                          },
                          "end": {
                            "row": 136,
                            "column": 24
                          },
                          "text": "date_format"
                        },
                        {
                          "type": "is",
                          "start": {
                            "row": 136,
                            "column": 25
                          },
                          "end": {
                            "row": 136,
                            "column": 27
                          },
                          "text": "is"
                        },
                        {
                          "type": "none",
                          "start": {
                            "row": 136,
                            "column": 28
                          },
                          "end": {
                            "row": 136,
                            "column": 32
                          },
                          "text": "None"
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 136,
                        "column": 32
                      },
                      "end": {
                        "row": 136,
                        "column": 33
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 137,
                        "column": 12
                      },
                      "end": {
                        "row": 137,
                        "column": 33
                      },
                      "text": "date_format = 'epoch'",
                      "children": [
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 137,
                            "column": 12
                          },
                          "end": {
                            "row": 137,
                            "column": 33
                          },
                          "text": "date_format = 'epoch'",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 137,
                                "column": 12
                              },
                              "end": {
                                "row": 137,
                                "column": 33
                              },
                              "text": "date_format = 'epoch'",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 137,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 137,
                                    "column": 23
                                  },
                                  "text": "date_format"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 137,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 137,
                                    "column": 25
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 137,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 137,
                                    "column": 33
                                  },
                                  "text": "'epoch'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 137,
                                        "column": 26
                                      },
                                      "end": {
                                        "row": 137,
                                        "column": 27
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 137,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 137,
                                        "column": 32
                                      },
                                      "text": "epoch"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 137,
                                        "column": 32
                                      },
                                      "end": {
                                        "row": 137,
                                        "column": 33
                                      },
                                      "text": "'"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 138,
                "column": 8
              },
              "end": {
                "row": 144,
                "column": 40
              },
              "text": "return json.to_json(path_or_buf=path_or_buf, obj=self, orient=orient,\n                            date_format=date_format,\n                            double_precision=double_precision,\n                            force_ascii=force_ascii, date_unit=date_unit,\n                            default_handler=default_handler,\n                            lines=lines, compression=compression,\n                            index=index)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 138,
                    "column": 8
                  },
                  "end": {
                    "row": 138,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 138,
                    "column": 15
                  },
                  "end": {
                    "row": 144,
                    "column": 40
                  },
                  "text": "json.to_json(path_or_buf=path_or_buf, obj=self, orient=orient,\n                            date_format=date_format,\n                            double_precision=double_precision,\n                            force_ascii=force_ascii, date_unit=date_unit,\n                            default_handler=default_handler,\n                            lines=lines, compression=compression,\n                            index=index)",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 138,
                        "column": 15
                      },
                      "end": {
                        "row": 138,
                        "column": 27
                      },
                      "text": "json.to_json",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 138,
                            "column": 15
                          },
                          "end": {
                            "row": 138,
                            "column": 19
                          },
                          "text": "json"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 138,
                            "column": 19
                          },
                          "end": {
                            "row": 138,
                            "column": 20
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 138,
                            "column": 20
                          },
                          "end": {
                            "row": 138,
                            "column": 27
                          },
                          "text": "to_json"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 138,
                        "column": 27
                      },
                      "end": {
                        "row": 144,
                        "column": 40
                      },
                      "text": "(path_or_buf=path_or_buf, obj=self, orient=orient,\n                            date_format=date_format,\n                            double_precision=double_precision,\n                            force_ascii=force_ascii, date_unit=date_unit,\n                            default_handler=default_handler,\n                            lines=lines, compression=compression,\n                            index=index)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 138,
                            "column": 27
                          },
                          "end": {
                            "row": 138,
                            "column": 28
                          },
                          "text": "("
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 138,
                            "column": 28
                          },
                          "end": {
                            "row": 138,
                            "column": 51
                          },
                          "text": "path_or_buf=path_or_buf",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 138,
                                "column": 28
                              },
                              "end": {
                                "row": 138,
                                "column": 39
                              },
                              "text": "path_or_buf"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 138,
                                "column": 39
                              },
                              "end": {
                                "row": 138,
                                "column": 40
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 138,
                                "column": 40
                              },
                              "end": {
                                "row": 138,
                                "column": 51
                              },
                              "text": "path_or_buf"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 138,
                            "column": 51
                          },
                          "end": {
                            "row": 138,
                            "column": 52
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 138,
                            "column": 53
                          },
                          "end": {
                            "row": 138,
                            "column": 61
                          },
                          "text": "obj=self",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 138,
                                "column": 53
                              },
                              "end": {
                                "row": 138,
                                "column": 56
                              },
                              "text": "obj"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 138,
                                "column": 56
                              },
                              "end": {
                                "row": 138,
                                "column": 57
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 138,
                                "column": 57
                              },
                              "end": {
                                "row": 138,
                                "column": 61
                              },
                              "text": "self"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 138,
                            "column": 61
                          },
                          "end": {
                            "row": 138,
                            "column": 62
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 138,
                            "column": 63
                          },
                          "end": {
                            "row": 138,
                            "column": 76
                          },
                          "text": "orient=orient",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 138,
                                "column": 63
                              },
                              "end": {
                                "row": 138,
                                "column": 69
                              },
                              "text": "orient"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 138,
                                "column": 69
                              },
                              "end": {
                                "row": 138,
                                "column": 70
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 138,
                                "column": 70
                              },
                              "end": {
                                "row": 138,
                                "column": 76
                              },
                              "text": "orient"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 138,
                            "column": 76
                          },
                          "end": {
                            "row": 138,
                            "column": 77
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 139,
                            "column": 28
                          },
                          "end": {
                            "row": 139,
                            "column": 51
                          },
                          "text": "date_format=date_format",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 139,
                                "column": 28
                              },
                              "end": {
                                "row": 139,
                                "column": 39
                              },
                              "text": "date_format"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 139,
                                "column": 39
                              },
                              "end": {
                                "row": 139,
                                "column": 40
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 139,
                                "column": 40
                              },
                              "end": {
                                "row": 139,
                                "column": 51
                              },
                              "text": "date_format"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 139,
                            "column": 51
                          },
                          "end": {
                            "row": 139,
                            "column": 52
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 140,
                            "column": 28
                          },
                          "end": {
                            "row": 140,
                            "column": 61
                          },
                          "text": "double_precision=double_precision",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 140,
                                "column": 28
                              },
                              "end": {
                                "row": 140,
                                "column": 44
                              },
                              "text": "double_precision"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 140,
                                "column": 44
                              },
                              "end": {
                                "row": 140,
                                "column": 45
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 140,
                                "column": 45
                              },
                              "end": {
                                "row": 140,
                                "column": 61
                              },
                              "text": "double_precision"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 140,
                            "column": 61
                          },
                          "end": {
                            "row": 140,
                            "column": 62
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 141,
                            "column": 28
                          },
                          "end": {
                            "row": 141,
                            "column": 51
                          },
                          "text": "force_ascii=force_ascii",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 141,
                                "column": 28
                              },
                              "end": {
                                "row": 141,
                                "column": 39
                              },
                              "text": "force_ascii"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 141,
                                "column": 39
                              },
                              "end": {
                                "row": 141,
                                "column": 40
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 141,
                                "column": 40
                              },
                              "end": {
                                "row": 141,
                                "column": 51
                              },
                              "text": "force_ascii"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 141,
                            "column": 51
                          },
                          "end": {
                            "row": 141,
                            "column": 52
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 141,
                            "column": 53
                          },
                          "end": {
                            "row": 141,
                            "column": 72
                          },
                          "text": "date_unit=date_unit",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 141,
                                "column": 53
                              },
                              "end": {
                                "row": 141,
                                "column": 62
                              },
                              "text": "date_unit"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 141,
                                "column": 62
                              },
                              "end": {
                                "row": 141,
                                "column": 63
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 141,
                                "column": 63
                              },
                              "end": {
                                "row": 141,
                                "column": 72
                              },
                              "text": "date_unit"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 141,
                            "column": 72
                          },
                          "end": {
                            "row": 141,
                            "column": 73
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 142,
                            "column": 28
                          },
                          "end": {
                            "row": 142,
                            "column": 59
                          },
                          "text": "default_handler=default_handler",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 142,
                                "column": 28
                              },
                              "end": {
                                "row": 142,
                                "column": 43
                              },
                              "text": "default_handler"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 142,
                                "column": 43
                              },
                              "end": {
                                "row": 142,
                                "column": 44
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 142,
                                "column": 44
                              },
                              "end": {
                                "row": 142,
                                "column": 59
                              },
                              "text": "default_handler"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 142,
                            "column": 59
                          },
                          "end": {
                            "row": 142,
                            "column": 60
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 143,
                            "column": 28
                          },
                          "end": {
                            "row": 143,
                            "column": 39
                          },
                          "text": "lines=lines",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 143,
                                "column": 28
                              },
                              "end": {
                                "row": 143,
                                "column": 33
                              },
                              "text": "lines"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 143,
                                "column": 33
                              },
                              "end": {
                                "row": 143,
                                "column": 34
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 143,
                                "column": 34
                              },
                              "end": {
                                "row": 143,
                                "column": 39
                              },
                              "text": "lines"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 143,
                            "column": 39
                          },
                          "end": {
                            "row": 143,
                            "column": 40
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 143,
                            "column": 41
                          },
                          "end": {
                            "row": 143,
                            "column": 64
                          },
                          "text": "compression=compression",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 143,
                                "column": 41
                              },
                              "end": {
                                "row": 143,
                                "column": 52
                              },
                              "text": "compression"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 143,
                                "column": 52
                              },
                              "end": {
                                "row": 143,
                                "column": 53
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 143,
                                "column": 53
                              },
                              "end": {
                                "row": 143,
                                "column": 64
                              },
                              "text": "compression"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 143,
                            "column": 64
                          },
                          "end": {
                            "row": 143,
                            "column": 65
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 144,
                            "column": 28
                          },
                          "end": {
                            "row": 144,
                            "column": 39
                          },
                          "text": "index=index",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 144,
                                "column": 28
                              },
                              "end": {
                                "row": 144,
                                "column": 33
                              },
                              "text": "index"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 144,
                                "column": 33
                              },
                              "end": {
                                "row": 144,
                                "column": 34
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 144,
                                "column": 34
                              },
                              "end": {
                                "row": 144,
                                "column": 39
                              },
                              "text": "index"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 144,
                            "column": 39
                          },
                          "end": {
                            "row": 144,
                            "column": 40
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}