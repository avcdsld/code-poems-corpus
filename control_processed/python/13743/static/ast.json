{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 25,
    "column": 65
  },
  "text": "def _gen_grow_safe(self, pset, min_, max_, type_=None):\n        \"\"\"Generate an expression where each leaf might have a different depth between min_ and max_.\n\n        Parameters\n        ----------\n        pset: PrimitiveSetTyped\n            Primitive set from which primitives are selected.\n        min_: int\n            Minimum height of the produced trees.\n        max_: int\n            Maximum Height of the produced trees.\n        type_: class\n            The type that should return the tree when called, when\n                  :obj:None (default) the type of :pset: (pset.ret)\n                  is assumed.\n        Returns\n        -------\n        individual: list\n            A grown tree with leaves at possibly different depths.\n        \"\"\"\n\n        def condition(height, depth, type_):\n            \"\"\"Stop when the depth is equal to height or when a node should be a terminal.\"\"\"\n            return type_ not in self.ret_types or depth == height\n\n        return self._generate(pset, min_, max_, condition, type_)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 25,
        "column": 65
      },
      "text": "def _gen_grow_safe(self, pset, min_, max_, type_=None):\n        \"\"\"Generate an expression where each leaf might have a different depth between min_ and max_.\n\n        Parameters\n        ----------\n        pset: PrimitiveSetTyped\n            Primitive set from which primitives are selected.\n        min_: int\n            Minimum height of the produced trees.\n        max_: int\n            Maximum Height of the produced trees.\n        type_: class\n            The type that should return the tree when called, when\n                  :obj:None (default) the type of :pset: (pset.ret)\n                  is assumed.\n        Returns\n        -------\n        individual: list\n            A grown tree with leaves at possibly different depths.\n        \"\"\"\n\n        def condition(height, depth, type_):\n            \"\"\"Stop when the depth is equal to height or when a node should be a terminal.\"\"\"\n            return type_ not in self.ret_types or depth == height\n\n        return self._generate(pset, min_, max_, condition, type_)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 18
          },
          "text": "_gen_grow_safe"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 18
          },
          "end": {
            "row": 0,
            "column": 54
          },
          "text": "(self, pset, min_, max_, type_=None)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 18
              },
              "end": {
                "row": 0,
                "column": 19
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 19
              },
              "end": {
                "row": 0,
                "column": 23
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 23
              },
              "end": {
                "row": 0,
                "column": 24
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 25
              },
              "end": {
                "row": 0,
                "column": 29
              },
              "text": "pset"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 29
              },
              "end": {
                "row": 0,
                "column": 30
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 31
              },
              "end": {
                "row": 0,
                "column": 35
              },
              "text": "min_"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 35
              },
              "end": {
                "row": 0,
                "column": 36
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 37
              },
              "end": {
                "row": 0,
                "column": 41
              },
              "text": "max_"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 41
              },
              "end": {
                "row": 0,
                "column": 42
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 43
              },
              "end": {
                "row": 0,
                "column": 53
              },
              "text": "type_=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 43
                  },
                  "end": {
                    "row": 0,
                    "column": 48
                  },
                  "text": "type_"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 48
                  },
                  "end": {
                    "row": 0,
                    "column": 49
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 49
                  },
                  "end": {
                    "row": 0,
                    "column": 53
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 53
              },
              "end": {
                "row": 0,
                "column": 54
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 54
          },
          "end": {
            "row": 0,
            "column": 55
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 25,
            "column": 65
          },
          "text": "\"\"\"Generate an expression where each leaf might have a different depth between min_ and max_.\n\n        Parameters\n        ----------\n        pset: PrimitiveSetTyped\n            Primitive set from which primitives are selected.\n        min_: int\n            Minimum height of the produced trees.\n        max_: int\n            Maximum Height of the produced trees.\n        type_: class\n            The type that should return the tree when called, when\n                  :obj:None (default) the type of :pset: (pset.ret)\n                  is assumed.\n        Returns\n        -------\n        individual: list\n            A grown tree with leaves at possibly different depths.\n        \"\"\"\n\n        def condition(height, depth, type_):\n            \"\"\"Stop when the depth is equal to height or when a node should be a terminal.\"\"\"\n            return type_ not in self.ret_types or depth == height\n\n        return self._generate(pset, min_, max_, condition, type_)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 19,
                "column": 11
              },
              "text": "\"\"\"Generate an expression where each leaf might have a different depth between min_ and max_.\n\n        Parameters\n        ----------\n        pset: PrimitiveSetTyped\n            Primitive set from which primitives are selected.\n        min_: int\n            Minimum height of the produced trees.\n        max_: int\n            Maximum Height of the produced trees.\n        type_: class\n            The type that should return the tree when called, when\n                  :obj:None (default) the type of :pset: (pset.ret)\n                  is assumed.\n        Returns\n        -------\n        individual: list\n            A grown tree with leaves at possibly different depths.\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 19,
                    "column": 11
                  },
                  "text": "\"\"\"Generate an expression where each leaf might have a different depth between min_ and max_.\n\n        Parameters\n        ----------\n        pset: PrimitiveSetTyped\n            Primitive set from which primitives are selected.\n        min_: int\n            Minimum height of the produced trees.\n        max_: int\n            Maximum Height of the produced trees.\n        type_: class\n            The type that should return the tree when called, when\n                  :obj:None (default) the type of :pset: (pset.ret)\n                  is assumed.\n        Returns\n        -------\n        individual: list\n            A grown tree with leaves at possibly different depths.\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 19,
                        "column": 8
                      },
                      "text": "Generate an expression where each leaf might have a different depth between min_ and max_.\n\n        Parameters\n        ----------\n        pset: PrimitiveSetTyped\n            Primitive set from which primitives are selected.\n        min_: int\n            Minimum height of the produced trees.\n        max_: int\n            Maximum Height of the produced trees.\n        type_: class\n            The type that should return the tree when called, when\n                  :obj:None (default) the type of :pset: (pset.ret)\n                  is assumed.\n        Returns\n        -------\n        individual: list\n            A grown tree with leaves at possibly different depths.\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 19,
                        "column": 8
                      },
                      "end": {
                        "row": 19,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "function_definition",
              "start": {
                "row": 21,
                "column": 8
              },
              "end": {
                "row": 23,
                "column": 65
              },
              "text": "def condition(height, depth, type_):\n            \"\"\"Stop when the depth is equal to height or when a node should be a terminal.\"\"\"\n            return type_ not in self.ret_types or depth == height",
              "children": [
                {
                  "type": "def",
                  "start": {
                    "row": 21,
                    "column": 8
                  },
                  "end": {
                    "row": 21,
                    "column": 11
                  },
                  "text": "def"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 21,
                    "column": 12
                  },
                  "end": {
                    "row": 21,
                    "column": 21
                  },
                  "text": "condition"
                },
                {
                  "type": "parameters",
                  "start": {
                    "row": 21,
                    "column": 21
                  },
                  "end": {
                    "row": 21,
                    "column": 43
                  },
                  "text": "(height, depth, type_)",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 21,
                        "column": 21
                      },
                      "end": {
                        "row": 21,
                        "column": 22
                      },
                      "text": "("
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 21,
                        "column": 22
                      },
                      "end": {
                        "row": 21,
                        "column": 28
                      },
                      "text": "height"
                    },
                    {
                      "type": ",",
                      "start": {
                        "row": 21,
                        "column": 28
                      },
                      "end": {
                        "row": 21,
                        "column": 29
                      },
                      "text": ","
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 21,
                        "column": 30
                      },
                      "end": {
                        "row": 21,
                        "column": 35
                      },
                      "text": "depth"
                    },
                    {
                      "type": ",",
                      "start": {
                        "row": 21,
                        "column": 35
                      },
                      "end": {
                        "row": 21,
                        "column": 36
                      },
                      "text": ","
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 21,
                        "column": 37
                      },
                      "end": {
                        "row": 21,
                        "column": 42
                      },
                      "text": "type_"
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 21,
                        "column": 42
                      },
                      "end": {
                        "row": 21,
                        "column": 43
                      },
                      "text": ")"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 21,
                    "column": 43
                  },
                  "end": {
                    "row": 21,
                    "column": 44
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 22,
                    "column": 12
                  },
                  "end": {
                    "row": 23,
                    "column": 65
                  },
                  "text": "\"\"\"Stop when the depth is equal to height or when a node should be a terminal.\"\"\"\n            return type_ not in self.ret_types or depth == height",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 22,
                        "column": 12
                      },
                      "end": {
                        "row": 22,
                        "column": 93
                      },
                      "text": "\"\"\"Stop when the depth is equal to height or when a node should be a terminal.\"\"\"",
                      "children": [
                        {
                          "type": "string",
                          "start": {
                            "row": 22,
                            "column": 12
                          },
                          "end": {
                            "row": 22,
                            "column": 93
                          },
                          "text": "\"\"\"Stop when the depth is equal to height or when a node should be a terminal.\"\"\"",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 22,
                                "column": 12
                              },
                              "end": {
                                "row": 22,
                                "column": 15
                              },
                              "text": "\"\"\""
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 22,
                                "column": 15
                              },
                              "end": {
                                "row": 22,
                                "column": 90
                              },
                              "text": "Stop when the depth is equal to height or when a node should be a terminal."
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 22,
                                "column": 90
                              },
                              "end": {
                                "row": 22,
                                "column": 93
                              },
                              "text": "\"\"\""
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "return_statement",
                      "start": {
                        "row": 23,
                        "column": 12
                      },
                      "end": {
                        "row": 23,
                        "column": 65
                      },
                      "text": "return type_ not in self.ret_types or depth == height",
                      "children": [
                        {
                          "type": "return",
                          "start": {
                            "row": 23,
                            "column": 12
                          },
                          "end": {
                            "row": 23,
                            "column": 18
                          },
                          "text": "return"
                        },
                        {
                          "type": "boolean_operator",
                          "start": {
                            "row": 23,
                            "column": 19
                          },
                          "end": {
                            "row": 23,
                            "column": 65
                          },
                          "text": "type_ not in self.ret_types or depth == height",
                          "children": [
                            {
                              "type": "comparison_operator",
                              "start": {
                                "row": 23,
                                "column": 19
                              },
                              "end": {
                                "row": 23,
                                "column": 46
                              },
                              "text": "type_ not in self.ret_types",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 23,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 24
                                  },
                                  "text": "type_"
                                },
                                {
                                  "type": "not in",
                                  "start": {
                                    "row": 23,
                                    "column": 25
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 28
                                  },
                                  "text": "not"
                                },
                                {
                                  "type": "not in",
                                  "start": {
                                    "row": 23,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 31
                                  },
                                  "text": "in"
                                },
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 23,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 46
                                  },
                                  "text": "self.ret_types",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 23,
                                        "column": 32
                                      },
                                      "end": {
                                        "row": 23,
                                        "column": 36
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 23,
                                        "column": 36
                                      },
                                      "end": {
                                        "row": 23,
                                        "column": 37
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 23,
                                        "column": 37
                                      },
                                      "end": {
                                        "row": 23,
                                        "column": 46
                                      },
                                      "text": "ret_types"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "or",
                              "start": {
                                "row": 23,
                                "column": 47
                              },
                              "end": {
                                "row": 23,
                                "column": 49
                              },
                              "text": "or"
                            },
                            {
                              "type": "comparison_operator",
                              "start": {
                                "row": 23,
                                "column": 50
                              },
                              "end": {
                                "row": 23,
                                "column": 65
                              },
                              "text": "depth == height",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 23,
                                    "column": 50
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 55
                                  },
                                  "text": "depth"
                                },
                                {
                                  "type": "==",
                                  "start": {
                                    "row": 23,
                                    "column": 56
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 58
                                  },
                                  "text": "=="
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 23,
                                    "column": 59
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 65
                                  },
                                  "text": "height"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 25,
                "column": 8
              },
              "end": {
                "row": 25,
                "column": 65
              },
              "text": "return self._generate(pset, min_, max_, condition, type_)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 25,
                    "column": 8
                  },
                  "end": {
                    "row": 25,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 25,
                    "column": 15
                  },
                  "end": {
                    "row": 25,
                    "column": 65
                  },
                  "text": "self._generate(pset, min_, max_, condition, type_)",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 25,
                        "column": 15
                      },
                      "end": {
                        "row": 25,
                        "column": 29
                      },
                      "text": "self._generate",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 15
                          },
                          "end": {
                            "row": 25,
                            "column": 19
                          },
                          "text": "self"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 25,
                            "column": 19
                          },
                          "end": {
                            "row": 25,
                            "column": 20
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 20
                          },
                          "end": {
                            "row": 25,
                            "column": 29
                          },
                          "text": "_generate"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 25,
                        "column": 29
                      },
                      "end": {
                        "row": 25,
                        "column": 65
                      },
                      "text": "(pset, min_, max_, condition, type_)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 25,
                            "column": 29
                          },
                          "end": {
                            "row": 25,
                            "column": 30
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 30
                          },
                          "end": {
                            "row": 25,
                            "column": 34
                          },
                          "text": "pset"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 25,
                            "column": 34
                          },
                          "end": {
                            "row": 25,
                            "column": 35
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 36
                          },
                          "end": {
                            "row": 25,
                            "column": 40
                          },
                          "text": "min_"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 25,
                            "column": 40
                          },
                          "end": {
                            "row": 25,
                            "column": 41
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 42
                          },
                          "end": {
                            "row": 25,
                            "column": 46
                          },
                          "text": "max_"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 25,
                            "column": 46
                          },
                          "end": {
                            "row": 25,
                            "column": 47
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 48
                          },
                          "end": {
                            "row": 25,
                            "column": 57
                          },
                          "text": "condition"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 25,
                            "column": 57
                          },
                          "end": {
                            "row": 25,
                            "column": 58
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 59
                          },
                          "end": {
                            "row": 25,
                            "column": 64
                          },
                          "text": "type_"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 25,
                            "column": 64
                          },
                          "end": {
                            "row": 25,
                            "column": 65
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}