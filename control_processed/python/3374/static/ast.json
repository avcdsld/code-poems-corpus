{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 12,
    "column": 16
  },
  "text": "def is_writable_attr(ext):\n    \"\"\"Check if an extension attribute is writable.\n    ext (tuple): The (default, getter, setter, method) tuple available  via\n        {Doc,Span,Token}.get_extension.\n    RETURNS (bool): Whether the attribute is writable.\n    \"\"\"\n    default, method, getter, setter = ext\n    # Extension is writable if it has a setter (getter + setter), if it has a\n    # default value (or, if its default value is none, none of the other values\n    # should be set).\n    if setter is not None or default is not None or all(e is None for e in ext):\n        return True\n    return False",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 12,
        "column": 16
      },
      "text": "def is_writable_attr(ext):\n    \"\"\"Check if an extension attribute is writable.\n    ext (tuple): The (default, getter, setter, method) tuple available  via\n        {Doc,Span,Token}.get_extension.\n    RETURNS (bool): Whether the attribute is writable.\n    \"\"\"\n    default, method, getter, setter = ext\n    # Extension is writable if it has a setter (getter + setter), if it has a\n    # default value (or, if its default value is none, none of the other values\n    # should be set).\n    if setter is not None or default is not None or all(e is None for e in ext):\n        return True\n    return False",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 20
          },
          "text": "is_writable_attr"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 20
          },
          "end": {
            "row": 0,
            "column": 25
          },
          "text": "(ext)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 21
              },
              "end": {
                "row": 0,
                "column": 24
              },
              "text": "ext"
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 24
              },
              "end": {
                "row": 0,
                "column": 25
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 25
          },
          "end": {
            "row": 0,
            "column": 26
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 4
          },
          "end": {
            "row": 12,
            "column": 16
          },
          "text": "\"\"\"Check if an extension attribute is writable.\n    ext (tuple): The (default, getter, setter, method) tuple available  via\n        {Doc,Span,Token}.get_extension.\n    RETURNS (bool): Whether the attribute is writable.\n    \"\"\"\n    default, method, getter, setter = ext\n    # Extension is writable if it has a setter (getter + setter), if it has a\n    # default value (or, if its default value is none, none of the other values\n    # should be set).\n    if setter is not None or default is not None or all(e is None for e in ext):\n        return True\n    return False",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 4
              },
              "end": {
                "row": 5,
                "column": 7
              },
              "text": "\"\"\"Check if an extension attribute is writable.\n    ext (tuple): The (default, getter, setter, method) tuple available  via\n        {Doc,Span,Token}.get_extension.\n    RETURNS (bool): Whether the attribute is writable.\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 4
                  },
                  "end": {
                    "row": 5,
                    "column": 7
                  },
                  "text": "\"\"\"Check if an extension attribute is writable.\n    ext (tuple): The (default, getter, setter, method) tuple available  via\n        {Doc,Span,Token}.get_extension.\n    RETURNS (bool): Whether the attribute is writable.\n    \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 4
                      },
                      "end": {
                        "row": 1,
                        "column": 7
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 7
                      },
                      "end": {
                        "row": 5,
                        "column": 4
                      },
                      "text": "Check if an extension attribute is writable.\n    ext (tuple): The (default, getter, setter, method) tuple available  via\n        {Doc,Span,Token}.get_extension.\n    RETURNS (bool): Whether the attribute is writable.\n    "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 5,
                        "column": 4
                      },
                      "end": {
                        "row": 5,
                        "column": 7
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 6,
                "column": 4
              },
              "end": {
                "row": 6,
                "column": 41
              },
              "text": "default, method, getter, setter = ext",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 6,
                    "column": 4
                  },
                  "end": {
                    "row": 6,
                    "column": 41
                  },
                  "text": "default, method, getter, setter = ext",
                  "children": [
                    {
                      "type": "pattern_list",
                      "start": {
                        "row": 6,
                        "column": 4
                      },
                      "end": {
                        "row": 6,
                        "column": 35
                      },
                      "text": "default, method, getter, setter",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 6,
                            "column": 4
                          },
                          "end": {
                            "row": 6,
                            "column": 11
                          },
                          "text": "default"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 6,
                            "column": 11
                          },
                          "end": {
                            "row": 6,
                            "column": 12
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 6,
                            "column": 13
                          },
                          "end": {
                            "row": 6,
                            "column": 19
                          },
                          "text": "method"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 6,
                            "column": 19
                          },
                          "end": {
                            "row": 6,
                            "column": 20
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 6,
                            "column": 21
                          },
                          "end": {
                            "row": 6,
                            "column": 27
                          },
                          "text": "getter"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 6,
                            "column": 27
                          },
                          "end": {
                            "row": 6,
                            "column": 28
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 6,
                            "column": 29
                          },
                          "end": {
                            "row": 6,
                            "column": 35
                          },
                          "text": "setter"
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 6,
                        "column": 36
                      },
                      "end": {
                        "row": 6,
                        "column": 37
                      },
                      "text": "="
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 6,
                        "column": 38
                      },
                      "end": {
                        "row": 6,
                        "column": 41
                      },
                      "text": "ext"
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 7,
                "column": 4
              },
              "end": {
                "row": 7,
                "column": 77
              },
              "text": "# Extension is writable if it has a setter (getter + setter), if it has a"
            },
            {
              "type": "comment",
              "start": {
                "row": 8,
                "column": 4
              },
              "end": {
                "row": 8,
                "column": 79
              },
              "text": "# default value (or, if its default value is none, none of the other values"
            },
            {
              "type": "comment",
              "start": {
                "row": 9,
                "column": 4
              },
              "end": {
                "row": 9,
                "column": 21
              },
              "text": "# should be set)."
            },
            {
              "type": "if_statement",
              "start": {
                "row": 10,
                "column": 4
              },
              "end": {
                "row": 11,
                "column": 19
              },
              "text": "if setter is not None or default is not None or all(e is None for e in ext):\n        return True",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 10,
                    "column": 4
                  },
                  "end": {
                    "row": 10,
                    "column": 6
                  },
                  "text": "if"
                },
                {
                  "type": "boolean_operator",
                  "start": {
                    "row": 10,
                    "column": 7
                  },
                  "end": {
                    "row": 10,
                    "column": 79
                  },
                  "text": "setter is not None or default is not None or all(e is None for e in ext)",
                  "children": [
                    {
                      "type": "boolean_operator",
                      "start": {
                        "row": 10,
                        "column": 7
                      },
                      "end": {
                        "row": 10,
                        "column": 48
                      },
                      "text": "setter is not None or default is not None",
                      "children": [
                        {
                          "type": "comparison_operator",
                          "start": {
                            "row": 10,
                            "column": 7
                          },
                          "end": {
                            "row": 10,
                            "column": 25
                          },
                          "text": "setter is not None",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 10,
                                "column": 7
                              },
                              "end": {
                                "row": 10,
                                "column": 13
                              },
                              "text": "setter"
                            },
                            {
                              "type": "is not",
                              "start": {
                                "row": 10,
                                "column": 14
                              },
                              "end": {
                                "row": 10,
                                "column": 16
                              },
                              "text": "is"
                            },
                            {
                              "type": "is not",
                              "start": {
                                "row": 10,
                                "column": 17
                              },
                              "end": {
                                "row": 10,
                                "column": 20
                              },
                              "text": "not"
                            },
                            {
                              "type": "none",
                              "start": {
                                "row": 10,
                                "column": 21
                              },
                              "end": {
                                "row": 10,
                                "column": 25
                              },
                              "text": "None"
                            }
                          ]
                        },
                        {
                          "type": "or",
                          "start": {
                            "row": 10,
                            "column": 26
                          },
                          "end": {
                            "row": 10,
                            "column": 28
                          },
                          "text": "or"
                        },
                        {
                          "type": "comparison_operator",
                          "start": {
                            "row": 10,
                            "column": 29
                          },
                          "end": {
                            "row": 10,
                            "column": 48
                          },
                          "text": "default is not None",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 10,
                                "column": 29
                              },
                              "end": {
                                "row": 10,
                                "column": 36
                              },
                              "text": "default"
                            },
                            {
                              "type": "is not",
                              "start": {
                                "row": 10,
                                "column": 37
                              },
                              "end": {
                                "row": 10,
                                "column": 39
                              },
                              "text": "is"
                            },
                            {
                              "type": "is not",
                              "start": {
                                "row": 10,
                                "column": 40
                              },
                              "end": {
                                "row": 10,
                                "column": 43
                              },
                              "text": "not"
                            },
                            {
                              "type": "none",
                              "start": {
                                "row": 10,
                                "column": 44
                              },
                              "end": {
                                "row": 10,
                                "column": 48
                              },
                              "text": "None"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "or",
                      "start": {
                        "row": 10,
                        "column": 49
                      },
                      "end": {
                        "row": 10,
                        "column": 51
                      },
                      "text": "or"
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 10,
                        "column": 52
                      },
                      "end": {
                        "row": 10,
                        "column": 79
                      },
                      "text": "all(e is None for e in ext)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 10,
                            "column": 52
                          },
                          "end": {
                            "row": 10,
                            "column": 55
                          },
                          "text": "all"
                        },
                        {
                          "type": "generator_expression",
                          "start": {
                            "row": 10,
                            "column": 55
                          },
                          "end": {
                            "row": 10,
                            "column": 79
                          },
                          "text": "(e is None for e in ext)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 10,
                                "column": 55
                              },
                              "end": {
                                "row": 10,
                                "column": 56
                              },
                              "text": "("
                            },
                            {
                              "type": "comparison_operator",
                              "start": {
                                "row": 10,
                                "column": 56
                              },
                              "end": {
                                "row": 10,
                                "column": 65
                              },
                              "text": "e is None",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 10,
                                    "column": 56
                                  },
                                  "end": {
                                    "row": 10,
                                    "column": 57
                                  },
                                  "text": "e"
                                },
                                {
                                  "type": "is",
                                  "start": {
                                    "row": 10,
                                    "column": 58
                                  },
                                  "end": {
                                    "row": 10,
                                    "column": 60
                                  },
                                  "text": "is"
                                },
                                {
                                  "type": "none",
                                  "start": {
                                    "row": 10,
                                    "column": 61
                                  },
                                  "end": {
                                    "row": 10,
                                    "column": 65
                                  },
                                  "text": "None"
                                }
                              ]
                            },
                            {
                              "type": "for_in_clause",
                              "start": {
                                "row": 10,
                                "column": 66
                              },
                              "end": {
                                "row": 10,
                                "column": 78
                              },
                              "text": "for e in ext",
                              "children": [
                                {
                                  "type": "for",
                                  "start": {
                                    "row": 10,
                                    "column": 66
                                  },
                                  "end": {
                                    "row": 10,
                                    "column": 69
                                  },
                                  "text": "for"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 10,
                                    "column": 70
                                  },
                                  "end": {
                                    "row": 10,
                                    "column": 71
                                  },
                                  "text": "e"
                                },
                                {
                                  "type": "in",
                                  "start": {
                                    "row": 10,
                                    "column": 72
                                  },
                                  "end": {
                                    "row": 10,
                                    "column": 74
                                  },
                                  "text": "in"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 10,
                                    "column": 75
                                  },
                                  "end": {
                                    "row": 10,
                                    "column": 78
                                  },
                                  "text": "ext"
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 10,
                                "column": 78
                              },
                              "end": {
                                "row": 10,
                                "column": 79
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 10,
                    "column": 79
                  },
                  "end": {
                    "row": 10,
                    "column": 80
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 11,
                    "column": 8
                  },
                  "end": {
                    "row": 11,
                    "column": 19
                  },
                  "text": "return True",
                  "children": [
                    {
                      "type": "return_statement",
                      "start": {
                        "row": 11,
                        "column": 8
                      },
                      "end": {
                        "row": 11,
                        "column": 19
                      },
                      "text": "return True",
                      "children": [
                        {
                          "type": "return",
                          "start": {
                            "row": 11,
                            "column": 8
                          },
                          "end": {
                            "row": 11,
                            "column": 14
                          },
                          "text": "return"
                        },
                        {
                          "type": "true",
                          "start": {
                            "row": 11,
                            "column": 15
                          },
                          "end": {
                            "row": 11,
                            "column": 19
                          },
                          "text": "True"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 12,
                "column": 4
              },
              "end": {
                "row": 12,
                "column": 16
              },
              "text": "return False",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 12,
                    "column": 4
                  },
                  "end": {
                    "row": 12,
                    "column": 10
                  },
                  "text": "return"
                },
                {
                  "type": "false",
                  "start": {
                    "row": 12,
                    "column": 11
                  },
                  "end": {
                    "row": 12,
                    "column": 16
                  },
                  "text": "False"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}