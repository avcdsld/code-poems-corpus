{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 23,
    "column": 95
  },
  "text": "def exponentialRDD(sc, mean, size, numPartitions=None, seed=None):\n        \"\"\"\n        Generates an RDD comprised of i.i.d. samples from the Exponential\n        distribution with the input mean.\n\n        :param sc: SparkContext used to create the RDD.\n        :param mean: Mean, or 1 / lambda, for the Exponential distribution.\n        :param size: Size of the RDD.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`).\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of float comprised of i.i.d. samples ~ Exp(mean).\n\n        >>> mean = 2.0\n        >>> x = RandomRDDs.exponentialRDD(sc, mean, 1000, seed=2)\n        >>> stats = x.stats()\n        >>> stats.count()\n        1000\n        >>> abs(stats.mean() - mean) < 0.5\n        True\n        >>> from math import sqrt\n        >>> abs(stats.stdev() - sqrt(mean)) < 0.5\n        True\n        \"\"\"\n        return callMLlibFunc(\"exponentialRDD\", sc._jsc, float(mean), size, numPartitions, seed)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 23,
        "column": 95
      },
      "text": "def exponentialRDD(sc, mean, size, numPartitions=None, seed=None):\n        \"\"\"\n        Generates an RDD comprised of i.i.d. samples from the Exponential\n        distribution with the input mean.\n\n        :param sc: SparkContext used to create the RDD.\n        :param mean: Mean, or 1 / lambda, for the Exponential distribution.\n        :param size: Size of the RDD.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`).\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of float comprised of i.i.d. samples ~ Exp(mean).\n\n        >>> mean = 2.0\n        >>> x = RandomRDDs.exponentialRDD(sc, mean, 1000, seed=2)\n        >>> stats = x.stats()\n        >>> stats.count()\n        1000\n        >>> abs(stats.mean() - mean) < 0.5\n        True\n        >>> from math import sqrt\n        >>> abs(stats.stdev() - sqrt(mean)) < 0.5\n        True\n        \"\"\"\n        return callMLlibFunc(\"exponentialRDD\", sc._jsc, float(mean), size, numPartitions, seed)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 18
          },
          "text": "exponentialRDD"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 18
          },
          "end": {
            "row": 0,
            "column": 65
          },
          "text": "(sc, mean, size, numPartitions=None, seed=None)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 18
              },
              "end": {
                "row": 0,
                "column": 19
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 19
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": "sc"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 21
              },
              "end": {
                "row": 0,
                "column": 22
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 23
              },
              "end": {
                "row": 0,
                "column": 27
              },
              "text": "mean"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 27
              },
              "end": {
                "row": 0,
                "column": 28
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 29
              },
              "end": {
                "row": 0,
                "column": 33
              },
              "text": "size"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 33
              },
              "end": {
                "row": 0,
                "column": 34
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 35
              },
              "end": {
                "row": 0,
                "column": 53
              },
              "text": "numPartitions=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 35
                  },
                  "end": {
                    "row": 0,
                    "column": 48
                  },
                  "text": "numPartitions"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 48
                  },
                  "end": {
                    "row": 0,
                    "column": 49
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 49
                  },
                  "end": {
                    "row": 0,
                    "column": 53
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 53
              },
              "end": {
                "row": 0,
                "column": 54
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 55
              },
              "end": {
                "row": 0,
                "column": 64
              },
              "text": "seed=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 55
                  },
                  "end": {
                    "row": 0,
                    "column": 59
                  },
                  "text": "seed"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 59
                  },
                  "end": {
                    "row": 0,
                    "column": 60
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 60
                  },
                  "end": {
                    "row": 0,
                    "column": 64
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 64
              },
              "end": {
                "row": 0,
                "column": 65
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 65
          },
          "end": {
            "row": 0,
            "column": 66
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 23,
            "column": 95
          },
          "text": "\"\"\"\n        Generates an RDD comprised of i.i.d. samples from the Exponential\n        distribution with the input mean.\n\n        :param sc: SparkContext used to create the RDD.\n        :param mean: Mean, or 1 / lambda, for the Exponential distribution.\n        :param size: Size of the RDD.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`).\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of float comprised of i.i.d. samples ~ Exp(mean).\n\n        >>> mean = 2.0\n        >>> x = RandomRDDs.exponentialRDD(sc, mean, 1000, seed=2)\n        >>> stats = x.stats()\n        >>> stats.count()\n        1000\n        >>> abs(stats.mean() - mean) < 0.5\n        True\n        >>> from math import sqrt\n        >>> abs(stats.stdev() - sqrt(mean)) < 0.5\n        True\n        \"\"\"\n        return callMLlibFunc(\"exponentialRDD\", sc._jsc, float(mean), size, numPartitions, seed)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 22,
                "column": 11
              },
              "text": "\"\"\"\n        Generates an RDD comprised of i.i.d. samples from the Exponential\n        distribution with the input mean.\n\n        :param sc: SparkContext used to create the RDD.\n        :param mean: Mean, or 1 / lambda, for the Exponential distribution.\n        :param size: Size of the RDD.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`).\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of float comprised of i.i.d. samples ~ Exp(mean).\n\n        >>> mean = 2.0\n        >>> x = RandomRDDs.exponentialRDD(sc, mean, 1000, seed=2)\n        >>> stats = x.stats()\n        >>> stats.count()\n        1000\n        >>> abs(stats.mean() - mean) < 0.5\n        True\n        >>> from math import sqrt\n        >>> abs(stats.stdev() - sqrt(mean)) < 0.5\n        True\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 22,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Generates an RDD comprised of i.i.d. samples from the Exponential\n        distribution with the input mean.\n\n        :param sc: SparkContext used to create the RDD.\n        :param mean: Mean, or 1 / lambda, for the Exponential distribution.\n        :param size: Size of the RDD.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`).\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of float comprised of i.i.d. samples ~ Exp(mean).\n\n        >>> mean = 2.0\n        >>> x = RandomRDDs.exponentialRDD(sc, mean, 1000, seed=2)\n        >>> stats = x.stats()\n        >>> stats.count()\n        1000\n        >>> abs(stats.mean() - mean) < 0.5\n        True\n        >>> from math import sqrt\n        >>> abs(stats.stdev() - sqrt(mean)) < 0.5\n        True\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 22,
                        "column": 8
                      },
                      "text": "\n        Generates an RDD comprised of i.i.d. samples from the Exponential\n        distribution with the input mean.\n\n        :param sc: SparkContext used to create the RDD.\n        :param mean: Mean, or 1 / lambda, for the Exponential distribution.\n        :param size: Size of the RDD.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`).\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of float comprised of i.i.d. samples ~ Exp(mean).\n\n        >>> mean = 2.0\n        >>> x = RandomRDDs.exponentialRDD(sc, mean, 1000, seed=2)\n        >>> stats = x.stats()\n        >>> stats.count()\n        1000\n        >>> abs(stats.mean() - mean) < 0.5\n        True\n        >>> from math import sqrt\n        >>> abs(stats.stdev() - sqrt(mean)) < 0.5\n        True\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 22,
                        "column": 8
                      },
                      "end": {
                        "row": 22,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 23,
                "column": 8
              },
              "end": {
                "row": 23,
                "column": 95
              },
              "text": "return callMLlibFunc(\"exponentialRDD\", sc._jsc, float(mean), size, numPartitions, seed)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 23,
                    "column": 8
                  },
                  "end": {
                    "row": 23,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 23,
                    "column": 15
                  },
                  "end": {
                    "row": 23,
                    "column": 95
                  },
                  "text": "callMLlibFunc(\"exponentialRDD\", sc._jsc, float(mean), size, numPartitions, seed)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 23,
                        "column": 15
                      },
                      "end": {
                        "row": 23,
                        "column": 28
                      },
                      "text": "callMLlibFunc"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 23,
                        "column": 28
                      },
                      "end": {
                        "row": 23,
                        "column": 95
                      },
                      "text": "(\"exponentialRDD\", sc._jsc, float(mean), size, numPartitions, seed)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 23,
                            "column": 28
                          },
                          "end": {
                            "row": 23,
                            "column": 29
                          },
                          "text": "("
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 23,
                            "column": 29
                          },
                          "end": {
                            "row": 23,
                            "column": 45
                          },
                          "text": "\"exponentialRDD\"",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 23,
                                "column": 29
                              },
                              "end": {
                                "row": 23,
                                "column": 30
                              },
                              "text": "\""
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 23,
                                "column": 30
                              },
                              "end": {
                                "row": 23,
                                "column": 44
                              },
                              "text": "exponentialRDD"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 23,
                                "column": 44
                              },
                              "end": {
                                "row": 23,
                                "column": 45
                              },
                              "text": "\""
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 23,
                            "column": 45
                          },
                          "end": {
                            "row": 23,
                            "column": 46
                          },
                          "text": ","
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 23,
                            "column": 47
                          },
                          "end": {
                            "row": 23,
                            "column": 54
                          },
                          "text": "sc._jsc",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 47
                              },
                              "end": {
                                "row": 23,
                                "column": 49
                              },
                              "text": "sc"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 23,
                                "column": 49
                              },
                              "end": {
                                "row": 23,
                                "column": 50
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 50
                              },
                              "end": {
                                "row": 23,
                                "column": 54
                              },
                              "text": "_jsc"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 23,
                            "column": 54
                          },
                          "end": {
                            "row": 23,
                            "column": 55
                          },
                          "text": ","
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 23,
                            "column": 56
                          },
                          "end": {
                            "row": 23,
                            "column": 67
                          },
                          "text": "float(mean)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 56
                              },
                              "end": {
                                "row": 23,
                                "column": 61
                              },
                              "text": "float"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 23,
                                "column": 61
                              },
                              "end": {
                                "row": 23,
                                "column": 67
                              },
                              "text": "(mean)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 23,
                                    "column": 61
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 62
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 23,
                                    "column": 62
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 66
                                  },
                                  "text": "mean"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 23,
                                    "column": 66
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 67
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 23,
                            "column": 67
                          },
                          "end": {
                            "row": 23,
                            "column": 68
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 23,
                            "column": 69
                          },
                          "end": {
                            "row": 23,
                            "column": 73
                          },
                          "text": "size"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 23,
                            "column": 73
                          },
                          "end": {
                            "row": 23,
                            "column": 74
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 23,
                            "column": 75
                          },
                          "end": {
                            "row": 23,
                            "column": 88
                          },
                          "text": "numPartitions"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 23,
                            "column": 88
                          },
                          "end": {
                            "row": 23,
                            "column": 89
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 23,
                            "column": 90
                          },
                          "end": {
                            "row": 23,
                            "column": 94
                          },
                          "text": "seed"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 23,
                            "column": 94
                          },
                          "end": {
                            "row": 23,
                            "column": 95
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}