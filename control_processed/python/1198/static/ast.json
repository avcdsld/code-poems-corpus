{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 127,
    "column": 27
  },
  "text": "def query(self, expr, inplace=False, **kwargs):\n        \"\"\"\n        Query the columns of a DataFrame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : str\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n\n            .. versionadded:: 0.25.0\n\n            You can refer to column names that contain spaces by surrounding\n            them in backticks.\n\n            For example, if one of your columns is called ``a a`` and you want\n            to sum it with ``b``, your query should be ```a a` + b``.\n\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy.\n        **kwargs\n            See the documentation for :func:`eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n            .. versionadded:: 0.18.0\n\n        Returns\n        -------\n        DataFrame\n            DataFrame resulting from the provided query expression.\n\n        See Also\n        --------\n        eval : Evaluate a string describing operations on\n            DataFrame columns.\n        DataFrame.eval : Evaluate a string describing operations on\n            DataFrame columns.\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6),\n        ...                    'B': range(10, 0, -2),\n        ...                    'C C': range(10, 5, -1)})\n        >>> df\n           A   B  C C\n        0  1  10   10\n        1  2   8    9\n        2  3   6    8\n        3  4   4    7\n        4  5   2    6\n        >>> df.query('A > B')\n           A  B  C C\n        4  5  2    6\n\n        The previous expression is equivalent to\n\n        >>> df[df.A > df.B]\n           A  B  C C\n        4  5  2    6\n\n        For columns with spaces in their name, you can use backtick quoting.\n\n        >>> df.query('B == `C C`')\n           A   B  C C\n        0  1  10   10\n\n        The previous expression is equivalent to\n\n        >>> df[df.B == df['C C']]\n           A   B  C C\n        0  1  10   10\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(expr, str):\n            msg = \"expr must be a string to be evaluated, {0} given\"\n            raise ValueError(msg.format(type(expr)))\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        kwargs['target'] = None\n        res = self.eval(expr, **kwargs)\n\n        try:\n            new_data = self.loc[res]\n        except ValueError:\n            # when res is multi-dimensional loc raises, but this is sometimes a\n            # valid query\n            new_data = self[res]\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return new_data",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 127,
        "column": 27
      },
      "text": "def query(self, expr, inplace=False, **kwargs):\n        \"\"\"\n        Query the columns of a DataFrame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : str\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n\n            .. versionadded:: 0.25.0\n\n            You can refer to column names that contain spaces by surrounding\n            them in backticks.\n\n            For example, if one of your columns is called ``a a`` and you want\n            to sum it with ``b``, your query should be ```a a` + b``.\n\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy.\n        **kwargs\n            See the documentation for :func:`eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n            .. versionadded:: 0.18.0\n\n        Returns\n        -------\n        DataFrame\n            DataFrame resulting from the provided query expression.\n\n        See Also\n        --------\n        eval : Evaluate a string describing operations on\n            DataFrame columns.\n        DataFrame.eval : Evaluate a string describing operations on\n            DataFrame columns.\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6),\n        ...                    'B': range(10, 0, -2),\n        ...                    'C C': range(10, 5, -1)})\n        >>> df\n           A   B  C C\n        0  1  10   10\n        1  2   8    9\n        2  3   6    8\n        3  4   4    7\n        4  5   2    6\n        >>> df.query('A > B')\n           A  B  C C\n        4  5  2    6\n\n        The previous expression is equivalent to\n\n        >>> df[df.A > df.B]\n           A  B  C C\n        4  5  2    6\n\n        For columns with spaces in their name, you can use backtick quoting.\n\n        >>> df.query('B == `C C`')\n           A   B  C C\n        0  1  10   10\n\n        The previous expression is equivalent to\n\n        >>> df[df.B == df['C C']]\n           A   B  C C\n        0  1  10   10\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(expr, str):\n            msg = \"expr must be a string to be evaluated, {0} given\"\n            raise ValueError(msg.format(type(expr)))\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        kwargs['target'] = None\n        res = self.eval(expr, **kwargs)\n\n        try:\n            new_data = self.loc[res]\n        except ValueError:\n            # when res is multi-dimensional loc raises, but this is sometimes a\n            # valid query\n            new_data = self[res]\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return new_data",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 9
          },
          "text": "query"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 9
          },
          "end": {
            "row": 0,
            "column": 46
          },
          "text": "(self, expr, inplace=False, **kwargs)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 9
              },
              "end": {
                "row": 0,
                "column": 10
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 10
              },
              "end": {
                "row": 0,
                "column": 14
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 14
              },
              "end": {
                "row": 0,
                "column": 15
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 20
              },
              "text": "expr"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 22
              },
              "end": {
                "row": 0,
                "column": 35
              },
              "text": "inplace=False",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 22
                  },
                  "end": {
                    "row": 0,
                    "column": 29
                  },
                  "text": "inplace"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 29
                  },
                  "end": {
                    "row": 0,
                    "column": 30
                  },
                  "text": "="
                },
                {
                  "type": "false",
                  "start": {
                    "row": 0,
                    "column": 30
                  },
                  "end": {
                    "row": 0,
                    "column": 35
                  },
                  "text": "False"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 35
              },
              "end": {
                "row": 0,
                "column": 36
              },
              "text": ","
            },
            {
              "type": "dictionary_splat_pattern",
              "start": {
                "row": 0,
                "column": 37
              },
              "end": {
                "row": 0,
                "column": 45
              },
              "text": "**kwargs",
              "children": [
                {
                  "type": "**",
                  "start": {
                    "row": 0,
                    "column": 37
                  },
                  "end": {
                    "row": 0,
                    "column": 39
                  },
                  "text": "**"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 39
                  },
                  "end": {
                    "row": 0,
                    "column": 45
                  },
                  "text": "kwargs"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 45
              },
              "end": {
                "row": 0,
                "column": 46
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 46
          },
          "end": {
            "row": 0,
            "column": 47
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 127,
            "column": 27
          },
          "text": "\"\"\"\n        Query the columns of a DataFrame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : str\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n\n            .. versionadded:: 0.25.0\n\n            You can refer to column names that contain spaces by surrounding\n            them in backticks.\n\n            For example, if one of your columns is called ``a a`` and you want\n            to sum it with ``b``, your query should be ```a a` + b``.\n\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy.\n        **kwargs\n            See the documentation for :func:`eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n            .. versionadded:: 0.18.0\n\n        Returns\n        -------\n        DataFrame\n            DataFrame resulting from the provided query expression.\n\n        See Also\n        --------\n        eval : Evaluate a string describing operations on\n            DataFrame columns.\n        DataFrame.eval : Evaluate a string describing operations on\n            DataFrame columns.\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6),\n        ...                    'B': range(10, 0, -2),\n        ...                    'C C': range(10, 5, -1)})\n        >>> df\n           A   B  C C\n        0  1  10   10\n        1  2   8    9\n        2  3   6    8\n        3  4   4    7\n        4  5   2    6\n        >>> df.query('A > B')\n           A  B  C C\n        4  5  2    6\n\n        The previous expression is equivalent to\n\n        >>> df[df.A > df.B]\n           A  B  C C\n        4  5  2    6\n\n        For columns with spaces in their name, you can use backtick quoting.\n\n        >>> df.query('B == `C C`')\n           A   B  C C\n        0  1  10   10\n\n        The previous expression is equivalent to\n\n        >>> df[df.B == df['C C']]\n           A   B  C C\n        0  1  10   10\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(expr, str):\n            msg = \"expr must be a string to be evaluated, {0} given\"\n            raise ValueError(msg.format(type(expr)))\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        kwargs['target'] = None\n        res = self.eval(expr, **kwargs)\n\n        try:\n            new_data = self.loc[res]\n        except ValueError:\n            # when res is multi-dimensional loc raises, but this is sometimes a\n            # valid query\n            new_data = self[res]\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return new_data",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 108,
                "column": 11
              },
              "text": "\"\"\"\n        Query the columns of a DataFrame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : str\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n\n            .. versionadded:: 0.25.0\n\n            You can refer to column names that contain spaces by surrounding\n            them in backticks.\n\n            For example, if one of your columns is called ``a a`` and you want\n            to sum it with ``b``, your query should be ```a a` + b``.\n\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy.\n        **kwargs\n            See the documentation for :func:`eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n            .. versionadded:: 0.18.0\n\n        Returns\n        -------\n        DataFrame\n            DataFrame resulting from the provided query expression.\n\n        See Also\n        --------\n        eval : Evaluate a string describing operations on\n            DataFrame columns.\n        DataFrame.eval : Evaluate a string describing operations on\n            DataFrame columns.\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6),\n        ...                    'B': range(10, 0, -2),\n        ...                    'C C': range(10, 5, -1)})\n        >>> df\n           A   B  C C\n        0  1  10   10\n        1  2   8    9\n        2  3   6    8\n        3  4   4    7\n        4  5   2    6\n        >>> df.query('A > B')\n           A  B  C C\n        4  5  2    6\n\n        The previous expression is equivalent to\n\n        >>> df[df.A > df.B]\n           A  B  C C\n        4  5  2    6\n\n        For columns with spaces in their name, you can use backtick quoting.\n\n        >>> df.query('B == `C C`')\n           A   B  C C\n        0  1  10   10\n\n        The previous expression is equivalent to\n\n        >>> df[df.B == df['C C']]\n           A   B  C C\n        0  1  10   10\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 108,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Query the columns of a DataFrame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : str\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n\n            .. versionadded:: 0.25.0\n\n            You can refer to column names that contain spaces by surrounding\n            them in backticks.\n\n            For example, if one of your columns is called ``a a`` and you want\n            to sum it with ``b``, your query should be ```a a` + b``.\n\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy.\n        **kwargs\n            See the documentation for :func:`eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n            .. versionadded:: 0.18.0\n\n        Returns\n        -------\n        DataFrame\n            DataFrame resulting from the provided query expression.\n\n        See Also\n        --------\n        eval : Evaluate a string describing operations on\n            DataFrame columns.\n        DataFrame.eval : Evaluate a string describing operations on\n            DataFrame columns.\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6),\n        ...                    'B': range(10, 0, -2),\n        ...                    'C C': range(10, 5, -1)})\n        >>> df\n           A   B  C C\n        0  1  10   10\n        1  2   8    9\n        2  3   6    8\n        3  4   4    7\n        4  5   2    6\n        >>> df.query('A > B')\n           A  B  C C\n        4  5  2    6\n\n        The previous expression is equivalent to\n\n        >>> df[df.A > df.B]\n           A  B  C C\n        4  5  2    6\n\n        For columns with spaces in their name, you can use backtick quoting.\n\n        >>> df.query('B == `C C`')\n           A   B  C C\n        0  1  10   10\n\n        The previous expression is equivalent to\n\n        >>> df[df.B == df['C C']]\n           A   B  C C\n        0  1  10   10\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 108,
                        "column": 8
                      },
                      "text": "\n        Query the columns of a DataFrame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : str\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n\n            .. versionadded:: 0.25.0\n\n            You can refer to column names that contain spaces by surrounding\n            them in backticks.\n\n            For example, if one of your columns is called ``a a`` and you want\n            to sum it with ``b``, your query should be ```a a` + b``.\n\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy.\n        **kwargs\n            See the documentation for :func:`eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n            .. versionadded:: 0.18.0\n\n        Returns\n        -------\n        DataFrame\n            DataFrame resulting from the provided query expression.\n\n        See Also\n        --------\n        eval : Evaluate a string describing operations on\n            DataFrame columns.\n        DataFrame.eval : Evaluate a string describing operations on\n            DataFrame columns.\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6),\n        ...                    'B': range(10, 0, -2),\n        ...                    'C C': range(10, 5, -1)})\n        >>> df\n           A   B  C C\n        0  1  10   10\n        1  2   8    9\n        2  3   6    8\n        3  4   4    7\n        4  5   2    6\n        >>> df.query('A > B')\n           A  B  C C\n        4  5  2    6\n\n        The previous expression is equivalent to\n\n        >>> df[df.A > df.B]\n           A  B  C C\n        4  5  2    6\n\n        For columns with spaces in their name, you can use backtick quoting.\n\n        >>> df.query('B == `C C`')\n           A   B  C C\n        0  1  10   10\n\n        The previous expression is equivalent to\n\n        >>> df[df.B == df['C C']]\n           A   B  C C\n        0  1  10   10\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 108,
                        "column": 8
                      },
                      "end": {
                        "row": 108,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 109,
                "column": 8
              },
              "end": {
                "row": 109,
                "column": 57
              },
              "text": "inplace = validate_bool_kwarg(inplace, 'inplace')",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 109,
                    "column": 8
                  },
                  "end": {
                    "row": 109,
                    "column": 57
                  },
                  "text": "inplace = validate_bool_kwarg(inplace, 'inplace')",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 109,
                        "column": 8
                      },
                      "end": {
                        "row": 109,
                        "column": 15
                      },
                      "text": "inplace"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 109,
                        "column": 16
                      },
                      "end": {
                        "row": 109,
                        "column": 17
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 109,
                        "column": 18
                      },
                      "end": {
                        "row": 109,
                        "column": 57
                      },
                      "text": "validate_bool_kwarg(inplace, 'inplace')",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 109,
                            "column": 18
                          },
                          "end": {
                            "row": 109,
                            "column": 37
                          },
                          "text": "validate_bool_kwarg"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 109,
                            "column": 37
                          },
                          "end": {
                            "row": 109,
                            "column": 57
                          },
                          "text": "(inplace, 'inplace')",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 109,
                                "column": 37
                              },
                              "end": {
                                "row": 109,
                                "column": 38
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 109,
                                "column": 38
                              },
                              "end": {
                                "row": 109,
                                "column": 45
                              },
                              "text": "inplace"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 109,
                                "column": 45
                              },
                              "end": {
                                "row": 109,
                                "column": 46
                              },
                              "text": ","
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 109,
                                "column": 47
                              },
                              "end": {
                                "row": 109,
                                "column": 56
                              },
                              "text": "'inplace'",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 109,
                                    "column": 47
                                  },
                                  "end": {
                                    "row": 109,
                                    "column": 48
                                  },
                                  "text": "'"
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 109,
                                    "column": 48
                                  },
                                  "end": {
                                    "row": 109,
                                    "column": 55
                                  },
                                  "text": "inplace"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 109,
                                    "column": 55
                                  },
                                  "end": {
                                    "row": 109,
                                    "column": 56
                                  },
                                  "text": "'"
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 109,
                                "column": 56
                              },
                              "end": {
                                "row": 109,
                                "column": 57
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 110,
                "column": 8
              },
              "end": {
                "row": 112,
                "column": 52
              },
              "text": "if not isinstance(expr, str):\n            msg = \"expr must be a string to be evaluated, {0} given\"\n            raise ValueError(msg.format(type(expr)))",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 110,
                    "column": 8
                  },
                  "end": {
                    "row": 110,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "not_operator",
                  "start": {
                    "row": 110,
                    "column": 11
                  },
                  "end": {
                    "row": 110,
                    "column": 36
                  },
                  "text": "not isinstance(expr, str)",
                  "children": [
                    {
                      "type": "not",
                      "start": {
                        "row": 110,
                        "column": 11
                      },
                      "end": {
                        "row": 110,
                        "column": 14
                      },
                      "text": "not"
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 110,
                        "column": 15
                      },
                      "end": {
                        "row": 110,
                        "column": 36
                      },
                      "text": "isinstance(expr, str)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 110,
                            "column": 15
                          },
                          "end": {
                            "row": 110,
                            "column": 25
                          },
                          "text": "isinstance"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 110,
                            "column": 25
                          },
                          "end": {
                            "row": 110,
                            "column": 36
                          },
                          "text": "(expr, str)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 110,
                                "column": 25
                              },
                              "end": {
                                "row": 110,
                                "column": 26
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 110,
                                "column": 26
                              },
                              "end": {
                                "row": 110,
                                "column": 30
                              },
                              "text": "expr"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 110,
                                "column": 30
                              },
                              "end": {
                                "row": 110,
                                "column": 31
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 110,
                                "column": 32
                              },
                              "end": {
                                "row": 110,
                                "column": 35
                              },
                              "text": "str"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 110,
                                "column": 35
                              },
                              "end": {
                                "row": 110,
                                "column": 36
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 110,
                    "column": 36
                  },
                  "end": {
                    "row": 110,
                    "column": 37
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 111,
                    "column": 12
                  },
                  "end": {
                    "row": 112,
                    "column": 52
                  },
                  "text": "msg = \"expr must be a string to be evaluated, {0} given\"\n            raise ValueError(msg.format(type(expr)))",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 111,
                        "column": 12
                      },
                      "end": {
                        "row": 111,
                        "column": 68
                      },
                      "text": "msg = \"expr must be a string to be evaluated, {0} given\"",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 111,
                            "column": 12
                          },
                          "end": {
                            "row": 111,
                            "column": 68
                          },
                          "text": "msg = \"expr must be a string to be evaluated, {0} given\"",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 111,
                                "column": 12
                              },
                              "end": {
                                "row": 111,
                                "column": 15
                              },
                              "text": "msg"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 111,
                                "column": 16
                              },
                              "end": {
                                "row": 111,
                                "column": 17
                              },
                              "text": "="
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 111,
                                "column": 18
                              },
                              "end": {
                                "row": 111,
                                "column": 68
                              },
                              "text": "\"expr must be a string to be evaluated, {0} given\"",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 111,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 111,
                                    "column": 19
                                  },
                                  "text": "\""
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 111,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 111,
                                    "column": 67
                                  },
                                  "text": "expr must be a string to be evaluated, {0} given"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 111,
                                    "column": 67
                                  },
                                  "end": {
                                    "row": 111,
                                    "column": 68
                                  },
                                  "text": "\""
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "raise_statement",
                      "start": {
                        "row": 112,
                        "column": 12
                      },
                      "end": {
                        "row": 112,
                        "column": 52
                      },
                      "text": "raise ValueError(msg.format(type(expr)))",
                      "children": [
                        {
                          "type": "raise",
                          "start": {
                            "row": 112,
                            "column": 12
                          },
                          "end": {
                            "row": 112,
                            "column": 17
                          },
                          "text": "raise"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 112,
                            "column": 18
                          },
                          "end": {
                            "row": 112,
                            "column": 52
                          },
                          "text": "ValueError(msg.format(type(expr)))",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 112,
                                "column": 18
                              },
                              "end": {
                                "row": 112,
                                "column": 28
                              },
                              "text": "ValueError"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 112,
                                "column": 28
                              },
                              "end": {
                                "row": 112,
                                "column": 52
                              },
                              "text": "(msg.format(type(expr)))",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 112,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 112,
                                    "column": 29
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 112,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 112,
                                    "column": 51
                                  },
                                  "text": "msg.format(type(expr))",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 112,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 112,
                                        "column": 39
                                      },
                                      "text": "msg.format",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 112,
                                            "column": 29
                                          },
                                          "end": {
                                            "row": 112,
                                            "column": 32
                                          },
                                          "text": "msg"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 112,
                                            "column": 32
                                          },
                                          "end": {
                                            "row": 112,
                                            "column": 33
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 112,
                                            "column": 33
                                          },
                                          "end": {
                                            "row": 112,
                                            "column": 39
                                          },
                                          "text": "format"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 112,
                                        "column": 39
                                      },
                                      "end": {
                                        "row": 112,
                                        "column": 51
                                      },
                                      "text": "(type(expr))",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 112,
                                            "column": 39
                                          },
                                          "end": {
                                            "row": 112,
                                            "column": 40
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "call",
                                          "start": {
                                            "row": 112,
                                            "column": 40
                                          },
                                          "end": {
                                            "row": 112,
                                            "column": 50
                                          },
                                          "text": "type(expr)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 112,
                                                "column": 40
                                              },
                                              "end": {
                                                "row": 112,
                                                "column": 44
                                              },
                                              "text": "type"
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 112,
                                                "column": 44
                                              },
                                              "end": {
                                                "row": 112,
                                                "column": 50
                                              },
                                              "text": "(expr)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 112,
                                                    "column": 44
                                                  },
                                                  "end": {
                                                    "row": 112,
                                                    "column": 45
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 112,
                                                    "column": 45
                                                  },
                                                  "end": {
                                                    "row": 112,
                                                    "column": 49
                                                  },
                                                  "text": "expr"
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 112,
                                                    "column": 49
                                                  },
                                                  "end": {
                                                    "row": 112,
                                                    "column": 50
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 112,
                                            "column": 50
                                          },
                                          "end": {
                                            "row": 112,
                                            "column": 51
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 112,
                                    "column": 51
                                  },
                                  "end": {
                                    "row": 112,
                                    "column": 52
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 113,
                "column": 8
              },
              "end": {
                "row": 113,
                "column": 52
              },
              "text": "kwargs['level'] = kwargs.pop('level', 0) + 1",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 113,
                    "column": 8
                  },
                  "end": {
                    "row": 113,
                    "column": 52
                  },
                  "text": "kwargs['level'] = kwargs.pop('level', 0) + 1",
                  "children": [
                    {
                      "type": "subscript",
                      "start": {
                        "row": 113,
                        "column": 8
                      },
                      "end": {
                        "row": 113,
                        "column": 23
                      },
                      "text": "kwargs['level']",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 113,
                            "column": 8
                          },
                          "end": {
                            "row": 113,
                            "column": 14
                          },
                          "text": "kwargs"
                        },
                        {
                          "type": "[",
                          "start": {
                            "row": 113,
                            "column": 14
                          },
                          "end": {
                            "row": 113,
                            "column": 15
                          },
                          "text": "["
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 113,
                            "column": 15
                          },
                          "end": {
                            "row": 113,
                            "column": 22
                          },
                          "text": "'level'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 113,
                                "column": 15
                              },
                              "end": {
                                "row": 113,
                                "column": 16
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 113,
                                "column": 16
                              },
                              "end": {
                                "row": 113,
                                "column": 21
                              },
                              "text": "level"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 113,
                                "column": 21
                              },
                              "end": {
                                "row": 113,
                                "column": 22
                              },
                              "text": "'"
                            }
                          ]
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 113,
                            "column": 22
                          },
                          "end": {
                            "row": 113,
                            "column": 23
                          },
                          "text": "]"
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 113,
                        "column": 24
                      },
                      "end": {
                        "row": 113,
                        "column": 25
                      },
                      "text": "="
                    },
                    {
                      "type": "binary_operator",
                      "start": {
                        "row": 113,
                        "column": 26
                      },
                      "end": {
                        "row": 113,
                        "column": 52
                      },
                      "text": "kwargs.pop('level', 0) + 1",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 113,
                            "column": 26
                          },
                          "end": {
                            "row": 113,
                            "column": 48
                          },
                          "text": "kwargs.pop('level', 0)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 113,
                                "column": 26
                              },
                              "end": {
                                "row": 113,
                                "column": 36
                              },
                              "text": "kwargs.pop",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 113,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 113,
                                    "column": 32
                                  },
                                  "text": "kwargs"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 113,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 113,
                                    "column": 33
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 113,
                                    "column": 33
                                  },
                                  "end": {
                                    "row": 113,
                                    "column": 36
                                  },
                                  "text": "pop"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 113,
                                "column": 36
                              },
                              "end": {
                                "row": 113,
                                "column": 48
                              },
                              "text": "('level', 0)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 113,
                                    "column": 36
                                  },
                                  "end": {
                                    "row": 113,
                                    "column": 37
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 113,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 113,
                                    "column": 44
                                  },
                                  "text": "'level'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 113,
                                        "column": 37
                                      },
                                      "end": {
                                        "row": 113,
                                        "column": 38
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 113,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 113,
                                        "column": 43
                                      },
                                      "text": "level"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 113,
                                        "column": 43
                                      },
                                      "end": {
                                        "row": 113,
                                        "column": 44
                                      },
                                      "text": "'"
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 113,
                                    "column": 44
                                  },
                                  "end": {
                                    "row": 113,
                                    "column": 45
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "integer",
                                  "start": {
                                    "row": 113,
                                    "column": 46
                                  },
                                  "end": {
                                    "row": 113,
                                    "column": 47
                                  },
                                  "text": "0"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 113,
                                    "column": 47
                                  },
                                  "end": {
                                    "row": 113,
                                    "column": 48
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "+",
                          "start": {
                            "row": 113,
                            "column": 49
                          },
                          "end": {
                            "row": 113,
                            "column": 50
                          },
                          "text": "+"
                        },
                        {
                          "type": "integer",
                          "start": {
                            "row": 113,
                            "column": 51
                          },
                          "end": {
                            "row": 113,
                            "column": 52
                          },
                          "text": "1"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 114,
                "column": 8
              },
              "end": {
                "row": 114,
                "column": 31
              },
              "text": "kwargs['target'] = None",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 114,
                    "column": 8
                  },
                  "end": {
                    "row": 114,
                    "column": 31
                  },
                  "text": "kwargs['target'] = None",
                  "children": [
                    {
                      "type": "subscript",
                      "start": {
                        "row": 114,
                        "column": 8
                      },
                      "end": {
                        "row": 114,
                        "column": 24
                      },
                      "text": "kwargs['target']",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 114,
                            "column": 8
                          },
                          "end": {
                            "row": 114,
                            "column": 14
                          },
                          "text": "kwargs"
                        },
                        {
                          "type": "[",
                          "start": {
                            "row": 114,
                            "column": 14
                          },
                          "end": {
                            "row": 114,
                            "column": 15
                          },
                          "text": "["
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 114,
                            "column": 15
                          },
                          "end": {
                            "row": 114,
                            "column": 23
                          },
                          "text": "'target'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 114,
                                "column": 15
                              },
                              "end": {
                                "row": 114,
                                "column": 16
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 114,
                                "column": 16
                              },
                              "end": {
                                "row": 114,
                                "column": 22
                              },
                              "text": "target"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 114,
                                "column": 22
                              },
                              "end": {
                                "row": 114,
                                "column": 23
                              },
                              "text": "'"
                            }
                          ]
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 114,
                            "column": 23
                          },
                          "end": {
                            "row": 114,
                            "column": 24
                          },
                          "text": "]"
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 114,
                        "column": 25
                      },
                      "end": {
                        "row": 114,
                        "column": 26
                      },
                      "text": "="
                    },
                    {
                      "type": "none",
                      "start": {
                        "row": 114,
                        "column": 27
                      },
                      "end": {
                        "row": 114,
                        "column": 31
                      },
                      "text": "None"
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 115,
                "column": 8
              },
              "end": {
                "row": 115,
                "column": 39
              },
              "text": "res = self.eval(expr, **kwargs)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 115,
                    "column": 8
                  },
                  "end": {
                    "row": 115,
                    "column": 39
                  },
                  "text": "res = self.eval(expr, **kwargs)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 115,
                        "column": 8
                      },
                      "end": {
                        "row": 115,
                        "column": 11
                      },
                      "text": "res"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 115,
                        "column": 12
                      },
                      "end": {
                        "row": 115,
                        "column": 13
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 115,
                        "column": 14
                      },
                      "end": {
                        "row": 115,
                        "column": 39
                      },
                      "text": "self.eval(expr, **kwargs)",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 115,
                            "column": 14
                          },
                          "end": {
                            "row": 115,
                            "column": 23
                          },
                          "text": "self.eval",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 115,
                                "column": 14
                              },
                              "end": {
                                "row": 115,
                                "column": 18
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 115,
                                "column": 18
                              },
                              "end": {
                                "row": 115,
                                "column": 19
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 115,
                                "column": 19
                              },
                              "end": {
                                "row": 115,
                                "column": 23
                              },
                              "text": "eval"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 115,
                            "column": 23
                          },
                          "end": {
                            "row": 115,
                            "column": 39
                          },
                          "text": "(expr, **kwargs)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 115,
                                "column": 23
                              },
                              "end": {
                                "row": 115,
                                "column": 24
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 115,
                                "column": 24
                              },
                              "end": {
                                "row": 115,
                                "column": 28
                              },
                              "text": "expr"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 115,
                                "column": 28
                              },
                              "end": {
                                "row": 115,
                                "column": 29
                              },
                              "text": ","
                            },
                            {
                              "type": "dictionary_splat",
                              "start": {
                                "row": 115,
                                "column": 30
                              },
                              "end": {
                                "row": 115,
                                "column": 38
                              },
                              "text": "**kwargs",
                              "children": [
                                {
                                  "type": "**",
                                  "start": {
                                    "row": 115,
                                    "column": 30
                                  },
                                  "end": {
                                    "row": 115,
                                    "column": 32
                                  },
                                  "text": "**"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 115,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 115,
                                    "column": 38
                                  },
                                  "text": "kwargs"
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 115,
                                "column": 38
                              },
                              "end": {
                                "row": 115,
                                "column": 39
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "try_statement",
              "start": {
                "row": 117,
                "column": 8
              },
              "end": {
                "row": 122,
                "column": 32
              },
              "text": "try:\n            new_data = self.loc[res]\n        except ValueError:\n            # when res is multi-dimensional loc raises, but this is sometimes a\n            # valid query\n            new_data = self[res]",
              "children": [
                {
                  "type": "try",
                  "start": {
                    "row": 117,
                    "column": 8
                  },
                  "end": {
                    "row": 117,
                    "column": 11
                  },
                  "text": "try"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 117,
                    "column": 11
                  },
                  "end": {
                    "row": 117,
                    "column": 12
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 118,
                    "column": 12
                  },
                  "end": {
                    "row": 118,
                    "column": 36
                  },
                  "text": "new_data = self.loc[res]",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 118,
                        "column": 12
                      },
                      "end": {
                        "row": 118,
                        "column": 36
                      },
                      "text": "new_data = self.loc[res]",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 118,
                            "column": 12
                          },
                          "end": {
                            "row": 118,
                            "column": 36
                          },
                          "text": "new_data = self.loc[res]",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 118,
                                "column": 12
                              },
                              "end": {
                                "row": 118,
                                "column": 20
                              },
                              "text": "new_data"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 118,
                                "column": 21
                              },
                              "end": {
                                "row": 118,
                                "column": 22
                              },
                              "text": "="
                            },
                            {
                              "type": "subscript",
                              "start": {
                                "row": 118,
                                "column": 23
                              },
                              "end": {
                                "row": 118,
                                "column": 36
                              },
                              "text": "self.loc[res]",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 118,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 118,
                                    "column": 31
                                  },
                                  "text": "self.loc",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 118,
                                        "column": 23
                                      },
                                      "end": {
                                        "row": 118,
                                        "column": 27
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 118,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 118,
                                        "column": 28
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 118,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 118,
                                        "column": 31
                                      },
                                      "text": "loc"
                                    }
                                  ]
                                },
                                {
                                  "type": "[",
                                  "start": {
                                    "row": 118,
                                    "column": 31
                                  },
                                  "end": {
                                    "row": 118,
                                    "column": 32
                                  },
                                  "text": "["
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 118,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 118,
                                    "column": 35
                                  },
                                  "text": "res"
                                },
                                {
                                  "type": "]",
                                  "start": {
                                    "row": 118,
                                    "column": 35
                                  },
                                  "end": {
                                    "row": 118,
                                    "column": 36
                                  },
                                  "text": "]"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "except_clause",
                  "start": {
                    "row": 119,
                    "column": 8
                  },
                  "end": {
                    "row": 122,
                    "column": 32
                  },
                  "text": "except ValueError:\n            # when res is multi-dimensional loc raises, but this is sometimes a\n            # valid query\n            new_data = self[res]",
                  "children": [
                    {
                      "type": "except",
                      "start": {
                        "row": 119,
                        "column": 8
                      },
                      "end": {
                        "row": 119,
                        "column": 14
                      },
                      "text": "except"
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 119,
                        "column": 15
                      },
                      "end": {
                        "row": 119,
                        "column": 25
                      },
                      "text": "ValueError"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 119,
                        "column": 25
                      },
                      "end": {
                        "row": 119,
                        "column": 26
                      },
                      "text": ":"
                    },
                    {
                      "type": "comment",
                      "start": {
                        "row": 120,
                        "column": 12
                      },
                      "end": {
                        "row": 120,
                        "column": 79
                      },
                      "text": "# when res is multi-dimensional loc raises, but this is sometimes a"
                    },
                    {
                      "type": "comment",
                      "start": {
                        "row": 121,
                        "column": 12
                      },
                      "end": {
                        "row": 121,
                        "column": 25
                      },
                      "text": "# valid query"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 122,
                        "column": 12
                      },
                      "end": {
                        "row": 122,
                        "column": 32
                      },
                      "text": "new_data = self[res]",
                      "children": [
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 122,
                            "column": 12
                          },
                          "end": {
                            "row": 122,
                            "column": 32
                          },
                          "text": "new_data = self[res]",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 122,
                                "column": 12
                              },
                              "end": {
                                "row": 122,
                                "column": 32
                              },
                              "text": "new_data = self[res]",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 122,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 122,
                                    "column": 20
                                  },
                                  "text": "new_data"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 122,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 122,
                                    "column": 22
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "subscript",
                                  "start": {
                                    "row": 122,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 122,
                                    "column": 32
                                  },
                                  "text": "self[res]",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 122,
                                        "column": 23
                                      },
                                      "end": {
                                        "row": 122,
                                        "column": 27
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": "[",
                                      "start": {
                                        "row": 122,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 122,
                                        "column": 28
                                      },
                                      "text": "["
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 122,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 122,
                                        "column": 31
                                      },
                                      "text": "res"
                                    },
                                    {
                                      "type": "]",
                                      "start": {
                                        "row": 122,
                                        "column": 31
                                      },
                                      "end": {
                                        "row": 122,
                                        "column": 32
                                      },
                                      "text": "]"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 124,
                "column": 8
              },
              "end": {
                "row": 127,
                "column": 27
              },
              "text": "if inplace:\n            self._update_inplace(new_data)\n        else:\n            return new_data",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 124,
                    "column": 8
                  },
                  "end": {
                    "row": 124,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 124,
                    "column": 11
                  },
                  "end": {
                    "row": 124,
                    "column": 18
                  },
                  "text": "inplace"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 124,
                    "column": 18
                  },
                  "end": {
                    "row": 124,
                    "column": 19
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 125,
                    "column": 12
                  },
                  "end": {
                    "row": 125,
                    "column": 42
                  },
                  "text": "self._update_inplace(new_data)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 125,
                        "column": 12
                      },
                      "end": {
                        "row": 125,
                        "column": 42
                      },
                      "text": "self._update_inplace(new_data)",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 125,
                            "column": 12
                          },
                          "end": {
                            "row": 125,
                            "column": 42
                          },
                          "text": "self._update_inplace(new_data)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 125,
                                "column": 12
                              },
                              "end": {
                                "row": 125,
                                "column": 32
                              },
                              "text": "self._update_inplace",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 125,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 125,
                                    "column": 16
                                  },
                                  "text": "self"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 125,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 125,
                                    "column": 17
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 125,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 125,
                                    "column": 32
                                  },
                                  "text": "_update_inplace"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 125,
                                "column": 32
                              },
                              "end": {
                                "row": 125,
                                "column": 42
                              },
                              "text": "(new_data)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 125,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 125,
                                    "column": 33
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 125,
                                    "column": 33
                                  },
                                  "end": {
                                    "row": 125,
                                    "column": 41
                                  },
                                  "text": "new_data"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 125,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 125,
                                    "column": 42
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start": {
                    "row": 126,
                    "column": 8
                  },
                  "end": {
                    "row": 127,
                    "column": 27
                  },
                  "text": "else:\n            return new_data",
                  "children": [
                    {
                      "type": "else",
                      "start": {
                        "row": 126,
                        "column": 8
                      },
                      "end": {
                        "row": 126,
                        "column": 12
                      },
                      "text": "else"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 126,
                        "column": 12
                      },
                      "end": {
                        "row": 126,
                        "column": 13
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 127,
                        "column": 12
                      },
                      "end": {
                        "row": 127,
                        "column": 27
                      },
                      "text": "return new_data",
                      "children": [
                        {
                          "type": "return_statement",
                          "start": {
                            "row": 127,
                            "column": 12
                          },
                          "end": {
                            "row": 127,
                            "column": 27
                          },
                          "text": "return new_data",
                          "children": [
                            {
                              "type": "return",
                              "start": {
                                "row": 127,
                                "column": 12
                              },
                              "end": {
                                "row": 127,
                                "column": 18
                              },
                              "text": "return"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 127,
                                "column": 19
                              },
                              "end": {
                                "row": 127,
                                "column": 27
                              },
                              "text": "new_data"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}