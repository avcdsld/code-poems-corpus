{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 138,
    "column": 24
  },
  "text": "def convert(sk_obj, input_features = None,\n        output_feature_names = None):\n    \"\"\"\n    Convert scikit-learn pipeline, classifier, or regressor to Core ML format.\n\n    Parameters\n    ----------\n    sk_obj: model | [model] of scikit-learn format.\n        Scikit learn model(s) to convert to a Core ML format.\n\n        The input model may be a single scikit learn model, a scikit learn\n        pipeline model, or a list of scikit learn models.\n\n        Currently supported scikit learn models are:\n\n        -   Linear and Logistic Regression\n        -   LinearSVC and LinearSVR\n        -   SVC and SVR\n        -   NuSVC and NuSVR\n        -   Gradient Boosting Classifier and Regressor\n        -   Decision Tree Classifier and Regressor\n        -   Random Forest Classifier and Regressor\n        -   Normalizer\n        -   Imputer\n        -   Standard Scaler\n        -   DictVectorizer\n        -   One Hot Encoder\n\n        The input model, or the last model in a pipeline or list of models,\n        determines whether this is exposed as a Transformer, Regressor,\n        or Classifier.\n\n        Note that there may not be a one-to-one correspondence between scikit\n        learn models and which Core ML models are used to represent them.  For\n        example, many scikit learn models are embedded in a pipeline to handle\n        processing of input features.\n\n\n    input_features: str | dict | list\n\n        Optional name(s) that can be given to the inputs of the scikit-learn\n        model. Defaults to 'input'.\n\n        Input features can be specified in a number of forms.\n\n        -   Single string: In this case, the input is assumed to be a single\n            array, with the number of dimensions set using num_dimensions.\n\n        -   List of strings: In this case, the overall input dimensions to the\n            scikit-learn model is assumed to be the length of the list.  If\n            neighboring names are identical, they are assumed to be an input\n            array of that length.  For example:\n\n               [\"a\", \"b\", \"c\"]\n\n            resolves to\n\n                [(\"a\", Double), (\"b\", Double), (\"c\", Double)].\n\n            And:\n\n                [\"a\", \"a\", \"b\"]\n\n            resolves to\n\n                [(\"a\", Array(2)), (\"b\", Double)].\n\n        - Dictionary: Where the keys are the names and the indices or ranges of\n          feature indices.\n\n            In this case, it's presented as a mapping from keys to indices or\n            ranges of contiguous indices.  For example,\n\n                {\"a\" : 0, \"b\" : [2,3], \"c\" : 1}\n\n            Resolves to\n\n                [(\"a\", Double), (\"c\", Double), (\"b\", Array(2))].\n\n            Note that the ordering is determined by the indices.\n\n        -   List of tuples of the form `(name, datatype)`.  Here, `name` is the\n            name of the exposed feature, and `datatype` is an instance of\n            `String`, `Double`, `Int64`, `Array`, or `Dictionary`.\n\n    output_feature_names: string or list of strings\n            Optional name(s) that can be given to the inputs of the scikit-learn\n            model.\n\n        The output_feature_names is interpreted according to the model type:\n\n        - If the scikit-learn model is a transformer, it is the name of the\n          array feature output by the final sequence of the transformer\n          (defaults to \"output\").\n        - If it is a classifier, it should be a 2-tuple of names giving the top\n          class prediction and the array of scores for each class (defaults to\n          \"classLabel\" and \"classScores\").\n        - If it is a regressor, it should give the name of the prediction value\n          (defaults to \"prediction\").\n\n    Returns\n    -------\n    model:MLModel\n        Returns an MLModel instance representing a Core ML model.\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n        >>> from sklearn.linear_model import LinearRegression\n        >>> import pandas as pd\n\n        # Load data\n        >>> data = pd.read_csv('houses.csv')\n\n        # Train a model\n        >>> model = LinearRegression()\n        >>> model.fit(data[[\"bedroom\", \"bath\", \"size\"]], data[\"price\"])\n\n         # Convert and save the scikit-learn model\n        >>> import coremltools\n        >>> coreml_model = coremltools.converters.sklearn.convert(model,\n                                                                 [\"bedroom\", \"bath\", \"size\"],\n                                                                 \"price\")\n        >>> coreml_model.save('HousePricer.mlmodel')\n    \"\"\"\n\n    # This function is just a thin wrapper around the internal converter so\n    # that sklearn isn't actually imported unless this function is called\n    from ...models import MLModel\n\n    # NOTE: Providing user-defined class labels will be enabled when\n    # several issues with the ordering of the classes are worked out.  For now,\n    # to use custom class labels, directly import the internal function below.\n    from ._converter_internal import _convert_sklearn_model\n    spec = _convert_sklearn_model(\n            sk_obj, input_features, output_feature_names, class_labels = None)\n\n    return MLModel(spec)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 138,
        "column": 24
      },
      "text": "def convert(sk_obj, input_features = None,\n        output_feature_names = None):\n    \"\"\"\n    Convert scikit-learn pipeline, classifier, or regressor to Core ML format.\n\n    Parameters\n    ----------\n    sk_obj: model | [model] of scikit-learn format.\n        Scikit learn model(s) to convert to a Core ML format.\n\n        The input model may be a single scikit learn model, a scikit learn\n        pipeline model, or a list of scikit learn models.\n\n        Currently supported scikit learn models are:\n\n        -   Linear and Logistic Regression\n        -   LinearSVC and LinearSVR\n        -   SVC and SVR\n        -   NuSVC and NuSVR\n        -   Gradient Boosting Classifier and Regressor\n        -   Decision Tree Classifier and Regressor\n        -   Random Forest Classifier and Regressor\n        -   Normalizer\n        -   Imputer\n        -   Standard Scaler\n        -   DictVectorizer\n        -   One Hot Encoder\n\n        The input model, or the last model in a pipeline or list of models,\n        determines whether this is exposed as a Transformer, Regressor,\n        or Classifier.\n\n        Note that there may not be a one-to-one correspondence between scikit\n        learn models and which Core ML models are used to represent them.  For\n        example, many scikit learn models are embedded in a pipeline to handle\n        processing of input features.\n\n\n    input_features: str | dict | list\n\n        Optional name(s) that can be given to the inputs of the scikit-learn\n        model. Defaults to 'input'.\n\n        Input features can be specified in a number of forms.\n\n        -   Single string: In this case, the input is assumed to be a single\n            array, with the number of dimensions set using num_dimensions.\n\n        -   List of strings: In this case, the overall input dimensions to the\n            scikit-learn model is assumed to be the length of the list.  If\n            neighboring names are identical, they are assumed to be an input\n            array of that length.  For example:\n\n               [\"a\", \"b\", \"c\"]\n\n            resolves to\n\n                [(\"a\", Double), (\"b\", Double), (\"c\", Double)].\n\n            And:\n\n                [\"a\", \"a\", \"b\"]\n\n            resolves to\n\n                [(\"a\", Array(2)), (\"b\", Double)].\n\n        - Dictionary: Where the keys are the names and the indices or ranges of\n          feature indices.\n\n            In this case, it's presented as a mapping from keys to indices or\n            ranges of contiguous indices.  For example,\n\n                {\"a\" : 0, \"b\" : [2,3], \"c\" : 1}\n\n            Resolves to\n\n                [(\"a\", Double), (\"c\", Double), (\"b\", Array(2))].\n\n            Note that the ordering is determined by the indices.\n\n        -   List of tuples of the form `(name, datatype)`.  Here, `name` is the\n            name of the exposed feature, and `datatype` is an instance of\n            `String`, `Double`, `Int64`, `Array`, or `Dictionary`.\n\n    output_feature_names: string or list of strings\n            Optional name(s) that can be given to the inputs of the scikit-learn\n            model.\n\n        The output_feature_names is interpreted according to the model type:\n\n        - If the scikit-learn model is a transformer, it is the name of the\n          array feature output by the final sequence of the transformer\n          (defaults to \"output\").\n        - If it is a classifier, it should be a 2-tuple of names giving the top\n          class prediction and the array of scores for each class (defaults to\n          \"classLabel\" and \"classScores\").\n        - If it is a regressor, it should give the name of the prediction value\n          (defaults to \"prediction\").\n\n    Returns\n    -------\n    model:MLModel\n        Returns an MLModel instance representing a Core ML model.\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n        >>> from sklearn.linear_model import LinearRegression\n        >>> import pandas as pd\n\n        # Load data\n        >>> data = pd.read_csv('houses.csv')\n\n        # Train a model\n        >>> model = LinearRegression()\n        >>> model.fit(data[[\"bedroom\", \"bath\", \"size\"]], data[\"price\"])\n\n         # Convert and save the scikit-learn model\n        >>> import coremltools\n        >>> coreml_model = coremltools.converters.sklearn.convert(model,\n                                                                 [\"bedroom\", \"bath\", \"size\"],\n                                                                 \"price\")\n        >>> coreml_model.save('HousePricer.mlmodel')\n    \"\"\"\n\n    # This function is just a thin wrapper around the internal converter so\n    # that sklearn isn't actually imported unless this function is called\n    from ...models import MLModel\n\n    # NOTE: Providing user-defined class labels will be enabled when\n    # several issues with the ordering of the classes are worked out.  For now,\n    # to use custom class labels, directly import the internal function below.\n    from ._converter_internal import _convert_sklearn_model\n    spec = _convert_sklearn_model(\n            sk_obj, input_features, output_feature_names, class_labels = None)\n\n    return MLModel(spec)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 11
          },
          "text": "convert"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 11
          },
          "end": {
            "row": 1,
            "column": 36
          },
          "text": "(sk_obj, input_features = None,\n        output_feature_names = None)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 11
              },
              "end": {
                "row": 0,
                "column": 12
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 12
              },
              "end": {
                "row": 0,
                "column": 18
              },
              "text": "sk_obj"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 18
              },
              "end": {
                "row": 0,
                "column": 19
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 41
              },
              "text": "input_features = None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 20
                  },
                  "end": {
                    "row": 0,
                    "column": 34
                  },
                  "text": "input_features"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 35
                  },
                  "end": {
                    "row": 0,
                    "column": 36
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 37
                  },
                  "end": {
                    "row": 0,
                    "column": 41
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 41
              },
              "end": {
                "row": 0,
                "column": 42
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 1,
                "column": 35
              },
              "text": "output_feature_names = None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 1,
                    "column": 28
                  },
                  "text": "output_feature_names"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 1,
                    "column": 29
                  },
                  "end": {
                    "row": 1,
                    "column": 30
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 1,
                    "column": 31
                  },
                  "end": {
                    "row": 1,
                    "column": 35
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 1,
                "column": 35
              },
              "end": {
                "row": 1,
                "column": 36
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 1,
            "column": 36
          },
          "end": {
            "row": 1,
            "column": 37
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 2,
            "column": 4
          },
          "end": {
            "row": 138,
            "column": 24
          },
          "text": "\"\"\"\n    Convert scikit-learn pipeline, classifier, or regressor to Core ML format.\n\n    Parameters\n    ----------\n    sk_obj: model | [model] of scikit-learn format.\n        Scikit learn model(s) to convert to a Core ML format.\n\n        The input model may be a single scikit learn model, a scikit learn\n        pipeline model, or a list of scikit learn models.\n\n        Currently supported scikit learn models are:\n\n        -   Linear and Logistic Regression\n        -   LinearSVC and LinearSVR\n        -   SVC and SVR\n        -   NuSVC and NuSVR\n        -   Gradient Boosting Classifier and Regressor\n        -   Decision Tree Classifier and Regressor\n        -   Random Forest Classifier and Regressor\n        -   Normalizer\n        -   Imputer\n        -   Standard Scaler\n        -   DictVectorizer\n        -   One Hot Encoder\n\n        The input model, or the last model in a pipeline or list of models,\n        determines whether this is exposed as a Transformer, Regressor,\n        or Classifier.\n\n        Note that there may not be a one-to-one correspondence between scikit\n        learn models and which Core ML models are used to represent them.  For\n        example, many scikit learn models are embedded in a pipeline to handle\n        processing of input features.\n\n\n    input_features: str | dict | list\n\n        Optional name(s) that can be given to the inputs of the scikit-learn\n        model. Defaults to 'input'.\n\n        Input features can be specified in a number of forms.\n\n        -   Single string: In this case, the input is assumed to be a single\n            array, with the number of dimensions set using num_dimensions.\n\n        -   List of strings: In this case, the overall input dimensions to the\n            scikit-learn model is assumed to be the length of the list.  If\n            neighboring names are identical, they are assumed to be an input\n            array of that length.  For example:\n\n               [\"a\", \"b\", \"c\"]\n\n            resolves to\n\n                [(\"a\", Double), (\"b\", Double), (\"c\", Double)].\n\n            And:\n\n                [\"a\", \"a\", \"b\"]\n\n            resolves to\n\n                [(\"a\", Array(2)), (\"b\", Double)].\n\n        - Dictionary: Where the keys are the names and the indices or ranges of\n          feature indices.\n\n            In this case, it's presented as a mapping from keys to indices or\n            ranges of contiguous indices.  For example,\n\n                {\"a\" : 0, \"b\" : [2,3], \"c\" : 1}\n\n            Resolves to\n\n                [(\"a\", Double), (\"c\", Double), (\"b\", Array(2))].\n\n            Note that the ordering is determined by the indices.\n\n        -   List of tuples of the form `(name, datatype)`.  Here, `name` is the\n            name of the exposed feature, and `datatype` is an instance of\n            `String`, `Double`, `Int64`, `Array`, or `Dictionary`.\n\n    output_feature_names: string or list of strings\n            Optional name(s) that can be given to the inputs of the scikit-learn\n            model.\n\n        The output_feature_names is interpreted according to the model type:\n\n        - If the scikit-learn model is a transformer, it is the name of the\n          array feature output by the final sequence of the transformer\n          (defaults to \"output\").\n        - If it is a classifier, it should be a 2-tuple of names giving the top\n          class prediction and the array of scores for each class (defaults to\n          \"classLabel\" and \"classScores\").\n        - If it is a regressor, it should give the name of the prediction value\n          (defaults to \"prediction\").\n\n    Returns\n    -------\n    model:MLModel\n        Returns an MLModel instance representing a Core ML model.\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n        >>> from sklearn.linear_model import LinearRegression\n        >>> import pandas as pd\n\n        # Load data\n        >>> data = pd.read_csv('houses.csv')\n\n        # Train a model\n        >>> model = LinearRegression()\n        >>> model.fit(data[[\"bedroom\", \"bath\", \"size\"]], data[\"price\"])\n\n         # Convert and save the scikit-learn model\n        >>> import coremltools\n        >>> coreml_model = coremltools.converters.sklearn.convert(model,\n                                                                 [\"bedroom\", \"bath\", \"size\"],\n                                                                 \"price\")\n        >>> coreml_model.save('HousePricer.mlmodel')\n    \"\"\"\n\n    # This function is just a thin wrapper around the internal converter so\n    # that sklearn isn't actually imported unless this function is called\n    from ...models import MLModel\n\n    # NOTE: Providing user-defined class labels will be enabled when\n    # several issues with the ordering of the classes are worked out.  For now,\n    # to use custom class labels, directly import the internal function below.\n    from ._converter_internal import _convert_sklearn_model\n    spec = _convert_sklearn_model(\n            sk_obj, input_features, output_feature_names, class_labels = None)\n\n    return MLModel(spec)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 2,
                "column": 4
              },
              "end": {
                "row": 125,
                "column": 7
              },
              "text": "\"\"\"\n    Convert scikit-learn pipeline, classifier, or regressor to Core ML format.\n\n    Parameters\n    ----------\n    sk_obj: model | [model] of scikit-learn format.\n        Scikit learn model(s) to convert to a Core ML format.\n\n        The input model may be a single scikit learn model, a scikit learn\n        pipeline model, or a list of scikit learn models.\n\n        Currently supported scikit learn models are:\n\n        -   Linear and Logistic Regression\n        -   LinearSVC and LinearSVR\n        -   SVC and SVR\n        -   NuSVC and NuSVR\n        -   Gradient Boosting Classifier and Regressor\n        -   Decision Tree Classifier and Regressor\n        -   Random Forest Classifier and Regressor\n        -   Normalizer\n        -   Imputer\n        -   Standard Scaler\n        -   DictVectorizer\n        -   One Hot Encoder\n\n        The input model, or the last model in a pipeline or list of models,\n        determines whether this is exposed as a Transformer, Regressor,\n        or Classifier.\n\n        Note that there may not be a one-to-one correspondence between scikit\n        learn models and which Core ML models are used to represent them.  For\n        example, many scikit learn models are embedded in a pipeline to handle\n        processing of input features.\n\n\n    input_features: str | dict | list\n\n        Optional name(s) that can be given to the inputs of the scikit-learn\n        model. Defaults to 'input'.\n\n        Input features can be specified in a number of forms.\n\n        -   Single string: In this case, the input is assumed to be a single\n            array, with the number of dimensions set using num_dimensions.\n\n        -   List of strings: In this case, the overall input dimensions to the\n            scikit-learn model is assumed to be the length of the list.  If\n            neighboring names are identical, they are assumed to be an input\n            array of that length.  For example:\n\n               [\"a\", \"b\", \"c\"]\n\n            resolves to\n\n                [(\"a\", Double), (\"b\", Double), (\"c\", Double)].\n\n            And:\n\n                [\"a\", \"a\", \"b\"]\n\n            resolves to\n\n                [(\"a\", Array(2)), (\"b\", Double)].\n\n        - Dictionary: Where the keys are the names and the indices or ranges of\n          feature indices.\n\n            In this case, it's presented as a mapping from keys to indices or\n            ranges of contiguous indices.  For example,\n\n                {\"a\" : 0, \"b\" : [2,3], \"c\" : 1}\n\n            Resolves to\n\n                [(\"a\", Double), (\"c\", Double), (\"b\", Array(2))].\n\n            Note that the ordering is determined by the indices.\n\n        -   List of tuples of the form `(name, datatype)`.  Here, `name` is the\n            name of the exposed feature, and `datatype` is an instance of\n            `String`, `Double`, `Int64`, `Array`, or `Dictionary`.\n\n    output_feature_names: string or list of strings\n            Optional name(s) that can be given to the inputs of the scikit-learn\n            model.\n\n        The output_feature_names is interpreted according to the model type:\n\n        - If the scikit-learn model is a transformer, it is the name of the\n          array feature output by the final sequence of the transformer\n          (defaults to \"output\").\n        - If it is a classifier, it should be a 2-tuple of names giving the top\n          class prediction and the array of scores for each class (defaults to\n          \"classLabel\" and \"classScores\").\n        - If it is a regressor, it should give the name of the prediction value\n          (defaults to \"prediction\").\n\n    Returns\n    -------\n    model:MLModel\n        Returns an MLModel instance representing a Core ML model.\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n        >>> from sklearn.linear_model import LinearRegression\n        >>> import pandas as pd\n\n        # Load data\n        >>> data = pd.read_csv('houses.csv')\n\n        # Train a model\n        >>> model = LinearRegression()\n        >>> model.fit(data[[\"bedroom\", \"bath\", \"size\"]], data[\"price\"])\n\n         # Convert and save the scikit-learn model\n        >>> import coremltools\n        >>> coreml_model = coremltools.converters.sklearn.convert(model,\n                                                                 [\"bedroom\", \"bath\", \"size\"],\n                                                                 \"price\")\n        >>> coreml_model.save('HousePricer.mlmodel')\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 2,
                    "column": 4
                  },
                  "end": {
                    "row": 125,
                    "column": 7
                  },
                  "text": "\"\"\"\n    Convert scikit-learn pipeline, classifier, or regressor to Core ML format.\n\n    Parameters\n    ----------\n    sk_obj: model | [model] of scikit-learn format.\n        Scikit learn model(s) to convert to a Core ML format.\n\n        The input model may be a single scikit learn model, a scikit learn\n        pipeline model, or a list of scikit learn models.\n\n        Currently supported scikit learn models are:\n\n        -   Linear and Logistic Regression\n        -   LinearSVC and LinearSVR\n        -   SVC and SVR\n        -   NuSVC and NuSVR\n        -   Gradient Boosting Classifier and Regressor\n        -   Decision Tree Classifier and Regressor\n        -   Random Forest Classifier and Regressor\n        -   Normalizer\n        -   Imputer\n        -   Standard Scaler\n        -   DictVectorizer\n        -   One Hot Encoder\n\n        The input model, or the last model in a pipeline or list of models,\n        determines whether this is exposed as a Transformer, Regressor,\n        or Classifier.\n\n        Note that there may not be a one-to-one correspondence between scikit\n        learn models and which Core ML models are used to represent them.  For\n        example, many scikit learn models are embedded in a pipeline to handle\n        processing of input features.\n\n\n    input_features: str | dict | list\n\n        Optional name(s) that can be given to the inputs of the scikit-learn\n        model. Defaults to 'input'.\n\n        Input features can be specified in a number of forms.\n\n        -   Single string: In this case, the input is assumed to be a single\n            array, with the number of dimensions set using num_dimensions.\n\n        -   List of strings: In this case, the overall input dimensions to the\n            scikit-learn model is assumed to be the length of the list.  If\n            neighboring names are identical, they are assumed to be an input\n            array of that length.  For example:\n\n               [\"a\", \"b\", \"c\"]\n\n            resolves to\n\n                [(\"a\", Double), (\"b\", Double), (\"c\", Double)].\n\n            And:\n\n                [\"a\", \"a\", \"b\"]\n\n            resolves to\n\n                [(\"a\", Array(2)), (\"b\", Double)].\n\n        - Dictionary: Where the keys are the names and the indices or ranges of\n          feature indices.\n\n            In this case, it's presented as a mapping from keys to indices or\n            ranges of contiguous indices.  For example,\n\n                {\"a\" : 0, \"b\" : [2,3], \"c\" : 1}\n\n            Resolves to\n\n                [(\"a\", Double), (\"c\", Double), (\"b\", Array(2))].\n\n            Note that the ordering is determined by the indices.\n\n        -   List of tuples of the form `(name, datatype)`.  Here, `name` is the\n            name of the exposed feature, and `datatype` is an instance of\n            `String`, `Double`, `Int64`, `Array`, or `Dictionary`.\n\n    output_feature_names: string or list of strings\n            Optional name(s) that can be given to the inputs of the scikit-learn\n            model.\n\n        The output_feature_names is interpreted according to the model type:\n\n        - If the scikit-learn model is a transformer, it is the name of the\n          array feature output by the final sequence of the transformer\n          (defaults to \"output\").\n        - If it is a classifier, it should be a 2-tuple of names giving the top\n          class prediction and the array of scores for each class (defaults to\n          \"classLabel\" and \"classScores\").\n        - If it is a regressor, it should give the name of the prediction value\n          (defaults to \"prediction\").\n\n    Returns\n    -------\n    model:MLModel\n        Returns an MLModel instance representing a Core ML model.\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n        >>> from sklearn.linear_model import LinearRegression\n        >>> import pandas as pd\n\n        # Load data\n        >>> data = pd.read_csv('houses.csv')\n\n        # Train a model\n        >>> model = LinearRegression()\n        >>> model.fit(data[[\"bedroom\", \"bath\", \"size\"]], data[\"price\"])\n\n         # Convert and save the scikit-learn model\n        >>> import coremltools\n        >>> coreml_model = coremltools.converters.sklearn.convert(model,\n                                                                 [\"bedroom\", \"bath\", \"size\"],\n                                                                 \"price\")\n        >>> coreml_model.save('HousePricer.mlmodel')\n    \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 2,
                        "column": 4
                      },
                      "end": {
                        "row": 2,
                        "column": 7
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 2,
                        "column": 7
                      },
                      "end": {
                        "row": 125,
                        "column": 4
                      },
                      "text": "\n    Convert scikit-learn pipeline, classifier, or regressor to Core ML format.\n\n    Parameters\n    ----------\n    sk_obj: model | [model] of scikit-learn format.\n        Scikit learn model(s) to convert to a Core ML format.\n\n        The input model may be a single scikit learn model, a scikit learn\n        pipeline model, or a list of scikit learn models.\n\n        Currently supported scikit learn models are:\n\n        -   Linear and Logistic Regression\n        -   LinearSVC and LinearSVR\n        -   SVC and SVR\n        -   NuSVC and NuSVR\n        -   Gradient Boosting Classifier and Regressor\n        -   Decision Tree Classifier and Regressor\n        -   Random Forest Classifier and Regressor\n        -   Normalizer\n        -   Imputer\n        -   Standard Scaler\n        -   DictVectorizer\n        -   One Hot Encoder\n\n        The input model, or the last model in a pipeline or list of models,\n        determines whether this is exposed as a Transformer, Regressor,\n        or Classifier.\n\n        Note that there may not be a one-to-one correspondence between scikit\n        learn models and which Core ML models are used to represent them.  For\n        example, many scikit learn models are embedded in a pipeline to handle\n        processing of input features.\n\n\n    input_features: str | dict | list\n\n        Optional name(s) that can be given to the inputs of the scikit-learn\n        model. Defaults to 'input'.\n\n        Input features can be specified in a number of forms.\n\n        -   Single string: In this case, the input is assumed to be a single\n            array, with the number of dimensions set using num_dimensions.\n\n        -   List of strings: In this case, the overall input dimensions to the\n            scikit-learn model is assumed to be the length of the list.  If\n            neighboring names are identical, they are assumed to be an input\n            array of that length.  For example:\n\n               [\"a\", \"b\", \"c\"]\n\n            resolves to\n\n                [(\"a\", Double), (\"b\", Double), (\"c\", Double)].\n\n            And:\n\n                [\"a\", \"a\", \"b\"]\n\n            resolves to\n\n                [(\"a\", Array(2)), (\"b\", Double)].\n\n        - Dictionary: Where the keys are the names and the indices or ranges of\n          feature indices.\n\n            In this case, it's presented as a mapping from keys to indices or\n            ranges of contiguous indices.  For example,\n\n                {\"a\" : 0, \"b\" : [2,3], \"c\" : 1}\n\n            Resolves to\n\n                [(\"a\", Double), (\"c\", Double), (\"b\", Array(2))].\n\n            Note that the ordering is determined by the indices.\n\n        -   List of tuples of the form `(name, datatype)`.  Here, `name` is the\n            name of the exposed feature, and `datatype` is an instance of\n            `String`, `Double`, `Int64`, `Array`, or `Dictionary`.\n\n    output_feature_names: string or list of strings\n            Optional name(s) that can be given to the inputs of the scikit-learn\n            model.\n\n        The output_feature_names is interpreted according to the model type:\n\n        - If the scikit-learn model is a transformer, it is the name of the\n          array feature output by the final sequence of the transformer\n          (defaults to \"output\").\n        - If it is a classifier, it should be a 2-tuple of names giving the top\n          class prediction and the array of scores for each class (defaults to\n          \"classLabel\" and \"classScores\").\n        - If it is a regressor, it should give the name of the prediction value\n          (defaults to \"prediction\").\n\n    Returns\n    -------\n    model:MLModel\n        Returns an MLModel instance representing a Core ML model.\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n        >>> from sklearn.linear_model import LinearRegression\n        >>> import pandas as pd\n\n        # Load data\n        >>> data = pd.read_csv('houses.csv')\n\n        # Train a model\n        >>> model = LinearRegression()\n        >>> model.fit(data[[\"bedroom\", \"bath\", \"size\"]], data[\"price\"])\n\n         # Convert and save the scikit-learn model\n        >>> import coremltools\n        >>> coreml_model = coremltools.converters.sklearn.convert(model,\n                                                                 [\"bedroom\", \"bath\", \"size\"],\n                                                                 \"price\")\n        >>> coreml_model.save('HousePricer.mlmodel')\n    "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 125,
                        "column": 4
                      },
                      "end": {
                        "row": 125,
                        "column": 7
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 127,
                "column": 4
              },
              "end": {
                "row": 127,
                "column": 75
              },
              "text": "# This function is just a thin wrapper around the internal converter so"
            },
            {
              "type": "comment",
              "start": {
                "row": 128,
                "column": 4
              },
              "end": {
                "row": 128,
                "column": 73
              },
              "text": "# that sklearn isn't actually imported unless this function is called"
            },
            {
              "type": "import_from_statement",
              "start": {
                "row": 129,
                "column": 4
              },
              "end": {
                "row": 129,
                "column": 33
              },
              "text": "from ...models import MLModel",
              "children": [
                {
                  "type": "from",
                  "start": {
                    "row": 129,
                    "column": 4
                  },
                  "end": {
                    "row": 129,
                    "column": 8
                  },
                  "text": "from"
                },
                {
                  "type": "relative_import",
                  "start": {
                    "row": 129,
                    "column": 9
                  },
                  "end": {
                    "row": 129,
                    "column": 18
                  },
                  "text": "...models",
                  "children": [
                    {
                      "type": "import_prefix",
                      "start": {
                        "row": 129,
                        "column": 9
                      },
                      "end": {
                        "row": 129,
                        "column": 12
                      },
                      "text": "...",
                      "children": [
                        {
                          "type": ".",
                          "start": {
                            "row": 129,
                            "column": 9
                          },
                          "end": {
                            "row": 129,
                            "column": 10
                          },
                          "text": "."
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 129,
                            "column": 10
                          },
                          "end": {
                            "row": 129,
                            "column": 11
                          },
                          "text": "."
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 129,
                            "column": 11
                          },
                          "end": {
                            "row": 129,
                            "column": 12
                          },
                          "text": "."
                        }
                      ]
                    },
                    {
                      "type": "dotted_name",
                      "start": {
                        "row": 129,
                        "column": 12
                      },
                      "end": {
                        "row": 129,
                        "column": 18
                      },
                      "text": "models",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 129,
                            "column": 12
                          },
                          "end": {
                            "row": 129,
                            "column": 18
                          },
                          "text": "models"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "import",
                  "start": {
                    "row": 129,
                    "column": 19
                  },
                  "end": {
                    "row": 129,
                    "column": 25
                  },
                  "text": "import"
                },
                {
                  "type": "dotted_name",
                  "start": {
                    "row": 129,
                    "column": 26
                  },
                  "end": {
                    "row": 129,
                    "column": 33
                  },
                  "text": "MLModel",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 129,
                        "column": 26
                      },
                      "end": {
                        "row": 129,
                        "column": 33
                      },
                      "text": "MLModel"
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 131,
                "column": 4
              },
              "end": {
                "row": 131,
                "column": 68
              },
              "text": "# NOTE: Providing user-defined class labels will be enabled when"
            },
            {
              "type": "comment",
              "start": {
                "row": 132,
                "column": 4
              },
              "end": {
                "row": 132,
                "column": 79
              },
              "text": "# several issues with the ordering of the classes are worked out.  For now,"
            },
            {
              "type": "comment",
              "start": {
                "row": 133,
                "column": 4
              },
              "end": {
                "row": 133,
                "column": 78
              },
              "text": "# to use custom class labels, directly import the internal function below."
            },
            {
              "type": "import_from_statement",
              "start": {
                "row": 134,
                "column": 4
              },
              "end": {
                "row": 134,
                "column": 59
              },
              "text": "from ._converter_internal import _convert_sklearn_model",
              "children": [
                {
                  "type": "from",
                  "start": {
                    "row": 134,
                    "column": 4
                  },
                  "end": {
                    "row": 134,
                    "column": 8
                  },
                  "text": "from"
                },
                {
                  "type": "relative_import",
                  "start": {
                    "row": 134,
                    "column": 9
                  },
                  "end": {
                    "row": 134,
                    "column": 29
                  },
                  "text": "._converter_internal",
                  "children": [
                    {
                      "type": "import_prefix",
                      "start": {
                        "row": 134,
                        "column": 9
                      },
                      "end": {
                        "row": 134,
                        "column": 10
                      },
                      "text": ".",
                      "children": [
                        {
                          "type": ".",
                          "start": {
                            "row": 134,
                            "column": 9
                          },
                          "end": {
                            "row": 134,
                            "column": 10
                          },
                          "text": "."
                        }
                      ]
                    },
                    {
                      "type": "dotted_name",
                      "start": {
                        "row": 134,
                        "column": 10
                      },
                      "end": {
                        "row": 134,
                        "column": 29
                      },
                      "text": "_converter_internal",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 134,
                            "column": 10
                          },
                          "end": {
                            "row": 134,
                            "column": 29
                          },
                          "text": "_converter_internal"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "import",
                  "start": {
                    "row": 134,
                    "column": 30
                  },
                  "end": {
                    "row": 134,
                    "column": 36
                  },
                  "text": "import"
                },
                {
                  "type": "dotted_name",
                  "start": {
                    "row": 134,
                    "column": 37
                  },
                  "end": {
                    "row": 134,
                    "column": 59
                  },
                  "text": "_convert_sklearn_model",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 134,
                        "column": 37
                      },
                      "end": {
                        "row": 134,
                        "column": 59
                      },
                      "text": "_convert_sklearn_model"
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 135,
                "column": 4
              },
              "end": {
                "row": 136,
                "column": 78
              },
              "text": "spec = _convert_sklearn_model(\n            sk_obj, input_features, output_feature_names, class_labels = None)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 135,
                    "column": 4
                  },
                  "end": {
                    "row": 136,
                    "column": 78
                  },
                  "text": "spec = _convert_sklearn_model(\n            sk_obj, input_features, output_feature_names, class_labels = None)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 135,
                        "column": 4
                      },
                      "end": {
                        "row": 135,
                        "column": 8
                      },
                      "text": "spec"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 135,
                        "column": 9
                      },
                      "end": {
                        "row": 135,
                        "column": 10
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 135,
                        "column": 11
                      },
                      "end": {
                        "row": 136,
                        "column": 78
                      },
                      "text": "_convert_sklearn_model(\n            sk_obj, input_features, output_feature_names, class_labels = None)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 135,
                            "column": 11
                          },
                          "end": {
                            "row": 135,
                            "column": 33
                          },
                          "text": "_convert_sklearn_model"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 135,
                            "column": 33
                          },
                          "end": {
                            "row": 136,
                            "column": 78
                          },
                          "text": "(\n            sk_obj, input_features, output_feature_names, class_labels = None)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 135,
                                "column": 33
                              },
                              "end": {
                                "row": 135,
                                "column": 34
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 136,
                                "column": 12
                              },
                              "end": {
                                "row": 136,
                                "column": 18
                              },
                              "text": "sk_obj"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 136,
                                "column": 18
                              },
                              "end": {
                                "row": 136,
                                "column": 19
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 136,
                                "column": 20
                              },
                              "end": {
                                "row": 136,
                                "column": 34
                              },
                              "text": "input_features"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 136,
                                "column": 34
                              },
                              "end": {
                                "row": 136,
                                "column": 35
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 136,
                                "column": 36
                              },
                              "end": {
                                "row": 136,
                                "column": 56
                              },
                              "text": "output_feature_names"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 136,
                                "column": 56
                              },
                              "end": {
                                "row": 136,
                                "column": 57
                              },
                              "text": ","
                            },
                            {
                              "type": "keyword_argument",
                              "start": {
                                "row": 136,
                                "column": 58
                              },
                              "end": {
                                "row": 136,
                                "column": 77
                              },
                              "text": "class_labels = None",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 136,
                                    "column": 58
                                  },
                                  "end": {
                                    "row": 136,
                                    "column": 70
                                  },
                                  "text": "class_labels"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 136,
                                    "column": 71
                                  },
                                  "end": {
                                    "row": 136,
                                    "column": 72
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "none",
                                  "start": {
                                    "row": 136,
                                    "column": 73
                                  },
                                  "end": {
                                    "row": 136,
                                    "column": 77
                                  },
                                  "text": "None"
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 136,
                                "column": 77
                              },
                              "end": {
                                "row": 136,
                                "column": 78
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 138,
                "column": 4
              },
              "end": {
                "row": 138,
                "column": 24
              },
              "text": "return MLModel(spec)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 138,
                    "column": 4
                  },
                  "end": {
                    "row": 138,
                    "column": 10
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 138,
                    "column": 11
                  },
                  "end": {
                    "row": 138,
                    "column": 24
                  },
                  "text": "MLModel(spec)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 138,
                        "column": 11
                      },
                      "end": {
                        "row": 138,
                        "column": 18
                      },
                      "text": "MLModel"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 138,
                        "column": 18
                      },
                      "end": {
                        "row": 138,
                        "column": 24
                      },
                      "text": "(spec)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 138,
                            "column": 18
                          },
                          "end": {
                            "row": 138,
                            "column": 19
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 138,
                            "column": 19
                          },
                          "end": {
                            "row": 138,
                            "column": 23
                          },
                          "text": "spec"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 138,
                            "column": 23
                          },
                          "end": {
                            "row": 138,
                            "column": 24
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}