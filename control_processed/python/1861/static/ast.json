{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 46,
    "column": 64
  },
  "text": "def searchsorted(self, value, side=\"left\", sorter=None):\n        \"\"\"\n        Find indices where elements should be inserted to maintain order.\n\n        .. versionadded:: 0.24.0\n\n        Find the indices into a sorted array `self` (a) such that, if the\n        corresponding elements in `value` were inserted before the indices,\n        the order of `self` would be preserved.\n\n        Assuming that `self` is sorted:\n\n        ======  ================================\n        `side`  returned index `i` satisfies\n        ======  ================================\n        left    ``self[i-1] < value <= self[i]``\n        right   ``self[i-1] <= value < self[i]``\n        ======  ================================\n\n        Parameters\n        ----------\n        value : array_like\n            Values to insert into `self`.\n        side : {'left', 'right'}, optional\n            If 'left', the index of the first suitable location found is given.\n            If 'right', return the last such index.  If there is no suitable\n            index, return either 0 or N (where N is the length of `self`).\n        sorter : 1-D array_like, optional\n            Optional array of integer indices that sort array a into ascending\n            order. They are typically the result of argsort.\n\n        Returns\n        -------\n        array of ints\n            Array of insertion points with the same shape as `value`.\n\n        See Also\n        --------\n        numpy.searchsorted : Similar method from NumPy.\n        \"\"\"\n        # Note: the base tests provided by pandas only test the basics.\n        # We do not test\n        # 1. Values outside the range of the `data_for_sorting` fixture\n        # 2. Values between the values in the `data_for_sorting` fixture\n        # 3. Missing values.\n        arr = self.astype(object)\n        return arr.searchsorted(value, side=side, sorter=sorter)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 46,
        "column": 64
      },
      "text": "def searchsorted(self, value, side=\"left\", sorter=None):\n        \"\"\"\n        Find indices where elements should be inserted to maintain order.\n\n        .. versionadded:: 0.24.0\n\n        Find the indices into a sorted array `self` (a) such that, if the\n        corresponding elements in `value` were inserted before the indices,\n        the order of `self` would be preserved.\n\n        Assuming that `self` is sorted:\n\n        ======  ================================\n        `side`  returned index `i` satisfies\n        ======  ================================\n        left    ``self[i-1] < value <= self[i]``\n        right   ``self[i-1] <= value < self[i]``\n        ======  ================================\n\n        Parameters\n        ----------\n        value : array_like\n            Values to insert into `self`.\n        side : {'left', 'right'}, optional\n            If 'left', the index of the first suitable location found is given.\n            If 'right', return the last such index.  If there is no suitable\n            index, return either 0 or N (where N is the length of `self`).\n        sorter : 1-D array_like, optional\n            Optional array of integer indices that sort array a into ascending\n            order. They are typically the result of argsort.\n\n        Returns\n        -------\n        array of ints\n            Array of insertion points with the same shape as `value`.\n\n        See Also\n        --------\n        numpy.searchsorted : Similar method from NumPy.\n        \"\"\"\n        # Note: the base tests provided by pandas only test the basics.\n        # We do not test\n        # 1. Values outside the range of the `data_for_sorting` fixture\n        # 2. Values between the values in the `data_for_sorting` fixture\n        # 3. Missing values.\n        arr = self.astype(object)\n        return arr.searchsorted(value, side=side, sorter=sorter)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 16
          },
          "text": "searchsorted"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 16
          },
          "end": {
            "row": 0,
            "column": 55
          },
          "text": "(self, value, side=\"left\", sorter=None)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 17
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 17
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 21
              },
              "end": {
                "row": 0,
                "column": 22
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 23
              },
              "end": {
                "row": 0,
                "column": 28
              },
              "text": "value"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 28
              },
              "end": {
                "row": 0,
                "column": 29
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 30
              },
              "end": {
                "row": 0,
                "column": 41
              },
              "text": "side=\"left\"",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 30
                  },
                  "end": {
                    "row": 0,
                    "column": 34
                  },
                  "text": "side"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 34
                  },
                  "end": {
                    "row": 0,
                    "column": 35
                  },
                  "text": "="
                },
                {
                  "type": "string",
                  "start": {
                    "row": 0,
                    "column": 35
                  },
                  "end": {
                    "row": 0,
                    "column": 41
                  },
                  "text": "\"left\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 0,
                        "column": 35
                      },
                      "end": {
                        "row": 0,
                        "column": 36
                      },
                      "text": "\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 0,
                        "column": 36
                      },
                      "end": {
                        "row": 0,
                        "column": 40
                      },
                      "text": "left"
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 0,
                        "column": 40
                      },
                      "end": {
                        "row": 0,
                        "column": 41
                      },
                      "text": "\""
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 41
              },
              "end": {
                "row": 0,
                "column": 42
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 43
              },
              "end": {
                "row": 0,
                "column": 54
              },
              "text": "sorter=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 43
                  },
                  "end": {
                    "row": 0,
                    "column": 49
                  },
                  "text": "sorter"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 49
                  },
                  "end": {
                    "row": 0,
                    "column": 50
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 50
                  },
                  "end": {
                    "row": 0,
                    "column": 54
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 54
              },
              "end": {
                "row": 0,
                "column": 55
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 55
          },
          "end": {
            "row": 0,
            "column": 56
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 46,
            "column": 64
          },
          "text": "\"\"\"\n        Find indices where elements should be inserted to maintain order.\n\n        .. versionadded:: 0.24.0\n\n        Find the indices into a sorted array `self` (a) such that, if the\n        corresponding elements in `value` were inserted before the indices,\n        the order of `self` would be preserved.\n\n        Assuming that `self` is sorted:\n\n        ======  ================================\n        `side`  returned index `i` satisfies\n        ======  ================================\n        left    ``self[i-1] < value <= self[i]``\n        right   ``self[i-1] <= value < self[i]``\n        ======  ================================\n\n        Parameters\n        ----------\n        value : array_like\n            Values to insert into `self`.\n        side : {'left', 'right'}, optional\n            If 'left', the index of the first suitable location found is given.\n            If 'right', return the last such index.  If there is no suitable\n            index, return either 0 or N (where N is the length of `self`).\n        sorter : 1-D array_like, optional\n            Optional array of integer indices that sort array a into ascending\n            order. They are typically the result of argsort.\n\n        Returns\n        -------\n        array of ints\n            Array of insertion points with the same shape as `value`.\n\n        See Also\n        --------\n        numpy.searchsorted : Similar method from NumPy.\n        \"\"\"\n        # Note: the base tests provided by pandas only test the basics.\n        # We do not test\n        # 1. Values outside the range of the `data_for_sorting` fixture\n        # 2. Values between the values in the `data_for_sorting` fixture\n        # 3. Missing values.\n        arr = self.astype(object)\n        return arr.searchsorted(value, side=side, sorter=sorter)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 39,
                "column": 11
              },
              "text": "\"\"\"\n        Find indices where elements should be inserted to maintain order.\n\n        .. versionadded:: 0.24.0\n\n        Find the indices into a sorted array `self` (a) such that, if the\n        corresponding elements in `value` were inserted before the indices,\n        the order of `self` would be preserved.\n\n        Assuming that `self` is sorted:\n\n        ======  ================================\n        `side`  returned index `i` satisfies\n        ======  ================================\n        left    ``self[i-1] < value <= self[i]``\n        right   ``self[i-1] <= value < self[i]``\n        ======  ================================\n\n        Parameters\n        ----------\n        value : array_like\n            Values to insert into `self`.\n        side : {'left', 'right'}, optional\n            If 'left', the index of the first suitable location found is given.\n            If 'right', return the last such index.  If there is no suitable\n            index, return either 0 or N (where N is the length of `self`).\n        sorter : 1-D array_like, optional\n            Optional array of integer indices that sort array a into ascending\n            order. They are typically the result of argsort.\n\n        Returns\n        -------\n        array of ints\n            Array of insertion points with the same shape as `value`.\n\n        See Also\n        --------\n        numpy.searchsorted : Similar method from NumPy.\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 39,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Find indices where elements should be inserted to maintain order.\n\n        .. versionadded:: 0.24.0\n\n        Find the indices into a sorted array `self` (a) such that, if the\n        corresponding elements in `value` were inserted before the indices,\n        the order of `self` would be preserved.\n\n        Assuming that `self` is sorted:\n\n        ======  ================================\n        `side`  returned index `i` satisfies\n        ======  ================================\n        left    ``self[i-1] < value <= self[i]``\n        right   ``self[i-1] <= value < self[i]``\n        ======  ================================\n\n        Parameters\n        ----------\n        value : array_like\n            Values to insert into `self`.\n        side : {'left', 'right'}, optional\n            If 'left', the index of the first suitable location found is given.\n            If 'right', return the last such index.  If there is no suitable\n            index, return either 0 or N (where N is the length of `self`).\n        sorter : 1-D array_like, optional\n            Optional array of integer indices that sort array a into ascending\n            order. They are typically the result of argsort.\n\n        Returns\n        -------\n        array of ints\n            Array of insertion points with the same shape as `value`.\n\n        See Also\n        --------\n        numpy.searchsorted : Similar method from NumPy.\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 39,
                        "column": 8
                      },
                      "text": "\n        Find indices where elements should be inserted to maintain order.\n\n        .. versionadded:: 0.24.0\n\n        Find the indices into a sorted array `self` (a) such that, if the\n        corresponding elements in `value` were inserted before the indices,\n        the order of `self` would be preserved.\n\n        Assuming that `self` is sorted:\n\n        ======  ================================\n        `side`  returned index `i` satisfies\n        ======  ================================\n        left    ``self[i-1] < value <= self[i]``\n        right   ``self[i-1] <= value < self[i]``\n        ======  ================================\n\n        Parameters\n        ----------\n        value : array_like\n            Values to insert into `self`.\n        side : {'left', 'right'}, optional\n            If 'left', the index of the first suitable location found is given.\n            If 'right', return the last such index.  If there is no suitable\n            index, return either 0 or N (where N is the length of `self`).\n        sorter : 1-D array_like, optional\n            Optional array of integer indices that sort array a into ascending\n            order. They are typically the result of argsort.\n\n        Returns\n        -------\n        array of ints\n            Array of insertion points with the same shape as `value`.\n\n        See Also\n        --------\n        numpy.searchsorted : Similar method from NumPy.\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 39,
                        "column": 8
                      },
                      "end": {
                        "row": 39,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 40,
                "column": 8
              },
              "end": {
                "row": 40,
                "column": 71
              },
              "text": "# Note: the base tests provided by pandas only test the basics."
            },
            {
              "type": "comment",
              "start": {
                "row": 41,
                "column": 8
              },
              "end": {
                "row": 41,
                "column": 24
              },
              "text": "# We do not test"
            },
            {
              "type": "comment",
              "start": {
                "row": 42,
                "column": 8
              },
              "end": {
                "row": 42,
                "column": 71
              },
              "text": "# 1. Values outside the range of the `data_for_sorting` fixture"
            },
            {
              "type": "comment",
              "start": {
                "row": 43,
                "column": 8
              },
              "end": {
                "row": 43,
                "column": 72
              },
              "text": "# 2. Values between the values in the `data_for_sorting` fixture"
            },
            {
              "type": "comment",
              "start": {
                "row": 44,
                "column": 8
              },
              "end": {
                "row": 44,
                "column": 28
              },
              "text": "# 3. Missing values."
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 45,
                "column": 8
              },
              "end": {
                "row": 45,
                "column": 33
              },
              "text": "arr = self.astype(object)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 45,
                    "column": 8
                  },
                  "end": {
                    "row": 45,
                    "column": 33
                  },
                  "text": "arr = self.astype(object)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 45,
                        "column": 8
                      },
                      "end": {
                        "row": 45,
                        "column": 11
                      },
                      "text": "arr"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 45,
                        "column": 12
                      },
                      "end": {
                        "row": 45,
                        "column": 13
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 45,
                        "column": 14
                      },
                      "end": {
                        "row": 45,
                        "column": 33
                      },
                      "text": "self.astype(object)",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 45,
                            "column": 14
                          },
                          "end": {
                            "row": 45,
                            "column": 25
                          },
                          "text": "self.astype",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 45,
                                "column": 14
                              },
                              "end": {
                                "row": 45,
                                "column": 18
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 45,
                                "column": 18
                              },
                              "end": {
                                "row": 45,
                                "column": 19
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 45,
                                "column": 19
                              },
                              "end": {
                                "row": 45,
                                "column": 25
                              },
                              "text": "astype"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 45,
                            "column": 25
                          },
                          "end": {
                            "row": 45,
                            "column": 33
                          },
                          "text": "(object)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 45,
                                "column": 25
                              },
                              "end": {
                                "row": 45,
                                "column": 26
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 45,
                                "column": 26
                              },
                              "end": {
                                "row": 45,
                                "column": 32
                              },
                              "text": "object"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 45,
                                "column": 32
                              },
                              "end": {
                                "row": 45,
                                "column": 33
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 46,
                "column": 8
              },
              "end": {
                "row": 46,
                "column": 64
              },
              "text": "return arr.searchsorted(value, side=side, sorter=sorter)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 46,
                    "column": 8
                  },
                  "end": {
                    "row": 46,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 46,
                    "column": 15
                  },
                  "end": {
                    "row": 46,
                    "column": 64
                  },
                  "text": "arr.searchsorted(value, side=side, sorter=sorter)",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 46,
                        "column": 15
                      },
                      "end": {
                        "row": 46,
                        "column": 31
                      },
                      "text": "arr.searchsorted",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 46,
                            "column": 15
                          },
                          "end": {
                            "row": 46,
                            "column": 18
                          },
                          "text": "arr"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 46,
                            "column": 18
                          },
                          "end": {
                            "row": 46,
                            "column": 19
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 46,
                            "column": 19
                          },
                          "end": {
                            "row": 46,
                            "column": 31
                          },
                          "text": "searchsorted"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 46,
                        "column": 31
                      },
                      "end": {
                        "row": 46,
                        "column": 64
                      },
                      "text": "(value, side=side, sorter=sorter)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 46,
                            "column": 31
                          },
                          "end": {
                            "row": 46,
                            "column": 32
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 46,
                            "column": 32
                          },
                          "end": {
                            "row": 46,
                            "column": 37
                          },
                          "text": "value"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 46,
                            "column": 37
                          },
                          "end": {
                            "row": 46,
                            "column": 38
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 46,
                            "column": 39
                          },
                          "end": {
                            "row": 46,
                            "column": 48
                          },
                          "text": "side=side",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 46,
                                "column": 39
                              },
                              "end": {
                                "row": 46,
                                "column": 43
                              },
                              "text": "side"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 46,
                                "column": 43
                              },
                              "end": {
                                "row": 46,
                                "column": 44
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 46,
                                "column": 44
                              },
                              "end": {
                                "row": 46,
                                "column": 48
                              },
                              "text": "side"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 46,
                            "column": 48
                          },
                          "end": {
                            "row": 46,
                            "column": 49
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 46,
                            "column": 50
                          },
                          "end": {
                            "row": 46,
                            "column": 63
                          },
                          "text": "sorter=sorter",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 46,
                                "column": 50
                              },
                              "end": {
                                "row": 46,
                                "column": 56
                              },
                              "text": "sorter"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 46,
                                "column": 56
                              },
                              "end": {
                                "row": 46,
                                "column": 57
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 46,
                                "column": 57
                              },
                              "end": {
                                "row": 46,
                                "column": 63
                              },
                              "text": "sorter"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 46,
                            "column": 63
                          },
                          "end": {
                            "row": 46,
                            "column": 64
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}