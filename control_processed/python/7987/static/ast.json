{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 80,
    "column": 36
  },
  "text": "def backward(self, out_grads=None, is_train=True):\n        \"\"\"Do backward pass to get the gradient of arguments.\n\n        Parameters\n        ----------\n        out_grads : NDArray or list of NDArray or dict of str to NDArray, optional\n            Gradient on the outputs to be propagated back.\n            This parameter is only needed when bind is called\n            on outputs that are not a loss function.\n        is_train : bool, default True\n            Whether this backward is for training or inference. Note that in rare\n            cases you want to call backward with is_train=False to get gradient\n            during inference.\n\n\n        Examples\n        --------\n        >>> # Example for binding on loss function symbol, which gives the loss value of the model.\n        >>> # Equivalently it gives the head gradient for backward pass.\n        >>> # In this example the built-in SoftmaxOutput is used as loss function.\n        >>> # MakeLoss can be used to define customized loss function symbol.\n        >>> net = mx.sym.Variable('data')\n        >>> net = mx.sym.FullyConnected(net, name='fc', num_hidden=6)\n        >>> net = mx.sym.Activation(net, name='relu', act_type=\"relu\")\n        >>> net = mx.sym.SoftmaxOutput(net, name='softmax')\n\n        >>> args =  {'data': mx.nd.ones((1, 4)), 'fc_weight': mx.nd.ones((6, 4)),\n        >>>          'fc_bias': mx.nd.array((1, 4, 4, 4, 5, 6)), 'softmax_label': mx.nd.ones((1))}\n        >>> args_grad = {'fc_weight': mx.nd.zeros((6, 4)), 'fc_bias': mx.nd.zeros((6))}\n        >>> texec = net.bind(ctx=mx.cpu(), args=args, args_grad=args_grad)\n        >>> out = texec.forward(is_train=True)[0].copy()\n        >>> print out.asnumpy()\n        [[ 0.00378404  0.07600445  0.07600445  0.07600445  0.20660152  0.5616011 ]]\n        >>> texec.backward()\n        >>> print(texec.grad_arrays[1].asnumpy())\n        [[ 0.00378404  0.00378404  0.00378404  0.00378404]\n         [-0.92399555 -0.92399555 -0.92399555 -0.92399555]\n         [ 0.07600445  0.07600445  0.07600445  0.07600445]\n         [ 0.07600445  0.07600445  0.07600445  0.07600445]\n         [ 0.20660152  0.20660152  0.20660152  0.20660152]\n         [ 0.5616011   0.5616011   0.5616011   0.5616011 ]]\n        >>>\n        >>> # Example for binding on non-loss function symbol.\n        >>> # Here the binding symbol is neither built-in loss function\n        >>> # nor customized loss created by MakeLoss.\n        >>> # As a result the head gradient is not automatically provided.\n        >>> a = mx.sym.Variable('a')\n        >>> b = mx.sym.Variable('b')\n        >>> # c is not a loss function symbol\n        >>> c = 2 * a + b\n        >>> args = {'a': mx.nd.array([1,2]), 'b':mx.nd.array([2,3])}\n        >>> args_grad = {'a': mx.nd.zeros((2)), 'b': mx.nd.zeros((2))}\n        >>> texec = c.bind(ctx=mx.cpu(), args=args, args_grad=args_grad)\n        >>> out = texec.forward(is_train=True)[0].copy()\n        >>> print(out.asnumpy())\n        [ 4.  7.]\n        >>> # out_grads is the head gradient in backward pass.\n        >>> # Here we define 'c' as loss function.\n        >>> # Then 'out' is passed as head gradient of backward pass.\n        >>> texec.backward(out)\n        >>> print(texec.grad_arrays[0].asnumpy())\n        [ 8.  14.]\n        >>> print(texec.grad_arrays[1].asnumpy())\n        [ 4.  7.]\n        \"\"\"\n        if out_grads is None:\n            out_grads = []\n        elif isinstance(out_grads, NDArray):\n            out_grads = [out_grads]\n        elif isinstance(out_grads, dict):\n            out_grads = [out_grads[k] for k in self._symbol.list_outputs()]\n\n        for obj in out_grads:\n            if not isinstance(obj, NDArray):\n                raise TypeError(\"inputs must be NDArray\")\n        ndarray = c_handle_array(out_grads)\n        check_call(_LIB.MXExecutorBackwardEx(\n            self.handle,\n            mx_uint(len(out_grads)),\n            ndarray,\n            ctypes.c_int(is_train)))",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 80,
        "column": 36
      },
      "text": "def backward(self, out_grads=None, is_train=True):\n        \"\"\"Do backward pass to get the gradient of arguments.\n\n        Parameters\n        ----------\n        out_grads : NDArray or list of NDArray or dict of str to NDArray, optional\n            Gradient on the outputs to be propagated back.\n            This parameter is only needed when bind is called\n            on outputs that are not a loss function.\n        is_train : bool, default True\n            Whether this backward is for training or inference. Note that in rare\n            cases you want to call backward with is_train=False to get gradient\n            during inference.\n\n\n        Examples\n        --------\n        >>> # Example for binding on loss function symbol, which gives the loss value of the model.\n        >>> # Equivalently it gives the head gradient for backward pass.\n        >>> # In this example the built-in SoftmaxOutput is used as loss function.\n        >>> # MakeLoss can be used to define customized loss function symbol.\n        >>> net = mx.sym.Variable('data')\n        >>> net = mx.sym.FullyConnected(net, name='fc', num_hidden=6)\n        >>> net = mx.sym.Activation(net, name='relu', act_type=\"relu\")\n        >>> net = mx.sym.SoftmaxOutput(net, name='softmax')\n\n        >>> args =  {'data': mx.nd.ones((1, 4)), 'fc_weight': mx.nd.ones((6, 4)),\n        >>>          'fc_bias': mx.nd.array((1, 4, 4, 4, 5, 6)), 'softmax_label': mx.nd.ones((1))}\n        >>> args_grad = {'fc_weight': mx.nd.zeros((6, 4)), 'fc_bias': mx.nd.zeros((6))}\n        >>> texec = net.bind(ctx=mx.cpu(), args=args, args_grad=args_grad)\n        >>> out = texec.forward(is_train=True)[0].copy()\n        >>> print out.asnumpy()\n        [[ 0.00378404  0.07600445  0.07600445  0.07600445  0.20660152  0.5616011 ]]\n        >>> texec.backward()\n        >>> print(texec.grad_arrays[1].asnumpy())\n        [[ 0.00378404  0.00378404  0.00378404  0.00378404]\n         [-0.92399555 -0.92399555 -0.92399555 -0.92399555]\n         [ 0.07600445  0.07600445  0.07600445  0.07600445]\n         [ 0.07600445  0.07600445  0.07600445  0.07600445]\n         [ 0.20660152  0.20660152  0.20660152  0.20660152]\n         [ 0.5616011   0.5616011   0.5616011   0.5616011 ]]\n        >>>\n        >>> # Example for binding on non-loss function symbol.\n        >>> # Here the binding symbol is neither built-in loss function\n        >>> # nor customized loss created by MakeLoss.\n        >>> # As a result the head gradient is not automatically provided.\n        >>> a = mx.sym.Variable('a')\n        >>> b = mx.sym.Variable('b')\n        >>> # c is not a loss function symbol\n        >>> c = 2 * a + b\n        >>> args = {'a': mx.nd.array([1,2]), 'b':mx.nd.array([2,3])}\n        >>> args_grad = {'a': mx.nd.zeros((2)), 'b': mx.nd.zeros((2))}\n        >>> texec = c.bind(ctx=mx.cpu(), args=args, args_grad=args_grad)\n        >>> out = texec.forward(is_train=True)[0].copy()\n        >>> print(out.asnumpy())\n        [ 4.  7.]\n        >>> # out_grads is the head gradient in backward pass.\n        >>> # Here we define 'c' as loss function.\n        >>> # Then 'out' is passed as head gradient of backward pass.\n        >>> texec.backward(out)\n        >>> print(texec.grad_arrays[0].asnumpy())\n        [ 8.  14.]\n        >>> print(texec.grad_arrays[1].asnumpy())\n        [ 4.  7.]\n        \"\"\"\n        if out_grads is None:\n            out_grads = []\n        elif isinstance(out_grads, NDArray):\n            out_grads = [out_grads]\n        elif isinstance(out_grads, dict):\n            out_grads = [out_grads[k] for k in self._symbol.list_outputs()]\n\n        for obj in out_grads:\n            if not isinstance(obj, NDArray):\n                raise TypeError(\"inputs must be NDArray\")\n        ndarray = c_handle_array(out_grads)\n        check_call(_LIB.MXExecutorBackwardEx(\n            self.handle,\n            mx_uint(len(out_grads)),\n            ndarray,\n            ctypes.c_int(is_train)))",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 12
          },
          "text": "backward"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 12
          },
          "end": {
            "row": 0,
            "column": 49
          },
          "text": "(self, out_grads=None, is_train=True)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 12
              },
              "end": {
                "row": 0,
                "column": 13
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 13
              },
              "end": {
                "row": 0,
                "column": 17
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 17
              },
              "end": {
                "row": 0,
                "column": 18
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 19
              },
              "end": {
                "row": 0,
                "column": 33
              },
              "text": "out_grads=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 19
                  },
                  "end": {
                    "row": 0,
                    "column": 28
                  },
                  "text": "out_grads"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 28
                  },
                  "end": {
                    "row": 0,
                    "column": 29
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 29
                  },
                  "end": {
                    "row": 0,
                    "column": 33
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 33
              },
              "end": {
                "row": 0,
                "column": 34
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 35
              },
              "end": {
                "row": 0,
                "column": 48
              },
              "text": "is_train=True",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 35
                  },
                  "end": {
                    "row": 0,
                    "column": 43
                  },
                  "text": "is_train"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 43
                  },
                  "end": {
                    "row": 0,
                    "column": 44
                  },
                  "text": "="
                },
                {
                  "type": "true",
                  "start": {
                    "row": 0,
                    "column": 44
                  },
                  "end": {
                    "row": 0,
                    "column": 48
                  },
                  "text": "True"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 48
              },
              "end": {
                "row": 0,
                "column": 49
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 49
          },
          "end": {
            "row": 0,
            "column": 50
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 80,
            "column": 36
          },
          "text": "\"\"\"Do backward pass to get the gradient of arguments.\n\n        Parameters\n        ----------\n        out_grads : NDArray or list of NDArray or dict of str to NDArray, optional\n            Gradient on the outputs to be propagated back.\n            This parameter is only needed when bind is called\n            on outputs that are not a loss function.\n        is_train : bool, default True\n            Whether this backward is for training or inference. Note that in rare\n            cases you want to call backward with is_train=False to get gradient\n            during inference.\n\n\n        Examples\n        --------\n        >>> # Example for binding on loss function symbol, which gives the loss value of the model.\n        >>> # Equivalently it gives the head gradient for backward pass.\n        >>> # In this example the built-in SoftmaxOutput is used as loss function.\n        >>> # MakeLoss can be used to define customized loss function symbol.\n        >>> net = mx.sym.Variable('data')\n        >>> net = mx.sym.FullyConnected(net, name='fc', num_hidden=6)\n        >>> net = mx.sym.Activation(net, name='relu', act_type=\"relu\")\n        >>> net = mx.sym.SoftmaxOutput(net, name='softmax')\n\n        >>> args =  {'data': mx.nd.ones((1, 4)), 'fc_weight': mx.nd.ones((6, 4)),\n        >>>          'fc_bias': mx.nd.array((1, 4, 4, 4, 5, 6)), 'softmax_label': mx.nd.ones((1))}\n        >>> args_grad = {'fc_weight': mx.nd.zeros((6, 4)), 'fc_bias': mx.nd.zeros((6))}\n        >>> texec = net.bind(ctx=mx.cpu(), args=args, args_grad=args_grad)\n        >>> out = texec.forward(is_train=True)[0].copy()\n        >>> print out.asnumpy()\n        [[ 0.00378404  0.07600445  0.07600445  0.07600445  0.20660152  0.5616011 ]]\n        >>> texec.backward()\n        >>> print(texec.grad_arrays[1].asnumpy())\n        [[ 0.00378404  0.00378404  0.00378404  0.00378404]\n         [-0.92399555 -0.92399555 -0.92399555 -0.92399555]\n         [ 0.07600445  0.07600445  0.07600445  0.07600445]\n         [ 0.07600445  0.07600445  0.07600445  0.07600445]\n         [ 0.20660152  0.20660152  0.20660152  0.20660152]\n         [ 0.5616011   0.5616011   0.5616011   0.5616011 ]]\n        >>>\n        >>> # Example for binding on non-loss function symbol.\n        >>> # Here the binding symbol is neither built-in loss function\n        >>> # nor customized loss created by MakeLoss.\n        >>> # As a result the head gradient is not automatically provided.\n        >>> a = mx.sym.Variable('a')\n        >>> b = mx.sym.Variable('b')\n        >>> # c is not a loss function symbol\n        >>> c = 2 * a + b\n        >>> args = {'a': mx.nd.array([1,2]), 'b':mx.nd.array([2,3])}\n        >>> args_grad = {'a': mx.nd.zeros((2)), 'b': mx.nd.zeros((2))}\n        >>> texec = c.bind(ctx=mx.cpu(), args=args, args_grad=args_grad)\n        >>> out = texec.forward(is_train=True)[0].copy()\n        >>> print(out.asnumpy())\n        [ 4.  7.]\n        >>> # out_grads is the head gradient in backward pass.\n        >>> # Here we define 'c' as loss function.\n        >>> # Then 'out' is passed as head gradient of backward pass.\n        >>> texec.backward(out)\n        >>> print(texec.grad_arrays[0].asnumpy())\n        [ 8.  14.]\n        >>> print(texec.grad_arrays[1].asnumpy())\n        [ 4.  7.]\n        \"\"\"\n        if out_grads is None:\n            out_grads = []\n        elif isinstance(out_grads, NDArray):\n            out_grads = [out_grads]\n        elif isinstance(out_grads, dict):\n            out_grads = [out_grads[k] for k in self._symbol.list_outputs()]\n\n        for obj in out_grads:\n            if not isinstance(obj, NDArray):\n                raise TypeError(\"inputs must be NDArray\")\n        ndarray = c_handle_array(out_grads)\n        check_call(_LIB.MXExecutorBackwardEx(\n            self.handle,\n            mx_uint(len(out_grads)),\n            ndarray,\n            ctypes.c_int(is_train)))",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 64,
                "column": 11
              },
              "text": "\"\"\"Do backward pass to get the gradient of arguments.\n\n        Parameters\n        ----------\n        out_grads : NDArray or list of NDArray or dict of str to NDArray, optional\n            Gradient on the outputs to be propagated back.\n            This parameter is only needed when bind is called\n            on outputs that are not a loss function.\n        is_train : bool, default True\n            Whether this backward is for training or inference. Note that in rare\n            cases you want to call backward with is_train=False to get gradient\n            during inference.\n\n\n        Examples\n        --------\n        >>> # Example for binding on loss function symbol, which gives the loss value of the model.\n        >>> # Equivalently it gives the head gradient for backward pass.\n        >>> # In this example the built-in SoftmaxOutput is used as loss function.\n        >>> # MakeLoss can be used to define customized loss function symbol.\n        >>> net = mx.sym.Variable('data')\n        >>> net = mx.sym.FullyConnected(net, name='fc', num_hidden=6)\n        >>> net = mx.sym.Activation(net, name='relu', act_type=\"relu\")\n        >>> net = mx.sym.SoftmaxOutput(net, name='softmax')\n\n        >>> args =  {'data': mx.nd.ones((1, 4)), 'fc_weight': mx.nd.ones((6, 4)),\n        >>>          'fc_bias': mx.nd.array((1, 4, 4, 4, 5, 6)), 'softmax_label': mx.nd.ones((1))}\n        >>> args_grad = {'fc_weight': mx.nd.zeros((6, 4)), 'fc_bias': mx.nd.zeros((6))}\n        >>> texec = net.bind(ctx=mx.cpu(), args=args, args_grad=args_grad)\n        >>> out = texec.forward(is_train=True)[0].copy()\n        >>> print out.asnumpy()\n        [[ 0.00378404  0.07600445  0.07600445  0.07600445  0.20660152  0.5616011 ]]\n        >>> texec.backward()\n        >>> print(texec.grad_arrays[1].asnumpy())\n        [[ 0.00378404  0.00378404  0.00378404  0.00378404]\n         [-0.92399555 -0.92399555 -0.92399555 -0.92399555]\n         [ 0.07600445  0.07600445  0.07600445  0.07600445]\n         [ 0.07600445  0.07600445  0.07600445  0.07600445]\n         [ 0.20660152  0.20660152  0.20660152  0.20660152]\n         [ 0.5616011   0.5616011   0.5616011   0.5616011 ]]\n        >>>\n        >>> # Example for binding on non-loss function symbol.\n        >>> # Here the binding symbol is neither built-in loss function\n        >>> # nor customized loss created by MakeLoss.\n        >>> # As a result the head gradient is not automatically provided.\n        >>> a = mx.sym.Variable('a')\n        >>> b = mx.sym.Variable('b')\n        >>> # c is not a loss function symbol\n        >>> c = 2 * a + b\n        >>> args = {'a': mx.nd.array([1,2]), 'b':mx.nd.array([2,3])}\n        >>> args_grad = {'a': mx.nd.zeros((2)), 'b': mx.nd.zeros((2))}\n        >>> texec = c.bind(ctx=mx.cpu(), args=args, args_grad=args_grad)\n        >>> out = texec.forward(is_train=True)[0].copy()\n        >>> print(out.asnumpy())\n        [ 4.  7.]\n        >>> # out_grads is the head gradient in backward pass.\n        >>> # Here we define 'c' as loss function.\n        >>> # Then 'out' is passed as head gradient of backward pass.\n        >>> texec.backward(out)\n        >>> print(texec.grad_arrays[0].asnumpy())\n        [ 8.  14.]\n        >>> print(texec.grad_arrays[1].asnumpy())\n        [ 4.  7.]\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 64,
                    "column": 11
                  },
                  "text": "\"\"\"Do backward pass to get the gradient of arguments.\n\n        Parameters\n        ----------\n        out_grads : NDArray or list of NDArray or dict of str to NDArray, optional\n            Gradient on the outputs to be propagated back.\n            This parameter is only needed when bind is called\n            on outputs that are not a loss function.\n        is_train : bool, default True\n            Whether this backward is for training or inference. Note that in rare\n            cases you want to call backward with is_train=False to get gradient\n            during inference.\n\n\n        Examples\n        --------\n        >>> # Example for binding on loss function symbol, which gives the loss value of the model.\n        >>> # Equivalently it gives the head gradient for backward pass.\n        >>> # In this example the built-in SoftmaxOutput is used as loss function.\n        >>> # MakeLoss can be used to define customized loss function symbol.\n        >>> net = mx.sym.Variable('data')\n        >>> net = mx.sym.FullyConnected(net, name='fc', num_hidden=6)\n        >>> net = mx.sym.Activation(net, name='relu', act_type=\"relu\")\n        >>> net = mx.sym.SoftmaxOutput(net, name='softmax')\n\n        >>> args =  {'data': mx.nd.ones((1, 4)), 'fc_weight': mx.nd.ones((6, 4)),\n        >>>          'fc_bias': mx.nd.array((1, 4, 4, 4, 5, 6)), 'softmax_label': mx.nd.ones((1))}\n        >>> args_grad = {'fc_weight': mx.nd.zeros((6, 4)), 'fc_bias': mx.nd.zeros((6))}\n        >>> texec = net.bind(ctx=mx.cpu(), args=args, args_grad=args_grad)\n        >>> out = texec.forward(is_train=True)[0].copy()\n        >>> print out.asnumpy()\n        [[ 0.00378404  0.07600445  0.07600445  0.07600445  0.20660152  0.5616011 ]]\n        >>> texec.backward()\n        >>> print(texec.grad_arrays[1].asnumpy())\n        [[ 0.00378404  0.00378404  0.00378404  0.00378404]\n         [-0.92399555 -0.92399555 -0.92399555 -0.92399555]\n         [ 0.07600445  0.07600445  0.07600445  0.07600445]\n         [ 0.07600445  0.07600445  0.07600445  0.07600445]\n         [ 0.20660152  0.20660152  0.20660152  0.20660152]\n         [ 0.5616011   0.5616011   0.5616011   0.5616011 ]]\n        >>>\n        >>> # Example for binding on non-loss function symbol.\n        >>> # Here the binding symbol is neither built-in loss function\n        >>> # nor customized loss created by MakeLoss.\n        >>> # As a result the head gradient is not automatically provided.\n        >>> a = mx.sym.Variable('a')\n        >>> b = mx.sym.Variable('b')\n        >>> # c is not a loss function symbol\n        >>> c = 2 * a + b\n        >>> args = {'a': mx.nd.array([1,2]), 'b':mx.nd.array([2,3])}\n        >>> args_grad = {'a': mx.nd.zeros((2)), 'b': mx.nd.zeros((2))}\n        >>> texec = c.bind(ctx=mx.cpu(), args=args, args_grad=args_grad)\n        >>> out = texec.forward(is_train=True)[0].copy()\n        >>> print(out.asnumpy())\n        [ 4.  7.]\n        >>> # out_grads is the head gradient in backward pass.\n        >>> # Here we define 'c' as loss function.\n        >>> # Then 'out' is passed as head gradient of backward pass.\n        >>> texec.backward(out)\n        >>> print(texec.grad_arrays[0].asnumpy())\n        [ 8.  14.]\n        >>> print(texec.grad_arrays[1].asnumpy())\n        [ 4.  7.]\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 64,
                        "column": 8
                      },
                      "text": "Do backward pass to get the gradient of arguments.\n\n        Parameters\n        ----------\n        out_grads : NDArray or list of NDArray or dict of str to NDArray, optional\n            Gradient on the outputs to be propagated back.\n            This parameter is only needed when bind is called\n            on outputs that are not a loss function.\n        is_train : bool, default True\n            Whether this backward is for training or inference. Note that in rare\n            cases you want to call backward with is_train=False to get gradient\n            during inference.\n\n\n        Examples\n        --------\n        >>> # Example for binding on loss function symbol, which gives the loss value of the model.\n        >>> # Equivalently it gives the head gradient for backward pass.\n        >>> # In this example the built-in SoftmaxOutput is used as loss function.\n        >>> # MakeLoss can be used to define customized loss function symbol.\n        >>> net = mx.sym.Variable('data')\n        >>> net = mx.sym.FullyConnected(net, name='fc', num_hidden=6)\n        >>> net = mx.sym.Activation(net, name='relu', act_type=\"relu\")\n        >>> net = mx.sym.SoftmaxOutput(net, name='softmax')\n\n        >>> args =  {'data': mx.nd.ones((1, 4)), 'fc_weight': mx.nd.ones((6, 4)),\n        >>>          'fc_bias': mx.nd.array((1, 4, 4, 4, 5, 6)), 'softmax_label': mx.nd.ones((1))}\n        >>> args_grad = {'fc_weight': mx.nd.zeros((6, 4)), 'fc_bias': mx.nd.zeros((6))}\n        >>> texec = net.bind(ctx=mx.cpu(), args=args, args_grad=args_grad)\n        >>> out = texec.forward(is_train=True)[0].copy()\n        >>> print out.asnumpy()\n        [[ 0.00378404  0.07600445  0.07600445  0.07600445  0.20660152  0.5616011 ]]\n        >>> texec.backward()\n        >>> print(texec.grad_arrays[1].asnumpy())\n        [[ 0.00378404  0.00378404  0.00378404  0.00378404]\n         [-0.92399555 -0.92399555 -0.92399555 -0.92399555]\n         [ 0.07600445  0.07600445  0.07600445  0.07600445]\n         [ 0.07600445  0.07600445  0.07600445  0.07600445]\n         [ 0.20660152  0.20660152  0.20660152  0.20660152]\n         [ 0.5616011   0.5616011   0.5616011   0.5616011 ]]\n        >>>\n        >>> # Example for binding on non-loss function symbol.\n        >>> # Here the binding symbol is neither built-in loss function\n        >>> # nor customized loss created by MakeLoss.\n        >>> # As a result the head gradient is not automatically provided.\n        >>> a = mx.sym.Variable('a')\n        >>> b = mx.sym.Variable('b')\n        >>> # c is not a loss function symbol\n        >>> c = 2 * a + b\n        >>> args = {'a': mx.nd.array([1,2]), 'b':mx.nd.array([2,3])}\n        >>> args_grad = {'a': mx.nd.zeros((2)), 'b': mx.nd.zeros((2))}\n        >>> texec = c.bind(ctx=mx.cpu(), args=args, args_grad=args_grad)\n        >>> out = texec.forward(is_train=True)[0].copy()\n        >>> print(out.asnumpy())\n        [ 4.  7.]\n        >>> # out_grads is the head gradient in backward pass.\n        >>> # Here we define 'c' as loss function.\n        >>> # Then 'out' is passed as head gradient of backward pass.\n        >>> texec.backward(out)\n        >>> print(texec.grad_arrays[0].asnumpy())\n        [ 8.  14.]\n        >>> print(texec.grad_arrays[1].asnumpy())\n        [ 4.  7.]\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 64,
                        "column": 8
                      },
                      "end": {
                        "row": 64,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 65,
                "column": 8
              },
              "end": {
                "row": 70,
                "column": 75
              },
              "text": "if out_grads is None:\n            out_grads = []\n        elif isinstance(out_grads, NDArray):\n            out_grads = [out_grads]\n        elif isinstance(out_grads, dict):\n            out_grads = [out_grads[k] for k in self._symbol.list_outputs()]",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 65,
                    "column": 8
                  },
                  "end": {
                    "row": 65,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "comparison_operator",
                  "start": {
                    "row": 65,
                    "column": 11
                  },
                  "end": {
                    "row": 65,
                    "column": 28
                  },
                  "text": "out_grads is None",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 65,
                        "column": 11
                      },
                      "end": {
                        "row": 65,
                        "column": 20
                      },
                      "text": "out_grads"
                    },
                    {
                      "type": "is",
                      "start": {
                        "row": 65,
                        "column": 21
                      },
                      "end": {
                        "row": 65,
                        "column": 23
                      },
                      "text": "is"
                    },
                    {
                      "type": "none",
                      "start": {
                        "row": 65,
                        "column": 24
                      },
                      "end": {
                        "row": 65,
                        "column": 28
                      },
                      "text": "None"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 65,
                    "column": 28
                  },
                  "end": {
                    "row": 65,
                    "column": 29
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 66,
                    "column": 12
                  },
                  "end": {
                    "row": 66,
                    "column": 26
                  },
                  "text": "out_grads = []",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 66,
                        "column": 12
                      },
                      "end": {
                        "row": 66,
                        "column": 26
                      },
                      "text": "out_grads = []",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 66,
                            "column": 12
                          },
                          "end": {
                            "row": 66,
                            "column": 26
                          },
                          "text": "out_grads = []",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 66,
                                "column": 12
                              },
                              "end": {
                                "row": 66,
                                "column": 21
                              },
                              "text": "out_grads"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 66,
                                "column": 22
                              },
                              "end": {
                                "row": 66,
                                "column": 23
                              },
                              "text": "="
                            },
                            {
                              "type": "list",
                              "start": {
                                "row": 66,
                                "column": 24
                              },
                              "end": {
                                "row": 66,
                                "column": 26
                              },
                              "text": "[]",
                              "children": [
                                {
                                  "type": "[",
                                  "start": {
                                    "row": 66,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 66,
                                    "column": 25
                                  },
                                  "text": "["
                                },
                                {
                                  "type": "]",
                                  "start": {
                                    "row": 66,
                                    "column": 25
                                  },
                                  "end": {
                                    "row": 66,
                                    "column": 26
                                  },
                                  "text": "]"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "elif_clause",
                  "start": {
                    "row": 67,
                    "column": 8
                  },
                  "end": {
                    "row": 68,
                    "column": 35
                  },
                  "text": "elif isinstance(out_grads, NDArray):\n            out_grads = [out_grads]",
                  "children": [
                    {
                      "type": "elif",
                      "start": {
                        "row": 67,
                        "column": 8
                      },
                      "end": {
                        "row": 67,
                        "column": 12
                      },
                      "text": "elif"
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 67,
                        "column": 13
                      },
                      "end": {
                        "row": 67,
                        "column": 43
                      },
                      "text": "isinstance(out_grads, NDArray)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 67,
                            "column": 13
                          },
                          "end": {
                            "row": 67,
                            "column": 23
                          },
                          "text": "isinstance"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 67,
                            "column": 23
                          },
                          "end": {
                            "row": 67,
                            "column": 43
                          },
                          "text": "(out_grads, NDArray)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 67,
                                "column": 23
                              },
                              "end": {
                                "row": 67,
                                "column": 24
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 67,
                                "column": 24
                              },
                              "end": {
                                "row": 67,
                                "column": 33
                              },
                              "text": "out_grads"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 67,
                                "column": 33
                              },
                              "end": {
                                "row": 67,
                                "column": 34
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 67,
                                "column": 35
                              },
                              "end": {
                                "row": 67,
                                "column": 42
                              },
                              "text": "NDArray"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 67,
                                "column": 42
                              },
                              "end": {
                                "row": 67,
                                "column": 43
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 67,
                        "column": 43
                      },
                      "end": {
                        "row": 67,
                        "column": 44
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 68,
                        "column": 12
                      },
                      "end": {
                        "row": 68,
                        "column": 35
                      },
                      "text": "out_grads = [out_grads]",
                      "children": [
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 68,
                            "column": 12
                          },
                          "end": {
                            "row": 68,
                            "column": 35
                          },
                          "text": "out_grads = [out_grads]",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 68,
                                "column": 12
                              },
                              "end": {
                                "row": 68,
                                "column": 35
                              },
                              "text": "out_grads = [out_grads]",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 68,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 68,
                                    "column": 21
                                  },
                                  "text": "out_grads"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 68,
                                    "column": 22
                                  },
                                  "end": {
                                    "row": 68,
                                    "column": 23
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "list",
                                  "start": {
                                    "row": 68,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 68,
                                    "column": 35
                                  },
                                  "text": "[out_grads]",
                                  "children": [
                                    {
                                      "type": "[",
                                      "start": {
                                        "row": 68,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 68,
                                        "column": 25
                                      },
                                      "text": "["
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 68,
                                        "column": 25
                                      },
                                      "end": {
                                        "row": 68,
                                        "column": 34
                                      },
                                      "text": "out_grads"
                                    },
                                    {
                                      "type": "]",
                                      "start": {
                                        "row": 68,
                                        "column": 34
                                      },
                                      "end": {
                                        "row": 68,
                                        "column": 35
                                      },
                                      "text": "]"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "elif_clause",
                  "start": {
                    "row": 69,
                    "column": 8
                  },
                  "end": {
                    "row": 70,
                    "column": 75
                  },
                  "text": "elif isinstance(out_grads, dict):\n            out_grads = [out_grads[k] for k in self._symbol.list_outputs()]",
                  "children": [
                    {
                      "type": "elif",
                      "start": {
                        "row": 69,
                        "column": 8
                      },
                      "end": {
                        "row": 69,
                        "column": 12
                      },
                      "text": "elif"
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 69,
                        "column": 13
                      },
                      "end": {
                        "row": 69,
                        "column": 40
                      },
                      "text": "isinstance(out_grads, dict)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 69,
                            "column": 13
                          },
                          "end": {
                            "row": 69,
                            "column": 23
                          },
                          "text": "isinstance"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 69,
                            "column": 23
                          },
                          "end": {
                            "row": 69,
                            "column": 40
                          },
                          "text": "(out_grads, dict)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 69,
                                "column": 23
                              },
                              "end": {
                                "row": 69,
                                "column": 24
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 69,
                                "column": 24
                              },
                              "end": {
                                "row": 69,
                                "column": 33
                              },
                              "text": "out_grads"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 69,
                                "column": 33
                              },
                              "end": {
                                "row": 69,
                                "column": 34
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 69,
                                "column": 35
                              },
                              "end": {
                                "row": 69,
                                "column": 39
                              },
                              "text": "dict"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 69,
                                "column": 39
                              },
                              "end": {
                                "row": 69,
                                "column": 40
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 69,
                        "column": 40
                      },
                      "end": {
                        "row": 69,
                        "column": 41
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 70,
                        "column": 12
                      },
                      "end": {
                        "row": 70,
                        "column": 75
                      },
                      "text": "out_grads = [out_grads[k] for k in self._symbol.list_outputs()]",
                      "children": [
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 70,
                            "column": 12
                          },
                          "end": {
                            "row": 70,
                            "column": 75
                          },
                          "text": "out_grads = [out_grads[k] for k in self._symbol.list_outputs()]",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 70,
                                "column": 12
                              },
                              "end": {
                                "row": 70,
                                "column": 75
                              },
                              "text": "out_grads = [out_grads[k] for k in self._symbol.list_outputs()]",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 70,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 70,
                                    "column": 21
                                  },
                                  "text": "out_grads"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 70,
                                    "column": 22
                                  },
                                  "end": {
                                    "row": 70,
                                    "column": 23
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "list_comprehension",
                                  "start": {
                                    "row": 70,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 70,
                                    "column": 75
                                  },
                                  "text": "[out_grads[k] for k in self._symbol.list_outputs()]",
                                  "children": [
                                    {
                                      "type": "[",
                                      "start": {
                                        "row": 70,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 70,
                                        "column": 25
                                      },
                                      "text": "["
                                    },
                                    {
                                      "type": "subscript",
                                      "start": {
                                        "row": 70,
                                        "column": 25
                                      },
                                      "end": {
                                        "row": 70,
                                        "column": 37
                                      },
                                      "text": "out_grads[k]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 70,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 70,
                                            "column": 34
                                          },
                                          "text": "out_grads"
                                        },
                                        {
                                          "type": "[",
                                          "start": {
                                            "row": 70,
                                            "column": 34
                                          },
                                          "end": {
                                            "row": 70,
                                            "column": 35
                                          },
                                          "text": "["
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 70,
                                            "column": 35
                                          },
                                          "end": {
                                            "row": 70,
                                            "column": 36
                                          },
                                          "text": "k"
                                        },
                                        {
                                          "type": "]",
                                          "start": {
                                            "row": 70,
                                            "column": 36
                                          },
                                          "end": {
                                            "row": 70,
                                            "column": 37
                                          },
                                          "text": "]"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "for_in_clause",
                                      "start": {
                                        "row": 70,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 70,
                                        "column": 74
                                      },
                                      "text": "for k in self._symbol.list_outputs()",
                                      "children": [
                                        {
                                          "type": "for",
                                          "start": {
                                            "row": 70,
                                            "column": 38
                                          },
                                          "end": {
                                            "row": 70,
                                            "column": 41
                                          },
                                          "text": "for"
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 70,
                                            "column": 42
                                          },
                                          "end": {
                                            "row": 70,
                                            "column": 43
                                          },
                                          "text": "k"
                                        },
                                        {
                                          "type": "in",
                                          "start": {
                                            "row": 70,
                                            "column": 44
                                          },
                                          "end": {
                                            "row": 70,
                                            "column": 46
                                          },
                                          "text": "in"
                                        },
                                        {
                                          "type": "call",
                                          "start": {
                                            "row": 70,
                                            "column": 47
                                          },
                                          "end": {
                                            "row": 70,
                                            "column": 74
                                          },
                                          "text": "self._symbol.list_outputs()",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "start": {
                                                "row": 70,
                                                "column": 47
                                              },
                                              "end": {
                                                "row": 70,
                                                "column": 72
                                              },
                                              "text": "self._symbol.list_outputs",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "start": {
                                                    "row": 70,
                                                    "column": 47
                                                  },
                                                  "end": {
                                                    "row": 70,
                                                    "column": 59
                                                  },
                                                  "text": "self._symbol",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 70,
                                                        "column": 47
                                                      },
                                                      "end": {
                                                        "row": 70,
                                                        "column": 51
                                                      },
                                                      "text": "self"
                                                    },
                                                    {
                                                      "type": ".",
                                                      "start": {
                                                        "row": 70,
                                                        "column": 51
                                                      },
                                                      "end": {
                                                        "row": 70,
                                                        "column": 52
                                                      },
                                                      "text": "."
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 70,
                                                        "column": 52
                                                      },
                                                      "end": {
                                                        "row": 70,
                                                        "column": 59
                                                      },
                                                      "text": "_symbol"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ".",
                                                  "start": {
                                                    "row": 70,
                                                    "column": 59
                                                  },
                                                  "end": {
                                                    "row": 70,
                                                    "column": 60
                                                  },
                                                  "text": "."
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 70,
                                                    "column": 60
                                                  },
                                                  "end": {
                                                    "row": 70,
                                                    "column": 72
                                                  },
                                                  "text": "list_outputs"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 70,
                                                "column": 72
                                              },
                                              "end": {
                                                "row": 70,
                                                "column": 74
                                              },
                                              "text": "()",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 70,
                                                    "column": 72
                                                  },
                                                  "end": {
                                                    "row": 70,
                                                    "column": 73
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 70,
                                                    "column": 73
                                                  },
                                                  "end": {
                                                    "row": 70,
                                                    "column": 74
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "]",
                                      "start": {
                                        "row": 70,
                                        "column": 74
                                      },
                                      "end": {
                                        "row": 70,
                                        "column": 75
                                      },
                                      "text": "]"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "for_statement",
              "start": {
                "row": 72,
                "column": 8
              },
              "end": {
                "row": 74,
                "column": 57
              },
              "text": "for obj in out_grads:\n            if not isinstance(obj, NDArray):\n                raise TypeError(\"inputs must be NDArray\")",
              "children": [
                {
                  "type": "for",
                  "start": {
                    "row": 72,
                    "column": 8
                  },
                  "end": {
                    "row": 72,
                    "column": 11
                  },
                  "text": "for"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 72,
                    "column": 12
                  },
                  "end": {
                    "row": 72,
                    "column": 15
                  },
                  "text": "obj"
                },
                {
                  "type": "in",
                  "start": {
                    "row": 72,
                    "column": 16
                  },
                  "end": {
                    "row": 72,
                    "column": 18
                  },
                  "text": "in"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 72,
                    "column": 19
                  },
                  "end": {
                    "row": 72,
                    "column": 28
                  },
                  "text": "out_grads"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 72,
                    "column": 28
                  },
                  "end": {
                    "row": 72,
                    "column": 29
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 73,
                    "column": 12
                  },
                  "end": {
                    "row": 74,
                    "column": 57
                  },
                  "text": "if not isinstance(obj, NDArray):\n                raise TypeError(\"inputs must be NDArray\")",
                  "children": [
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 73,
                        "column": 12
                      },
                      "end": {
                        "row": 74,
                        "column": 57
                      },
                      "text": "if not isinstance(obj, NDArray):\n                raise TypeError(\"inputs must be NDArray\")",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 73,
                            "column": 12
                          },
                          "end": {
                            "row": 73,
                            "column": 14
                          },
                          "text": "if"
                        },
                        {
                          "type": "not_operator",
                          "start": {
                            "row": 73,
                            "column": 15
                          },
                          "end": {
                            "row": 73,
                            "column": 43
                          },
                          "text": "not isinstance(obj, NDArray)",
                          "children": [
                            {
                              "type": "not",
                              "start": {
                                "row": 73,
                                "column": 15
                              },
                              "end": {
                                "row": 73,
                                "column": 18
                              },
                              "text": "not"
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 73,
                                "column": 19
                              },
                              "end": {
                                "row": 73,
                                "column": 43
                              },
                              "text": "isinstance(obj, NDArray)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 73,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 73,
                                    "column": 29
                                  },
                                  "text": "isinstance"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 73,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 73,
                                    "column": 43
                                  },
                                  "text": "(obj, NDArray)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 73,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 73,
                                        "column": 30
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 73,
                                        "column": 30
                                      },
                                      "end": {
                                        "row": 73,
                                        "column": 33
                                      },
                                      "text": "obj"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 73,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 73,
                                        "column": 34
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 73,
                                        "column": 35
                                      },
                                      "end": {
                                        "row": 73,
                                        "column": 42
                                      },
                                      "text": "NDArray"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 73,
                                        "column": 42
                                      },
                                      "end": {
                                        "row": 73,
                                        "column": 43
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 73,
                            "column": 43
                          },
                          "end": {
                            "row": 73,
                            "column": 44
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 74,
                            "column": 16
                          },
                          "end": {
                            "row": 74,
                            "column": 57
                          },
                          "text": "raise TypeError(\"inputs must be NDArray\")",
                          "children": [
                            {
                              "type": "raise_statement",
                              "start": {
                                "row": 74,
                                "column": 16
                              },
                              "end": {
                                "row": 74,
                                "column": 57
                              },
                              "text": "raise TypeError(\"inputs must be NDArray\")",
                              "children": [
                                {
                                  "type": "raise",
                                  "start": {
                                    "row": 74,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 74,
                                    "column": 21
                                  },
                                  "text": "raise"
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 74,
                                    "column": 22
                                  },
                                  "end": {
                                    "row": 74,
                                    "column": 57
                                  },
                                  "text": "TypeError(\"inputs must be NDArray\")",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 74,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 74,
                                        "column": 31
                                      },
                                      "text": "TypeError"
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 74,
                                        "column": 31
                                      },
                                      "end": {
                                        "row": 74,
                                        "column": 57
                                      },
                                      "text": "(\"inputs must be NDArray\")",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 74,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 74,
                                            "column": 32
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "string",
                                          "start": {
                                            "row": 74,
                                            "column": 32
                                          },
                                          "end": {
                                            "row": 74,
                                            "column": 56
                                          },
                                          "text": "\"inputs must be NDArray\"",
                                          "children": [
                                            {
                                              "type": "string_start",
                                              "start": {
                                                "row": 74,
                                                "column": 32
                                              },
                                              "end": {
                                                "row": 74,
                                                "column": 33
                                              },
                                              "text": "\""
                                            },
                                            {
                                              "type": "string_content",
                                              "start": {
                                                "row": 74,
                                                "column": 33
                                              },
                                              "end": {
                                                "row": 74,
                                                "column": 55
                                              },
                                              "text": "inputs must be NDArray"
                                            },
                                            {
                                              "type": "string_end",
                                              "start": {
                                                "row": 74,
                                                "column": 55
                                              },
                                              "end": {
                                                "row": 74,
                                                "column": 56
                                              },
                                              "text": "\""
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 74,
                                            "column": 56
                                          },
                                          "end": {
                                            "row": 74,
                                            "column": 57
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 75,
                "column": 8
              },
              "end": {
                "row": 75,
                "column": 43
              },
              "text": "ndarray = c_handle_array(out_grads)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 75,
                    "column": 8
                  },
                  "end": {
                    "row": 75,
                    "column": 43
                  },
                  "text": "ndarray = c_handle_array(out_grads)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 75,
                        "column": 8
                      },
                      "end": {
                        "row": 75,
                        "column": 15
                      },
                      "text": "ndarray"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 75,
                        "column": 16
                      },
                      "end": {
                        "row": 75,
                        "column": 17
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 75,
                        "column": 18
                      },
                      "end": {
                        "row": 75,
                        "column": 43
                      },
                      "text": "c_handle_array(out_grads)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 75,
                            "column": 18
                          },
                          "end": {
                            "row": 75,
                            "column": 32
                          },
                          "text": "c_handle_array"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 75,
                            "column": 32
                          },
                          "end": {
                            "row": 75,
                            "column": 43
                          },
                          "text": "(out_grads)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 75,
                                "column": 32
                              },
                              "end": {
                                "row": 75,
                                "column": 33
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 75,
                                "column": 33
                              },
                              "end": {
                                "row": 75,
                                "column": 42
                              },
                              "text": "out_grads"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 75,
                                "column": 42
                              },
                              "end": {
                                "row": 75,
                                "column": 43
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 76,
                "column": 8
              },
              "end": {
                "row": 80,
                "column": 36
              },
              "text": "check_call(_LIB.MXExecutorBackwardEx(\n            self.handle,\n            mx_uint(len(out_grads)),\n            ndarray,\n            ctypes.c_int(is_train)))",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 76,
                    "column": 8
                  },
                  "end": {
                    "row": 80,
                    "column": 36
                  },
                  "text": "check_call(_LIB.MXExecutorBackwardEx(\n            self.handle,\n            mx_uint(len(out_grads)),\n            ndarray,\n            ctypes.c_int(is_train)))",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 76,
                        "column": 8
                      },
                      "end": {
                        "row": 76,
                        "column": 18
                      },
                      "text": "check_call"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 76,
                        "column": 18
                      },
                      "end": {
                        "row": 80,
                        "column": 36
                      },
                      "text": "(_LIB.MXExecutorBackwardEx(\n            self.handle,\n            mx_uint(len(out_grads)),\n            ndarray,\n            ctypes.c_int(is_train)))",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 76,
                            "column": 18
                          },
                          "end": {
                            "row": 76,
                            "column": 19
                          },
                          "text": "("
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 76,
                            "column": 19
                          },
                          "end": {
                            "row": 80,
                            "column": 35
                          },
                          "text": "_LIB.MXExecutorBackwardEx(\n            self.handle,\n            mx_uint(len(out_grads)),\n            ndarray,\n            ctypes.c_int(is_train))",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 76,
                                "column": 19
                              },
                              "end": {
                                "row": 76,
                                "column": 44
                              },
                              "text": "_LIB.MXExecutorBackwardEx",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 76,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 76,
                                    "column": 23
                                  },
                                  "text": "_LIB"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 76,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 76,
                                    "column": 24
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 76,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 76,
                                    "column": 44
                                  },
                                  "text": "MXExecutorBackwardEx"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 76,
                                "column": 44
                              },
                              "end": {
                                "row": 80,
                                "column": 35
                              },
                              "text": "(\n            self.handle,\n            mx_uint(len(out_grads)),\n            ndarray,\n            ctypes.c_int(is_train))",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 76,
                                    "column": 44
                                  },
                                  "end": {
                                    "row": 76,
                                    "column": 45
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 77,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 77,
                                    "column": 23
                                  },
                                  "text": "self.handle",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 77,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 77,
                                        "column": 16
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 77,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 77,
                                        "column": 17
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 77,
                                        "column": 17
                                      },
                                      "end": {
                                        "row": 77,
                                        "column": 23
                                      },
                                      "text": "handle"
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 77,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 77,
                                    "column": 24
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 78,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 78,
                                    "column": 35
                                  },
                                  "text": "mx_uint(len(out_grads))",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 78,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 78,
                                        "column": 19
                                      },
                                      "text": "mx_uint"
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 78,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 78,
                                        "column": 35
                                      },
                                      "text": "(len(out_grads))",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 78,
                                            "column": 19
                                          },
                                          "end": {
                                            "row": 78,
                                            "column": 20
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "call",
                                          "start": {
                                            "row": 78,
                                            "column": 20
                                          },
                                          "end": {
                                            "row": 78,
                                            "column": 34
                                          },
                                          "text": "len(out_grads)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 78,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 78,
                                                "column": 23
                                              },
                                              "text": "len"
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 78,
                                                "column": 23
                                              },
                                              "end": {
                                                "row": 78,
                                                "column": 34
                                              },
                                              "text": "(out_grads)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 78,
                                                    "column": 23
                                                  },
                                                  "end": {
                                                    "row": 78,
                                                    "column": 24
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 78,
                                                    "column": 24
                                                  },
                                                  "end": {
                                                    "row": 78,
                                                    "column": 33
                                                  },
                                                  "text": "out_grads"
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 78,
                                                    "column": 33
                                                  },
                                                  "end": {
                                                    "row": 78,
                                                    "column": 34
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 78,
                                            "column": 34
                                          },
                                          "end": {
                                            "row": 78,
                                            "column": 35
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 78,
                                    "column": 35
                                  },
                                  "end": {
                                    "row": 78,
                                    "column": 36
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 79,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 79,
                                    "column": 19
                                  },
                                  "text": "ndarray"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 79,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 79,
                                    "column": 20
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 80,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 80,
                                    "column": 34
                                  },
                                  "text": "ctypes.c_int(is_train)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 80,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 80,
                                        "column": 24
                                      },
                                      "text": "ctypes.c_int",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 80,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 80,
                                            "column": 18
                                          },
                                          "text": "ctypes"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 80,
                                            "column": 18
                                          },
                                          "end": {
                                            "row": 80,
                                            "column": 19
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 80,
                                            "column": 19
                                          },
                                          "end": {
                                            "row": 80,
                                            "column": 24
                                          },
                                          "text": "c_int"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 80,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 80,
                                        "column": 34
                                      },
                                      "text": "(is_train)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 80,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 80,
                                            "column": 25
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 80,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 80,
                                            "column": 33
                                          },
                                          "text": "is_train"
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 80,
                                            "column": 33
                                          },
                                          "end": {
                                            "row": 80,
                                            "column": 34
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 80,
                                    "column": 34
                                  },
                                  "end": {
                                    "row": 80,
                                    "column": 35
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 80,
                            "column": 35
                          },
                          "end": {
                            "row": 80,
                            "column": 36
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}