{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 31,
    "column": 34
  },
  "text": "def universal_transformer_basic(layer_inputs,\n                                step, hparams,\n                                ffn_unit,\n                                attention_unit):\n  \"\"\"Basic Universal Transformer.\n\n  This model is pretty similar to the vanilla transformer in which weights are\n  shared between layers. For some tasks, this simple idea brings a\n  generalization that is not achievable by playing with the size of the model\n  or drop_out parameters in the vanilla transformer.\n\n  Args:\n    layer_inputs:\n        - state: state\n    step: indicates number of steps taken so far\n    hparams: model hyper-parameters\n    ffn_unit: feed-forward unit\n    attention_unit: multi-head attention unit\n\n  Returns:\n    layer_output:\n         new_state: new state\n  \"\"\"\n  state, inputs, memory = tf.unstack(layer_inputs, num=None, axis=0,\n                                     name=\"unstack\")\n  new_state = step_preprocess(state, step, hparams)\n\n  for i in range(hparams.num_inrecurrence_layers):\n    with tf.variable_scope(\"rec_layer_%d\" % i):\n      new_state = ffn_unit(attention_unit(new_state))\n\n  return new_state, inputs, memory",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 31,
        "column": 34
      },
      "text": "def universal_transformer_basic(layer_inputs,\n                                step, hparams,\n                                ffn_unit,\n                                attention_unit):\n  \"\"\"Basic Universal Transformer.\n\n  This model is pretty similar to the vanilla transformer in which weights are\n  shared between layers. For some tasks, this simple idea brings a\n  generalization that is not achievable by playing with the size of the model\n  or drop_out parameters in the vanilla transformer.\n\n  Args:\n    layer_inputs:\n        - state: state\n    step: indicates number of steps taken so far\n    hparams: model hyper-parameters\n    ffn_unit: feed-forward unit\n    attention_unit: multi-head attention unit\n\n  Returns:\n    layer_output:\n         new_state: new state\n  \"\"\"\n  state, inputs, memory = tf.unstack(layer_inputs, num=None, axis=0,\n                                     name=\"unstack\")\n  new_state = step_preprocess(state, step, hparams)\n\n  for i in range(hparams.num_inrecurrence_layers):\n    with tf.variable_scope(\"rec_layer_%d\" % i):\n      new_state = ffn_unit(attention_unit(new_state))\n\n  return new_state, inputs, memory",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 31
          },
          "text": "universal_transformer_basic"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 31
          },
          "end": {
            "row": 3,
            "column": 47
          },
          "text": "(layer_inputs,\n                                step, hparams,\n                                ffn_unit,\n                                attention_unit)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 31
              },
              "end": {
                "row": 0,
                "column": 32
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 32
              },
              "end": {
                "row": 0,
                "column": 44
              },
              "text": "layer_inputs"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 44
              },
              "end": {
                "row": 0,
                "column": 45
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 1,
                "column": 32
              },
              "end": {
                "row": 1,
                "column": 36
              },
              "text": "step"
            },
            {
              "type": ",",
              "start": {
                "row": 1,
                "column": 36
              },
              "end": {
                "row": 1,
                "column": 37
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 1,
                "column": 38
              },
              "end": {
                "row": 1,
                "column": 45
              },
              "text": "hparams"
            },
            {
              "type": ",",
              "start": {
                "row": 1,
                "column": 45
              },
              "end": {
                "row": 1,
                "column": 46
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 2,
                "column": 32
              },
              "end": {
                "row": 2,
                "column": 40
              },
              "text": "ffn_unit"
            },
            {
              "type": ",",
              "start": {
                "row": 2,
                "column": 40
              },
              "end": {
                "row": 2,
                "column": 41
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 3,
                "column": 32
              },
              "end": {
                "row": 3,
                "column": 46
              },
              "text": "attention_unit"
            },
            {
              "type": ")",
              "start": {
                "row": 3,
                "column": 46
              },
              "end": {
                "row": 3,
                "column": 47
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 3,
            "column": 47
          },
          "end": {
            "row": 3,
            "column": 48
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 4,
            "column": 2
          },
          "end": {
            "row": 31,
            "column": 34
          },
          "text": "\"\"\"Basic Universal Transformer.\n\n  This model is pretty similar to the vanilla transformer in which weights are\n  shared between layers. For some tasks, this simple idea brings a\n  generalization that is not achievable by playing with the size of the model\n  or drop_out parameters in the vanilla transformer.\n\n  Args:\n    layer_inputs:\n        - state: state\n    step: indicates number of steps taken so far\n    hparams: model hyper-parameters\n    ffn_unit: feed-forward unit\n    attention_unit: multi-head attention unit\n\n  Returns:\n    layer_output:\n         new_state: new state\n  \"\"\"\n  state, inputs, memory = tf.unstack(layer_inputs, num=None, axis=0,\n                                     name=\"unstack\")\n  new_state = step_preprocess(state, step, hparams)\n\n  for i in range(hparams.num_inrecurrence_layers):\n    with tf.variable_scope(\"rec_layer_%d\" % i):\n      new_state = ffn_unit(attention_unit(new_state))\n\n  return new_state, inputs, memory",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 4,
                "column": 2
              },
              "end": {
                "row": 22,
                "column": 5
              },
              "text": "\"\"\"Basic Universal Transformer.\n\n  This model is pretty similar to the vanilla transformer in which weights are\n  shared between layers. For some tasks, this simple idea brings a\n  generalization that is not achievable by playing with the size of the model\n  or drop_out parameters in the vanilla transformer.\n\n  Args:\n    layer_inputs:\n        - state: state\n    step: indicates number of steps taken so far\n    hparams: model hyper-parameters\n    ffn_unit: feed-forward unit\n    attention_unit: multi-head attention unit\n\n  Returns:\n    layer_output:\n         new_state: new state\n  \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 4,
                    "column": 2
                  },
                  "end": {
                    "row": 22,
                    "column": 5
                  },
                  "text": "\"\"\"Basic Universal Transformer.\n\n  This model is pretty similar to the vanilla transformer in which weights are\n  shared between layers. For some tasks, this simple idea brings a\n  generalization that is not achievable by playing with the size of the model\n  or drop_out parameters in the vanilla transformer.\n\n  Args:\n    layer_inputs:\n        - state: state\n    step: indicates number of steps taken so far\n    hparams: model hyper-parameters\n    ffn_unit: feed-forward unit\n    attention_unit: multi-head attention unit\n\n  Returns:\n    layer_output:\n         new_state: new state\n  \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 4,
                        "column": 2
                      },
                      "end": {
                        "row": 4,
                        "column": 5
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 4,
                        "column": 5
                      },
                      "end": {
                        "row": 22,
                        "column": 2
                      },
                      "text": "Basic Universal Transformer.\n\n  This model is pretty similar to the vanilla transformer in which weights are\n  shared between layers. For some tasks, this simple idea brings a\n  generalization that is not achievable by playing with the size of the model\n  or drop_out parameters in the vanilla transformer.\n\n  Args:\n    layer_inputs:\n        - state: state\n    step: indicates number of steps taken so far\n    hparams: model hyper-parameters\n    ffn_unit: feed-forward unit\n    attention_unit: multi-head attention unit\n\n  Returns:\n    layer_output:\n         new_state: new state\n  "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 22,
                        "column": 2
                      },
                      "end": {
                        "row": 22,
                        "column": 5
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 23,
                "column": 2
              },
              "end": {
                "row": 24,
                "column": 52
              },
              "text": "state, inputs, memory = tf.unstack(layer_inputs, num=None, axis=0,\n                                     name=\"unstack\")",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 23,
                    "column": 2
                  },
                  "end": {
                    "row": 24,
                    "column": 52
                  },
                  "text": "state, inputs, memory = tf.unstack(layer_inputs, num=None, axis=0,\n                                     name=\"unstack\")",
                  "children": [
                    {
                      "type": "pattern_list",
                      "start": {
                        "row": 23,
                        "column": 2
                      },
                      "end": {
                        "row": 23,
                        "column": 23
                      },
                      "text": "state, inputs, memory",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 23,
                            "column": 2
                          },
                          "end": {
                            "row": 23,
                            "column": 7
                          },
                          "text": "state"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 23,
                            "column": 7
                          },
                          "end": {
                            "row": 23,
                            "column": 8
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 23,
                            "column": 9
                          },
                          "end": {
                            "row": 23,
                            "column": 15
                          },
                          "text": "inputs"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 23,
                            "column": 15
                          },
                          "end": {
                            "row": 23,
                            "column": 16
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 23,
                            "column": 17
                          },
                          "end": {
                            "row": 23,
                            "column": 23
                          },
                          "text": "memory"
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 23,
                        "column": 24
                      },
                      "end": {
                        "row": 23,
                        "column": 25
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 23,
                        "column": 26
                      },
                      "end": {
                        "row": 24,
                        "column": 52
                      },
                      "text": "tf.unstack(layer_inputs, num=None, axis=0,\n                                     name=\"unstack\")",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 23,
                            "column": 26
                          },
                          "end": {
                            "row": 23,
                            "column": 36
                          },
                          "text": "tf.unstack",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 26
                              },
                              "end": {
                                "row": 23,
                                "column": 28
                              },
                              "text": "tf"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 23,
                                "column": 28
                              },
                              "end": {
                                "row": 23,
                                "column": 29
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 29
                              },
                              "end": {
                                "row": 23,
                                "column": 36
                              },
                              "text": "unstack"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 23,
                            "column": 36
                          },
                          "end": {
                            "row": 24,
                            "column": 52
                          },
                          "text": "(layer_inputs, num=None, axis=0,\n                                     name=\"unstack\")",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 23,
                                "column": 36
                              },
                              "end": {
                                "row": 23,
                                "column": 37
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 37
                              },
                              "end": {
                                "row": 23,
                                "column": 49
                              },
                              "text": "layer_inputs"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 23,
                                "column": 49
                              },
                              "end": {
                                "row": 23,
                                "column": 50
                              },
                              "text": ","
                            },
                            {
                              "type": "keyword_argument",
                              "start": {
                                "row": 23,
                                "column": 51
                              },
                              "end": {
                                "row": 23,
                                "column": 59
                              },
                              "text": "num=None",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 23,
                                    "column": 51
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 54
                                  },
                                  "text": "num"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 23,
                                    "column": 54
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 55
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "none",
                                  "start": {
                                    "row": 23,
                                    "column": 55
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 59
                                  },
                                  "text": "None"
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 23,
                                "column": 59
                              },
                              "end": {
                                "row": 23,
                                "column": 60
                              },
                              "text": ","
                            },
                            {
                              "type": "keyword_argument",
                              "start": {
                                "row": 23,
                                "column": 61
                              },
                              "end": {
                                "row": 23,
                                "column": 67
                              },
                              "text": "axis=0",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 23,
                                    "column": 61
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 65
                                  },
                                  "text": "axis"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 23,
                                    "column": 65
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 66
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "integer",
                                  "start": {
                                    "row": 23,
                                    "column": 66
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 67
                                  },
                                  "text": "0"
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 23,
                                "column": 67
                              },
                              "end": {
                                "row": 23,
                                "column": 68
                              },
                              "text": ","
                            },
                            {
                              "type": "keyword_argument",
                              "start": {
                                "row": 24,
                                "column": 37
                              },
                              "end": {
                                "row": 24,
                                "column": 51
                              },
                              "text": "name=\"unstack\"",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 24,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 24,
                                    "column": 41
                                  },
                                  "text": "name"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 24,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 24,
                                    "column": 42
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 24,
                                    "column": 42
                                  },
                                  "end": {
                                    "row": 24,
                                    "column": 51
                                  },
                                  "text": "\"unstack\"",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 24,
                                        "column": 42
                                      },
                                      "end": {
                                        "row": 24,
                                        "column": 43
                                      },
                                      "text": "\""
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 24,
                                        "column": 43
                                      },
                                      "end": {
                                        "row": 24,
                                        "column": 50
                                      },
                                      "text": "unstack"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 24,
                                        "column": 50
                                      },
                                      "end": {
                                        "row": 24,
                                        "column": 51
                                      },
                                      "text": "\""
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 24,
                                "column": 51
                              },
                              "end": {
                                "row": 24,
                                "column": 52
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 25,
                "column": 2
              },
              "end": {
                "row": 25,
                "column": 51
              },
              "text": "new_state = step_preprocess(state, step, hparams)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 25,
                    "column": 2
                  },
                  "end": {
                    "row": 25,
                    "column": 51
                  },
                  "text": "new_state = step_preprocess(state, step, hparams)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 25,
                        "column": 2
                      },
                      "end": {
                        "row": 25,
                        "column": 11
                      },
                      "text": "new_state"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 25,
                        "column": 12
                      },
                      "end": {
                        "row": 25,
                        "column": 13
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 25,
                        "column": 14
                      },
                      "end": {
                        "row": 25,
                        "column": 51
                      },
                      "text": "step_preprocess(state, step, hparams)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 14
                          },
                          "end": {
                            "row": 25,
                            "column": 29
                          },
                          "text": "step_preprocess"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 25,
                            "column": 29
                          },
                          "end": {
                            "row": 25,
                            "column": 51
                          },
                          "text": "(state, step, hparams)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 25,
                                "column": 29
                              },
                              "end": {
                                "row": 25,
                                "column": 30
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 25,
                                "column": 30
                              },
                              "end": {
                                "row": 25,
                                "column": 35
                              },
                              "text": "state"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 25,
                                "column": 35
                              },
                              "end": {
                                "row": 25,
                                "column": 36
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 25,
                                "column": 37
                              },
                              "end": {
                                "row": 25,
                                "column": 41
                              },
                              "text": "step"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 25,
                                "column": 41
                              },
                              "end": {
                                "row": 25,
                                "column": 42
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 25,
                                "column": 43
                              },
                              "end": {
                                "row": 25,
                                "column": 50
                              },
                              "text": "hparams"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 25,
                                "column": 50
                              },
                              "end": {
                                "row": 25,
                                "column": 51
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "for_statement",
              "start": {
                "row": 27,
                "column": 2
              },
              "end": {
                "row": 29,
                "column": 53
              },
              "text": "for i in range(hparams.num_inrecurrence_layers):\n    with tf.variable_scope(\"rec_layer_%d\" % i):\n      new_state = ffn_unit(attention_unit(new_state))",
              "children": [
                {
                  "type": "for",
                  "start": {
                    "row": 27,
                    "column": 2
                  },
                  "end": {
                    "row": 27,
                    "column": 5
                  },
                  "text": "for"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 27,
                    "column": 6
                  },
                  "end": {
                    "row": 27,
                    "column": 7
                  },
                  "text": "i"
                },
                {
                  "type": "in",
                  "start": {
                    "row": 27,
                    "column": 8
                  },
                  "end": {
                    "row": 27,
                    "column": 10
                  },
                  "text": "in"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 27,
                    "column": 11
                  },
                  "end": {
                    "row": 27,
                    "column": 49
                  },
                  "text": "range(hparams.num_inrecurrence_layers)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 27,
                        "column": 11
                      },
                      "end": {
                        "row": 27,
                        "column": 16
                      },
                      "text": "range"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 27,
                        "column": 16
                      },
                      "end": {
                        "row": 27,
                        "column": 49
                      },
                      "text": "(hparams.num_inrecurrence_layers)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 27,
                            "column": 16
                          },
                          "end": {
                            "row": 27,
                            "column": 17
                          },
                          "text": "("
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 27,
                            "column": 17
                          },
                          "end": {
                            "row": 27,
                            "column": 48
                          },
                          "text": "hparams.num_inrecurrence_layers",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 27,
                                "column": 17
                              },
                              "end": {
                                "row": 27,
                                "column": 24
                              },
                              "text": "hparams"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 27,
                                "column": 24
                              },
                              "end": {
                                "row": 27,
                                "column": 25
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 27,
                                "column": 25
                              },
                              "end": {
                                "row": 27,
                                "column": 48
                              },
                              "text": "num_inrecurrence_layers"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 27,
                            "column": 48
                          },
                          "end": {
                            "row": 27,
                            "column": 49
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 27,
                    "column": 49
                  },
                  "end": {
                    "row": 27,
                    "column": 50
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 28,
                    "column": 4
                  },
                  "end": {
                    "row": 29,
                    "column": 53
                  },
                  "text": "with tf.variable_scope(\"rec_layer_%d\" % i):\n      new_state = ffn_unit(attention_unit(new_state))",
                  "children": [
                    {
                      "type": "with_statement",
                      "start": {
                        "row": 28,
                        "column": 4
                      },
                      "end": {
                        "row": 29,
                        "column": 53
                      },
                      "text": "with tf.variable_scope(\"rec_layer_%d\" % i):\n      new_state = ffn_unit(attention_unit(new_state))",
                      "children": [
                        {
                          "type": "with",
                          "start": {
                            "row": 28,
                            "column": 4
                          },
                          "end": {
                            "row": 28,
                            "column": 8
                          },
                          "text": "with"
                        },
                        {
                          "type": "with_clause",
                          "start": {
                            "row": 28,
                            "column": 9
                          },
                          "end": {
                            "row": 28,
                            "column": 46
                          },
                          "text": "tf.variable_scope(\"rec_layer_%d\" % i)",
                          "children": [
                            {
                              "type": "with_item",
                              "start": {
                                "row": 28,
                                "column": 9
                              },
                              "end": {
                                "row": 28,
                                "column": 46
                              },
                              "text": "tf.variable_scope(\"rec_layer_%d\" % i)",
                              "children": [
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 28,
                                    "column": 9
                                  },
                                  "end": {
                                    "row": 28,
                                    "column": 46
                                  },
                                  "text": "tf.variable_scope(\"rec_layer_%d\" % i)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 28,
                                        "column": 9
                                      },
                                      "end": {
                                        "row": 28,
                                        "column": 26
                                      },
                                      "text": "tf.variable_scope",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 28,
                                            "column": 9
                                          },
                                          "end": {
                                            "row": 28,
                                            "column": 11
                                          },
                                          "text": "tf"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 28,
                                            "column": 11
                                          },
                                          "end": {
                                            "row": 28,
                                            "column": 12
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 28,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 28,
                                            "column": 26
                                          },
                                          "text": "variable_scope"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 28,
                                        "column": 26
                                      },
                                      "end": {
                                        "row": 28,
                                        "column": 46
                                      },
                                      "text": "(\"rec_layer_%d\" % i)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 28,
                                            "column": 26
                                          },
                                          "end": {
                                            "row": 28,
                                            "column": 27
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "binary_operator",
                                          "start": {
                                            "row": 28,
                                            "column": 27
                                          },
                                          "end": {
                                            "row": 28,
                                            "column": 45
                                          },
                                          "text": "\"rec_layer_%d\" % i",
                                          "children": [
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 28,
                                                "column": 27
                                              },
                                              "end": {
                                                "row": 28,
                                                "column": 41
                                              },
                                              "text": "\"rec_layer_%d\"",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 28,
                                                    "column": 27
                                                  },
                                                  "end": {
                                                    "row": 28,
                                                    "column": 28
                                                  },
                                                  "text": "\""
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 28,
                                                    "column": 28
                                                  },
                                                  "end": {
                                                    "row": 28,
                                                    "column": 40
                                                  },
                                                  "text": "rec_layer_%d"
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 28,
                                                    "column": 40
                                                  },
                                                  "end": {
                                                    "row": 28,
                                                    "column": 41
                                                  },
                                                  "text": "\""
                                                }
                                              ]
                                            },
                                            {
                                              "type": "%",
                                              "start": {
                                                "row": 28,
                                                "column": 42
                                              },
                                              "end": {
                                                "row": 28,
                                                "column": 43
                                              },
                                              "text": "%"
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 28,
                                                "column": 44
                                              },
                                              "end": {
                                                "row": 28,
                                                "column": 45
                                              },
                                              "text": "i"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 28,
                                            "column": 45
                                          },
                                          "end": {
                                            "row": 28,
                                            "column": 46
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 28,
                            "column": 46
                          },
                          "end": {
                            "row": 28,
                            "column": 47
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 29,
                            "column": 6
                          },
                          "end": {
                            "row": 29,
                            "column": 53
                          },
                          "text": "new_state = ffn_unit(attention_unit(new_state))",
                          "children": [
                            {
                              "type": "expression_statement",
                              "start": {
                                "row": 29,
                                "column": 6
                              },
                              "end": {
                                "row": 29,
                                "column": 53
                              },
                              "text": "new_state = ffn_unit(attention_unit(new_state))",
                              "children": [
                                {
                                  "type": "assignment",
                                  "start": {
                                    "row": 29,
                                    "column": 6
                                  },
                                  "end": {
                                    "row": 29,
                                    "column": 53
                                  },
                                  "text": "new_state = ffn_unit(attention_unit(new_state))",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 29,
                                        "column": 6
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 15
                                      },
                                      "text": "new_state"
                                    },
                                    {
                                      "type": "=",
                                      "start": {
                                        "row": 29,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 17
                                      },
                                      "text": "="
                                    },
                                    {
                                      "type": "call",
                                      "start": {
                                        "row": 29,
                                        "column": 18
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 53
                                      },
                                      "text": "ffn_unit(attention_unit(new_state))",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 29,
                                            "column": 18
                                          },
                                          "end": {
                                            "row": 29,
                                            "column": 26
                                          },
                                          "text": "ffn_unit"
                                        },
                                        {
                                          "type": "argument_list",
                                          "start": {
                                            "row": 29,
                                            "column": 26
                                          },
                                          "end": {
                                            "row": 29,
                                            "column": 53
                                          },
                                          "text": "(attention_unit(new_state))",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start": {
                                                "row": 29,
                                                "column": 26
                                              },
                                              "end": {
                                                "row": 29,
                                                "column": 27
                                              },
                                              "text": "("
                                            },
                                            {
                                              "type": "call",
                                              "start": {
                                                "row": 29,
                                                "column": 27
                                              },
                                              "end": {
                                                "row": 29,
                                                "column": 52
                                              },
                                              "text": "attention_unit(new_state)",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 29,
                                                    "column": 27
                                                  },
                                                  "end": {
                                                    "row": 29,
                                                    "column": 41
                                                  },
                                                  "text": "attention_unit"
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "start": {
                                                    "row": 29,
                                                    "column": 41
                                                  },
                                                  "end": {
                                                    "row": 29,
                                                    "column": 52
                                                  },
                                                  "text": "(new_state)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "start": {
                                                        "row": 29,
                                                        "column": 41
                                                      },
                                                      "end": {
                                                        "row": 29,
                                                        "column": 42
                                                      },
                                                      "text": "("
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 29,
                                                        "column": 42
                                                      },
                                                      "end": {
                                                        "row": 29,
                                                        "column": 51
                                                      },
                                                      "text": "new_state"
                                                    },
                                                    {
                                                      "type": ")",
                                                      "start": {
                                                        "row": 29,
                                                        "column": 51
                                                      },
                                                      "end": {
                                                        "row": 29,
                                                        "column": 52
                                                      },
                                                      "text": ")"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "start": {
                                                "row": 29,
                                                "column": 52
                                              },
                                              "end": {
                                                "row": 29,
                                                "column": 53
                                              },
                                              "text": ")"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 31,
                "column": 2
              },
              "end": {
                "row": 31,
                "column": 34
              },
              "text": "return new_state, inputs, memory",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 31,
                    "column": 2
                  },
                  "end": {
                    "row": 31,
                    "column": 8
                  },
                  "text": "return"
                },
                {
                  "type": "expression_list",
                  "start": {
                    "row": 31,
                    "column": 9
                  },
                  "end": {
                    "row": 31,
                    "column": 34
                  },
                  "text": "new_state, inputs, memory",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 31,
                        "column": 9
                      },
                      "end": {
                        "row": 31,
                        "column": 18
                      },
                      "text": "new_state"
                    },
                    {
                      "type": ",",
                      "start": {
                        "row": 31,
                        "column": 18
                      },
                      "end": {
                        "row": 31,
                        "column": 19
                      },
                      "text": ","
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 31,
                        "column": 20
                      },
                      "end": {
                        "row": 31,
                        "column": 26
                      },
                      "text": "inputs"
                    },
                    {
                      "type": ",",
                      "start": {
                        "row": 31,
                        "column": 26
                      },
                      "end": {
                        "row": 31,
                        "column": 27
                      },
                      "text": ","
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 31,
                        "column": 28
                      },
                      "end": {
                        "row": 31,
                        "column": 34
                      },
                      "text": "memory"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}