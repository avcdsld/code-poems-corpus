{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 54,
    "column": 29
  },
  "text": "def check_origin(self, origin: str) -> bool:\n        \"\"\"Override to enable support for allowing alternate origins.\n\n        The ``origin`` argument is the value of the ``Origin`` HTTP\n        header, the url responsible for initiating this request.  This\n        method is not called for clients that do not send this header;\n        such requests are always allowed (because all browsers that\n        implement WebSockets support this header, and non-browser\n        clients do not have the same cross-site security concerns).\n\n        Should return ``True`` to accept the request or ``False`` to\n        reject it. By default, rejects all requests with an origin on\n        a host other than this one.\n\n        This is a security protection against cross site scripting attacks on\n        browsers, since WebSockets are allowed to bypass the usual same-origin\n        policies and don't use CORS headers.\n\n        .. warning::\n\n           This is an important security measure; don't disable it\n           without understanding the security implications. In\n           particular, if your authentication is cookie-based, you\n           must either restrict the origins allowed by\n           ``check_origin()`` or implement your own XSRF-like\n           protection for websocket connections. See `these\n           <https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html>`_\n           `articles\n           <https://devcenter.heroku.com/articles/websocket-security>`_\n           for more.\n\n        To accept all cross-origin traffic (which was the default prior to\n        Tornado 4.0), simply override this method to always return ``True``::\n\n            def check_origin(self, origin):\n                return True\n\n        To allow connections from any subdomain of your site, you might\n        do something like::\n\n            def check_origin(self, origin):\n                parsed_origin = urllib.parse.urlparse(origin)\n                return parsed_origin.netloc.endswith(\".mydomain.com\")\n\n        .. versionadded:: 4.0\n\n        \"\"\"\n        parsed_origin = urlparse(origin)\n        origin = parsed_origin.netloc\n        origin = origin.lower()\n\n        host = self.request.headers.get(\"Host\")\n\n        # Check to see that origin matches host directly, including ports\n        return origin == host",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 54,
        "column": 29
      },
      "text": "def check_origin(self, origin: str) -> bool:\n        \"\"\"Override to enable support for allowing alternate origins.\n\n        The ``origin`` argument is the value of the ``Origin`` HTTP\n        header, the url responsible for initiating this request.  This\n        method is not called for clients that do not send this header;\n        such requests are always allowed (because all browsers that\n        implement WebSockets support this header, and non-browser\n        clients do not have the same cross-site security concerns).\n\n        Should return ``True`` to accept the request or ``False`` to\n        reject it. By default, rejects all requests with an origin on\n        a host other than this one.\n\n        This is a security protection against cross site scripting attacks on\n        browsers, since WebSockets are allowed to bypass the usual same-origin\n        policies and don't use CORS headers.\n\n        .. warning::\n\n           This is an important security measure; don't disable it\n           without understanding the security implications. In\n           particular, if your authentication is cookie-based, you\n           must either restrict the origins allowed by\n           ``check_origin()`` or implement your own XSRF-like\n           protection for websocket connections. See `these\n           <https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html>`_\n           `articles\n           <https://devcenter.heroku.com/articles/websocket-security>`_\n           for more.\n\n        To accept all cross-origin traffic (which was the default prior to\n        Tornado 4.0), simply override this method to always return ``True``::\n\n            def check_origin(self, origin):\n                return True\n\n        To allow connections from any subdomain of your site, you might\n        do something like::\n\n            def check_origin(self, origin):\n                parsed_origin = urllib.parse.urlparse(origin)\n                return parsed_origin.netloc.endswith(\".mydomain.com\")\n\n        .. versionadded:: 4.0\n\n        \"\"\"\n        parsed_origin = urlparse(origin)\n        origin = parsed_origin.netloc\n        origin = origin.lower()\n\n        host = self.request.headers.get(\"Host\")\n\n        # Check to see that origin matches host directly, including ports\n        return origin == host",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 16
          },
          "text": "check_origin"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 16
          },
          "end": {
            "row": 0,
            "column": 35
          },
          "text": "(self, origin: str)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 17
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 17
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 21
              },
              "end": {
                "row": 0,
                "column": 22
              },
              "text": ","
            },
            {
              "type": "typed_parameter",
              "start": {
                "row": 0,
                "column": 23
              },
              "end": {
                "row": 0,
                "column": 34
              },
              "text": "origin: str",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 23
                  },
                  "end": {
                    "row": 0,
                    "column": 29
                  },
                  "text": "origin"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 0,
                    "column": 29
                  },
                  "end": {
                    "row": 0,
                    "column": 30
                  },
                  "text": ":"
                },
                {
                  "type": "type",
                  "start": {
                    "row": 0,
                    "column": 31
                  },
                  "end": {
                    "row": 0,
                    "column": 34
                  },
                  "text": "str",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 0,
                        "column": 31
                      },
                      "end": {
                        "row": 0,
                        "column": 34
                      },
                      "text": "str"
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 34
              },
              "end": {
                "row": 0,
                "column": 35
              },
              "text": ")"
            }
          ]
        },
        {
          "type": "->",
          "start": {
            "row": 0,
            "column": 36
          },
          "end": {
            "row": 0,
            "column": 38
          },
          "text": "->"
        },
        {
          "type": "type",
          "start": {
            "row": 0,
            "column": 39
          },
          "end": {
            "row": 0,
            "column": 43
          },
          "text": "bool",
          "children": [
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 39
              },
              "end": {
                "row": 0,
                "column": 43
              },
              "text": "bool"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 43
          },
          "end": {
            "row": 0,
            "column": 44
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 54,
            "column": 29
          },
          "text": "\"\"\"Override to enable support for allowing alternate origins.\n\n        The ``origin`` argument is the value of the ``Origin`` HTTP\n        header, the url responsible for initiating this request.  This\n        method is not called for clients that do not send this header;\n        such requests are always allowed (because all browsers that\n        implement WebSockets support this header, and non-browser\n        clients do not have the same cross-site security concerns).\n\n        Should return ``True`` to accept the request or ``False`` to\n        reject it. By default, rejects all requests with an origin on\n        a host other than this one.\n\n        This is a security protection against cross site scripting attacks on\n        browsers, since WebSockets are allowed to bypass the usual same-origin\n        policies and don't use CORS headers.\n\n        .. warning::\n\n           This is an important security measure; don't disable it\n           without understanding the security implications. In\n           particular, if your authentication is cookie-based, you\n           must either restrict the origins allowed by\n           ``check_origin()`` or implement your own XSRF-like\n           protection for websocket connections. See `these\n           <https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html>`_\n           `articles\n           <https://devcenter.heroku.com/articles/websocket-security>`_\n           for more.\n\n        To accept all cross-origin traffic (which was the default prior to\n        Tornado 4.0), simply override this method to always return ``True``::\n\n            def check_origin(self, origin):\n                return True\n\n        To allow connections from any subdomain of your site, you might\n        do something like::\n\n            def check_origin(self, origin):\n                parsed_origin = urllib.parse.urlparse(origin)\n                return parsed_origin.netloc.endswith(\".mydomain.com\")\n\n        .. versionadded:: 4.0\n\n        \"\"\"\n        parsed_origin = urlparse(origin)\n        origin = parsed_origin.netloc\n        origin = origin.lower()\n\n        host = self.request.headers.get(\"Host\")\n\n        # Check to see that origin matches host directly, including ports\n        return origin == host",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 46,
                "column": 11
              },
              "text": "\"\"\"Override to enable support for allowing alternate origins.\n\n        The ``origin`` argument is the value of the ``Origin`` HTTP\n        header, the url responsible for initiating this request.  This\n        method is not called for clients that do not send this header;\n        such requests are always allowed (because all browsers that\n        implement WebSockets support this header, and non-browser\n        clients do not have the same cross-site security concerns).\n\n        Should return ``True`` to accept the request or ``False`` to\n        reject it. By default, rejects all requests with an origin on\n        a host other than this one.\n\n        This is a security protection against cross site scripting attacks on\n        browsers, since WebSockets are allowed to bypass the usual same-origin\n        policies and don't use CORS headers.\n\n        .. warning::\n\n           This is an important security measure; don't disable it\n           without understanding the security implications. In\n           particular, if your authentication is cookie-based, you\n           must either restrict the origins allowed by\n           ``check_origin()`` or implement your own XSRF-like\n           protection for websocket connections. See `these\n           <https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html>`_\n           `articles\n           <https://devcenter.heroku.com/articles/websocket-security>`_\n           for more.\n\n        To accept all cross-origin traffic (which was the default prior to\n        Tornado 4.0), simply override this method to always return ``True``::\n\n            def check_origin(self, origin):\n                return True\n\n        To allow connections from any subdomain of your site, you might\n        do something like::\n\n            def check_origin(self, origin):\n                parsed_origin = urllib.parse.urlparse(origin)\n                return parsed_origin.netloc.endswith(\".mydomain.com\")\n\n        .. versionadded:: 4.0\n\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 46,
                    "column": 11
                  },
                  "text": "\"\"\"Override to enable support for allowing alternate origins.\n\n        The ``origin`` argument is the value of the ``Origin`` HTTP\n        header, the url responsible for initiating this request.  This\n        method is not called for clients that do not send this header;\n        such requests are always allowed (because all browsers that\n        implement WebSockets support this header, and non-browser\n        clients do not have the same cross-site security concerns).\n\n        Should return ``True`` to accept the request or ``False`` to\n        reject it. By default, rejects all requests with an origin on\n        a host other than this one.\n\n        This is a security protection against cross site scripting attacks on\n        browsers, since WebSockets are allowed to bypass the usual same-origin\n        policies and don't use CORS headers.\n\n        .. warning::\n\n           This is an important security measure; don't disable it\n           without understanding the security implications. In\n           particular, if your authentication is cookie-based, you\n           must either restrict the origins allowed by\n           ``check_origin()`` or implement your own XSRF-like\n           protection for websocket connections. See `these\n           <https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html>`_\n           `articles\n           <https://devcenter.heroku.com/articles/websocket-security>`_\n           for more.\n\n        To accept all cross-origin traffic (which was the default prior to\n        Tornado 4.0), simply override this method to always return ``True``::\n\n            def check_origin(self, origin):\n                return True\n\n        To allow connections from any subdomain of your site, you might\n        do something like::\n\n            def check_origin(self, origin):\n                parsed_origin = urllib.parse.urlparse(origin)\n                return parsed_origin.netloc.endswith(\".mydomain.com\")\n\n        .. versionadded:: 4.0\n\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 46,
                        "column": 8
                      },
                      "text": "Override to enable support for allowing alternate origins.\n\n        The ``origin`` argument is the value of the ``Origin`` HTTP\n        header, the url responsible for initiating this request.  This\n        method is not called for clients that do not send this header;\n        such requests are always allowed (because all browsers that\n        implement WebSockets support this header, and non-browser\n        clients do not have the same cross-site security concerns).\n\n        Should return ``True`` to accept the request or ``False`` to\n        reject it. By default, rejects all requests with an origin on\n        a host other than this one.\n\n        This is a security protection against cross site scripting attacks on\n        browsers, since WebSockets are allowed to bypass the usual same-origin\n        policies and don't use CORS headers.\n\n        .. warning::\n\n           This is an important security measure; don't disable it\n           without understanding the security implications. In\n           particular, if your authentication is cookie-based, you\n           must either restrict the origins allowed by\n           ``check_origin()`` or implement your own XSRF-like\n           protection for websocket connections. See `these\n           <https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html>`_\n           `articles\n           <https://devcenter.heroku.com/articles/websocket-security>`_\n           for more.\n\n        To accept all cross-origin traffic (which was the default prior to\n        Tornado 4.0), simply override this method to always return ``True``::\n\n            def check_origin(self, origin):\n                return True\n\n        To allow connections from any subdomain of your site, you might\n        do something like::\n\n            def check_origin(self, origin):\n                parsed_origin = urllib.parse.urlparse(origin)\n                return parsed_origin.netloc.endswith(\".mydomain.com\")\n\n        .. versionadded:: 4.0\n\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 46,
                        "column": 8
                      },
                      "end": {
                        "row": 46,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 47,
                "column": 8
              },
              "end": {
                "row": 47,
                "column": 40
              },
              "text": "parsed_origin = urlparse(origin)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 47,
                    "column": 8
                  },
                  "end": {
                    "row": 47,
                    "column": 40
                  },
                  "text": "parsed_origin = urlparse(origin)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 47,
                        "column": 8
                      },
                      "end": {
                        "row": 47,
                        "column": 21
                      },
                      "text": "parsed_origin"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 47,
                        "column": 22
                      },
                      "end": {
                        "row": 47,
                        "column": 23
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 47,
                        "column": 24
                      },
                      "end": {
                        "row": 47,
                        "column": 40
                      },
                      "text": "urlparse(origin)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 47,
                            "column": 24
                          },
                          "end": {
                            "row": 47,
                            "column": 32
                          },
                          "text": "urlparse"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 47,
                            "column": 32
                          },
                          "end": {
                            "row": 47,
                            "column": 40
                          },
                          "text": "(origin)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 47,
                                "column": 32
                              },
                              "end": {
                                "row": 47,
                                "column": 33
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 47,
                                "column": 33
                              },
                              "end": {
                                "row": 47,
                                "column": 39
                              },
                              "text": "origin"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 47,
                                "column": 39
                              },
                              "end": {
                                "row": 47,
                                "column": 40
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 48,
                "column": 8
              },
              "end": {
                "row": 48,
                "column": 37
              },
              "text": "origin = parsed_origin.netloc",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 48,
                    "column": 8
                  },
                  "end": {
                    "row": 48,
                    "column": 37
                  },
                  "text": "origin = parsed_origin.netloc",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 48,
                        "column": 8
                      },
                      "end": {
                        "row": 48,
                        "column": 14
                      },
                      "text": "origin"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 48,
                        "column": 15
                      },
                      "end": {
                        "row": 48,
                        "column": 16
                      },
                      "text": "="
                    },
                    {
                      "type": "attribute",
                      "start": {
                        "row": 48,
                        "column": 17
                      },
                      "end": {
                        "row": 48,
                        "column": 37
                      },
                      "text": "parsed_origin.netloc",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 48,
                            "column": 17
                          },
                          "end": {
                            "row": 48,
                            "column": 30
                          },
                          "text": "parsed_origin"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 48,
                            "column": 30
                          },
                          "end": {
                            "row": 48,
                            "column": 31
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 48,
                            "column": 31
                          },
                          "end": {
                            "row": 48,
                            "column": 37
                          },
                          "text": "netloc"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 49,
                "column": 8
              },
              "end": {
                "row": 49,
                "column": 31
              },
              "text": "origin = origin.lower()",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 49,
                    "column": 8
                  },
                  "end": {
                    "row": 49,
                    "column": 31
                  },
                  "text": "origin = origin.lower()",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 49,
                        "column": 8
                      },
                      "end": {
                        "row": 49,
                        "column": 14
                      },
                      "text": "origin"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 49,
                        "column": 15
                      },
                      "end": {
                        "row": 49,
                        "column": 16
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 49,
                        "column": 17
                      },
                      "end": {
                        "row": 49,
                        "column": 31
                      },
                      "text": "origin.lower()",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 49,
                            "column": 17
                          },
                          "end": {
                            "row": 49,
                            "column": 29
                          },
                          "text": "origin.lower",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 49,
                                "column": 17
                              },
                              "end": {
                                "row": 49,
                                "column": 23
                              },
                              "text": "origin"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 49,
                                "column": 23
                              },
                              "end": {
                                "row": 49,
                                "column": 24
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 49,
                                "column": 24
                              },
                              "end": {
                                "row": 49,
                                "column": 29
                              },
                              "text": "lower"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 49,
                            "column": 29
                          },
                          "end": {
                            "row": 49,
                            "column": 31
                          },
                          "text": "()",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 49,
                                "column": 29
                              },
                              "end": {
                                "row": 49,
                                "column": 30
                              },
                              "text": "("
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 49,
                                "column": 30
                              },
                              "end": {
                                "row": 49,
                                "column": 31
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 51,
                "column": 8
              },
              "end": {
                "row": 51,
                "column": 47
              },
              "text": "host = self.request.headers.get(\"Host\")",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 51,
                    "column": 8
                  },
                  "end": {
                    "row": 51,
                    "column": 47
                  },
                  "text": "host = self.request.headers.get(\"Host\")",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 51,
                        "column": 8
                      },
                      "end": {
                        "row": 51,
                        "column": 12
                      },
                      "text": "host"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 51,
                        "column": 13
                      },
                      "end": {
                        "row": 51,
                        "column": 14
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 51,
                        "column": 15
                      },
                      "end": {
                        "row": 51,
                        "column": 47
                      },
                      "text": "self.request.headers.get(\"Host\")",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 51,
                            "column": 15
                          },
                          "end": {
                            "row": 51,
                            "column": 39
                          },
                          "text": "self.request.headers.get",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 51,
                                "column": 15
                              },
                              "end": {
                                "row": 51,
                                "column": 35
                              },
                              "text": "self.request.headers",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 51,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 27
                                  },
                                  "text": "self.request",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 51,
                                        "column": 15
                                      },
                                      "end": {
                                        "row": 51,
                                        "column": 19
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 51,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 51,
                                        "column": 20
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 51,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 51,
                                        "column": 27
                                      },
                                      "text": "request"
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 51,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 28
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 51,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 35
                                  },
                                  "text": "headers"
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 51,
                                "column": 35
                              },
                              "end": {
                                "row": 51,
                                "column": 36
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 51,
                                "column": 36
                              },
                              "end": {
                                "row": 51,
                                "column": 39
                              },
                              "text": "get"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 51,
                            "column": 39
                          },
                          "end": {
                            "row": 51,
                            "column": 47
                          },
                          "text": "(\"Host\")",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 51,
                                "column": 39
                              },
                              "end": {
                                "row": 51,
                                "column": 40
                              },
                              "text": "("
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 51,
                                "column": 40
                              },
                              "end": {
                                "row": 51,
                                "column": 46
                              },
                              "text": "\"Host\"",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 51,
                                    "column": 40
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 41
                                  },
                                  "text": "\""
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 51,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 45
                                  },
                                  "text": "Host"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 51,
                                    "column": 45
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 46
                                  },
                                  "text": "\""
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 51,
                                "column": 46
                              },
                              "end": {
                                "row": 51,
                                "column": 47
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 53,
                "column": 8
              },
              "end": {
                "row": 53,
                "column": 73
              },
              "text": "# Check to see that origin matches host directly, including ports"
            },
            {
              "type": "return_statement",
              "start": {
                "row": 54,
                "column": 8
              },
              "end": {
                "row": 54,
                "column": 29
              },
              "text": "return origin == host",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 54,
                    "column": 8
                  },
                  "end": {
                    "row": 54,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "comparison_operator",
                  "start": {
                    "row": 54,
                    "column": 15
                  },
                  "end": {
                    "row": 54,
                    "column": 29
                  },
                  "text": "origin == host",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 54,
                        "column": 15
                      },
                      "end": {
                        "row": 54,
                        "column": 21
                      },
                      "text": "origin"
                    },
                    {
                      "type": "==",
                      "start": {
                        "row": 54,
                        "column": 22
                      },
                      "end": {
                        "row": 54,
                        "column": 24
                      },
                      "text": "=="
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 54,
                        "column": 25
                      },
                      "end": {
                        "row": 54,
                        "column": 29
                      },
                      "text": "host"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}