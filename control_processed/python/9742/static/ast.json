{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 26,
    "column": 38
  },
  "text": "def parseFragment(self, stream, *args, **kwargs):\n        \"\"\"Parse a HTML fragment into a well-formed tree fragment\n\n        :arg container: name of the element we're setting the innerHTML\n            property if set to None, default to 'div'\n\n        :arg stream: a file-like object or string containing the HTML to be parsed\n\n            The optional encoding parameter must be a string that indicates\n            the encoding.  If specified, that encoding will be used,\n            regardless of any BOM or later declaration (such as in a meta\n            element)\n\n        :arg scripting: treat noscript elements as if JavaScript was turned on\n\n        :returns: parsed tree\n\n        Example:\n\n        >>> from html5lib.html5libparser import HTMLParser\n        >>> parser = HTMLParser()\n        >>> parser.parseFragment('<b>this is a fragment</b>')\n        <Element u'DOCUMENT_FRAGMENT' at 0x7feac484b090>\n\n        \"\"\"\n        self._parse(stream, True, *args, **kwargs)\n        return self.tree.getFragment()",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 26,
        "column": 38
      },
      "text": "def parseFragment(self, stream, *args, **kwargs):\n        \"\"\"Parse a HTML fragment into a well-formed tree fragment\n\n        :arg container: name of the element we're setting the innerHTML\n            property if set to None, default to 'div'\n\n        :arg stream: a file-like object or string containing the HTML to be parsed\n\n            The optional encoding parameter must be a string that indicates\n            the encoding.  If specified, that encoding will be used,\n            regardless of any BOM or later declaration (such as in a meta\n            element)\n\n        :arg scripting: treat noscript elements as if JavaScript was turned on\n\n        :returns: parsed tree\n\n        Example:\n\n        >>> from html5lib.html5libparser import HTMLParser\n        >>> parser = HTMLParser()\n        >>> parser.parseFragment('<b>this is a fragment</b>')\n        <Element u'DOCUMENT_FRAGMENT' at 0x7feac484b090>\n\n        \"\"\"\n        self._parse(stream, True, *args, **kwargs)\n        return self.tree.getFragment()",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 17
          },
          "text": "parseFragment"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 17
          },
          "end": {
            "row": 0,
            "column": 48
          },
          "text": "(self, stream, *args, **kwargs)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 17
              },
              "end": {
                "row": 0,
                "column": 18
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 18
              },
              "end": {
                "row": 0,
                "column": 22
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 22
              },
              "end": {
                "row": 0,
                "column": 23
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 24
              },
              "end": {
                "row": 0,
                "column": 30
              },
              "text": "stream"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 30
              },
              "end": {
                "row": 0,
                "column": 31
              },
              "text": ","
            },
            {
              "type": "list_splat_pattern",
              "start": {
                "row": 0,
                "column": 32
              },
              "end": {
                "row": 0,
                "column": 37
              },
              "text": "*args",
              "children": [
                {
                  "type": "*",
                  "start": {
                    "row": 0,
                    "column": 32
                  },
                  "end": {
                    "row": 0,
                    "column": 33
                  },
                  "text": "*"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 33
                  },
                  "end": {
                    "row": 0,
                    "column": 37
                  },
                  "text": "args"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 37
              },
              "end": {
                "row": 0,
                "column": 38
              },
              "text": ","
            },
            {
              "type": "dictionary_splat_pattern",
              "start": {
                "row": 0,
                "column": 39
              },
              "end": {
                "row": 0,
                "column": 47
              },
              "text": "**kwargs",
              "children": [
                {
                  "type": "**",
                  "start": {
                    "row": 0,
                    "column": 39
                  },
                  "end": {
                    "row": 0,
                    "column": 41
                  },
                  "text": "**"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 41
                  },
                  "end": {
                    "row": 0,
                    "column": 47
                  },
                  "text": "kwargs"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 47
              },
              "end": {
                "row": 0,
                "column": 48
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 48
          },
          "end": {
            "row": 0,
            "column": 49
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 26,
            "column": 38
          },
          "text": "\"\"\"Parse a HTML fragment into a well-formed tree fragment\n\n        :arg container: name of the element we're setting the innerHTML\n            property if set to None, default to 'div'\n\n        :arg stream: a file-like object or string containing the HTML to be parsed\n\n            The optional encoding parameter must be a string that indicates\n            the encoding.  If specified, that encoding will be used,\n            regardless of any BOM or later declaration (such as in a meta\n            element)\n\n        :arg scripting: treat noscript elements as if JavaScript was turned on\n\n        :returns: parsed tree\n\n        Example:\n\n        >>> from html5lib.html5libparser import HTMLParser\n        >>> parser = HTMLParser()\n        >>> parser.parseFragment('<b>this is a fragment</b>')\n        <Element u'DOCUMENT_FRAGMENT' at 0x7feac484b090>\n\n        \"\"\"\n        self._parse(stream, True, *args, **kwargs)\n        return self.tree.getFragment()",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 24,
                "column": 11
              },
              "text": "\"\"\"Parse a HTML fragment into a well-formed tree fragment\n\n        :arg container: name of the element we're setting the innerHTML\n            property if set to None, default to 'div'\n\n        :arg stream: a file-like object or string containing the HTML to be parsed\n\n            The optional encoding parameter must be a string that indicates\n            the encoding.  If specified, that encoding will be used,\n            regardless of any BOM or later declaration (such as in a meta\n            element)\n\n        :arg scripting: treat noscript elements as if JavaScript was turned on\n\n        :returns: parsed tree\n\n        Example:\n\n        >>> from html5lib.html5libparser import HTMLParser\n        >>> parser = HTMLParser()\n        >>> parser.parseFragment('<b>this is a fragment</b>')\n        <Element u'DOCUMENT_FRAGMENT' at 0x7feac484b090>\n\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 24,
                    "column": 11
                  },
                  "text": "\"\"\"Parse a HTML fragment into a well-formed tree fragment\n\n        :arg container: name of the element we're setting the innerHTML\n            property if set to None, default to 'div'\n\n        :arg stream: a file-like object or string containing the HTML to be parsed\n\n            The optional encoding parameter must be a string that indicates\n            the encoding.  If specified, that encoding will be used,\n            regardless of any BOM or later declaration (such as in a meta\n            element)\n\n        :arg scripting: treat noscript elements as if JavaScript was turned on\n\n        :returns: parsed tree\n\n        Example:\n\n        >>> from html5lib.html5libparser import HTMLParser\n        >>> parser = HTMLParser()\n        >>> parser.parseFragment('<b>this is a fragment</b>')\n        <Element u'DOCUMENT_FRAGMENT' at 0x7feac484b090>\n\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 24,
                        "column": 8
                      },
                      "text": "Parse a HTML fragment into a well-formed tree fragment\n\n        :arg container: name of the element we're setting the innerHTML\n            property if set to None, default to 'div'\n\n        :arg stream: a file-like object or string containing the HTML to be parsed\n\n            The optional encoding parameter must be a string that indicates\n            the encoding.  If specified, that encoding will be used,\n            regardless of any BOM or later declaration (such as in a meta\n            element)\n\n        :arg scripting: treat noscript elements as if JavaScript was turned on\n\n        :returns: parsed tree\n\n        Example:\n\n        >>> from html5lib.html5libparser import HTMLParser\n        >>> parser = HTMLParser()\n        >>> parser.parseFragment('<b>this is a fragment</b>')\n        <Element u'DOCUMENT_FRAGMENT' at 0x7feac484b090>\n\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 24,
                        "column": 8
                      },
                      "end": {
                        "row": 24,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 25,
                "column": 8
              },
              "end": {
                "row": 25,
                "column": 50
              },
              "text": "self._parse(stream, True, *args, **kwargs)",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 25,
                    "column": 8
                  },
                  "end": {
                    "row": 25,
                    "column": 50
                  },
                  "text": "self._parse(stream, True, *args, **kwargs)",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 25,
                        "column": 8
                      },
                      "end": {
                        "row": 25,
                        "column": 19
                      },
                      "text": "self._parse",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 8
                          },
                          "end": {
                            "row": 25,
                            "column": 12
                          },
                          "text": "self"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 25,
                            "column": 12
                          },
                          "end": {
                            "row": 25,
                            "column": 13
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 13
                          },
                          "end": {
                            "row": 25,
                            "column": 19
                          },
                          "text": "_parse"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 25,
                        "column": 19
                      },
                      "end": {
                        "row": 25,
                        "column": 50
                      },
                      "text": "(stream, True, *args, **kwargs)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 25,
                            "column": 19
                          },
                          "end": {
                            "row": 25,
                            "column": 20
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 20
                          },
                          "end": {
                            "row": 25,
                            "column": 26
                          },
                          "text": "stream"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 25,
                            "column": 26
                          },
                          "end": {
                            "row": 25,
                            "column": 27
                          },
                          "text": ","
                        },
                        {
                          "type": "true",
                          "start": {
                            "row": 25,
                            "column": 28
                          },
                          "end": {
                            "row": 25,
                            "column": 32
                          },
                          "text": "True"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 25,
                            "column": 32
                          },
                          "end": {
                            "row": 25,
                            "column": 33
                          },
                          "text": ","
                        },
                        {
                          "type": "list_splat",
                          "start": {
                            "row": 25,
                            "column": 34
                          },
                          "end": {
                            "row": 25,
                            "column": 39
                          },
                          "text": "*args",
                          "children": [
                            {
                              "type": "*",
                              "start": {
                                "row": 25,
                                "column": 34
                              },
                              "end": {
                                "row": 25,
                                "column": 35
                              },
                              "text": "*"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 25,
                                "column": 35
                              },
                              "end": {
                                "row": 25,
                                "column": 39
                              },
                              "text": "args"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 25,
                            "column": 39
                          },
                          "end": {
                            "row": 25,
                            "column": 40
                          },
                          "text": ","
                        },
                        {
                          "type": "dictionary_splat",
                          "start": {
                            "row": 25,
                            "column": 41
                          },
                          "end": {
                            "row": 25,
                            "column": 49
                          },
                          "text": "**kwargs",
                          "children": [
                            {
                              "type": "**",
                              "start": {
                                "row": 25,
                                "column": 41
                              },
                              "end": {
                                "row": 25,
                                "column": 43
                              },
                              "text": "**"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 25,
                                "column": 43
                              },
                              "end": {
                                "row": 25,
                                "column": 49
                              },
                              "text": "kwargs"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 25,
                            "column": 49
                          },
                          "end": {
                            "row": 25,
                            "column": 50
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 26,
                "column": 8
              },
              "end": {
                "row": 26,
                "column": 38
              },
              "text": "return self.tree.getFragment()",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 26,
                    "column": 8
                  },
                  "end": {
                    "row": 26,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 26,
                    "column": 15
                  },
                  "end": {
                    "row": 26,
                    "column": 38
                  },
                  "text": "self.tree.getFragment()",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 26,
                        "column": 15
                      },
                      "end": {
                        "row": 26,
                        "column": 36
                      },
                      "text": "self.tree.getFragment",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 26,
                            "column": 15
                          },
                          "end": {
                            "row": 26,
                            "column": 24
                          },
                          "text": "self.tree",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 26,
                                "column": 15
                              },
                              "end": {
                                "row": 26,
                                "column": 19
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 26,
                                "column": 19
                              },
                              "end": {
                                "row": 26,
                                "column": 20
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 26,
                                "column": 20
                              },
                              "end": {
                                "row": 26,
                                "column": 24
                              },
                              "text": "tree"
                            }
                          ]
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 26,
                            "column": 24
                          },
                          "end": {
                            "row": 26,
                            "column": 25
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 26,
                            "column": 25
                          },
                          "end": {
                            "row": 26,
                            "column": 36
                          },
                          "text": "getFragment"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 26,
                        "column": 36
                      },
                      "end": {
                        "row": 26,
                        "column": 38
                      },
                      "text": "()",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 26,
                            "column": 36
                          },
                          "end": {
                            "row": 26,
                            "column": 37
                          },
                          "text": "("
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 26,
                            "column": 37
                          },
                          "end": {
                            "row": 26,
                            "column": 38
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}