{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 63,
    "column": 28
  },
  "text": "def asof(self, label):\n        \"\"\"\n        Return the label from the index, or, if not present, the previous one.\n\n        Assuming that the index is sorted, return the passed index label if it\n        is in the index, or return the previous index label if the passed one\n        is not in the index.\n\n        Parameters\n        ----------\n        label : object\n            The label up to which the method returns the latest index label.\n\n        Returns\n        -------\n        object\n            The passed label if it is in the index. The previous label if the\n            passed label is not in the sorted index or `NaN` if there is no\n            such label.\n\n        See Also\n        --------\n        Series.asof : Return the latest value in a Series up to the\n            passed index.\n        merge_asof : Perform an asof merge (similar to left join but it\n            matches on nearest key rather than equal key).\n        Index.get_loc : An `asof` is a thin wrapper around `get_loc`\n            with method='pad'.\n\n        Examples\n        --------\n        `Index.asof` returns the latest index label up to the passed label.\n\n        >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n        >>> idx.asof('2014-01-01')\n        '2013-12-31'\n\n        If the label is in the index, the method returns the passed label.\n\n        >>> idx.asof('2014-01-02')\n        '2014-01-02'\n\n        If all of the labels in the index are later than the passed label,\n        NaN is returned.\n\n        >>> idx.asof('1999-01-02')\n        nan\n\n        If the index is not sorted, an error is raised.\n\n        >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n        ...                            '2014-01-03'])\n        >>> idx_not_sorted.asof('2013-12-31')\n        Traceback (most recent call last):\n        ValueError: index must be monotonic increasing or decreasing\n        \"\"\"\n        try:\n            loc = self.get_loc(label, method='pad')\n        except KeyError:\n            return self._na_value\n        else:\n            if isinstance(loc, slice):\n                loc = loc.indices(len(self))[-1]\n            return self[loc]",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 63,
        "column": 28
      },
      "text": "def asof(self, label):\n        \"\"\"\n        Return the label from the index, or, if not present, the previous one.\n\n        Assuming that the index is sorted, return the passed index label if it\n        is in the index, or return the previous index label if the passed one\n        is not in the index.\n\n        Parameters\n        ----------\n        label : object\n            The label up to which the method returns the latest index label.\n\n        Returns\n        -------\n        object\n            The passed label if it is in the index. The previous label if the\n            passed label is not in the sorted index or `NaN` if there is no\n            such label.\n\n        See Also\n        --------\n        Series.asof : Return the latest value in a Series up to the\n            passed index.\n        merge_asof : Perform an asof merge (similar to left join but it\n            matches on nearest key rather than equal key).\n        Index.get_loc : An `asof` is a thin wrapper around `get_loc`\n            with method='pad'.\n\n        Examples\n        --------\n        `Index.asof` returns the latest index label up to the passed label.\n\n        >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n        >>> idx.asof('2014-01-01')\n        '2013-12-31'\n\n        If the label is in the index, the method returns the passed label.\n\n        >>> idx.asof('2014-01-02')\n        '2014-01-02'\n\n        If all of the labels in the index are later than the passed label,\n        NaN is returned.\n\n        >>> idx.asof('1999-01-02')\n        nan\n\n        If the index is not sorted, an error is raised.\n\n        >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n        ...                            '2014-01-03'])\n        >>> idx_not_sorted.asof('2013-12-31')\n        Traceback (most recent call last):\n        ValueError: index must be monotonic increasing or decreasing\n        \"\"\"\n        try:\n            loc = self.get_loc(label, method='pad')\n        except KeyError:\n            return self._na_value\n        else:\n            if isinstance(loc, slice):\n                loc = loc.indices(len(self))[-1]\n            return self[loc]",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 8
          },
          "text": "asof"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 8
          },
          "end": {
            "row": 0,
            "column": 21
          },
          "text": "(self, label)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 8
              },
              "end": {
                "row": 0,
                "column": 9
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 9
              },
              "end": {
                "row": 0,
                "column": 13
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 13
              },
              "end": {
                "row": 0,
                "column": 14
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 15
              },
              "end": {
                "row": 0,
                "column": 20
              },
              "text": "label"
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 21
          },
          "end": {
            "row": 0,
            "column": 22
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 63,
            "column": 28
          },
          "text": "\"\"\"\n        Return the label from the index, or, if not present, the previous one.\n\n        Assuming that the index is sorted, return the passed index label if it\n        is in the index, or return the previous index label if the passed one\n        is not in the index.\n\n        Parameters\n        ----------\n        label : object\n            The label up to which the method returns the latest index label.\n\n        Returns\n        -------\n        object\n            The passed label if it is in the index. The previous label if the\n            passed label is not in the sorted index or `NaN` if there is no\n            such label.\n\n        See Also\n        --------\n        Series.asof : Return the latest value in a Series up to the\n            passed index.\n        merge_asof : Perform an asof merge (similar to left join but it\n            matches on nearest key rather than equal key).\n        Index.get_loc : An `asof` is a thin wrapper around `get_loc`\n            with method='pad'.\n\n        Examples\n        --------\n        `Index.asof` returns the latest index label up to the passed label.\n\n        >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n        >>> idx.asof('2014-01-01')\n        '2013-12-31'\n\n        If the label is in the index, the method returns the passed label.\n\n        >>> idx.asof('2014-01-02')\n        '2014-01-02'\n\n        If all of the labels in the index are later than the passed label,\n        NaN is returned.\n\n        >>> idx.asof('1999-01-02')\n        nan\n\n        If the index is not sorted, an error is raised.\n\n        >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n        ...                            '2014-01-03'])\n        >>> idx_not_sorted.asof('2013-12-31')\n        Traceback (most recent call last):\n        ValueError: index must be monotonic increasing or decreasing\n        \"\"\"\n        try:\n            loc = self.get_loc(label, method='pad')\n        except KeyError:\n            return self._na_value\n        else:\n            if isinstance(loc, slice):\n                loc = loc.indices(len(self))[-1]\n            return self[loc]",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 55,
                "column": 11
              },
              "text": "\"\"\"\n        Return the label from the index, or, if not present, the previous one.\n\n        Assuming that the index is sorted, return the passed index label if it\n        is in the index, or return the previous index label if the passed one\n        is not in the index.\n\n        Parameters\n        ----------\n        label : object\n            The label up to which the method returns the latest index label.\n\n        Returns\n        -------\n        object\n            The passed label if it is in the index. The previous label if the\n            passed label is not in the sorted index or `NaN` if there is no\n            such label.\n\n        See Also\n        --------\n        Series.asof : Return the latest value in a Series up to the\n            passed index.\n        merge_asof : Perform an asof merge (similar to left join but it\n            matches on nearest key rather than equal key).\n        Index.get_loc : An `asof` is a thin wrapper around `get_loc`\n            with method='pad'.\n\n        Examples\n        --------\n        `Index.asof` returns the latest index label up to the passed label.\n\n        >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n        >>> idx.asof('2014-01-01')\n        '2013-12-31'\n\n        If the label is in the index, the method returns the passed label.\n\n        >>> idx.asof('2014-01-02')\n        '2014-01-02'\n\n        If all of the labels in the index are later than the passed label,\n        NaN is returned.\n\n        >>> idx.asof('1999-01-02')\n        nan\n\n        If the index is not sorted, an error is raised.\n\n        >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n        ...                            '2014-01-03'])\n        >>> idx_not_sorted.asof('2013-12-31')\n        Traceback (most recent call last):\n        ValueError: index must be monotonic increasing or decreasing\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 55,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Return the label from the index, or, if not present, the previous one.\n\n        Assuming that the index is sorted, return the passed index label if it\n        is in the index, or return the previous index label if the passed one\n        is not in the index.\n\n        Parameters\n        ----------\n        label : object\n            The label up to which the method returns the latest index label.\n\n        Returns\n        -------\n        object\n            The passed label if it is in the index. The previous label if the\n            passed label is not in the sorted index or `NaN` if there is no\n            such label.\n\n        See Also\n        --------\n        Series.asof : Return the latest value in a Series up to the\n            passed index.\n        merge_asof : Perform an asof merge (similar to left join but it\n            matches on nearest key rather than equal key).\n        Index.get_loc : An `asof` is a thin wrapper around `get_loc`\n            with method='pad'.\n\n        Examples\n        --------\n        `Index.asof` returns the latest index label up to the passed label.\n\n        >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n        >>> idx.asof('2014-01-01')\n        '2013-12-31'\n\n        If the label is in the index, the method returns the passed label.\n\n        >>> idx.asof('2014-01-02')\n        '2014-01-02'\n\n        If all of the labels in the index are later than the passed label,\n        NaN is returned.\n\n        >>> idx.asof('1999-01-02')\n        nan\n\n        If the index is not sorted, an error is raised.\n\n        >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n        ...                            '2014-01-03'])\n        >>> idx_not_sorted.asof('2013-12-31')\n        Traceback (most recent call last):\n        ValueError: index must be monotonic increasing or decreasing\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 55,
                        "column": 8
                      },
                      "text": "\n        Return the label from the index, or, if not present, the previous one.\n\n        Assuming that the index is sorted, return the passed index label if it\n        is in the index, or return the previous index label if the passed one\n        is not in the index.\n\n        Parameters\n        ----------\n        label : object\n            The label up to which the method returns the latest index label.\n\n        Returns\n        -------\n        object\n            The passed label if it is in the index. The previous label if the\n            passed label is not in the sorted index or `NaN` if there is no\n            such label.\n\n        See Also\n        --------\n        Series.asof : Return the latest value in a Series up to the\n            passed index.\n        merge_asof : Perform an asof merge (similar to left join but it\n            matches on nearest key rather than equal key).\n        Index.get_loc : An `asof` is a thin wrapper around `get_loc`\n            with method='pad'.\n\n        Examples\n        --------\n        `Index.asof` returns the latest index label up to the passed label.\n\n        >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n        >>> idx.asof('2014-01-01')\n        '2013-12-31'\n\n        If the label is in the index, the method returns the passed label.\n\n        >>> idx.asof('2014-01-02')\n        '2014-01-02'\n\n        If all of the labels in the index are later than the passed label,\n        NaN is returned.\n\n        >>> idx.asof('1999-01-02')\n        nan\n\n        If the index is not sorted, an error is raised.\n\n        >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n        ...                            '2014-01-03'])\n        >>> idx_not_sorted.asof('2013-12-31')\n        Traceback (most recent call last):\n        ValueError: index must be monotonic increasing or decreasing\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 55,
                        "column": 8
                      },
                      "end": {
                        "row": 55,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "try_statement",
              "start": {
                "row": 56,
                "column": 8
              },
              "end": {
                "row": 63,
                "column": 28
              },
              "text": "try:\n            loc = self.get_loc(label, method='pad')\n        except KeyError:\n            return self._na_value\n        else:\n            if isinstance(loc, slice):\n                loc = loc.indices(len(self))[-1]\n            return self[loc]",
              "children": [
                {
                  "type": "try",
                  "start": {
                    "row": 56,
                    "column": 8
                  },
                  "end": {
                    "row": 56,
                    "column": 11
                  },
                  "text": "try"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 56,
                    "column": 11
                  },
                  "end": {
                    "row": 56,
                    "column": 12
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 57,
                    "column": 12
                  },
                  "end": {
                    "row": 57,
                    "column": 51
                  },
                  "text": "loc = self.get_loc(label, method='pad')",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 57,
                        "column": 12
                      },
                      "end": {
                        "row": 57,
                        "column": 51
                      },
                      "text": "loc = self.get_loc(label, method='pad')",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 57,
                            "column": 12
                          },
                          "end": {
                            "row": 57,
                            "column": 51
                          },
                          "text": "loc = self.get_loc(label, method='pad')",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 57,
                                "column": 12
                              },
                              "end": {
                                "row": 57,
                                "column": 15
                              },
                              "text": "loc"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 57,
                                "column": 16
                              },
                              "end": {
                                "row": 57,
                                "column": 17
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 57,
                                "column": 18
                              },
                              "end": {
                                "row": 57,
                                "column": 51
                              },
                              "text": "self.get_loc(label, method='pad')",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 57,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 57,
                                    "column": 30
                                  },
                                  "text": "self.get_loc",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 57,
                                        "column": 18
                                      },
                                      "end": {
                                        "row": 57,
                                        "column": 22
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 57,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 57,
                                        "column": 23
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 57,
                                        "column": 23
                                      },
                                      "end": {
                                        "row": 57,
                                        "column": 30
                                      },
                                      "text": "get_loc"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 57,
                                    "column": 30
                                  },
                                  "end": {
                                    "row": 57,
                                    "column": 51
                                  },
                                  "text": "(label, method='pad')",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 57,
                                        "column": 30
                                      },
                                      "end": {
                                        "row": 57,
                                        "column": 31
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 57,
                                        "column": 31
                                      },
                                      "end": {
                                        "row": 57,
                                        "column": 36
                                      },
                                      "text": "label"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 57,
                                        "column": 36
                                      },
                                      "end": {
                                        "row": 57,
                                        "column": 37
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "start": {
                                        "row": 57,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 57,
                                        "column": 50
                                      },
                                      "text": "method='pad'",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 57,
                                            "column": 38
                                          },
                                          "end": {
                                            "row": 57,
                                            "column": 44
                                          },
                                          "text": "method"
                                        },
                                        {
                                          "type": "=",
                                          "start": {
                                            "row": 57,
                                            "column": 44
                                          },
                                          "end": {
                                            "row": 57,
                                            "column": 45
                                          },
                                          "text": "="
                                        },
                                        {
                                          "type": "string",
                                          "start": {
                                            "row": 57,
                                            "column": 45
                                          },
                                          "end": {
                                            "row": 57,
                                            "column": 50
                                          },
                                          "text": "'pad'",
                                          "children": [
                                            {
                                              "type": "string_start",
                                              "start": {
                                                "row": 57,
                                                "column": 45
                                              },
                                              "end": {
                                                "row": 57,
                                                "column": 46
                                              },
                                              "text": "'"
                                            },
                                            {
                                              "type": "string_content",
                                              "start": {
                                                "row": 57,
                                                "column": 46
                                              },
                                              "end": {
                                                "row": 57,
                                                "column": 49
                                              },
                                              "text": "pad"
                                            },
                                            {
                                              "type": "string_end",
                                              "start": {
                                                "row": 57,
                                                "column": 49
                                              },
                                              "end": {
                                                "row": 57,
                                                "column": 50
                                              },
                                              "text": "'"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 57,
                                        "column": 50
                                      },
                                      "end": {
                                        "row": 57,
                                        "column": 51
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "except_clause",
                  "start": {
                    "row": 58,
                    "column": 8
                  },
                  "end": {
                    "row": 59,
                    "column": 33
                  },
                  "text": "except KeyError:\n            return self._na_value",
                  "children": [
                    {
                      "type": "except",
                      "start": {
                        "row": 58,
                        "column": 8
                      },
                      "end": {
                        "row": 58,
                        "column": 14
                      },
                      "text": "except"
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 58,
                        "column": 15
                      },
                      "end": {
                        "row": 58,
                        "column": 23
                      },
                      "text": "KeyError"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 58,
                        "column": 23
                      },
                      "end": {
                        "row": 58,
                        "column": 24
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 59,
                        "column": 12
                      },
                      "end": {
                        "row": 59,
                        "column": 33
                      },
                      "text": "return self._na_value",
                      "children": [
                        {
                          "type": "return_statement",
                          "start": {
                            "row": 59,
                            "column": 12
                          },
                          "end": {
                            "row": 59,
                            "column": 33
                          },
                          "text": "return self._na_value",
                          "children": [
                            {
                              "type": "return",
                              "start": {
                                "row": 59,
                                "column": 12
                              },
                              "end": {
                                "row": 59,
                                "column": 18
                              },
                              "text": "return"
                            },
                            {
                              "type": "attribute",
                              "start": {
                                "row": 59,
                                "column": 19
                              },
                              "end": {
                                "row": 59,
                                "column": 33
                              },
                              "text": "self._na_value",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 59,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 23
                                  },
                                  "text": "self"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 59,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 24
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 59,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 33
                                  },
                                  "text": "_na_value"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start": {
                    "row": 60,
                    "column": 8
                  },
                  "end": {
                    "row": 63,
                    "column": 28
                  },
                  "text": "else:\n            if isinstance(loc, slice):\n                loc = loc.indices(len(self))[-1]\n            return self[loc]",
                  "children": [
                    {
                      "type": "else",
                      "start": {
                        "row": 60,
                        "column": 8
                      },
                      "end": {
                        "row": 60,
                        "column": 12
                      },
                      "text": "else"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 60,
                        "column": 12
                      },
                      "end": {
                        "row": 60,
                        "column": 13
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 61,
                        "column": 12
                      },
                      "end": {
                        "row": 63,
                        "column": 28
                      },
                      "text": "if isinstance(loc, slice):\n                loc = loc.indices(len(self))[-1]\n            return self[loc]",
                      "children": [
                        {
                          "type": "if_statement",
                          "start": {
                            "row": 61,
                            "column": 12
                          },
                          "end": {
                            "row": 62,
                            "column": 48
                          },
                          "text": "if isinstance(loc, slice):\n                loc = loc.indices(len(self))[-1]",
                          "children": [
                            {
                              "type": "if",
                              "start": {
                                "row": 61,
                                "column": 12
                              },
                              "end": {
                                "row": 61,
                                "column": 14
                              },
                              "text": "if"
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 61,
                                "column": 15
                              },
                              "end": {
                                "row": 61,
                                "column": 37
                              },
                              "text": "isinstance(loc, slice)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 61,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 61,
                                    "column": 25
                                  },
                                  "text": "isinstance"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 61,
                                    "column": 25
                                  },
                                  "end": {
                                    "row": 61,
                                    "column": 37
                                  },
                                  "text": "(loc, slice)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 61,
                                        "column": 25
                                      },
                                      "end": {
                                        "row": 61,
                                        "column": 26
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 61,
                                        "column": 26
                                      },
                                      "end": {
                                        "row": 61,
                                        "column": 29
                                      },
                                      "text": "loc"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 61,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 61,
                                        "column": 30
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 61,
                                        "column": 31
                                      },
                                      "end": {
                                        "row": 61,
                                        "column": 36
                                      },
                                      "text": "slice"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 61,
                                        "column": 36
                                      },
                                      "end": {
                                        "row": 61,
                                        "column": 37
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ":",
                              "start": {
                                "row": 61,
                                "column": 37
                              },
                              "end": {
                                "row": 61,
                                "column": 38
                              },
                              "text": ":"
                            },
                            {
                              "type": "block",
                              "start": {
                                "row": 62,
                                "column": 16
                              },
                              "end": {
                                "row": 62,
                                "column": 48
                              },
                              "text": "loc = loc.indices(len(self))[-1]",
                              "children": [
                                {
                                  "type": "expression_statement",
                                  "start": {
                                    "row": 62,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 62,
                                    "column": 48
                                  },
                                  "text": "loc = loc.indices(len(self))[-1]",
                                  "children": [
                                    {
                                      "type": "assignment",
                                      "start": {
                                        "row": 62,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 62,
                                        "column": 48
                                      },
                                      "text": "loc = loc.indices(len(self))[-1]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 62,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 62,
                                            "column": 19
                                          },
                                          "text": "loc"
                                        },
                                        {
                                          "type": "=",
                                          "start": {
                                            "row": 62,
                                            "column": 20
                                          },
                                          "end": {
                                            "row": 62,
                                            "column": 21
                                          },
                                          "text": "="
                                        },
                                        {
                                          "type": "subscript",
                                          "start": {
                                            "row": 62,
                                            "column": 22
                                          },
                                          "end": {
                                            "row": 62,
                                            "column": 48
                                          },
                                          "text": "loc.indices(len(self))[-1]",
                                          "children": [
                                            {
                                              "type": "call",
                                              "start": {
                                                "row": 62,
                                                "column": 22
                                              },
                                              "end": {
                                                "row": 62,
                                                "column": 44
                                              },
                                              "text": "loc.indices(len(self))",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "start": {
                                                    "row": 62,
                                                    "column": 22
                                                  },
                                                  "end": {
                                                    "row": 62,
                                                    "column": 33
                                                  },
                                                  "text": "loc.indices",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 62,
                                                        "column": 22
                                                      },
                                                      "end": {
                                                        "row": 62,
                                                        "column": 25
                                                      },
                                                      "text": "loc"
                                                    },
                                                    {
                                                      "type": ".",
                                                      "start": {
                                                        "row": 62,
                                                        "column": 25
                                                      },
                                                      "end": {
                                                        "row": 62,
                                                        "column": 26
                                                      },
                                                      "text": "."
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 62,
                                                        "column": 26
                                                      },
                                                      "end": {
                                                        "row": 62,
                                                        "column": 33
                                                      },
                                                      "text": "indices"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "start": {
                                                    "row": 62,
                                                    "column": 33
                                                  },
                                                  "end": {
                                                    "row": 62,
                                                    "column": 44
                                                  },
                                                  "text": "(len(self))",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "start": {
                                                        "row": 62,
                                                        "column": 33
                                                      },
                                                      "end": {
                                                        "row": 62,
                                                        "column": 34
                                                      },
                                                      "text": "("
                                                    },
                                                    {
                                                      "type": "call",
                                                      "start": {
                                                        "row": 62,
                                                        "column": 34
                                                      },
                                                      "end": {
                                                        "row": 62,
                                                        "column": 43
                                                      },
                                                      "text": "len(self)",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 62,
                                                            "column": 34
                                                          },
                                                          "end": {
                                                            "row": 62,
                                                            "column": 37
                                                          },
                                                          "text": "len"
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "start": {
                                                            "row": 62,
                                                            "column": 37
                                                          },
                                                          "end": {
                                                            "row": 62,
                                                            "column": 43
                                                          },
                                                          "text": "(self)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "start": {
                                                                "row": 62,
                                                                "column": 37
                                                              },
                                                              "end": {
                                                                "row": 62,
                                                                "column": 38
                                                              },
                                                              "text": "("
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "start": {
                                                                "row": 62,
                                                                "column": 38
                                                              },
                                                              "end": {
                                                                "row": 62,
                                                                "column": 42
                                                              },
                                                              "text": "self"
                                                            },
                                                            {
                                                              "type": ")",
                                                              "start": {
                                                                "row": 62,
                                                                "column": 42
                                                              },
                                                              "end": {
                                                                "row": 62,
                                                                "column": 43
                                                              },
                                                              "text": ")"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "start": {
                                                        "row": 62,
                                                        "column": 43
                                                      },
                                                      "end": {
                                                        "row": 62,
                                                        "column": 44
                                                      },
                                                      "text": ")"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "[",
                                              "start": {
                                                "row": 62,
                                                "column": 44
                                              },
                                              "end": {
                                                "row": 62,
                                                "column": 45
                                              },
                                              "text": "["
                                            },
                                            {
                                              "type": "unary_operator",
                                              "start": {
                                                "row": 62,
                                                "column": 45
                                              },
                                              "end": {
                                                "row": 62,
                                                "column": 47
                                              },
                                              "text": "-1",
                                              "children": [
                                                {
                                                  "type": "-",
                                                  "start": {
                                                    "row": 62,
                                                    "column": 45
                                                  },
                                                  "end": {
                                                    "row": 62,
                                                    "column": 46
                                                  },
                                                  "text": "-"
                                                },
                                                {
                                                  "type": "integer",
                                                  "start": {
                                                    "row": 62,
                                                    "column": 46
                                                  },
                                                  "end": {
                                                    "row": 62,
                                                    "column": 47
                                                  },
                                                  "text": "1"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "]",
                                              "start": {
                                                "row": 62,
                                                "column": 47
                                              },
                                              "end": {
                                                "row": 62,
                                                "column": 48
                                              },
                                              "text": "]"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "start": {
                            "row": 63,
                            "column": 12
                          },
                          "end": {
                            "row": 63,
                            "column": 28
                          },
                          "text": "return self[loc]",
                          "children": [
                            {
                              "type": "return",
                              "start": {
                                "row": 63,
                                "column": 12
                              },
                              "end": {
                                "row": 63,
                                "column": 18
                              },
                              "text": "return"
                            },
                            {
                              "type": "subscript",
                              "start": {
                                "row": 63,
                                "column": 19
                              },
                              "end": {
                                "row": 63,
                                "column": 28
                              },
                              "text": "self[loc]",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 63,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 63,
                                    "column": 23
                                  },
                                  "text": "self"
                                },
                                {
                                  "type": "[",
                                  "start": {
                                    "row": 63,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 63,
                                    "column": 24
                                  },
                                  "text": "["
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 63,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 63,
                                    "column": 27
                                  },
                                  "text": "loc"
                                },
                                {
                                  "type": "]",
                                  "start": {
                                    "row": 63,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 63,
                                    "column": 28
                                  },
                                  "text": "]"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}