{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 40,
    "column": 21
  },
  "text": "def vbar_stack(self, stackers, **kw):\n        ''' Generate multiple ``VBar`` renderers for levels stacked bottom\n        to top.\n\n        Args:\n            stackers (seq[str]) : a list of data source field names to stack\n                successively for ``left`` and ``right`` bar coordinates.\n\n                Additionally, the ``name`` of the renderer will be set to\n                the value of each successive stacker (this is useful with the\n                special hover variable ``$name``)\n\n        Any additional keyword arguments are passed to each call to ``vbar``.\n        If a keyword value is a list or tuple, then each call will get one\n        value from the sequence.\n\n        Returns:\n            list[GlyphRenderer]\n\n        Examples:\n\n            Assuming a ``ColumnDataSource`` named ``source`` with columns\n            *2016* and *2017*, then the following call to ``vbar_stack`` will\n            will create two ``VBar`` renderers that stack:\n\n            .. code-block:: python\n\n                p.vbar_stack(['2016', '2017'], x=10, width=0.9, color=['blue', 'red'], source=source)\n\n            This is equivalent to the following two separate calls:\n\n            .. code-block:: python\n\n                p.vbar(bottom=stack(),       top=stack('2016'),         x=10, width=0.9, color='blue', source=source, name='2016')\n                p.vbar(bottom=stack('2016'), top=stack('2016', '2017'), x=10, width=0.9, color='red',  source=source, name='2017')\n\n        '''\n        result = []\n        for kw in _double_stack(stackers, \"bottom\", \"top\", **kw):\n            result.append(self.vbar(**kw))\n        return result",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 40,
        "column": 21
      },
      "text": "def vbar_stack(self, stackers, **kw):\n        ''' Generate multiple ``VBar`` renderers for levels stacked bottom\n        to top.\n\n        Args:\n            stackers (seq[str]) : a list of data source field names to stack\n                successively for ``left`` and ``right`` bar coordinates.\n\n                Additionally, the ``name`` of the renderer will be set to\n                the value of each successive stacker (this is useful with the\n                special hover variable ``$name``)\n\n        Any additional keyword arguments are passed to each call to ``vbar``.\n        If a keyword value is a list or tuple, then each call will get one\n        value from the sequence.\n\n        Returns:\n            list[GlyphRenderer]\n\n        Examples:\n\n            Assuming a ``ColumnDataSource`` named ``source`` with columns\n            *2016* and *2017*, then the following call to ``vbar_stack`` will\n            will create two ``VBar`` renderers that stack:\n\n            .. code-block:: python\n\n                p.vbar_stack(['2016', '2017'], x=10, width=0.9, color=['blue', 'red'], source=source)\n\n            This is equivalent to the following two separate calls:\n\n            .. code-block:: python\n\n                p.vbar(bottom=stack(),       top=stack('2016'),         x=10, width=0.9, color='blue', source=source, name='2016')\n                p.vbar(bottom=stack('2016'), top=stack('2016', '2017'), x=10, width=0.9, color='red',  source=source, name='2017')\n\n        '''\n        result = []\n        for kw in _double_stack(stackers, \"bottom\", \"top\", **kw):\n            result.append(self.vbar(**kw))\n        return result",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 14
          },
          "text": "vbar_stack"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 14
          },
          "end": {
            "row": 0,
            "column": 36
          },
          "text": "(self, stackers, **kw)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 14
              },
              "end": {
                "row": 0,
                "column": 15
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 15
              },
              "end": {
                "row": 0,
                "column": 19
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 19
              },
              "end": {
                "row": 0,
                "column": 20
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 21
              },
              "end": {
                "row": 0,
                "column": 29
              },
              "text": "stackers"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 29
              },
              "end": {
                "row": 0,
                "column": 30
              },
              "text": ","
            },
            {
              "type": "dictionary_splat_pattern",
              "start": {
                "row": 0,
                "column": 31
              },
              "end": {
                "row": 0,
                "column": 35
              },
              "text": "**kw",
              "children": [
                {
                  "type": "**",
                  "start": {
                    "row": 0,
                    "column": 31
                  },
                  "end": {
                    "row": 0,
                    "column": 33
                  },
                  "text": "**"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 33
                  },
                  "end": {
                    "row": 0,
                    "column": 35
                  },
                  "text": "kw"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 35
              },
              "end": {
                "row": 0,
                "column": 36
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 36
          },
          "end": {
            "row": 0,
            "column": 37
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 40,
            "column": 21
          },
          "text": "''' Generate multiple ``VBar`` renderers for levels stacked bottom\n        to top.\n\n        Args:\n            stackers (seq[str]) : a list of data source field names to stack\n                successively for ``left`` and ``right`` bar coordinates.\n\n                Additionally, the ``name`` of the renderer will be set to\n                the value of each successive stacker (this is useful with the\n                special hover variable ``$name``)\n\n        Any additional keyword arguments are passed to each call to ``vbar``.\n        If a keyword value is a list or tuple, then each call will get one\n        value from the sequence.\n\n        Returns:\n            list[GlyphRenderer]\n\n        Examples:\n\n            Assuming a ``ColumnDataSource`` named ``source`` with columns\n            *2016* and *2017*, then the following call to ``vbar_stack`` will\n            will create two ``VBar`` renderers that stack:\n\n            .. code-block:: python\n\n                p.vbar_stack(['2016', '2017'], x=10, width=0.9, color=['blue', 'red'], source=source)\n\n            This is equivalent to the following two separate calls:\n\n            .. code-block:: python\n\n                p.vbar(bottom=stack(),       top=stack('2016'),         x=10, width=0.9, color='blue', source=source, name='2016')\n                p.vbar(bottom=stack('2016'), top=stack('2016', '2017'), x=10, width=0.9, color='red',  source=source, name='2017')\n\n        '''\n        result = []\n        for kw in _double_stack(stackers, \"bottom\", \"top\", **kw):\n            result.append(self.vbar(**kw))\n        return result",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 36,
                "column": 11
              },
              "text": "''' Generate multiple ``VBar`` renderers for levels stacked bottom\n        to top.\n\n        Args:\n            stackers (seq[str]) : a list of data source field names to stack\n                successively for ``left`` and ``right`` bar coordinates.\n\n                Additionally, the ``name`` of the renderer will be set to\n                the value of each successive stacker (this is useful with the\n                special hover variable ``$name``)\n\n        Any additional keyword arguments are passed to each call to ``vbar``.\n        If a keyword value is a list or tuple, then each call will get one\n        value from the sequence.\n\n        Returns:\n            list[GlyphRenderer]\n\n        Examples:\n\n            Assuming a ``ColumnDataSource`` named ``source`` with columns\n            *2016* and *2017*, then the following call to ``vbar_stack`` will\n            will create two ``VBar`` renderers that stack:\n\n            .. code-block:: python\n\n                p.vbar_stack(['2016', '2017'], x=10, width=0.9, color=['blue', 'red'], source=source)\n\n            This is equivalent to the following two separate calls:\n\n            .. code-block:: python\n\n                p.vbar(bottom=stack(),       top=stack('2016'),         x=10, width=0.9, color='blue', source=source, name='2016')\n                p.vbar(bottom=stack('2016'), top=stack('2016', '2017'), x=10, width=0.9, color='red',  source=source, name='2017')\n\n        '''",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 36,
                    "column": 11
                  },
                  "text": "''' Generate multiple ``VBar`` renderers for levels stacked bottom\n        to top.\n\n        Args:\n            stackers (seq[str]) : a list of data source field names to stack\n                successively for ``left`` and ``right`` bar coordinates.\n\n                Additionally, the ``name`` of the renderer will be set to\n                the value of each successive stacker (this is useful with the\n                special hover variable ``$name``)\n\n        Any additional keyword arguments are passed to each call to ``vbar``.\n        If a keyword value is a list or tuple, then each call will get one\n        value from the sequence.\n\n        Returns:\n            list[GlyphRenderer]\n\n        Examples:\n\n            Assuming a ``ColumnDataSource`` named ``source`` with columns\n            *2016* and *2017*, then the following call to ``vbar_stack`` will\n            will create two ``VBar`` renderers that stack:\n\n            .. code-block:: python\n\n                p.vbar_stack(['2016', '2017'], x=10, width=0.9, color=['blue', 'red'], source=source)\n\n            This is equivalent to the following two separate calls:\n\n            .. code-block:: python\n\n                p.vbar(bottom=stack(),       top=stack('2016'),         x=10, width=0.9, color='blue', source=source, name='2016')\n                p.vbar(bottom=stack('2016'), top=stack('2016', '2017'), x=10, width=0.9, color='red',  source=source, name='2017')\n\n        '''",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "'''"
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 36,
                        "column": 8
                      },
                      "text": " Generate multiple ``VBar`` renderers for levels stacked bottom\n        to top.\n\n        Args:\n            stackers (seq[str]) : a list of data source field names to stack\n                successively for ``left`` and ``right`` bar coordinates.\n\n                Additionally, the ``name`` of the renderer will be set to\n                the value of each successive stacker (this is useful with the\n                special hover variable ``$name``)\n\n        Any additional keyword arguments are passed to each call to ``vbar``.\n        If a keyword value is a list or tuple, then each call will get one\n        value from the sequence.\n\n        Returns:\n            list[GlyphRenderer]\n\n        Examples:\n\n            Assuming a ``ColumnDataSource`` named ``source`` with columns\n            *2016* and *2017*, then the following call to ``vbar_stack`` will\n            will create two ``VBar`` renderers that stack:\n\n            .. code-block:: python\n\n                p.vbar_stack(['2016', '2017'], x=10, width=0.9, color=['blue', 'red'], source=source)\n\n            This is equivalent to the following two separate calls:\n\n            .. code-block:: python\n\n                p.vbar(bottom=stack(),       top=stack('2016'),         x=10, width=0.9, color='blue', source=source, name='2016')\n                p.vbar(bottom=stack('2016'), top=stack('2016', '2017'), x=10, width=0.9, color='red',  source=source, name='2017')\n\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 36,
                        "column": 8
                      },
                      "end": {
                        "row": 36,
                        "column": 11
                      },
                      "text": "'''"
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 37,
                "column": 8
              },
              "end": {
                "row": 37,
                "column": 19
              },
              "text": "result = []",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 37,
                    "column": 8
                  },
                  "end": {
                    "row": 37,
                    "column": 19
                  },
                  "text": "result = []",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 37,
                        "column": 8
                      },
                      "end": {
                        "row": 37,
                        "column": 14
                      },
                      "text": "result"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 37,
                        "column": 15
                      },
                      "end": {
                        "row": 37,
                        "column": 16
                      },
                      "text": "="
                    },
                    {
                      "type": "list",
                      "start": {
                        "row": 37,
                        "column": 17
                      },
                      "end": {
                        "row": 37,
                        "column": 19
                      },
                      "text": "[]",
                      "children": [
                        {
                          "type": "[",
                          "start": {
                            "row": 37,
                            "column": 17
                          },
                          "end": {
                            "row": 37,
                            "column": 18
                          },
                          "text": "["
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 37,
                            "column": 18
                          },
                          "end": {
                            "row": 37,
                            "column": 19
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "for_statement",
              "start": {
                "row": 38,
                "column": 8
              },
              "end": {
                "row": 39,
                "column": 42
              },
              "text": "for kw in _double_stack(stackers, \"bottom\", \"top\", **kw):\n            result.append(self.vbar(**kw))",
              "children": [
                {
                  "type": "for",
                  "start": {
                    "row": 38,
                    "column": 8
                  },
                  "end": {
                    "row": 38,
                    "column": 11
                  },
                  "text": "for"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 38,
                    "column": 12
                  },
                  "end": {
                    "row": 38,
                    "column": 14
                  },
                  "text": "kw"
                },
                {
                  "type": "in",
                  "start": {
                    "row": 38,
                    "column": 15
                  },
                  "end": {
                    "row": 38,
                    "column": 17
                  },
                  "text": "in"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 38,
                    "column": 18
                  },
                  "end": {
                    "row": 38,
                    "column": 64
                  },
                  "text": "_double_stack(stackers, \"bottom\", \"top\", **kw)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 38,
                        "column": 18
                      },
                      "end": {
                        "row": 38,
                        "column": 31
                      },
                      "text": "_double_stack"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 38,
                        "column": 31
                      },
                      "end": {
                        "row": 38,
                        "column": 64
                      },
                      "text": "(stackers, \"bottom\", \"top\", **kw)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 38,
                            "column": 31
                          },
                          "end": {
                            "row": 38,
                            "column": 32
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 38,
                            "column": 32
                          },
                          "end": {
                            "row": 38,
                            "column": 40
                          },
                          "text": "stackers"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 38,
                            "column": 40
                          },
                          "end": {
                            "row": 38,
                            "column": 41
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 38,
                            "column": 42
                          },
                          "end": {
                            "row": 38,
                            "column": 50
                          },
                          "text": "\"bottom\"",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 38,
                                "column": 42
                              },
                              "end": {
                                "row": 38,
                                "column": 43
                              },
                              "text": "\""
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 38,
                                "column": 43
                              },
                              "end": {
                                "row": 38,
                                "column": 49
                              },
                              "text": "bottom"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 38,
                                "column": 49
                              },
                              "end": {
                                "row": 38,
                                "column": 50
                              },
                              "text": "\""
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 38,
                            "column": 50
                          },
                          "end": {
                            "row": 38,
                            "column": 51
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 38,
                            "column": 52
                          },
                          "end": {
                            "row": 38,
                            "column": 57
                          },
                          "text": "\"top\"",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 38,
                                "column": 52
                              },
                              "end": {
                                "row": 38,
                                "column": 53
                              },
                              "text": "\""
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 38,
                                "column": 53
                              },
                              "end": {
                                "row": 38,
                                "column": 56
                              },
                              "text": "top"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 38,
                                "column": 56
                              },
                              "end": {
                                "row": 38,
                                "column": 57
                              },
                              "text": "\""
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 38,
                            "column": 57
                          },
                          "end": {
                            "row": 38,
                            "column": 58
                          },
                          "text": ","
                        },
                        {
                          "type": "dictionary_splat",
                          "start": {
                            "row": 38,
                            "column": 59
                          },
                          "end": {
                            "row": 38,
                            "column": 63
                          },
                          "text": "**kw",
                          "children": [
                            {
                              "type": "**",
                              "start": {
                                "row": 38,
                                "column": 59
                              },
                              "end": {
                                "row": 38,
                                "column": 61
                              },
                              "text": "**"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 38,
                                "column": 61
                              },
                              "end": {
                                "row": 38,
                                "column": 63
                              },
                              "text": "kw"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 38,
                            "column": 63
                          },
                          "end": {
                            "row": 38,
                            "column": 64
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 38,
                    "column": 64
                  },
                  "end": {
                    "row": 38,
                    "column": 65
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 39,
                    "column": 12
                  },
                  "end": {
                    "row": 39,
                    "column": 42
                  },
                  "text": "result.append(self.vbar(**kw))",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 39,
                        "column": 12
                      },
                      "end": {
                        "row": 39,
                        "column": 42
                      },
                      "text": "result.append(self.vbar(**kw))",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 39,
                            "column": 12
                          },
                          "end": {
                            "row": 39,
                            "column": 42
                          },
                          "text": "result.append(self.vbar(**kw))",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 39,
                                "column": 12
                              },
                              "end": {
                                "row": 39,
                                "column": 25
                              },
                              "text": "result.append",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 39,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 39,
                                    "column": 18
                                  },
                                  "text": "result"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 39,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 39,
                                    "column": 19
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 39,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 39,
                                    "column": 25
                                  },
                                  "text": "append"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 39,
                                "column": 25
                              },
                              "end": {
                                "row": 39,
                                "column": 42
                              },
                              "text": "(self.vbar(**kw))",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 39,
                                    "column": 25
                                  },
                                  "end": {
                                    "row": 39,
                                    "column": 26
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 39,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 39,
                                    "column": 41
                                  },
                                  "text": "self.vbar(**kw)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 39,
                                        "column": 26
                                      },
                                      "end": {
                                        "row": 39,
                                        "column": 35
                                      },
                                      "text": "self.vbar",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 39,
                                            "column": 26
                                          },
                                          "end": {
                                            "row": 39,
                                            "column": 30
                                          },
                                          "text": "self"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 39,
                                            "column": 30
                                          },
                                          "end": {
                                            "row": 39,
                                            "column": 31
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 39,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 39,
                                            "column": 35
                                          },
                                          "text": "vbar"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 39,
                                        "column": 35
                                      },
                                      "end": {
                                        "row": 39,
                                        "column": 41
                                      },
                                      "text": "(**kw)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 39,
                                            "column": 35
                                          },
                                          "end": {
                                            "row": 39,
                                            "column": 36
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "dictionary_splat",
                                          "start": {
                                            "row": 39,
                                            "column": 36
                                          },
                                          "end": {
                                            "row": 39,
                                            "column": 40
                                          },
                                          "text": "**kw",
                                          "children": [
                                            {
                                              "type": "**",
                                              "start": {
                                                "row": 39,
                                                "column": 36
                                              },
                                              "end": {
                                                "row": 39,
                                                "column": 38
                                              },
                                              "text": "**"
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 39,
                                                "column": 38
                                              },
                                              "end": {
                                                "row": 39,
                                                "column": 40
                                              },
                                              "text": "kw"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 39,
                                            "column": 40
                                          },
                                          "end": {
                                            "row": 39,
                                            "column": 41
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 39,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 39,
                                    "column": 42
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 40,
                "column": 8
              },
              "end": {
                "row": 40,
                "column": 21
              },
              "text": "return result",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 40,
                    "column": 8
                  },
                  "end": {
                    "row": 40,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 40,
                    "column": 15
                  },
                  "end": {
                    "row": 40,
                    "column": 21
                  },
                  "text": "result"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}