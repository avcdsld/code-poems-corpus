{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 98,
    "column": 118
  },
  "text": "def rolling_max(self, window_start, window_end, min_observations=None):\n        \"\"\"\n        Calculate a new SArray of the maximum value of different subsets over\n        this SArray.\n\n        The subset that the maximum is calculated over is defined as an\n        inclusive range relative to the position to each value in the SArray,\n        using `window_start` and `window_end`. For a better understanding of\n        this, see the examples below.\n\n        Parameters\n        ----------\n        window_start : int\n            The start of the subset to calculate the maximum relative to the\n            current value.\n\n        window_end : int\n            The end of the subset to calculate the maximum relative to the current\n            value. Must be greater than `window_start`.\n\n        min_observations : int\n            Minimum number of non-missing observations in window required to\n            calculate the maximum (otherwise result is None). None signifies that\n            the entire window must not include a missing value. A negative\n            number throws an error.\n\n        Returns\n        -------\n        out : SArray\n\n        Examples\n        --------\n        >>> import pandas\n        >>> sa = SArray([1,2,3,4,5])\n        >>> series = pandas.Series([1,2,3,4,5])\n\n        A rolling max with a window including the previous 2 entries including\n        the current:\n        >>> sa.rolling_max(-2,0)\n        dtype: int\n        Rows: 5\n        [None, None, 3, 4, 5]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3)\n        0   NaN\n        1   NaN\n        2     3\n        3     4\n        4     5\n        dtype: float64\n\n        Same rolling max operation, but 2 minimum observations:\n        >>> sa.rolling_max(-2,0,min_observations=2)\n        dtype: int\n        Rows: 5\n        [None, 2, 3, 4, 5]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3, min_periods=2)\n        0    NaN\n        1      2\n        2      3\n        3      4\n        4      5\n        dtype: float64\n\n        A rolling max with a size of 3, centered around the current:\n        >>> sa.rolling_max(-1,1)\n        dtype: int\n        Rows: 5\n        [None, 3, 4, 5, None]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3, center=True)\n        0   NaN\n        1     3\n        2     4\n        3     5\n        4   NaN\n        dtype: float64\n\n        A rolling max with a window including the current and the 2 entries\n        following:\n        >>> sa.rolling_max(0,2)\n        dtype: int\n        Rows: 5\n        [3, 4, 5, None, None]\n\n        A rolling max with a window including the previous 2 entries NOT\n        including the current:\n        >>> sa.rolling_max(-2,-1)\n        dtype: int\n        Rows: 5\n        [None, None, 2, 3, 4]\n        \"\"\"\n        min_observations = self.__check_min_observations(min_observations)\n        agg_op = '__builtin__max__'\n        return SArray(_proxy=self.__proxy__.builtin_rolling_apply(agg_op, window_start, window_end, min_observations))",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 98,
        "column": 118
      },
      "text": "def rolling_max(self, window_start, window_end, min_observations=None):\n        \"\"\"\n        Calculate a new SArray of the maximum value of different subsets over\n        this SArray.\n\n        The subset that the maximum is calculated over is defined as an\n        inclusive range relative to the position to each value in the SArray,\n        using `window_start` and `window_end`. For a better understanding of\n        this, see the examples below.\n\n        Parameters\n        ----------\n        window_start : int\n            The start of the subset to calculate the maximum relative to the\n            current value.\n\n        window_end : int\n            The end of the subset to calculate the maximum relative to the current\n            value. Must be greater than `window_start`.\n\n        min_observations : int\n            Minimum number of non-missing observations in window required to\n            calculate the maximum (otherwise result is None). None signifies that\n            the entire window must not include a missing value. A negative\n            number throws an error.\n\n        Returns\n        -------\n        out : SArray\n\n        Examples\n        --------\n        >>> import pandas\n        >>> sa = SArray([1,2,3,4,5])\n        >>> series = pandas.Series([1,2,3,4,5])\n\n        A rolling max with a window including the previous 2 entries including\n        the current:\n        >>> sa.rolling_max(-2,0)\n        dtype: int\n        Rows: 5\n        [None, None, 3, 4, 5]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3)\n        0   NaN\n        1   NaN\n        2     3\n        3     4\n        4     5\n        dtype: float64\n\n        Same rolling max operation, but 2 minimum observations:\n        >>> sa.rolling_max(-2,0,min_observations=2)\n        dtype: int\n        Rows: 5\n        [None, 2, 3, 4, 5]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3, min_periods=2)\n        0    NaN\n        1      2\n        2      3\n        3      4\n        4      5\n        dtype: float64\n\n        A rolling max with a size of 3, centered around the current:\n        >>> sa.rolling_max(-1,1)\n        dtype: int\n        Rows: 5\n        [None, 3, 4, 5, None]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3, center=True)\n        0   NaN\n        1     3\n        2     4\n        3     5\n        4   NaN\n        dtype: float64\n\n        A rolling max with a window including the current and the 2 entries\n        following:\n        >>> sa.rolling_max(0,2)\n        dtype: int\n        Rows: 5\n        [3, 4, 5, None, None]\n\n        A rolling max with a window including the previous 2 entries NOT\n        including the current:\n        >>> sa.rolling_max(-2,-1)\n        dtype: int\n        Rows: 5\n        [None, None, 2, 3, 4]\n        \"\"\"\n        min_observations = self.__check_min_observations(min_observations)\n        agg_op = '__builtin__max__'\n        return SArray(_proxy=self.__proxy__.builtin_rolling_apply(agg_op, window_start, window_end, min_observations))",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 15
          },
          "text": "rolling_max"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 15
          },
          "end": {
            "row": 0,
            "column": 70
          },
          "text": "(self, window_start, window_end, min_observations=None)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 15
              },
              "end": {
                "row": 0,
                "column": 16
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 20
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 22
              },
              "end": {
                "row": 0,
                "column": 34
              },
              "text": "window_start"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 34
              },
              "end": {
                "row": 0,
                "column": 35
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 36
              },
              "end": {
                "row": 0,
                "column": 46
              },
              "text": "window_end"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 46
              },
              "end": {
                "row": 0,
                "column": 47
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 48
              },
              "end": {
                "row": 0,
                "column": 69
              },
              "text": "min_observations=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 48
                  },
                  "end": {
                    "row": 0,
                    "column": 64
                  },
                  "text": "min_observations"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 64
                  },
                  "end": {
                    "row": 0,
                    "column": 65
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 65
                  },
                  "end": {
                    "row": 0,
                    "column": 69
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 69
              },
              "end": {
                "row": 0,
                "column": 70
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 70
          },
          "end": {
            "row": 0,
            "column": 71
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 98,
            "column": 118
          },
          "text": "\"\"\"\n        Calculate a new SArray of the maximum value of different subsets over\n        this SArray.\n\n        The subset that the maximum is calculated over is defined as an\n        inclusive range relative to the position to each value in the SArray,\n        using `window_start` and `window_end`. For a better understanding of\n        this, see the examples below.\n\n        Parameters\n        ----------\n        window_start : int\n            The start of the subset to calculate the maximum relative to the\n            current value.\n\n        window_end : int\n            The end of the subset to calculate the maximum relative to the current\n            value. Must be greater than `window_start`.\n\n        min_observations : int\n            Minimum number of non-missing observations in window required to\n            calculate the maximum (otherwise result is None). None signifies that\n            the entire window must not include a missing value. A negative\n            number throws an error.\n\n        Returns\n        -------\n        out : SArray\n\n        Examples\n        --------\n        >>> import pandas\n        >>> sa = SArray([1,2,3,4,5])\n        >>> series = pandas.Series([1,2,3,4,5])\n\n        A rolling max with a window including the previous 2 entries including\n        the current:\n        >>> sa.rolling_max(-2,0)\n        dtype: int\n        Rows: 5\n        [None, None, 3, 4, 5]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3)\n        0   NaN\n        1   NaN\n        2     3\n        3     4\n        4     5\n        dtype: float64\n\n        Same rolling max operation, but 2 minimum observations:\n        >>> sa.rolling_max(-2,0,min_observations=2)\n        dtype: int\n        Rows: 5\n        [None, 2, 3, 4, 5]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3, min_periods=2)\n        0    NaN\n        1      2\n        2      3\n        3      4\n        4      5\n        dtype: float64\n\n        A rolling max with a size of 3, centered around the current:\n        >>> sa.rolling_max(-1,1)\n        dtype: int\n        Rows: 5\n        [None, 3, 4, 5, None]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3, center=True)\n        0   NaN\n        1     3\n        2     4\n        3     5\n        4   NaN\n        dtype: float64\n\n        A rolling max with a window including the current and the 2 entries\n        following:\n        >>> sa.rolling_max(0,2)\n        dtype: int\n        Rows: 5\n        [3, 4, 5, None, None]\n\n        A rolling max with a window including the previous 2 entries NOT\n        including the current:\n        >>> sa.rolling_max(-2,-1)\n        dtype: int\n        Rows: 5\n        [None, None, 2, 3, 4]\n        \"\"\"\n        min_observations = self.__check_min_observations(min_observations)\n        agg_op = '__builtin__max__'\n        return SArray(_proxy=self.__proxy__.builtin_rolling_apply(agg_op, window_start, window_end, min_observations))",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 95,
                "column": 11
              },
              "text": "\"\"\"\n        Calculate a new SArray of the maximum value of different subsets over\n        this SArray.\n\n        The subset that the maximum is calculated over is defined as an\n        inclusive range relative to the position to each value in the SArray,\n        using `window_start` and `window_end`. For a better understanding of\n        this, see the examples below.\n\n        Parameters\n        ----------\n        window_start : int\n            The start of the subset to calculate the maximum relative to the\n            current value.\n\n        window_end : int\n            The end of the subset to calculate the maximum relative to the current\n            value. Must be greater than `window_start`.\n\n        min_observations : int\n            Minimum number of non-missing observations in window required to\n            calculate the maximum (otherwise result is None). None signifies that\n            the entire window must not include a missing value. A negative\n            number throws an error.\n\n        Returns\n        -------\n        out : SArray\n\n        Examples\n        --------\n        >>> import pandas\n        >>> sa = SArray([1,2,3,4,5])\n        >>> series = pandas.Series([1,2,3,4,5])\n\n        A rolling max with a window including the previous 2 entries including\n        the current:\n        >>> sa.rolling_max(-2,0)\n        dtype: int\n        Rows: 5\n        [None, None, 3, 4, 5]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3)\n        0   NaN\n        1   NaN\n        2     3\n        3     4\n        4     5\n        dtype: float64\n\n        Same rolling max operation, but 2 minimum observations:\n        >>> sa.rolling_max(-2,0,min_observations=2)\n        dtype: int\n        Rows: 5\n        [None, 2, 3, 4, 5]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3, min_periods=2)\n        0    NaN\n        1      2\n        2      3\n        3      4\n        4      5\n        dtype: float64\n\n        A rolling max with a size of 3, centered around the current:\n        >>> sa.rolling_max(-1,1)\n        dtype: int\n        Rows: 5\n        [None, 3, 4, 5, None]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3, center=True)\n        0   NaN\n        1     3\n        2     4\n        3     5\n        4   NaN\n        dtype: float64\n\n        A rolling max with a window including the current and the 2 entries\n        following:\n        >>> sa.rolling_max(0,2)\n        dtype: int\n        Rows: 5\n        [3, 4, 5, None, None]\n\n        A rolling max with a window including the previous 2 entries NOT\n        including the current:\n        >>> sa.rolling_max(-2,-1)\n        dtype: int\n        Rows: 5\n        [None, None, 2, 3, 4]\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 95,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Calculate a new SArray of the maximum value of different subsets over\n        this SArray.\n\n        The subset that the maximum is calculated over is defined as an\n        inclusive range relative to the position to each value in the SArray,\n        using `window_start` and `window_end`. For a better understanding of\n        this, see the examples below.\n\n        Parameters\n        ----------\n        window_start : int\n            The start of the subset to calculate the maximum relative to the\n            current value.\n\n        window_end : int\n            The end of the subset to calculate the maximum relative to the current\n            value. Must be greater than `window_start`.\n\n        min_observations : int\n            Minimum number of non-missing observations in window required to\n            calculate the maximum (otherwise result is None). None signifies that\n            the entire window must not include a missing value. A negative\n            number throws an error.\n\n        Returns\n        -------\n        out : SArray\n\n        Examples\n        --------\n        >>> import pandas\n        >>> sa = SArray([1,2,3,4,5])\n        >>> series = pandas.Series([1,2,3,4,5])\n\n        A rolling max with a window including the previous 2 entries including\n        the current:\n        >>> sa.rolling_max(-2,0)\n        dtype: int\n        Rows: 5\n        [None, None, 3, 4, 5]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3)\n        0   NaN\n        1   NaN\n        2     3\n        3     4\n        4     5\n        dtype: float64\n\n        Same rolling max operation, but 2 minimum observations:\n        >>> sa.rolling_max(-2,0,min_observations=2)\n        dtype: int\n        Rows: 5\n        [None, 2, 3, 4, 5]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3, min_periods=2)\n        0    NaN\n        1      2\n        2      3\n        3      4\n        4      5\n        dtype: float64\n\n        A rolling max with a size of 3, centered around the current:\n        >>> sa.rolling_max(-1,1)\n        dtype: int\n        Rows: 5\n        [None, 3, 4, 5, None]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3, center=True)\n        0   NaN\n        1     3\n        2     4\n        3     5\n        4   NaN\n        dtype: float64\n\n        A rolling max with a window including the current and the 2 entries\n        following:\n        >>> sa.rolling_max(0,2)\n        dtype: int\n        Rows: 5\n        [3, 4, 5, None, None]\n\n        A rolling max with a window including the previous 2 entries NOT\n        including the current:\n        >>> sa.rolling_max(-2,-1)\n        dtype: int\n        Rows: 5\n        [None, None, 2, 3, 4]\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 95,
                        "column": 8
                      },
                      "text": "\n        Calculate a new SArray of the maximum value of different subsets over\n        this SArray.\n\n        The subset that the maximum is calculated over is defined as an\n        inclusive range relative to the position to each value in the SArray,\n        using `window_start` and `window_end`. For a better understanding of\n        this, see the examples below.\n\n        Parameters\n        ----------\n        window_start : int\n            The start of the subset to calculate the maximum relative to the\n            current value.\n\n        window_end : int\n            The end of the subset to calculate the maximum relative to the current\n            value. Must be greater than `window_start`.\n\n        min_observations : int\n            Minimum number of non-missing observations in window required to\n            calculate the maximum (otherwise result is None). None signifies that\n            the entire window must not include a missing value. A negative\n            number throws an error.\n\n        Returns\n        -------\n        out : SArray\n\n        Examples\n        --------\n        >>> import pandas\n        >>> sa = SArray([1,2,3,4,5])\n        >>> series = pandas.Series([1,2,3,4,5])\n\n        A rolling max with a window including the previous 2 entries including\n        the current:\n        >>> sa.rolling_max(-2,0)\n        dtype: int\n        Rows: 5\n        [None, None, 3, 4, 5]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3)\n        0   NaN\n        1   NaN\n        2     3\n        3     4\n        4     5\n        dtype: float64\n\n        Same rolling max operation, but 2 minimum observations:\n        >>> sa.rolling_max(-2,0,min_observations=2)\n        dtype: int\n        Rows: 5\n        [None, 2, 3, 4, 5]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3, min_periods=2)\n        0    NaN\n        1      2\n        2      3\n        3      4\n        4      5\n        dtype: float64\n\n        A rolling max with a size of 3, centered around the current:\n        >>> sa.rolling_max(-1,1)\n        dtype: int\n        Rows: 5\n        [None, 3, 4, 5, None]\n\n        Pandas equivalent:\n        >>> pandas.rolling_max(series, 3, center=True)\n        0   NaN\n        1     3\n        2     4\n        3     5\n        4   NaN\n        dtype: float64\n\n        A rolling max with a window including the current and the 2 entries\n        following:\n        >>> sa.rolling_max(0,2)\n        dtype: int\n        Rows: 5\n        [3, 4, 5, None, None]\n\n        A rolling max with a window including the previous 2 entries NOT\n        including the current:\n        >>> sa.rolling_max(-2,-1)\n        dtype: int\n        Rows: 5\n        [None, None, 2, 3, 4]\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 95,
                        "column": 8
                      },
                      "end": {
                        "row": 95,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 96,
                "column": 8
              },
              "end": {
                "row": 96,
                "column": 74
              },
              "text": "min_observations = self.__check_min_observations(min_observations)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 96,
                    "column": 8
                  },
                  "end": {
                    "row": 96,
                    "column": 74
                  },
                  "text": "min_observations = self.__check_min_observations(min_observations)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 96,
                        "column": 8
                      },
                      "end": {
                        "row": 96,
                        "column": 24
                      },
                      "text": "min_observations"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 96,
                        "column": 25
                      },
                      "end": {
                        "row": 96,
                        "column": 26
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 96,
                        "column": 27
                      },
                      "end": {
                        "row": 96,
                        "column": 74
                      },
                      "text": "self.__check_min_observations(min_observations)",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 96,
                            "column": 27
                          },
                          "end": {
                            "row": 96,
                            "column": 56
                          },
                          "text": "self.__check_min_observations",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 96,
                                "column": 27
                              },
                              "end": {
                                "row": 96,
                                "column": 31
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 96,
                                "column": 31
                              },
                              "end": {
                                "row": 96,
                                "column": 32
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 96,
                                "column": 32
                              },
                              "end": {
                                "row": 96,
                                "column": 56
                              },
                              "text": "__check_min_observations"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 96,
                            "column": 56
                          },
                          "end": {
                            "row": 96,
                            "column": 74
                          },
                          "text": "(min_observations)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 96,
                                "column": 56
                              },
                              "end": {
                                "row": 96,
                                "column": 57
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 96,
                                "column": 57
                              },
                              "end": {
                                "row": 96,
                                "column": 73
                              },
                              "text": "min_observations"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 96,
                                "column": 73
                              },
                              "end": {
                                "row": 96,
                                "column": 74
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 97,
                "column": 8
              },
              "end": {
                "row": 97,
                "column": 35
              },
              "text": "agg_op = '__builtin__max__'",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 97,
                    "column": 8
                  },
                  "end": {
                    "row": 97,
                    "column": 35
                  },
                  "text": "agg_op = '__builtin__max__'",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 97,
                        "column": 8
                      },
                      "end": {
                        "row": 97,
                        "column": 14
                      },
                      "text": "agg_op"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 97,
                        "column": 15
                      },
                      "end": {
                        "row": 97,
                        "column": 16
                      },
                      "text": "="
                    },
                    {
                      "type": "string",
                      "start": {
                        "row": 97,
                        "column": 17
                      },
                      "end": {
                        "row": 97,
                        "column": 35
                      },
                      "text": "'__builtin__max__'",
                      "children": [
                        {
                          "type": "string_start",
                          "start": {
                            "row": 97,
                            "column": 17
                          },
                          "end": {
                            "row": 97,
                            "column": 18
                          },
                          "text": "'"
                        },
                        {
                          "type": "string_content",
                          "start": {
                            "row": 97,
                            "column": 18
                          },
                          "end": {
                            "row": 97,
                            "column": 34
                          },
                          "text": "__builtin__max__"
                        },
                        {
                          "type": "string_end",
                          "start": {
                            "row": 97,
                            "column": 34
                          },
                          "end": {
                            "row": 97,
                            "column": 35
                          },
                          "text": "'"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 98,
                "column": 8
              },
              "end": {
                "row": 98,
                "column": 118
              },
              "text": "return SArray(_proxy=self.__proxy__.builtin_rolling_apply(agg_op, window_start, window_end, min_observations))",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 98,
                    "column": 8
                  },
                  "end": {
                    "row": 98,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 98,
                    "column": 15
                  },
                  "end": {
                    "row": 98,
                    "column": 118
                  },
                  "text": "SArray(_proxy=self.__proxy__.builtin_rolling_apply(agg_op, window_start, window_end, min_observations))",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 98,
                        "column": 15
                      },
                      "end": {
                        "row": 98,
                        "column": 21
                      },
                      "text": "SArray"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 98,
                        "column": 21
                      },
                      "end": {
                        "row": 98,
                        "column": 118
                      },
                      "text": "(_proxy=self.__proxy__.builtin_rolling_apply(agg_op, window_start, window_end, min_observations))",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 98,
                            "column": 21
                          },
                          "end": {
                            "row": 98,
                            "column": 22
                          },
                          "text": "("
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 98,
                            "column": 22
                          },
                          "end": {
                            "row": 98,
                            "column": 117
                          },
                          "text": "_proxy=self.__proxy__.builtin_rolling_apply(agg_op, window_start, window_end, min_observations)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 98,
                                "column": 22
                              },
                              "end": {
                                "row": 98,
                                "column": 28
                              },
                              "text": "_proxy"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 98,
                                "column": 28
                              },
                              "end": {
                                "row": 98,
                                "column": 29
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 98,
                                "column": 29
                              },
                              "end": {
                                "row": 98,
                                "column": 117
                              },
                              "text": "self.__proxy__.builtin_rolling_apply(agg_op, window_start, window_end, min_observations)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 98,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 98,
                                    "column": 65
                                  },
                                  "text": "self.__proxy__.builtin_rolling_apply",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 98,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 98,
                                        "column": 43
                                      },
                                      "text": "self.__proxy__",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 98,
                                            "column": 29
                                          },
                                          "end": {
                                            "row": 98,
                                            "column": 33
                                          },
                                          "text": "self"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 98,
                                            "column": 33
                                          },
                                          "end": {
                                            "row": 98,
                                            "column": 34
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 98,
                                            "column": 34
                                          },
                                          "end": {
                                            "row": 98,
                                            "column": 43
                                          },
                                          "text": "__proxy__"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 98,
                                        "column": 43
                                      },
                                      "end": {
                                        "row": 98,
                                        "column": 44
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 98,
                                        "column": 44
                                      },
                                      "end": {
                                        "row": 98,
                                        "column": 65
                                      },
                                      "text": "builtin_rolling_apply"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 98,
                                    "column": 65
                                  },
                                  "end": {
                                    "row": 98,
                                    "column": 117
                                  },
                                  "text": "(agg_op, window_start, window_end, min_observations)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 98,
                                        "column": 65
                                      },
                                      "end": {
                                        "row": 98,
                                        "column": 66
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 98,
                                        "column": 66
                                      },
                                      "end": {
                                        "row": 98,
                                        "column": 72
                                      },
                                      "text": "agg_op"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 98,
                                        "column": 72
                                      },
                                      "end": {
                                        "row": 98,
                                        "column": 73
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 98,
                                        "column": 74
                                      },
                                      "end": {
                                        "row": 98,
                                        "column": 86
                                      },
                                      "text": "window_start"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 98,
                                        "column": 86
                                      },
                                      "end": {
                                        "row": 98,
                                        "column": 87
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 98,
                                        "column": 88
                                      },
                                      "end": {
                                        "row": 98,
                                        "column": 98
                                      },
                                      "text": "window_end"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 98,
                                        "column": 98
                                      },
                                      "end": {
                                        "row": 98,
                                        "column": 99
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 98,
                                        "column": 100
                                      },
                                      "end": {
                                        "row": 98,
                                        "column": 116
                                      },
                                      "text": "min_observations"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 98,
                                        "column": 116
                                      },
                                      "end": {
                                        "row": 98,
                                        "column": 117
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 98,
                            "column": 117
                          },
                          "end": {
                            "row": 98,
                            "column": 118
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}