{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 51,
    "column": 72
  },
  "text": "def gamma(alpha=1, beta=1, shape=_Null, dtype=_Null, ctx=None, out=None, **kwargs):\n    \"\"\"Draw random samples from a gamma distribution.\n\n    Samples are distributed according to a gamma distribution parametrized\n    by *alpha* (shape) and *beta* (scale).\n\n    Parameters\n    ----------\n    alpha : float or NDArray, optional\n        The shape of the gamma distribution. Should be greater than zero.\n    beta : float or NDArray, optional\n        The scale of the gamma distribution. Should be greater than zero.\n        Default is equal to 1.\n    shape : int or tuple of ints, optional\n        The number of samples to draw. If shape is, e.g., `(m, n)` and `alpha` and\n        `beta` are scalars, output shape will be `(m, n)`. If `alpha` and `beta`\n        are NDArrays with shape, e.g., `(x, y)`, then output will have shape\n        `(x, y, m, n)`, where `m*n` samples are drawn for each `[alpha, beta)` pair.\n    dtype : {'float16', 'float32', 'float64'}, optional\n        Data type of output samples. Default is 'float32'\n    ctx : Context, optional\n        Device context of output. Default is current context. Overridden by\n        `alpha.context` when `alpha` is an NDArray.\n    out : NDArray, optional\n        Store output to an existing NDArray.\n\n    Returns\n    -------\n    NDArray\n        If input `shape` has shape, e.g., `(m, n)` and `alpha` and `beta` are scalars, output\n        shape will be `(m, n)`. If `alpha` and `beta` are NDArrays with shape, e.g.,\n        `(x, y)`, then output will have shape `(x, y, m, n)`, where `m*n` samples are\n        drawn for each `[alpha, beta)` pair.\n\n    Examples\n    --------\n    >>> mx.nd.random.gamma(1, 1)\n    [ 1.93308783]\n    <NDArray 1 @cpu(0)>\n    >>> mx.nd.random.gamma(1, 1, shape=(2,))\n    [ 0.48216391  2.09890771]\n    <NDArray 2 @cpu(0)>\n    >>> alpha = mx.nd.array([1,2,3])\n    >>> beta = mx.nd.array([2,3,4])\n    >>> mx.nd.random.gamma(alpha, beta, shape=2)\n    [[  3.24343276   0.94137681]\n     [  3.52734375   0.45568955]\n     [ 14.26264095  14.0170126 ]]\n    <NDArray 3x2 @cpu(0)>\n    \"\"\"\n    return _random_helper(_internal._random_gamma, _internal._sample_gamma,\n                          [alpha, beta], shape, dtype, ctx, out, kwargs)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 51,
        "column": 72
      },
      "text": "def gamma(alpha=1, beta=1, shape=_Null, dtype=_Null, ctx=None, out=None, **kwargs):\n    \"\"\"Draw random samples from a gamma distribution.\n\n    Samples are distributed according to a gamma distribution parametrized\n    by *alpha* (shape) and *beta* (scale).\n\n    Parameters\n    ----------\n    alpha : float or NDArray, optional\n        The shape of the gamma distribution. Should be greater than zero.\n    beta : float or NDArray, optional\n        The scale of the gamma distribution. Should be greater than zero.\n        Default is equal to 1.\n    shape : int or tuple of ints, optional\n        The number of samples to draw. If shape is, e.g., `(m, n)` and `alpha` and\n        `beta` are scalars, output shape will be `(m, n)`. If `alpha` and `beta`\n        are NDArrays with shape, e.g., `(x, y)`, then output will have shape\n        `(x, y, m, n)`, where `m*n` samples are drawn for each `[alpha, beta)` pair.\n    dtype : {'float16', 'float32', 'float64'}, optional\n        Data type of output samples. Default is 'float32'\n    ctx : Context, optional\n        Device context of output. Default is current context. Overridden by\n        `alpha.context` when `alpha` is an NDArray.\n    out : NDArray, optional\n        Store output to an existing NDArray.\n\n    Returns\n    -------\n    NDArray\n        If input `shape` has shape, e.g., `(m, n)` and `alpha` and `beta` are scalars, output\n        shape will be `(m, n)`. If `alpha` and `beta` are NDArrays with shape, e.g.,\n        `(x, y)`, then output will have shape `(x, y, m, n)`, where `m*n` samples are\n        drawn for each `[alpha, beta)` pair.\n\n    Examples\n    --------\n    >>> mx.nd.random.gamma(1, 1)\n    [ 1.93308783]\n    <NDArray 1 @cpu(0)>\n    >>> mx.nd.random.gamma(1, 1, shape=(2,))\n    [ 0.48216391  2.09890771]\n    <NDArray 2 @cpu(0)>\n    >>> alpha = mx.nd.array([1,2,3])\n    >>> beta = mx.nd.array([2,3,4])\n    >>> mx.nd.random.gamma(alpha, beta, shape=2)\n    [[  3.24343276   0.94137681]\n     [  3.52734375   0.45568955]\n     [ 14.26264095  14.0170126 ]]\n    <NDArray 3x2 @cpu(0)>\n    \"\"\"\n    return _random_helper(_internal._random_gamma, _internal._sample_gamma,\n                          [alpha, beta], shape, dtype, ctx, out, kwargs)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 9
          },
          "text": "gamma"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 9
          },
          "end": {
            "row": 0,
            "column": 82
          },
          "text": "(alpha=1, beta=1, shape=_Null, dtype=_Null, ctx=None, out=None, **kwargs)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 9
              },
              "end": {
                "row": 0,
                "column": 10
              },
              "text": "("
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 10
              },
              "end": {
                "row": 0,
                "column": 17
              },
              "text": "alpha=1",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 10
                  },
                  "end": {
                    "row": 0,
                    "column": 15
                  },
                  "text": "alpha"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 15
                  },
                  "end": {
                    "row": 0,
                    "column": 16
                  },
                  "text": "="
                },
                {
                  "type": "integer",
                  "start": {
                    "row": 0,
                    "column": 16
                  },
                  "end": {
                    "row": 0,
                    "column": 17
                  },
                  "text": "1"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 17
              },
              "end": {
                "row": 0,
                "column": 18
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 19
              },
              "end": {
                "row": 0,
                "column": 25
              },
              "text": "beta=1",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 19
                  },
                  "end": {
                    "row": 0,
                    "column": 23
                  },
                  "text": "beta"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 23
                  },
                  "end": {
                    "row": 0,
                    "column": 24
                  },
                  "text": "="
                },
                {
                  "type": "integer",
                  "start": {
                    "row": 0,
                    "column": 24
                  },
                  "end": {
                    "row": 0,
                    "column": 25
                  },
                  "text": "1"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 25
              },
              "end": {
                "row": 0,
                "column": 26
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 27
              },
              "end": {
                "row": 0,
                "column": 38
              },
              "text": "shape=_Null",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 27
                  },
                  "end": {
                    "row": 0,
                    "column": 32
                  },
                  "text": "shape"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 32
                  },
                  "end": {
                    "row": 0,
                    "column": 33
                  },
                  "text": "="
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 33
                  },
                  "end": {
                    "row": 0,
                    "column": 38
                  },
                  "text": "_Null"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 38
              },
              "end": {
                "row": 0,
                "column": 39
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 40
              },
              "end": {
                "row": 0,
                "column": 51
              },
              "text": "dtype=_Null",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 40
                  },
                  "end": {
                    "row": 0,
                    "column": 45
                  },
                  "text": "dtype"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 45
                  },
                  "end": {
                    "row": 0,
                    "column": 46
                  },
                  "text": "="
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 46
                  },
                  "end": {
                    "row": 0,
                    "column": 51
                  },
                  "text": "_Null"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 51
              },
              "end": {
                "row": 0,
                "column": 52
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 53
              },
              "end": {
                "row": 0,
                "column": 61
              },
              "text": "ctx=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 53
                  },
                  "end": {
                    "row": 0,
                    "column": 56
                  },
                  "text": "ctx"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 56
                  },
                  "end": {
                    "row": 0,
                    "column": 57
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 57
                  },
                  "end": {
                    "row": 0,
                    "column": 61
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 61
              },
              "end": {
                "row": 0,
                "column": 62
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 63
              },
              "end": {
                "row": 0,
                "column": 71
              },
              "text": "out=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 63
                  },
                  "end": {
                    "row": 0,
                    "column": 66
                  },
                  "text": "out"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 66
                  },
                  "end": {
                    "row": 0,
                    "column": 67
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 67
                  },
                  "end": {
                    "row": 0,
                    "column": 71
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 71
              },
              "end": {
                "row": 0,
                "column": 72
              },
              "text": ","
            },
            {
              "type": "dictionary_splat_pattern",
              "start": {
                "row": 0,
                "column": 73
              },
              "end": {
                "row": 0,
                "column": 81
              },
              "text": "**kwargs",
              "children": [
                {
                  "type": "**",
                  "start": {
                    "row": 0,
                    "column": 73
                  },
                  "end": {
                    "row": 0,
                    "column": 75
                  },
                  "text": "**"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 75
                  },
                  "end": {
                    "row": 0,
                    "column": 81
                  },
                  "text": "kwargs"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 81
              },
              "end": {
                "row": 0,
                "column": 82
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 82
          },
          "end": {
            "row": 0,
            "column": 83
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 4
          },
          "end": {
            "row": 51,
            "column": 72
          },
          "text": "\"\"\"Draw random samples from a gamma distribution.\n\n    Samples are distributed according to a gamma distribution parametrized\n    by *alpha* (shape) and *beta* (scale).\n\n    Parameters\n    ----------\n    alpha : float or NDArray, optional\n        The shape of the gamma distribution. Should be greater than zero.\n    beta : float or NDArray, optional\n        The scale of the gamma distribution. Should be greater than zero.\n        Default is equal to 1.\n    shape : int or tuple of ints, optional\n        The number of samples to draw. If shape is, e.g., `(m, n)` and `alpha` and\n        `beta` are scalars, output shape will be `(m, n)`. If `alpha` and `beta`\n        are NDArrays with shape, e.g., `(x, y)`, then output will have shape\n        `(x, y, m, n)`, where `m*n` samples are drawn for each `[alpha, beta)` pair.\n    dtype : {'float16', 'float32', 'float64'}, optional\n        Data type of output samples. Default is 'float32'\n    ctx : Context, optional\n        Device context of output. Default is current context. Overridden by\n        `alpha.context` when `alpha` is an NDArray.\n    out : NDArray, optional\n        Store output to an existing NDArray.\n\n    Returns\n    -------\n    NDArray\n        If input `shape` has shape, e.g., `(m, n)` and `alpha` and `beta` are scalars, output\n        shape will be `(m, n)`. If `alpha` and `beta` are NDArrays with shape, e.g.,\n        `(x, y)`, then output will have shape `(x, y, m, n)`, where `m*n` samples are\n        drawn for each `[alpha, beta)` pair.\n\n    Examples\n    --------\n    >>> mx.nd.random.gamma(1, 1)\n    [ 1.93308783]\n    <NDArray 1 @cpu(0)>\n    >>> mx.nd.random.gamma(1, 1, shape=(2,))\n    [ 0.48216391  2.09890771]\n    <NDArray 2 @cpu(0)>\n    >>> alpha = mx.nd.array([1,2,3])\n    >>> beta = mx.nd.array([2,3,4])\n    >>> mx.nd.random.gamma(alpha, beta, shape=2)\n    [[  3.24343276   0.94137681]\n     [  3.52734375   0.45568955]\n     [ 14.26264095  14.0170126 ]]\n    <NDArray 3x2 @cpu(0)>\n    \"\"\"\n    return _random_helper(_internal._random_gamma, _internal._sample_gamma,\n                          [alpha, beta], shape, dtype, ctx, out, kwargs)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 4
              },
              "end": {
                "row": 49,
                "column": 7
              },
              "text": "\"\"\"Draw random samples from a gamma distribution.\n\n    Samples are distributed according to a gamma distribution parametrized\n    by *alpha* (shape) and *beta* (scale).\n\n    Parameters\n    ----------\n    alpha : float or NDArray, optional\n        The shape of the gamma distribution. Should be greater than zero.\n    beta : float or NDArray, optional\n        The scale of the gamma distribution. Should be greater than zero.\n        Default is equal to 1.\n    shape : int or tuple of ints, optional\n        The number of samples to draw. If shape is, e.g., `(m, n)` and `alpha` and\n        `beta` are scalars, output shape will be `(m, n)`. If `alpha` and `beta`\n        are NDArrays with shape, e.g., `(x, y)`, then output will have shape\n        `(x, y, m, n)`, where `m*n` samples are drawn for each `[alpha, beta)` pair.\n    dtype : {'float16', 'float32', 'float64'}, optional\n        Data type of output samples. Default is 'float32'\n    ctx : Context, optional\n        Device context of output. Default is current context. Overridden by\n        `alpha.context` when `alpha` is an NDArray.\n    out : NDArray, optional\n        Store output to an existing NDArray.\n\n    Returns\n    -------\n    NDArray\n        If input `shape` has shape, e.g., `(m, n)` and `alpha` and `beta` are scalars, output\n        shape will be `(m, n)`. If `alpha` and `beta` are NDArrays with shape, e.g.,\n        `(x, y)`, then output will have shape `(x, y, m, n)`, where `m*n` samples are\n        drawn for each `[alpha, beta)` pair.\n\n    Examples\n    --------\n    >>> mx.nd.random.gamma(1, 1)\n    [ 1.93308783]\n    <NDArray 1 @cpu(0)>\n    >>> mx.nd.random.gamma(1, 1, shape=(2,))\n    [ 0.48216391  2.09890771]\n    <NDArray 2 @cpu(0)>\n    >>> alpha = mx.nd.array([1,2,3])\n    >>> beta = mx.nd.array([2,3,4])\n    >>> mx.nd.random.gamma(alpha, beta, shape=2)\n    [[  3.24343276   0.94137681]\n     [  3.52734375   0.45568955]\n     [ 14.26264095  14.0170126 ]]\n    <NDArray 3x2 @cpu(0)>\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 4
                  },
                  "end": {
                    "row": 49,
                    "column": 7
                  },
                  "text": "\"\"\"Draw random samples from a gamma distribution.\n\n    Samples are distributed according to a gamma distribution parametrized\n    by *alpha* (shape) and *beta* (scale).\n\n    Parameters\n    ----------\n    alpha : float or NDArray, optional\n        The shape of the gamma distribution. Should be greater than zero.\n    beta : float or NDArray, optional\n        The scale of the gamma distribution. Should be greater than zero.\n        Default is equal to 1.\n    shape : int or tuple of ints, optional\n        The number of samples to draw. If shape is, e.g., `(m, n)` and `alpha` and\n        `beta` are scalars, output shape will be `(m, n)`. If `alpha` and `beta`\n        are NDArrays with shape, e.g., `(x, y)`, then output will have shape\n        `(x, y, m, n)`, where `m*n` samples are drawn for each `[alpha, beta)` pair.\n    dtype : {'float16', 'float32', 'float64'}, optional\n        Data type of output samples. Default is 'float32'\n    ctx : Context, optional\n        Device context of output. Default is current context. Overridden by\n        `alpha.context` when `alpha` is an NDArray.\n    out : NDArray, optional\n        Store output to an existing NDArray.\n\n    Returns\n    -------\n    NDArray\n        If input `shape` has shape, e.g., `(m, n)` and `alpha` and `beta` are scalars, output\n        shape will be `(m, n)`. If `alpha` and `beta` are NDArrays with shape, e.g.,\n        `(x, y)`, then output will have shape `(x, y, m, n)`, where `m*n` samples are\n        drawn for each `[alpha, beta)` pair.\n\n    Examples\n    --------\n    >>> mx.nd.random.gamma(1, 1)\n    [ 1.93308783]\n    <NDArray 1 @cpu(0)>\n    >>> mx.nd.random.gamma(1, 1, shape=(2,))\n    [ 0.48216391  2.09890771]\n    <NDArray 2 @cpu(0)>\n    >>> alpha = mx.nd.array([1,2,3])\n    >>> beta = mx.nd.array([2,3,4])\n    >>> mx.nd.random.gamma(alpha, beta, shape=2)\n    [[  3.24343276   0.94137681]\n     [  3.52734375   0.45568955]\n     [ 14.26264095  14.0170126 ]]\n    <NDArray 3x2 @cpu(0)>\n    \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 4
                      },
                      "end": {
                        "row": 1,
                        "column": 7
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 7
                      },
                      "end": {
                        "row": 49,
                        "column": 4
                      },
                      "text": "Draw random samples from a gamma distribution.\n\n    Samples are distributed according to a gamma distribution parametrized\n    by *alpha* (shape) and *beta* (scale).\n\n    Parameters\n    ----------\n    alpha : float or NDArray, optional\n        The shape of the gamma distribution. Should be greater than zero.\n    beta : float or NDArray, optional\n        The scale of the gamma distribution. Should be greater than zero.\n        Default is equal to 1.\n    shape : int or tuple of ints, optional\n        The number of samples to draw. If shape is, e.g., `(m, n)` and `alpha` and\n        `beta` are scalars, output shape will be `(m, n)`. If `alpha` and `beta`\n        are NDArrays with shape, e.g., `(x, y)`, then output will have shape\n        `(x, y, m, n)`, where `m*n` samples are drawn for each `[alpha, beta)` pair.\n    dtype : {'float16', 'float32', 'float64'}, optional\n        Data type of output samples. Default is 'float32'\n    ctx : Context, optional\n        Device context of output. Default is current context. Overridden by\n        `alpha.context` when `alpha` is an NDArray.\n    out : NDArray, optional\n        Store output to an existing NDArray.\n\n    Returns\n    -------\n    NDArray\n        If input `shape` has shape, e.g., `(m, n)` and `alpha` and `beta` are scalars, output\n        shape will be `(m, n)`. If `alpha` and `beta` are NDArrays with shape, e.g.,\n        `(x, y)`, then output will have shape `(x, y, m, n)`, where `m*n` samples are\n        drawn for each `[alpha, beta)` pair.\n\n    Examples\n    --------\n    >>> mx.nd.random.gamma(1, 1)\n    [ 1.93308783]\n    <NDArray 1 @cpu(0)>\n    >>> mx.nd.random.gamma(1, 1, shape=(2,))\n    [ 0.48216391  2.09890771]\n    <NDArray 2 @cpu(0)>\n    >>> alpha = mx.nd.array([1,2,3])\n    >>> beta = mx.nd.array([2,3,4])\n    >>> mx.nd.random.gamma(alpha, beta, shape=2)\n    [[  3.24343276   0.94137681]\n     [  3.52734375   0.45568955]\n     [ 14.26264095  14.0170126 ]]\n    <NDArray 3x2 @cpu(0)>\n    "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 49,
                        "column": 4
                      },
                      "end": {
                        "row": 49,
                        "column": 7
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 50,
                "column": 4
              },
              "end": {
                "row": 51,
                "column": 72
              },
              "text": "return _random_helper(_internal._random_gamma, _internal._sample_gamma,\n                          [alpha, beta], shape, dtype, ctx, out, kwargs)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 50,
                    "column": 4
                  },
                  "end": {
                    "row": 50,
                    "column": 10
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 50,
                    "column": 11
                  },
                  "end": {
                    "row": 51,
                    "column": 72
                  },
                  "text": "_random_helper(_internal._random_gamma, _internal._sample_gamma,\n                          [alpha, beta], shape, dtype, ctx, out, kwargs)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 50,
                        "column": 11
                      },
                      "end": {
                        "row": 50,
                        "column": 25
                      },
                      "text": "_random_helper"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 50,
                        "column": 25
                      },
                      "end": {
                        "row": 51,
                        "column": 72
                      },
                      "text": "(_internal._random_gamma, _internal._sample_gamma,\n                          [alpha, beta], shape, dtype, ctx, out, kwargs)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 50,
                            "column": 25
                          },
                          "end": {
                            "row": 50,
                            "column": 26
                          },
                          "text": "("
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 50,
                            "column": 26
                          },
                          "end": {
                            "row": 50,
                            "column": 49
                          },
                          "text": "_internal._random_gamma",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 50,
                                "column": 26
                              },
                              "end": {
                                "row": 50,
                                "column": 35
                              },
                              "text": "_internal"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 50,
                                "column": 35
                              },
                              "end": {
                                "row": 50,
                                "column": 36
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 50,
                                "column": 36
                              },
                              "end": {
                                "row": 50,
                                "column": 49
                              },
                              "text": "_random_gamma"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 50,
                            "column": 49
                          },
                          "end": {
                            "row": 50,
                            "column": 50
                          },
                          "text": ","
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 50,
                            "column": 51
                          },
                          "end": {
                            "row": 50,
                            "column": 74
                          },
                          "text": "_internal._sample_gamma",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 50,
                                "column": 51
                              },
                              "end": {
                                "row": 50,
                                "column": 60
                              },
                              "text": "_internal"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 50,
                                "column": 60
                              },
                              "end": {
                                "row": 50,
                                "column": 61
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 50,
                                "column": 61
                              },
                              "end": {
                                "row": 50,
                                "column": 74
                              },
                              "text": "_sample_gamma"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 50,
                            "column": 74
                          },
                          "end": {
                            "row": 50,
                            "column": 75
                          },
                          "text": ","
                        },
                        {
                          "type": "list",
                          "start": {
                            "row": 51,
                            "column": 26
                          },
                          "end": {
                            "row": 51,
                            "column": 39
                          },
                          "text": "[alpha, beta]",
                          "children": [
                            {
                              "type": "[",
                              "start": {
                                "row": 51,
                                "column": 26
                              },
                              "end": {
                                "row": 51,
                                "column": 27
                              },
                              "text": "["
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 51,
                                "column": 27
                              },
                              "end": {
                                "row": 51,
                                "column": 32
                              },
                              "text": "alpha"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 51,
                                "column": 32
                              },
                              "end": {
                                "row": 51,
                                "column": 33
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 51,
                                "column": 34
                              },
                              "end": {
                                "row": 51,
                                "column": 38
                              },
                              "text": "beta"
                            },
                            {
                              "type": "]",
                              "start": {
                                "row": 51,
                                "column": 38
                              },
                              "end": {
                                "row": 51,
                                "column": 39
                              },
                              "text": "]"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 51,
                            "column": 39
                          },
                          "end": {
                            "row": 51,
                            "column": 40
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 51,
                            "column": 41
                          },
                          "end": {
                            "row": 51,
                            "column": 46
                          },
                          "text": "shape"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 51,
                            "column": 46
                          },
                          "end": {
                            "row": 51,
                            "column": 47
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 51,
                            "column": 48
                          },
                          "end": {
                            "row": 51,
                            "column": 53
                          },
                          "text": "dtype"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 51,
                            "column": 53
                          },
                          "end": {
                            "row": 51,
                            "column": 54
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 51,
                            "column": 55
                          },
                          "end": {
                            "row": 51,
                            "column": 58
                          },
                          "text": "ctx"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 51,
                            "column": 58
                          },
                          "end": {
                            "row": 51,
                            "column": 59
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 51,
                            "column": 60
                          },
                          "end": {
                            "row": 51,
                            "column": 63
                          },
                          "text": "out"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 51,
                            "column": 63
                          },
                          "end": {
                            "row": 51,
                            "column": 64
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 51,
                            "column": 65
                          },
                          "end": {
                            "row": 51,
                            "column": 71
                          },
                          "text": "kwargs"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 51,
                            "column": 71
                          },
                          "end": {
                            "row": 51,
                            "column": 72
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}