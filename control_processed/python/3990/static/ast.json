{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 53,
    "column": 57
  },
  "text": "def predict(self, data, output_margin=False, ntree_limit=None, validate_features=True):\n        \"\"\"\n        Predict with `data`.\n\n        .. note:: This function is not thread safe.\n\n          For each booster object, predict can only be called from one thread.\n          If you want to run prediction using multiple thread, call ``xgb.copy()`` to make copies\n          of model object and then call ``predict()``.\n\n        .. note:: Using ``predict()`` with DART booster\n\n          If the booster object is DART type, ``predict()`` will perform dropouts, i.e. only\n          some of the trees will be evaluated. This will produce incorrect results if ``data`` is\n          not the training data. To obtain correct results on test sets, set ``ntree_limit`` to\n          a nonzero value, e.g.\n\n          .. code-block:: python\n\n            preds = bst.predict(dtest, ntree_limit=num_round)\n\n        Parameters\n        ----------\n        data : DMatrix\n            The dmatrix storing the input.\n        output_margin : bool\n            Whether to output the raw untransformed margin value.\n        ntree_limit : int\n            Limit number of trees in the prediction; defaults to best_ntree_limit if defined\n            (i.e. it has been trained with early stopping), otherwise 0 (use all trees).\n        validate_features : bool\n            When this is True, validate that the Booster's and data's feature_names are identical.\n            Otherwise, it is assumed that the feature_names are the same.\n        Returns\n        -------\n        prediction : numpy array\n        \"\"\"\n        test_dmatrix = DMatrix(data, missing=self.missing, nthread=self.n_jobs)\n        if ntree_limit is None:\n            ntree_limit = getattr(self, \"best_ntree_limit\", 0)\n        class_probs = self.get_booster().predict(test_dmatrix,\n                                                 output_margin=output_margin,\n                                                 ntree_limit=ntree_limit,\n                                                 validate_features=validate_features)\n        if output_margin:\n            # If output_margin is active, simply return the scores\n            return class_probs\n\n        if len(class_probs.shape) > 1:\n            column_indexes = np.argmax(class_probs, axis=1)\n        else:\n            column_indexes = np.repeat(0, class_probs.shape[0])\n            column_indexes[class_probs > 0.5] = 1\n        return self._le.inverse_transform(column_indexes)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 53,
        "column": 57
      },
      "text": "def predict(self, data, output_margin=False, ntree_limit=None, validate_features=True):\n        \"\"\"\n        Predict with `data`.\n\n        .. note:: This function is not thread safe.\n\n          For each booster object, predict can only be called from one thread.\n          If you want to run prediction using multiple thread, call ``xgb.copy()`` to make copies\n          of model object and then call ``predict()``.\n\n        .. note:: Using ``predict()`` with DART booster\n\n          If the booster object is DART type, ``predict()`` will perform dropouts, i.e. only\n          some of the trees will be evaluated. This will produce incorrect results if ``data`` is\n          not the training data. To obtain correct results on test sets, set ``ntree_limit`` to\n          a nonzero value, e.g.\n\n          .. code-block:: python\n\n            preds = bst.predict(dtest, ntree_limit=num_round)\n\n        Parameters\n        ----------\n        data : DMatrix\n            The dmatrix storing the input.\n        output_margin : bool\n            Whether to output the raw untransformed margin value.\n        ntree_limit : int\n            Limit number of trees in the prediction; defaults to best_ntree_limit if defined\n            (i.e. it has been trained with early stopping), otherwise 0 (use all trees).\n        validate_features : bool\n            When this is True, validate that the Booster's and data's feature_names are identical.\n            Otherwise, it is assumed that the feature_names are the same.\n        Returns\n        -------\n        prediction : numpy array\n        \"\"\"\n        test_dmatrix = DMatrix(data, missing=self.missing, nthread=self.n_jobs)\n        if ntree_limit is None:\n            ntree_limit = getattr(self, \"best_ntree_limit\", 0)\n        class_probs = self.get_booster().predict(test_dmatrix,\n                                                 output_margin=output_margin,\n                                                 ntree_limit=ntree_limit,\n                                                 validate_features=validate_features)\n        if output_margin:\n            # If output_margin is active, simply return the scores\n            return class_probs\n\n        if len(class_probs.shape) > 1:\n            column_indexes = np.argmax(class_probs, axis=1)\n        else:\n            column_indexes = np.repeat(0, class_probs.shape[0])\n            column_indexes[class_probs > 0.5] = 1\n        return self._le.inverse_transform(column_indexes)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 11
          },
          "text": "predict"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 11
          },
          "end": {
            "row": 0,
            "column": 86
          },
          "text": "(self, data, output_margin=False, ntree_limit=None, validate_features=True)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 11
              },
              "end": {
                "row": 0,
                "column": 12
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 12
              },
              "end": {
                "row": 0,
                "column": 16
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 17
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 18
              },
              "end": {
                "row": 0,
                "column": 22
              },
              "text": "data"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 22
              },
              "end": {
                "row": 0,
                "column": 23
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 24
              },
              "end": {
                "row": 0,
                "column": 43
              },
              "text": "output_margin=False",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 24
                  },
                  "end": {
                    "row": 0,
                    "column": 37
                  },
                  "text": "output_margin"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 37
                  },
                  "end": {
                    "row": 0,
                    "column": 38
                  },
                  "text": "="
                },
                {
                  "type": "false",
                  "start": {
                    "row": 0,
                    "column": 38
                  },
                  "end": {
                    "row": 0,
                    "column": 43
                  },
                  "text": "False"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 43
              },
              "end": {
                "row": 0,
                "column": 44
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 45
              },
              "end": {
                "row": 0,
                "column": 61
              },
              "text": "ntree_limit=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 45
                  },
                  "end": {
                    "row": 0,
                    "column": 56
                  },
                  "text": "ntree_limit"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 56
                  },
                  "end": {
                    "row": 0,
                    "column": 57
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 57
                  },
                  "end": {
                    "row": 0,
                    "column": 61
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 61
              },
              "end": {
                "row": 0,
                "column": 62
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 63
              },
              "end": {
                "row": 0,
                "column": 85
              },
              "text": "validate_features=True",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 63
                  },
                  "end": {
                    "row": 0,
                    "column": 80
                  },
                  "text": "validate_features"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 80
                  },
                  "end": {
                    "row": 0,
                    "column": 81
                  },
                  "text": "="
                },
                {
                  "type": "true",
                  "start": {
                    "row": 0,
                    "column": 81
                  },
                  "end": {
                    "row": 0,
                    "column": 85
                  },
                  "text": "True"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 85
              },
              "end": {
                "row": 0,
                "column": 86
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 86
          },
          "end": {
            "row": 0,
            "column": 87
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 53,
            "column": 57
          },
          "text": "\"\"\"\n        Predict with `data`.\n\n        .. note:: This function is not thread safe.\n\n          For each booster object, predict can only be called from one thread.\n          If you want to run prediction using multiple thread, call ``xgb.copy()`` to make copies\n          of model object and then call ``predict()``.\n\n        .. note:: Using ``predict()`` with DART booster\n\n          If the booster object is DART type, ``predict()`` will perform dropouts, i.e. only\n          some of the trees will be evaluated. This will produce incorrect results if ``data`` is\n          not the training data. To obtain correct results on test sets, set ``ntree_limit`` to\n          a nonzero value, e.g.\n\n          .. code-block:: python\n\n            preds = bst.predict(dtest, ntree_limit=num_round)\n\n        Parameters\n        ----------\n        data : DMatrix\n            The dmatrix storing the input.\n        output_margin : bool\n            Whether to output the raw untransformed margin value.\n        ntree_limit : int\n            Limit number of trees in the prediction; defaults to best_ntree_limit if defined\n            (i.e. it has been trained with early stopping), otherwise 0 (use all trees).\n        validate_features : bool\n            When this is True, validate that the Booster's and data's feature_names are identical.\n            Otherwise, it is assumed that the feature_names are the same.\n        Returns\n        -------\n        prediction : numpy array\n        \"\"\"\n        test_dmatrix = DMatrix(data, missing=self.missing, nthread=self.n_jobs)\n        if ntree_limit is None:\n            ntree_limit = getattr(self, \"best_ntree_limit\", 0)\n        class_probs = self.get_booster().predict(test_dmatrix,\n                                                 output_margin=output_margin,\n                                                 ntree_limit=ntree_limit,\n                                                 validate_features=validate_features)\n        if output_margin:\n            # If output_margin is active, simply return the scores\n            return class_probs\n\n        if len(class_probs.shape) > 1:\n            column_indexes = np.argmax(class_probs, axis=1)\n        else:\n            column_indexes = np.repeat(0, class_probs.shape[0])\n            column_indexes[class_probs > 0.5] = 1\n        return self._le.inverse_transform(column_indexes)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 36,
                "column": 11
              },
              "text": "\"\"\"\n        Predict with `data`.\n\n        .. note:: This function is not thread safe.\n\n          For each booster object, predict can only be called from one thread.\n          If you want to run prediction using multiple thread, call ``xgb.copy()`` to make copies\n          of model object and then call ``predict()``.\n\n        .. note:: Using ``predict()`` with DART booster\n\n          If the booster object is DART type, ``predict()`` will perform dropouts, i.e. only\n          some of the trees will be evaluated. This will produce incorrect results if ``data`` is\n          not the training data. To obtain correct results on test sets, set ``ntree_limit`` to\n          a nonzero value, e.g.\n\n          .. code-block:: python\n\n            preds = bst.predict(dtest, ntree_limit=num_round)\n\n        Parameters\n        ----------\n        data : DMatrix\n            The dmatrix storing the input.\n        output_margin : bool\n            Whether to output the raw untransformed margin value.\n        ntree_limit : int\n            Limit number of trees in the prediction; defaults to best_ntree_limit if defined\n            (i.e. it has been trained with early stopping), otherwise 0 (use all trees).\n        validate_features : bool\n            When this is True, validate that the Booster's and data's feature_names are identical.\n            Otherwise, it is assumed that the feature_names are the same.\n        Returns\n        -------\n        prediction : numpy array\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 36,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Predict with `data`.\n\n        .. note:: This function is not thread safe.\n\n          For each booster object, predict can only be called from one thread.\n          If you want to run prediction using multiple thread, call ``xgb.copy()`` to make copies\n          of model object and then call ``predict()``.\n\n        .. note:: Using ``predict()`` with DART booster\n\n          If the booster object is DART type, ``predict()`` will perform dropouts, i.e. only\n          some of the trees will be evaluated. This will produce incorrect results if ``data`` is\n          not the training data. To obtain correct results on test sets, set ``ntree_limit`` to\n          a nonzero value, e.g.\n\n          .. code-block:: python\n\n            preds = bst.predict(dtest, ntree_limit=num_round)\n\n        Parameters\n        ----------\n        data : DMatrix\n            The dmatrix storing the input.\n        output_margin : bool\n            Whether to output the raw untransformed margin value.\n        ntree_limit : int\n            Limit number of trees in the prediction; defaults to best_ntree_limit if defined\n            (i.e. it has been trained with early stopping), otherwise 0 (use all trees).\n        validate_features : bool\n            When this is True, validate that the Booster's and data's feature_names are identical.\n            Otherwise, it is assumed that the feature_names are the same.\n        Returns\n        -------\n        prediction : numpy array\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 36,
                        "column": 8
                      },
                      "text": "\n        Predict with `data`.\n\n        .. note:: This function is not thread safe.\n\n          For each booster object, predict can only be called from one thread.\n          If you want to run prediction using multiple thread, call ``xgb.copy()`` to make copies\n          of model object and then call ``predict()``.\n\n        .. note:: Using ``predict()`` with DART booster\n\n          If the booster object is DART type, ``predict()`` will perform dropouts, i.e. only\n          some of the trees will be evaluated. This will produce incorrect results if ``data`` is\n          not the training data. To obtain correct results on test sets, set ``ntree_limit`` to\n          a nonzero value, e.g.\n\n          .. code-block:: python\n\n            preds = bst.predict(dtest, ntree_limit=num_round)\n\n        Parameters\n        ----------\n        data : DMatrix\n            The dmatrix storing the input.\n        output_margin : bool\n            Whether to output the raw untransformed margin value.\n        ntree_limit : int\n            Limit number of trees in the prediction; defaults to best_ntree_limit if defined\n            (i.e. it has been trained with early stopping), otherwise 0 (use all trees).\n        validate_features : bool\n            When this is True, validate that the Booster's and data's feature_names are identical.\n            Otherwise, it is assumed that the feature_names are the same.\n        Returns\n        -------\n        prediction : numpy array\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 36,
                        "column": 8
                      },
                      "end": {
                        "row": 36,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 37,
                "column": 8
              },
              "end": {
                "row": 37,
                "column": 79
              },
              "text": "test_dmatrix = DMatrix(data, missing=self.missing, nthread=self.n_jobs)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 37,
                    "column": 8
                  },
                  "end": {
                    "row": 37,
                    "column": 79
                  },
                  "text": "test_dmatrix = DMatrix(data, missing=self.missing, nthread=self.n_jobs)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 37,
                        "column": 8
                      },
                      "end": {
                        "row": 37,
                        "column": 20
                      },
                      "text": "test_dmatrix"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 37,
                        "column": 21
                      },
                      "end": {
                        "row": 37,
                        "column": 22
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 37,
                        "column": 23
                      },
                      "end": {
                        "row": 37,
                        "column": 79
                      },
                      "text": "DMatrix(data, missing=self.missing, nthread=self.n_jobs)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 37,
                            "column": 23
                          },
                          "end": {
                            "row": 37,
                            "column": 30
                          },
                          "text": "DMatrix"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 37,
                            "column": 30
                          },
                          "end": {
                            "row": 37,
                            "column": 79
                          },
                          "text": "(data, missing=self.missing, nthread=self.n_jobs)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 37,
                                "column": 30
                              },
                              "end": {
                                "row": 37,
                                "column": 31
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 37,
                                "column": 31
                              },
                              "end": {
                                "row": 37,
                                "column": 35
                              },
                              "text": "data"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 37,
                                "column": 35
                              },
                              "end": {
                                "row": 37,
                                "column": 36
                              },
                              "text": ","
                            },
                            {
                              "type": "keyword_argument",
                              "start": {
                                "row": 37,
                                "column": 37
                              },
                              "end": {
                                "row": 37,
                                "column": 57
                              },
                              "text": "missing=self.missing",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 37,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 44
                                  },
                                  "text": "missing"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 37,
                                    "column": 44
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 45
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 37,
                                    "column": 45
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 57
                                  },
                                  "text": "self.missing",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 37,
                                        "column": 45
                                      },
                                      "end": {
                                        "row": 37,
                                        "column": 49
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 37,
                                        "column": 49
                                      },
                                      "end": {
                                        "row": 37,
                                        "column": 50
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 37,
                                        "column": 50
                                      },
                                      "end": {
                                        "row": 37,
                                        "column": 57
                                      },
                                      "text": "missing"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 37,
                                "column": 57
                              },
                              "end": {
                                "row": 37,
                                "column": 58
                              },
                              "text": ","
                            },
                            {
                              "type": "keyword_argument",
                              "start": {
                                "row": 37,
                                "column": 59
                              },
                              "end": {
                                "row": 37,
                                "column": 78
                              },
                              "text": "nthread=self.n_jobs",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 37,
                                    "column": 59
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 66
                                  },
                                  "text": "nthread"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 37,
                                    "column": 66
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 67
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 37,
                                    "column": 67
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 78
                                  },
                                  "text": "self.n_jobs",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 37,
                                        "column": 67
                                      },
                                      "end": {
                                        "row": 37,
                                        "column": 71
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 37,
                                        "column": 71
                                      },
                                      "end": {
                                        "row": 37,
                                        "column": 72
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 37,
                                        "column": 72
                                      },
                                      "end": {
                                        "row": 37,
                                        "column": 78
                                      },
                                      "text": "n_jobs"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 37,
                                "column": 78
                              },
                              "end": {
                                "row": 37,
                                "column": 79
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 38,
                "column": 8
              },
              "end": {
                "row": 39,
                "column": 62
              },
              "text": "if ntree_limit is None:\n            ntree_limit = getattr(self, \"best_ntree_limit\", 0)",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 38,
                    "column": 8
                  },
                  "end": {
                    "row": 38,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "comparison_operator",
                  "start": {
                    "row": 38,
                    "column": 11
                  },
                  "end": {
                    "row": 38,
                    "column": 30
                  },
                  "text": "ntree_limit is None",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 38,
                        "column": 11
                      },
                      "end": {
                        "row": 38,
                        "column": 22
                      },
                      "text": "ntree_limit"
                    },
                    {
                      "type": "is",
                      "start": {
                        "row": 38,
                        "column": 23
                      },
                      "end": {
                        "row": 38,
                        "column": 25
                      },
                      "text": "is"
                    },
                    {
                      "type": "none",
                      "start": {
                        "row": 38,
                        "column": 26
                      },
                      "end": {
                        "row": 38,
                        "column": 30
                      },
                      "text": "None"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 38,
                    "column": 30
                  },
                  "end": {
                    "row": 38,
                    "column": 31
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 39,
                    "column": 12
                  },
                  "end": {
                    "row": 39,
                    "column": 62
                  },
                  "text": "ntree_limit = getattr(self, \"best_ntree_limit\", 0)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 39,
                        "column": 12
                      },
                      "end": {
                        "row": 39,
                        "column": 62
                      },
                      "text": "ntree_limit = getattr(self, \"best_ntree_limit\", 0)",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 39,
                            "column": 12
                          },
                          "end": {
                            "row": 39,
                            "column": 62
                          },
                          "text": "ntree_limit = getattr(self, \"best_ntree_limit\", 0)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 39,
                                "column": 12
                              },
                              "end": {
                                "row": 39,
                                "column": 23
                              },
                              "text": "ntree_limit"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 39,
                                "column": 24
                              },
                              "end": {
                                "row": 39,
                                "column": 25
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 39,
                                "column": 26
                              },
                              "end": {
                                "row": 39,
                                "column": 62
                              },
                              "text": "getattr(self, \"best_ntree_limit\", 0)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 39,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 39,
                                    "column": 33
                                  },
                                  "text": "getattr"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 39,
                                    "column": 33
                                  },
                                  "end": {
                                    "row": 39,
                                    "column": 62
                                  },
                                  "text": "(self, \"best_ntree_limit\", 0)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 39,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 39,
                                        "column": 34
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 39,
                                        "column": 34
                                      },
                                      "end": {
                                        "row": 39,
                                        "column": 38
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 39,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 39,
                                        "column": 39
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 39,
                                        "column": 40
                                      },
                                      "end": {
                                        "row": 39,
                                        "column": 58
                                      },
                                      "text": "\"best_ntree_limit\"",
                                      "children": [
                                        {
                                          "type": "string_start",
                                          "start": {
                                            "row": 39,
                                            "column": 40
                                          },
                                          "end": {
                                            "row": 39,
                                            "column": 41
                                          },
                                          "text": "\""
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 39,
                                            "column": 41
                                          },
                                          "end": {
                                            "row": 39,
                                            "column": 57
                                          },
                                          "text": "best_ntree_limit"
                                        },
                                        {
                                          "type": "string_end",
                                          "start": {
                                            "row": 39,
                                            "column": 57
                                          },
                                          "end": {
                                            "row": 39,
                                            "column": 58
                                          },
                                          "text": "\""
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 39,
                                        "column": 58
                                      },
                                      "end": {
                                        "row": 39,
                                        "column": 59
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "integer",
                                      "start": {
                                        "row": 39,
                                        "column": 60
                                      },
                                      "end": {
                                        "row": 39,
                                        "column": 61
                                      },
                                      "text": "0"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 39,
                                        "column": 61
                                      },
                                      "end": {
                                        "row": 39,
                                        "column": 62
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 40,
                "column": 8
              },
              "end": {
                "row": 43,
                "column": 85
              },
              "text": "class_probs = self.get_booster().predict(test_dmatrix,\n                                                 output_margin=output_margin,\n                                                 ntree_limit=ntree_limit,\n                                                 validate_features=validate_features)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 40,
                    "column": 8
                  },
                  "end": {
                    "row": 43,
                    "column": 85
                  },
                  "text": "class_probs = self.get_booster().predict(test_dmatrix,\n                                                 output_margin=output_margin,\n                                                 ntree_limit=ntree_limit,\n                                                 validate_features=validate_features)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 40,
                        "column": 8
                      },
                      "end": {
                        "row": 40,
                        "column": 19
                      },
                      "text": "class_probs"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 40,
                        "column": 20
                      },
                      "end": {
                        "row": 40,
                        "column": 21
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 40,
                        "column": 22
                      },
                      "end": {
                        "row": 43,
                        "column": 85
                      },
                      "text": "self.get_booster().predict(test_dmatrix,\n                                                 output_margin=output_margin,\n                                                 ntree_limit=ntree_limit,\n                                                 validate_features=validate_features)",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 40,
                            "column": 22
                          },
                          "end": {
                            "row": 40,
                            "column": 48
                          },
                          "text": "self.get_booster().predict",
                          "children": [
                            {
                              "type": "call",
                              "start": {
                                "row": 40,
                                "column": 22
                              },
                              "end": {
                                "row": 40,
                                "column": 40
                              },
                              "text": "self.get_booster()",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 40,
                                    "column": 22
                                  },
                                  "end": {
                                    "row": 40,
                                    "column": 38
                                  },
                                  "text": "self.get_booster",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 40,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 40,
                                        "column": 26
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 40,
                                        "column": 26
                                      },
                                      "end": {
                                        "row": 40,
                                        "column": 27
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 40,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 40,
                                        "column": 38
                                      },
                                      "text": "get_booster"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 40,
                                    "column": 38
                                  },
                                  "end": {
                                    "row": 40,
                                    "column": 40
                                  },
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 40,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 40,
                                        "column": 39
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 40,
                                        "column": 39
                                      },
                                      "end": {
                                        "row": 40,
                                        "column": 40
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 40,
                                "column": 40
                              },
                              "end": {
                                "row": 40,
                                "column": 41
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 40,
                                "column": 41
                              },
                              "end": {
                                "row": 40,
                                "column": 48
                              },
                              "text": "predict"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 40,
                            "column": 48
                          },
                          "end": {
                            "row": 43,
                            "column": 85
                          },
                          "text": "(test_dmatrix,\n                                                 output_margin=output_margin,\n                                                 ntree_limit=ntree_limit,\n                                                 validate_features=validate_features)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 40,
                                "column": 48
                              },
                              "end": {
                                "row": 40,
                                "column": 49
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 40,
                                "column": 49
                              },
                              "end": {
                                "row": 40,
                                "column": 61
                              },
                              "text": "test_dmatrix"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 40,
                                "column": 61
                              },
                              "end": {
                                "row": 40,
                                "column": 62
                              },
                              "text": ","
                            },
                            {
                              "type": "keyword_argument",
                              "start": {
                                "row": 41,
                                "column": 49
                              },
                              "end": {
                                "row": 41,
                                "column": 76
                              },
                              "text": "output_margin=output_margin",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 41,
                                    "column": 49
                                  },
                                  "end": {
                                    "row": 41,
                                    "column": 62
                                  },
                                  "text": "output_margin"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 41,
                                    "column": 62
                                  },
                                  "end": {
                                    "row": 41,
                                    "column": 63
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 41,
                                    "column": 63
                                  },
                                  "end": {
                                    "row": 41,
                                    "column": 76
                                  },
                                  "text": "output_margin"
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 41,
                                "column": 76
                              },
                              "end": {
                                "row": 41,
                                "column": 77
                              },
                              "text": ","
                            },
                            {
                              "type": "keyword_argument",
                              "start": {
                                "row": 42,
                                "column": 49
                              },
                              "end": {
                                "row": 42,
                                "column": 72
                              },
                              "text": "ntree_limit=ntree_limit",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 42,
                                    "column": 49
                                  },
                                  "end": {
                                    "row": 42,
                                    "column": 60
                                  },
                                  "text": "ntree_limit"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 42,
                                    "column": 60
                                  },
                                  "end": {
                                    "row": 42,
                                    "column": 61
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 42,
                                    "column": 61
                                  },
                                  "end": {
                                    "row": 42,
                                    "column": 72
                                  },
                                  "text": "ntree_limit"
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 42,
                                "column": 72
                              },
                              "end": {
                                "row": 42,
                                "column": 73
                              },
                              "text": ","
                            },
                            {
                              "type": "keyword_argument",
                              "start": {
                                "row": 43,
                                "column": 49
                              },
                              "end": {
                                "row": 43,
                                "column": 84
                              },
                              "text": "validate_features=validate_features",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 43,
                                    "column": 49
                                  },
                                  "end": {
                                    "row": 43,
                                    "column": 66
                                  },
                                  "text": "validate_features"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 43,
                                    "column": 66
                                  },
                                  "end": {
                                    "row": 43,
                                    "column": 67
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 43,
                                    "column": 67
                                  },
                                  "end": {
                                    "row": 43,
                                    "column": 84
                                  },
                                  "text": "validate_features"
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 43,
                                "column": 84
                              },
                              "end": {
                                "row": 43,
                                "column": 85
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 44,
                "column": 8
              },
              "end": {
                "row": 46,
                "column": 30
              },
              "text": "if output_margin:\n            # If output_margin is active, simply return the scores\n            return class_probs",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 44,
                    "column": 8
                  },
                  "end": {
                    "row": 44,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 44,
                    "column": 11
                  },
                  "end": {
                    "row": 44,
                    "column": 24
                  },
                  "text": "output_margin"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 44,
                    "column": 24
                  },
                  "end": {
                    "row": 44,
                    "column": 25
                  },
                  "text": ":"
                },
                {
                  "type": "comment",
                  "start": {
                    "row": 45,
                    "column": 12
                  },
                  "end": {
                    "row": 45,
                    "column": 66
                  },
                  "text": "# If output_margin is active, simply return the scores"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 46,
                    "column": 12
                  },
                  "end": {
                    "row": 46,
                    "column": 30
                  },
                  "text": "return class_probs",
                  "children": [
                    {
                      "type": "return_statement",
                      "start": {
                        "row": 46,
                        "column": 12
                      },
                      "end": {
                        "row": 46,
                        "column": 30
                      },
                      "text": "return class_probs",
                      "children": [
                        {
                          "type": "return",
                          "start": {
                            "row": 46,
                            "column": 12
                          },
                          "end": {
                            "row": 46,
                            "column": 18
                          },
                          "text": "return"
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 46,
                            "column": 19
                          },
                          "end": {
                            "row": 46,
                            "column": 30
                          },
                          "text": "class_probs"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 48,
                "column": 8
              },
              "end": {
                "row": 52,
                "column": 49
              },
              "text": "if len(class_probs.shape) > 1:\n            column_indexes = np.argmax(class_probs, axis=1)\n        else:\n            column_indexes = np.repeat(0, class_probs.shape[0])\n            column_indexes[class_probs > 0.5] = 1",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 48,
                    "column": 8
                  },
                  "end": {
                    "row": 48,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "comparison_operator",
                  "start": {
                    "row": 48,
                    "column": 11
                  },
                  "end": {
                    "row": 48,
                    "column": 37
                  },
                  "text": "len(class_probs.shape) > 1",
                  "children": [
                    {
                      "type": "call",
                      "start": {
                        "row": 48,
                        "column": 11
                      },
                      "end": {
                        "row": 48,
                        "column": 33
                      },
                      "text": "len(class_probs.shape)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 48,
                            "column": 11
                          },
                          "end": {
                            "row": 48,
                            "column": 14
                          },
                          "text": "len"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 48,
                            "column": 14
                          },
                          "end": {
                            "row": 48,
                            "column": 33
                          },
                          "text": "(class_probs.shape)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 48,
                                "column": 14
                              },
                              "end": {
                                "row": 48,
                                "column": 15
                              },
                              "text": "("
                            },
                            {
                              "type": "attribute",
                              "start": {
                                "row": 48,
                                "column": 15
                              },
                              "end": {
                                "row": 48,
                                "column": 32
                              },
                              "text": "class_probs.shape",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 48,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 26
                                  },
                                  "text": "class_probs"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 48,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 27
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 48,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 32
                                  },
                                  "text": "shape"
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 48,
                                "column": 32
                              },
                              "end": {
                                "row": 48,
                                "column": 33
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ">",
                      "start": {
                        "row": 48,
                        "column": 34
                      },
                      "end": {
                        "row": 48,
                        "column": 35
                      },
                      "text": ">"
                    },
                    {
                      "type": "integer",
                      "start": {
                        "row": 48,
                        "column": 36
                      },
                      "end": {
                        "row": 48,
                        "column": 37
                      },
                      "text": "1"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 48,
                    "column": 37
                  },
                  "end": {
                    "row": 48,
                    "column": 38
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 49,
                    "column": 12
                  },
                  "end": {
                    "row": 49,
                    "column": 59
                  },
                  "text": "column_indexes = np.argmax(class_probs, axis=1)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 49,
                        "column": 12
                      },
                      "end": {
                        "row": 49,
                        "column": 59
                      },
                      "text": "column_indexes = np.argmax(class_probs, axis=1)",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 49,
                            "column": 12
                          },
                          "end": {
                            "row": 49,
                            "column": 59
                          },
                          "text": "column_indexes = np.argmax(class_probs, axis=1)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 49,
                                "column": 12
                              },
                              "end": {
                                "row": 49,
                                "column": 26
                              },
                              "text": "column_indexes"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 49,
                                "column": 27
                              },
                              "end": {
                                "row": 49,
                                "column": 28
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 49,
                                "column": 29
                              },
                              "end": {
                                "row": 49,
                                "column": 59
                              },
                              "text": "np.argmax(class_probs, axis=1)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 49,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 49,
                                    "column": 38
                                  },
                                  "text": "np.argmax",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 49,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 49,
                                        "column": 31
                                      },
                                      "text": "np"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 49,
                                        "column": 31
                                      },
                                      "end": {
                                        "row": 49,
                                        "column": 32
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 49,
                                        "column": 32
                                      },
                                      "end": {
                                        "row": 49,
                                        "column": 38
                                      },
                                      "text": "argmax"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 49,
                                    "column": 38
                                  },
                                  "end": {
                                    "row": 49,
                                    "column": 59
                                  },
                                  "text": "(class_probs, axis=1)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 49,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 49,
                                        "column": 39
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 49,
                                        "column": 39
                                      },
                                      "end": {
                                        "row": 49,
                                        "column": 50
                                      },
                                      "text": "class_probs"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 49,
                                        "column": 50
                                      },
                                      "end": {
                                        "row": 49,
                                        "column": 51
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "keyword_argument",
                                      "start": {
                                        "row": 49,
                                        "column": 52
                                      },
                                      "end": {
                                        "row": 49,
                                        "column": 58
                                      },
                                      "text": "axis=1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 49,
                                            "column": 52
                                          },
                                          "end": {
                                            "row": 49,
                                            "column": 56
                                          },
                                          "text": "axis"
                                        },
                                        {
                                          "type": "=",
                                          "start": {
                                            "row": 49,
                                            "column": 56
                                          },
                                          "end": {
                                            "row": 49,
                                            "column": 57
                                          },
                                          "text": "="
                                        },
                                        {
                                          "type": "integer",
                                          "start": {
                                            "row": 49,
                                            "column": 57
                                          },
                                          "end": {
                                            "row": 49,
                                            "column": 58
                                          },
                                          "text": "1"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 49,
                                        "column": 58
                                      },
                                      "end": {
                                        "row": 49,
                                        "column": 59
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start": {
                    "row": 50,
                    "column": 8
                  },
                  "end": {
                    "row": 52,
                    "column": 49
                  },
                  "text": "else:\n            column_indexes = np.repeat(0, class_probs.shape[0])\n            column_indexes[class_probs > 0.5] = 1",
                  "children": [
                    {
                      "type": "else",
                      "start": {
                        "row": 50,
                        "column": 8
                      },
                      "end": {
                        "row": 50,
                        "column": 12
                      },
                      "text": "else"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 50,
                        "column": 12
                      },
                      "end": {
                        "row": 50,
                        "column": 13
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 51,
                        "column": 12
                      },
                      "end": {
                        "row": 52,
                        "column": 49
                      },
                      "text": "column_indexes = np.repeat(0, class_probs.shape[0])\n            column_indexes[class_probs > 0.5] = 1",
                      "children": [
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 51,
                            "column": 12
                          },
                          "end": {
                            "row": 51,
                            "column": 63
                          },
                          "text": "column_indexes = np.repeat(0, class_probs.shape[0])",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 51,
                                "column": 12
                              },
                              "end": {
                                "row": 51,
                                "column": 63
                              },
                              "text": "column_indexes = np.repeat(0, class_probs.shape[0])",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 51,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 26
                                  },
                                  "text": "column_indexes"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 51,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 28
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 51,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 63
                                  },
                                  "text": "np.repeat(0, class_probs.shape[0])",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 51,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 51,
                                        "column": 38
                                      },
                                      "text": "np.repeat",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 51,
                                            "column": 29
                                          },
                                          "end": {
                                            "row": 51,
                                            "column": 31
                                          },
                                          "text": "np"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 51,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 51,
                                            "column": 32
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 51,
                                            "column": 32
                                          },
                                          "end": {
                                            "row": 51,
                                            "column": 38
                                          },
                                          "text": "repeat"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 51,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 51,
                                        "column": 63
                                      },
                                      "text": "(0, class_probs.shape[0])",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 51,
                                            "column": 38
                                          },
                                          "end": {
                                            "row": 51,
                                            "column": 39
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "integer",
                                          "start": {
                                            "row": 51,
                                            "column": 39
                                          },
                                          "end": {
                                            "row": 51,
                                            "column": 40
                                          },
                                          "text": "0"
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 51,
                                            "column": 40
                                          },
                                          "end": {
                                            "row": 51,
                                            "column": 41
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": "subscript",
                                          "start": {
                                            "row": 51,
                                            "column": 42
                                          },
                                          "end": {
                                            "row": 51,
                                            "column": 62
                                          },
                                          "text": "class_probs.shape[0]",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "start": {
                                                "row": 51,
                                                "column": 42
                                              },
                                              "end": {
                                                "row": 51,
                                                "column": 59
                                              },
                                              "text": "class_probs.shape",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 51,
                                                    "column": 42
                                                  },
                                                  "end": {
                                                    "row": 51,
                                                    "column": 53
                                                  },
                                                  "text": "class_probs"
                                                },
                                                {
                                                  "type": ".",
                                                  "start": {
                                                    "row": 51,
                                                    "column": 53
                                                  },
                                                  "end": {
                                                    "row": 51,
                                                    "column": 54
                                                  },
                                                  "text": "."
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 51,
                                                    "column": 54
                                                  },
                                                  "end": {
                                                    "row": 51,
                                                    "column": 59
                                                  },
                                                  "text": "shape"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "[",
                                              "start": {
                                                "row": 51,
                                                "column": 59
                                              },
                                              "end": {
                                                "row": 51,
                                                "column": 60
                                              },
                                              "text": "["
                                            },
                                            {
                                              "type": "integer",
                                              "start": {
                                                "row": 51,
                                                "column": 60
                                              },
                                              "end": {
                                                "row": 51,
                                                "column": 61
                                              },
                                              "text": "0"
                                            },
                                            {
                                              "type": "]",
                                              "start": {
                                                "row": 51,
                                                "column": 61
                                              },
                                              "end": {
                                                "row": 51,
                                                "column": 62
                                              },
                                              "text": "]"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 51,
                                            "column": 62
                                          },
                                          "end": {
                                            "row": 51,
                                            "column": 63
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 52,
                            "column": 12
                          },
                          "end": {
                            "row": 52,
                            "column": 49
                          },
                          "text": "column_indexes[class_probs > 0.5] = 1",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 52,
                                "column": 12
                              },
                              "end": {
                                "row": 52,
                                "column": 49
                              },
                              "text": "column_indexes[class_probs > 0.5] = 1",
                              "children": [
                                {
                                  "type": "subscript",
                                  "start": {
                                    "row": 52,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 52,
                                    "column": 45
                                  },
                                  "text": "column_indexes[class_probs > 0.5]",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 52,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 52,
                                        "column": 26
                                      },
                                      "text": "column_indexes"
                                    },
                                    {
                                      "type": "[",
                                      "start": {
                                        "row": 52,
                                        "column": 26
                                      },
                                      "end": {
                                        "row": 52,
                                        "column": 27
                                      },
                                      "text": "["
                                    },
                                    {
                                      "type": "comparison_operator",
                                      "start": {
                                        "row": 52,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 52,
                                        "column": 44
                                      },
                                      "text": "class_probs > 0.5",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 52,
                                            "column": 27
                                          },
                                          "end": {
                                            "row": 52,
                                            "column": 38
                                          },
                                          "text": "class_probs"
                                        },
                                        {
                                          "type": ">",
                                          "start": {
                                            "row": 52,
                                            "column": 39
                                          },
                                          "end": {
                                            "row": 52,
                                            "column": 40
                                          },
                                          "text": ">"
                                        },
                                        {
                                          "type": "float",
                                          "start": {
                                            "row": 52,
                                            "column": 41
                                          },
                                          "end": {
                                            "row": 52,
                                            "column": 44
                                          },
                                          "text": "0.5"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "]",
                                      "start": {
                                        "row": 52,
                                        "column": 44
                                      },
                                      "end": {
                                        "row": 52,
                                        "column": 45
                                      },
                                      "text": "]"
                                    }
                                  ]
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 52,
                                    "column": 46
                                  },
                                  "end": {
                                    "row": 52,
                                    "column": 47
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "integer",
                                  "start": {
                                    "row": 52,
                                    "column": 48
                                  },
                                  "end": {
                                    "row": 52,
                                    "column": 49
                                  },
                                  "text": "1"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 53,
                "column": 8
              },
              "end": {
                "row": 53,
                "column": 57
              },
              "text": "return self._le.inverse_transform(column_indexes)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 53,
                    "column": 8
                  },
                  "end": {
                    "row": 53,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 53,
                    "column": 15
                  },
                  "end": {
                    "row": 53,
                    "column": 57
                  },
                  "text": "self._le.inverse_transform(column_indexes)",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 53,
                        "column": 15
                      },
                      "end": {
                        "row": 53,
                        "column": 41
                      },
                      "text": "self._le.inverse_transform",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 53,
                            "column": 15
                          },
                          "end": {
                            "row": 53,
                            "column": 23
                          },
                          "text": "self._le",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 53,
                                "column": 15
                              },
                              "end": {
                                "row": 53,
                                "column": 19
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 53,
                                "column": 19
                              },
                              "end": {
                                "row": 53,
                                "column": 20
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 53,
                                "column": 20
                              },
                              "end": {
                                "row": 53,
                                "column": 23
                              },
                              "text": "_le"
                            }
                          ]
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 53,
                            "column": 23
                          },
                          "end": {
                            "row": 53,
                            "column": 24
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 53,
                            "column": 24
                          },
                          "end": {
                            "row": 53,
                            "column": 41
                          },
                          "text": "inverse_transform"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 53,
                        "column": 41
                      },
                      "end": {
                        "row": 53,
                        "column": 57
                      },
                      "text": "(column_indexes)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 53,
                            "column": 41
                          },
                          "end": {
                            "row": 53,
                            "column": 42
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 53,
                            "column": 42
                          },
                          "end": {
                            "row": 53,
                            "column": 56
                          },
                          "text": "column_indexes"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 53,
                            "column": 56
                          },
                          "end": {
                            "row": 53,
                            "column": 57
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}