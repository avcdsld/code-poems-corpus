{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 46,
    "column": 14
  },
  "text": "def netmiko_commands(*commands, **kwargs):\n    '''\n    .. versionadded:: 2019.2.0\n\n    Invoke one or more commands to be executed on the remote device, via Netmiko.\n    Returns a list of strings, with the output from each command.\n\n    commands\n        A list of commands to be executed.\n\n    expect_string\n        Regular expression pattern to use for determining end of output.\n        If left blank will default to being based on router prompt.\n\n    delay_factor: ``1``\n        Multiplying factor used to adjust delays (default: ``1``).\n\n    max_loops: ``500``\n        Controls wait time in conjunction with delay_factor. Will default to be\n        based upon self.timeout.\n\n    auto_find_prompt: ``True``\n        Whether it should try to auto-detect the prompt (default: ``True``).\n\n    strip_prompt: ``True``\n        Remove the trailing router prompt from the output (default: ``True``).\n\n    strip_command: ``True``\n        Remove the echo of the command from the output (default: ``True``).\n\n    normalize: ``True``\n        Ensure the proper enter is sent at end of command (default: ``True``).\n\n    use_textfsm: ``False``\n        Process command output through TextFSM template (default: ``False``).\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' napalm.netmiko_commands 'show version' 'show interfaces'\n    '''\n    conn = netmiko_conn(**kwargs)\n    ret = []\n    for cmd in commands:\n        ret.append(conn.send_command(cmd))\n    return ret",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 46,
        "column": 14
      },
      "text": "def netmiko_commands(*commands, **kwargs):\n    '''\n    .. versionadded:: 2019.2.0\n\n    Invoke one or more commands to be executed on the remote device, via Netmiko.\n    Returns a list of strings, with the output from each command.\n\n    commands\n        A list of commands to be executed.\n\n    expect_string\n        Regular expression pattern to use for determining end of output.\n        If left blank will default to being based on router prompt.\n\n    delay_factor: ``1``\n        Multiplying factor used to adjust delays (default: ``1``).\n\n    max_loops: ``500``\n        Controls wait time in conjunction with delay_factor. Will default to be\n        based upon self.timeout.\n\n    auto_find_prompt: ``True``\n        Whether it should try to auto-detect the prompt (default: ``True``).\n\n    strip_prompt: ``True``\n        Remove the trailing router prompt from the output (default: ``True``).\n\n    strip_command: ``True``\n        Remove the echo of the command from the output (default: ``True``).\n\n    normalize: ``True``\n        Ensure the proper enter is sent at end of command (default: ``True``).\n\n    use_textfsm: ``False``\n        Process command output through TextFSM template (default: ``False``).\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' napalm.netmiko_commands 'show version' 'show interfaces'\n    '''\n    conn = netmiko_conn(**kwargs)\n    ret = []\n    for cmd in commands:\n        ret.append(conn.send_command(cmd))\n    return ret",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 20
          },
          "text": "netmiko_commands"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 20
          },
          "end": {
            "row": 0,
            "column": 41
          },
          "text": "(*commands, **kwargs)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": "("
            },
            {
              "type": "list_splat_pattern",
              "start": {
                "row": 0,
                "column": 21
              },
              "end": {
                "row": 0,
                "column": 30
              },
              "text": "*commands",
              "children": [
                {
                  "type": "*",
                  "start": {
                    "row": 0,
                    "column": 21
                  },
                  "end": {
                    "row": 0,
                    "column": 22
                  },
                  "text": "*"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 22
                  },
                  "end": {
                    "row": 0,
                    "column": 30
                  },
                  "text": "commands"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 30
              },
              "end": {
                "row": 0,
                "column": 31
              },
              "text": ","
            },
            {
              "type": "dictionary_splat_pattern",
              "start": {
                "row": 0,
                "column": 32
              },
              "end": {
                "row": 0,
                "column": 40
              },
              "text": "**kwargs",
              "children": [
                {
                  "type": "**",
                  "start": {
                    "row": 0,
                    "column": 32
                  },
                  "end": {
                    "row": 0,
                    "column": 34
                  },
                  "text": "**"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 34
                  },
                  "end": {
                    "row": 0,
                    "column": 40
                  },
                  "text": "kwargs"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 40
              },
              "end": {
                "row": 0,
                "column": 41
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 41
          },
          "end": {
            "row": 0,
            "column": 42
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 4
          },
          "end": {
            "row": 46,
            "column": 14
          },
          "text": "'''\n    .. versionadded:: 2019.2.0\n\n    Invoke one or more commands to be executed on the remote device, via Netmiko.\n    Returns a list of strings, with the output from each command.\n\n    commands\n        A list of commands to be executed.\n\n    expect_string\n        Regular expression pattern to use for determining end of output.\n        If left blank will default to being based on router prompt.\n\n    delay_factor: ``1``\n        Multiplying factor used to adjust delays (default: ``1``).\n\n    max_loops: ``500``\n        Controls wait time in conjunction with delay_factor. Will default to be\n        based upon self.timeout.\n\n    auto_find_prompt: ``True``\n        Whether it should try to auto-detect the prompt (default: ``True``).\n\n    strip_prompt: ``True``\n        Remove the trailing router prompt from the output (default: ``True``).\n\n    strip_command: ``True``\n        Remove the echo of the command from the output (default: ``True``).\n\n    normalize: ``True``\n        Ensure the proper enter is sent at end of command (default: ``True``).\n\n    use_textfsm: ``False``\n        Process command output through TextFSM template (default: ``False``).\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' napalm.netmiko_commands 'show version' 'show interfaces'\n    '''\n    conn = netmiko_conn(**kwargs)\n    ret = []\n    for cmd in commands:\n        ret.append(conn.send_command(cmd))\n    return ret",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 4
              },
              "end": {
                "row": 41,
                "column": 7
              },
              "text": "'''\n    .. versionadded:: 2019.2.0\n\n    Invoke one or more commands to be executed on the remote device, via Netmiko.\n    Returns a list of strings, with the output from each command.\n\n    commands\n        A list of commands to be executed.\n\n    expect_string\n        Regular expression pattern to use for determining end of output.\n        If left blank will default to being based on router prompt.\n\n    delay_factor: ``1``\n        Multiplying factor used to adjust delays (default: ``1``).\n\n    max_loops: ``500``\n        Controls wait time in conjunction with delay_factor. Will default to be\n        based upon self.timeout.\n\n    auto_find_prompt: ``True``\n        Whether it should try to auto-detect the prompt (default: ``True``).\n\n    strip_prompt: ``True``\n        Remove the trailing router prompt from the output (default: ``True``).\n\n    strip_command: ``True``\n        Remove the echo of the command from the output (default: ``True``).\n\n    normalize: ``True``\n        Ensure the proper enter is sent at end of command (default: ``True``).\n\n    use_textfsm: ``False``\n        Process command output through TextFSM template (default: ``False``).\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' napalm.netmiko_commands 'show version' 'show interfaces'\n    '''",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 4
                  },
                  "end": {
                    "row": 41,
                    "column": 7
                  },
                  "text": "'''\n    .. versionadded:: 2019.2.0\n\n    Invoke one or more commands to be executed on the remote device, via Netmiko.\n    Returns a list of strings, with the output from each command.\n\n    commands\n        A list of commands to be executed.\n\n    expect_string\n        Regular expression pattern to use for determining end of output.\n        If left blank will default to being based on router prompt.\n\n    delay_factor: ``1``\n        Multiplying factor used to adjust delays (default: ``1``).\n\n    max_loops: ``500``\n        Controls wait time in conjunction with delay_factor. Will default to be\n        based upon self.timeout.\n\n    auto_find_prompt: ``True``\n        Whether it should try to auto-detect the prompt (default: ``True``).\n\n    strip_prompt: ``True``\n        Remove the trailing router prompt from the output (default: ``True``).\n\n    strip_command: ``True``\n        Remove the echo of the command from the output (default: ``True``).\n\n    normalize: ``True``\n        Ensure the proper enter is sent at end of command (default: ``True``).\n\n    use_textfsm: ``False``\n        Process command output through TextFSM template (default: ``False``).\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' napalm.netmiko_commands 'show version' 'show interfaces'\n    '''",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 4
                      },
                      "end": {
                        "row": 1,
                        "column": 7
                      },
                      "text": "'''"
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 7
                      },
                      "end": {
                        "row": 41,
                        "column": 4
                      },
                      "text": "\n    .. versionadded:: 2019.2.0\n\n    Invoke one or more commands to be executed on the remote device, via Netmiko.\n    Returns a list of strings, with the output from each command.\n\n    commands\n        A list of commands to be executed.\n\n    expect_string\n        Regular expression pattern to use for determining end of output.\n        If left blank will default to being based on router prompt.\n\n    delay_factor: ``1``\n        Multiplying factor used to adjust delays (default: ``1``).\n\n    max_loops: ``500``\n        Controls wait time in conjunction with delay_factor. Will default to be\n        based upon self.timeout.\n\n    auto_find_prompt: ``True``\n        Whether it should try to auto-detect the prompt (default: ``True``).\n\n    strip_prompt: ``True``\n        Remove the trailing router prompt from the output (default: ``True``).\n\n    strip_command: ``True``\n        Remove the echo of the command from the output (default: ``True``).\n\n    normalize: ``True``\n        Ensure the proper enter is sent at end of command (default: ``True``).\n\n    use_textfsm: ``False``\n        Process command output through TextFSM template (default: ``False``).\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' napalm.netmiko_commands 'show version' 'show interfaces'\n    "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 41,
                        "column": 4
                      },
                      "end": {
                        "row": 41,
                        "column": 7
                      },
                      "text": "'''"
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 42,
                "column": 4
              },
              "end": {
                "row": 42,
                "column": 33
              },
              "text": "conn = netmiko_conn(**kwargs)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 42,
                    "column": 4
                  },
                  "end": {
                    "row": 42,
                    "column": 33
                  },
                  "text": "conn = netmiko_conn(**kwargs)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 42,
                        "column": 4
                      },
                      "end": {
                        "row": 42,
                        "column": 8
                      },
                      "text": "conn"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 42,
                        "column": 9
                      },
                      "end": {
                        "row": 42,
                        "column": 10
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 42,
                        "column": 11
                      },
                      "end": {
                        "row": 42,
                        "column": 33
                      },
                      "text": "netmiko_conn(**kwargs)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 42,
                            "column": 11
                          },
                          "end": {
                            "row": 42,
                            "column": 23
                          },
                          "text": "netmiko_conn"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 42,
                            "column": 23
                          },
                          "end": {
                            "row": 42,
                            "column": 33
                          },
                          "text": "(**kwargs)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 42,
                                "column": 23
                              },
                              "end": {
                                "row": 42,
                                "column": 24
                              },
                              "text": "("
                            },
                            {
                              "type": "dictionary_splat",
                              "start": {
                                "row": 42,
                                "column": 24
                              },
                              "end": {
                                "row": 42,
                                "column": 32
                              },
                              "text": "**kwargs",
                              "children": [
                                {
                                  "type": "**",
                                  "start": {
                                    "row": 42,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 42,
                                    "column": 26
                                  },
                                  "text": "**"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 42,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 42,
                                    "column": 32
                                  },
                                  "text": "kwargs"
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 42,
                                "column": 32
                              },
                              "end": {
                                "row": 42,
                                "column": 33
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 43,
                "column": 4
              },
              "end": {
                "row": 43,
                "column": 12
              },
              "text": "ret = []",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 43,
                    "column": 4
                  },
                  "end": {
                    "row": 43,
                    "column": 12
                  },
                  "text": "ret = []",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 43,
                        "column": 4
                      },
                      "end": {
                        "row": 43,
                        "column": 7
                      },
                      "text": "ret"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 43,
                        "column": 8
                      },
                      "end": {
                        "row": 43,
                        "column": 9
                      },
                      "text": "="
                    },
                    {
                      "type": "list",
                      "start": {
                        "row": 43,
                        "column": 10
                      },
                      "end": {
                        "row": 43,
                        "column": 12
                      },
                      "text": "[]",
                      "children": [
                        {
                          "type": "[",
                          "start": {
                            "row": 43,
                            "column": 10
                          },
                          "end": {
                            "row": 43,
                            "column": 11
                          },
                          "text": "["
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 43,
                            "column": 11
                          },
                          "end": {
                            "row": 43,
                            "column": 12
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "for_statement",
              "start": {
                "row": 44,
                "column": 4
              },
              "end": {
                "row": 45,
                "column": 42
              },
              "text": "for cmd in commands:\n        ret.append(conn.send_command(cmd))",
              "children": [
                {
                  "type": "for",
                  "start": {
                    "row": 44,
                    "column": 4
                  },
                  "end": {
                    "row": 44,
                    "column": 7
                  },
                  "text": "for"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 44,
                    "column": 8
                  },
                  "end": {
                    "row": 44,
                    "column": 11
                  },
                  "text": "cmd"
                },
                {
                  "type": "in",
                  "start": {
                    "row": 44,
                    "column": 12
                  },
                  "end": {
                    "row": 44,
                    "column": 14
                  },
                  "text": "in"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 44,
                    "column": 15
                  },
                  "end": {
                    "row": 44,
                    "column": 23
                  },
                  "text": "commands"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 44,
                    "column": 23
                  },
                  "end": {
                    "row": 44,
                    "column": 24
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 45,
                    "column": 8
                  },
                  "end": {
                    "row": 45,
                    "column": 42
                  },
                  "text": "ret.append(conn.send_command(cmd))",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 45,
                        "column": 8
                      },
                      "end": {
                        "row": 45,
                        "column": 42
                      },
                      "text": "ret.append(conn.send_command(cmd))",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 45,
                            "column": 8
                          },
                          "end": {
                            "row": 45,
                            "column": 42
                          },
                          "text": "ret.append(conn.send_command(cmd))",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 45,
                                "column": 8
                              },
                              "end": {
                                "row": 45,
                                "column": 18
                              },
                              "text": "ret.append",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 45,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 45,
                                    "column": 11
                                  },
                                  "text": "ret"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 45,
                                    "column": 11
                                  },
                                  "end": {
                                    "row": 45,
                                    "column": 12
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 45,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 45,
                                    "column": 18
                                  },
                                  "text": "append"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 45,
                                "column": 18
                              },
                              "end": {
                                "row": 45,
                                "column": 42
                              },
                              "text": "(conn.send_command(cmd))",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 45,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 45,
                                    "column": 19
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 45,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 45,
                                    "column": 41
                                  },
                                  "text": "conn.send_command(cmd)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 45,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 45,
                                        "column": 36
                                      },
                                      "text": "conn.send_command",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 45,
                                            "column": 19
                                          },
                                          "end": {
                                            "row": 45,
                                            "column": 23
                                          },
                                          "text": "conn"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 45,
                                            "column": 23
                                          },
                                          "end": {
                                            "row": 45,
                                            "column": 24
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 45,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 45,
                                            "column": 36
                                          },
                                          "text": "send_command"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 45,
                                        "column": 36
                                      },
                                      "end": {
                                        "row": 45,
                                        "column": 41
                                      },
                                      "text": "(cmd)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 45,
                                            "column": 36
                                          },
                                          "end": {
                                            "row": 45,
                                            "column": 37
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 45,
                                            "column": 37
                                          },
                                          "end": {
                                            "row": 45,
                                            "column": 40
                                          },
                                          "text": "cmd"
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 45,
                                            "column": 40
                                          },
                                          "end": {
                                            "row": 45,
                                            "column": 41
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 45,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 45,
                                    "column": 42
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 46,
                "column": 4
              },
              "end": {
                "row": 46,
                "column": 14
              },
              "text": "return ret",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 46,
                    "column": 4
                  },
                  "end": {
                    "row": 46,
                    "column": 10
                  },
                  "text": "return"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 46,
                    "column": 11
                  },
                  "end": {
                    "row": 46,
                    "column": 14
                  },
                  "text": "ret"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}