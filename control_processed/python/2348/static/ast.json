{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 52,
    "column": 42
  },
  "text": "def str_endswith(arr, pat, na=np.nan):\n    \"\"\"\n    Test if the end of each string element matches a pattern.\n\n    Equivalent to :meth:`str.endswith`.\n\n    Parameters\n    ----------\n    pat : str\n        Character sequence. Regular expressions are not accepted.\n    na : object, default NaN\n        Object shown if element tested is not a string.\n\n    Returns\n    -------\n    Series or Index of bool\n        A Series of booleans indicating whether the given pattern matches\n        the end of each string element.\n\n    See Also\n    --------\n    str.endswith : Python standard library string method.\n    Series.str.startswith : Same as endswith, but tests the start of string.\n    Series.str.contains : Tests if string element contains a pattern.\n\n    Examples\n    --------\n    >>> s = pd.Series(['bat', 'bear', 'caT', np.nan])\n    >>> s\n    0     bat\n    1    bear\n    2     caT\n    3     NaN\n    dtype: object\n\n    >>> s.str.endswith('t')\n    0     True\n    1    False\n    2    False\n    3      NaN\n    dtype: object\n\n    Specifying `na` to be `False` instead of `NaN`.\n\n    >>> s.str.endswith('t', na=False)\n    0     True\n    1    False\n    2    False\n    3    False\n    dtype: bool\n    \"\"\"\n    f = lambda x: x.endswith(pat)\n    return _na_map(f, arr, na, dtype=bool)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 52,
        "column": 42
      },
      "text": "def str_endswith(arr, pat, na=np.nan):\n    \"\"\"\n    Test if the end of each string element matches a pattern.\n\n    Equivalent to :meth:`str.endswith`.\n\n    Parameters\n    ----------\n    pat : str\n        Character sequence. Regular expressions are not accepted.\n    na : object, default NaN\n        Object shown if element tested is not a string.\n\n    Returns\n    -------\n    Series or Index of bool\n        A Series of booleans indicating whether the given pattern matches\n        the end of each string element.\n\n    See Also\n    --------\n    str.endswith : Python standard library string method.\n    Series.str.startswith : Same as endswith, but tests the start of string.\n    Series.str.contains : Tests if string element contains a pattern.\n\n    Examples\n    --------\n    >>> s = pd.Series(['bat', 'bear', 'caT', np.nan])\n    >>> s\n    0     bat\n    1    bear\n    2     caT\n    3     NaN\n    dtype: object\n\n    >>> s.str.endswith('t')\n    0     True\n    1    False\n    2    False\n    3      NaN\n    dtype: object\n\n    Specifying `na` to be `False` instead of `NaN`.\n\n    >>> s.str.endswith('t', na=False)\n    0     True\n    1    False\n    2    False\n    3    False\n    dtype: bool\n    \"\"\"\n    f = lambda x: x.endswith(pat)\n    return _na_map(f, arr, na, dtype=bool)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 16
          },
          "text": "str_endswith"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 16
          },
          "end": {
            "row": 0,
            "column": 37
          },
          "text": "(arr, pat, na=np.nan)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 17
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 17
              },
              "end": {
                "row": 0,
                "column": 20
              },
              "text": "arr"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 22
              },
              "end": {
                "row": 0,
                "column": 25
              },
              "text": "pat"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 25
              },
              "end": {
                "row": 0,
                "column": 26
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 27
              },
              "end": {
                "row": 0,
                "column": 36
              },
              "text": "na=np.nan",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 27
                  },
                  "end": {
                    "row": 0,
                    "column": 29
                  },
                  "text": "na"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 29
                  },
                  "end": {
                    "row": 0,
                    "column": 30
                  },
                  "text": "="
                },
                {
                  "type": "attribute",
                  "start": {
                    "row": 0,
                    "column": 30
                  },
                  "end": {
                    "row": 0,
                    "column": 36
                  },
                  "text": "np.nan",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 0,
                        "column": 30
                      },
                      "end": {
                        "row": 0,
                        "column": 32
                      },
                      "text": "np"
                    },
                    {
                      "type": ".",
                      "start": {
                        "row": 0,
                        "column": 32
                      },
                      "end": {
                        "row": 0,
                        "column": 33
                      },
                      "text": "."
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 0,
                        "column": 33
                      },
                      "end": {
                        "row": 0,
                        "column": 36
                      },
                      "text": "nan"
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 36
              },
              "end": {
                "row": 0,
                "column": 37
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 37
          },
          "end": {
            "row": 0,
            "column": 38
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 4
          },
          "end": {
            "row": 52,
            "column": 42
          },
          "text": "\"\"\"\n    Test if the end of each string element matches a pattern.\n\n    Equivalent to :meth:`str.endswith`.\n\n    Parameters\n    ----------\n    pat : str\n        Character sequence. Regular expressions are not accepted.\n    na : object, default NaN\n        Object shown if element tested is not a string.\n\n    Returns\n    -------\n    Series or Index of bool\n        A Series of booleans indicating whether the given pattern matches\n        the end of each string element.\n\n    See Also\n    --------\n    str.endswith : Python standard library string method.\n    Series.str.startswith : Same as endswith, but tests the start of string.\n    Series.str.contains : Tests if string element contains a pattern.\n\n    Examples\n    --------\n    >>> s = pd.Series(['bat', 'bear', 'caT', np.nan])\n    >>> s\n    0     bat\n    1    bear\n    2     caT\n    3     NaN\n    dtype: object\n\n    >>> s.str.endswith('t')\n    0     True\n    1    False\n    2    False\n    3      NaN\n    dtype: object\n\n    Specifying `na` to be `False` instead of `NaN`.\n\n    >>> s.str.endswith('t', na=False)\n    0     True\n    1    False\n    2    False\n    3    False\n    dtype: bool\n    \"\"\"\n    f = lambda x: x.endswith(pat)\n    return _na_map(f, arr, na, dtype=bool)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 4
              },
              "end": {
                "row": 50,
                "column": 7
              },
              "text": "\"\"\"\n    Test if the end of each string element matches a pattern.\n\n    Equivalent to :meth:`str.endswith`.\n\n    Parameters\n    ----------\n    pat : str\n        Character sequence. Regular expressions are not accepted.\n    na : object, default NaN\n        Object shown if element tested is not a string.\n\n    Returns\n    -------\n    Series or Index of bool\n        A Series of booleans indicating whether the given pattern matches\n        the end of each string element.\n\n    See Also\n    --------\n    str.endswith : Python standard library string method.\n    Series.str.startswith : Same as endswith, but tests the start of string.\n    Series.str.contains : Tests if string element contains a pattern.\n\n    Examples\n    --------\n    >>> s = pd.Series(['bat', 'bear', 'caT', np.nan])\n    >>> s\n    0     bat\n    1    bear\n    2     caT\n    3     NaN\n    dtype: object\n\n    >>> s.str.endswith('t')\n    0     True\n    1    False\n    2    False\n    3      NaN\n    dtype: object\n\n    Specifying `na` to be `False` instead of `NaN`.\n\n    >>> s.str.endswith('t', na=False)\n    0     True\n    1    False\n    2    False\n    3    False\n    dtype: bool\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 4
                  },
                  "end": {
                    "row": 50,
                    "column": 7
                  },
                  "text": "\"\"\"\n    Test if the end of each string element matches a pattern.\n\n    Equivalent to :meth:`str.endswith`.\n\n    Parameters\n    ----------\n    pat : str\n        Character sequence. Regular expressions are not accepted.\n    na : object, default NaN\n        Object shown if element tested is not a string.\n\n    Returns\n    -------\n    Series or Index of bool\n        A Series of booleans indicating whether the given pattern matches\n        the end of each string element.\n\n    See Also\n    --------\n    str.endswith : Python standard library string method.\n    Series.str.startswith : Same as endswith, but tests the start of string.\n    Series.str.contains : Tests if string element contains a pattern.\n\n    Examples\n    --------\n    >>> s = pd.Series(['bat', 'bear', 'caT', np.nan])\n    >>> s\n    0     bat\n    1    bear\n    2     caT\n    3     NaN\n    dtype: object\n\n    >>> s.str.endswith('t')\n    0     True\n    1    False\n    2    False\n    3      NaN\n    dtype: object\n\n    Specifying `na` to be `False` instead of `NaN`.\n\n    >>> s.str.endswith('t', na=False)\n    0     True\n    1    False\n    2    False\n    3    False\n    dtype: bool\n    \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 4
                      },
                      "end": {
                        "row": 1,
                        "column": 7
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 7
                      },
                      "end": {
                        "row": 50,
                        "column": 4
                      },
                      "text": "\n    Test if the end of each string element matches a pattern.\n\n    Equivalent to :meth:`str.endswith`.\n\n    Parameters\n    ----------\n    pat : str\n        Character sequence. Regular expressions are not accepted.\n    na : object, default NaN\n        Object shown if element tested is not a string.\n\n    Returns\n    -------\n    Series or Index of bool\n        A Series of booleans indicating whether the given pattern matches\n        the end of each string element.\n\n    See Also\n    --------\n    str.endswith : Python standard library string method.\n    Series.str.startswith : Same as endswith, but tests the start of string.\n    Series.str.contains : Tests if string element contains a pattern.\n\n    Examples\n    --------\n    >>> s = pd.Series(['bat', 'bear', 'caT', np.nan])\n    >>> s\n    0     bat\n    1    bear\n    2     caT\n    3     NaN\n    dtype: object\n\n    >>> s.str.endswith('t')\n    0     True\n    1    False\n    2    False\n    3      NaN\n    dtype: object\n\n    Specifying `na` to be `False` instead of `NaN`.\n\n    >>> s.str.endswith('t', na=False)\n    0     True\n    1    False\n    2    False\n    3    False\n    dtype: bool\n    "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 50,
                        "column": 4
                      },
                      "end": {
                        "row": 50,
                        "column": 7
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 51,
                "column": 4
              },
              "end": {
                "row": 51,
                "column": 33
              },
              "text": "f = lambda x: x.endswith(pat)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 51,
                    "column": 4
                  },
                  "end": {
                    "row": 51,
                    "column": 33
                  },
                  "text": "f = lambda x: x.endswith(pat)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 51,
                        "column": 4
                      },
                      "end": {
                        "row": 51,
                        "column": 5
                      },
                      "text": "f"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 51,
                        "column": 6
                      },
                      "end": {
                        "row": 51,
                        "column": 7
                      },
                      "text": "="
                    },
                    {
                      "type": "lambda",
                      "start": {
                        "row": 51,
                        "column": 8
                      },
                      "end": {
                        "row": 51,
                        "column": 33
                      },
                      "text": "lambda x: x.endswith(pat)",
                      "children": [
                        {
                          "type": "lambda",
                          "start": {
                            "row": 51,
                            "column": 8
                          },
                          "end": {
                            "row": 51,
                            "column": 14
                          },
                          "text": "lambda"
                        },
                        {
                          "type": "lambda_parameters",
                          "start": {
                            "row": 51,
                            "column": 15
                          },
                          "end": {
                            "row": 51,
                            "column": 16
                          },
                          "text": "x",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 51,
                                "column": 15
                              },
                              "end": {
                                "row": 51,
                                "column": 16
                              },
                              "text": "x"
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 51,
                            "column": 16
                          },
                          "end": {
                            "row": 51,
                            "column": 17
                          },
                          "text": ":"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 51,
                            "column": 18
                          },
                          "end": {
                            "row": 51,
                            "column": 33
                          },
                          "text": "x.endswith(pat)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 51,
                                "column": 18
                              },
                              "end": {
                                "row": 51,
                                "column": 28
                              },
                              "text": "x.endswith",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 51,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 19
                                  },
                                  "text": "x"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 51,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 20
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 51,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 28
                                  },
                                  "text": "endswith"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 51,
                                "column": 28
                              },
                              "end": {
                                "row": 51,
                                "column": 33
                              },
                              "text": "(pat)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 51,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 29
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 51,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 32
                                  },
                                  "text": "pat"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 51,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 33
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 52,
                "column": 4
              },
              "end": {
                "row": 52,
                "column": 42
              },
              "text": "return _na_map(f, arr, na, dtype=bool)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 52,
                    "column": 4
                  },
                  "end": {
                    "row": 52,
                    "column": 10
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 52,
                    "column": 11
                  },
                  "end": {
                    "row": 52,
                    "column": 42
                  },
                  "text": "_na_map(f, arr, na, dtype=bool)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 52,
                        "column": 11
                      },
                      "end": {
                        "row": 52,
                        "column": 18
                      },
                      "text": "_na_map"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 52,
                        "column": 18
                      },
                      "end": {
                        "row": 52,
                        "column": 42
                      },
                      "text": "(f, arr, na, dtype=bool)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 52,
                            "column": 18
                          },
                          "end": {
                            "row": 52,
                            "column": 19
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 52,
                            "column": 19
                          },
                          "end": {
                            "row": 52,
                            "column": 20
                          },
                          "text": "f"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 52,
                            "column": 20
                          },
                          "end": {
                            "row": 52,
                            "column": 21
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 52,
                            "column": 22
                          },
                          "end": {
                            "row": 52,
                            "column": 25
                          },
                          "text": "arr"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 52,
                            "column": 25
                          },
                          "end": {
                            "row": 52,
                            "column": 26
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 52,
                            "column": 27
                          },
                          "end": {
                            "row": 52,
                            "column": 29
                          },
                          "text": "na"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 52,
                            "column": 29
                          },
                          "end": {
                            "row": 52,
                            "column": 30
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 52,
                            "column": 31
                          },
                          "end": {
                            "row": 52,
                            "column": 41
                          },
                          "text": "dtype=bool",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 52,
                                "column": 31
                              },
                              "end": {
                                "row": 52,
                                "column": 36
                              },
                              "text": "dtype"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 52,
                                "column": 36
                              },
                              "end": {
                                "row": 52,
                                "column": 37
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 52,
                                "column": 37
                              },
                              "end": {
                                "row": 52,
                                "column": 41
                              },
                              "text": "bool"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 52,
                            "column": 41
                          },
                          "end": {
                            "row": 52,
                            "column": 42
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}