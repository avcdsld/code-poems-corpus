{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 92,
    "column": 39
  },
  "text": "def take(\n            self,\n            indices: Sequence[int],\n            allow_fill: bool = False,\n            fill_value: Any = None\n    ) -> ABCExtensionArray:\n        \"\"\"\n        Take elements from an array.\n\n        Parameters\n        ----------\n        indices : sequence of integers\n            Indices to be taken.\n        allow_fill : bool, default False\n            How to handle negative values in `indices`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right (the default). This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate\n              missing values. These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n        fill_value : any, optional\n            Fill value to use for NA-indices when `allow_fill` is True.\n            This may be ``None``, in which case the default NA value for\n            the type, ``self.dtype.na_value``, is used.\n\n            For many ExtensionArrays, there will be two representations of\n            `fill_value`: a user-facing \"boxed\" scalar, and a low-level\n            physical NA value. `fill_value` should be the user-facing version,\n            and the implementation should handle translating that to the\n            physical version for processing the take if necessary.\n\n        Returns\n        -------\n        ExtensionArray\n\n        Raises\n        ------\n        IndexError\n            When the indices are out of bounds for the array.\n        ValueError\n            When `indices` contains negative values other than ``-1``\n            and `allow_fill` is True.\n\n        Notes\n        -----\n        ExtensionArray.take is called by ``Series.__getitem__``, ``.loc``,\n        ``iloc``, when `indices` is a sequence of values. Additionally,\n        it's called by :meth:`Series.reindex`, or any other method\n        that causes realignment, with a `fill_value`.\n\n        See Also\n        --------\n        numpy.take\n        pandas.api.extensions.take\n\n        Examples\n        --------\n        Here's an example implementation, which relies on casting the\n        extension array to object dtype. This uses the helper method\n        :func:`pandas.api.extensions.take`.\n\n        .. code-block:: python\n\n           def take(self, indices, allow_fill=False, fill_value=None):\n               from pandas.core.algorithms import take\n\n               # If the ExtensionArray is backed by an ndarray, then\n               # just pass that here instead of coercing to object.\n               data = self.astype(object)\n\n               if allow_fill and fill_value is None:\n                   fill_value = self.dtype.na_value\n\n               # fill value should always be translated from the scalar\n               # type for the array, to the physical storage type for\n               # the data, before passing to take.\n\n               result = take(data, indices, fill_value=fill_value,\n                             allow_fill=allow_fill)\n               return self._from_sequence(result, dtype=self.dtype)\n        \"\"\"\n        # Implementer note: The `fill_value` parameter should be a user-facing\n        # value, an instance of self.dtype.type. When passed `fill_value=None`,\n        # the default of `self.dtype.na_value` should be used.\n        # This may differ from the physical storage type your ExtensionArray\n        # uses. In this case, your implementation is responsible for casting\n        # the user-facing type to the storage type, before using\n        # pandas.api.extensions.take\n        raise AbstractMethodError(self)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 92,
        "column": 39
      },
      "text": "def take(\n            self,\n            indices: Sequence[int],\n            allow_fill: bool = False,\n            fill_value: Any = None\n    ) -> ABCExtensionArray:\n        \"\"\"\n        Take elements from an array.\n\n        Parameters\n        ----------\n        indices : sequence of integers\n            Indices to be taken.\n        allow_fill : bool, default False\n            How to handle negative values in `indices`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right (the default). This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate\n              missing values. These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n        fill_value : any, optional\n            Fill value to use for NA-indices when `allow_fill` is True.\n            This may be ``None``, in which case the default NA value for\n            the type, ``self.dtype.na_value``, is used.\n\n            For many ExtensionArrays, there will be two representations of\n            `fill_value`: a user-facing \"boxed\" scalar, and a low-level\n            physical NA value. `fill_value` should be the user-facing version,\n            and the implementation should handle translating that to the\n            physical version for processing the take if necessary.\n\n        Returns\n        -------\n        ExtensionArray\n\n        Raises\n        ------\n        IndexError\n            When the indices are out of bounds for the array.\n        ValueError\n            When `indices` contains negative values other than ``-1``\n            and `allow_fill` is True.\n\n        Notes\n        -----\n        ExtensionArray.take is called by ``Series.__getitem__``, ``.loc``,\n        ``iloc``, when `indices` is a sequence of values. Additionally,\n        it's called by :meth:`Series.reindex`, or any other method\n        that causes realignment, with a `fill_value`.\n\n        See Also\n        --------\n        numpy.take\n        pandas.api.extensions.take\n\n        Examples\n        --------\n        Here's an example implementation, which relies on casting the\n        extension array to object dtype. This uses the helper method\n        :func:`pandas.api.extensions.take`.\n\n        .. code-block:: python\n\n           def take(self, indices, allow_fill=False, fill_value=None):\n               from pandas.core.algorithms import take\n\n               # If the ExtensionArray is backed by an ndarray, then\n               # just pass that here instead of coercing to object.\n               data = self.astype(object)\n\n               if allow_fill and fill_value is None:\n                   fill_value = self.dtype.na_value\n\n               # fill value should always be translated from the scalar\n               # type for the array, to the physical storage type for\n               # the data, before passing to take.\n\n               result = take(data, indices, fill_value=fill_value,\n                             allow_fill=allow_fill)\n               return self._from_sequence(result, dtype=self.dtype)\n        \"\"\"\n        # Implementer note: The `fill_value` parameter should be a user-facing\n        # value, an instance of self.dtype.type. When passed `fill_value=None`,\n        # the default of `self.dtype.na_value` should be used.\n        # This may differ from the physical storage type your ExtensionArray\n        # uses. In this case, your implementation is responsible for casting\n        # the user-facing type to the storage type, before using\n        # pandas.api.extensions.take\n        raise AbstractMethodError(self)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 8
          },
          "text": "take"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 8
          },
          "end": {
            "row": 5,
            "column": 5
          },
          "text": "(\n            self,\n            indices: Sequence[int],\n            allow_fill: bool = False,\n            fill_value: Any = None\n    )",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 8
              },
              "end": {
                "row": 0,
                "column": 9
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 1,
                "column": 12
              },
              "end": {
                "row": 1,
                "column": 16
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 1,
                "column": 16
              },
              "end": {
                "row": 1,
                "column": 17
              },
              "text": ","
            },
            {
              "type": "typed_parameter",
              "start": {
                "row": 2,
                "column": 12
              },
              "end": {
                "row": 2,
                "column": 34
              },
              "text": "indices: Sequence[int]",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 2,
                    "column": 12
                  },
                  "end": {
                    "row": 2,
                    "column": 19
                  },
                  "text": "indices"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 2,
                    "column": 19
                  },
                  "end": {
                    "row": 2,
                    "column": 20
                  },
                  "text": ":"
                },
                {
                  "type": "type",
                  "start": {
                    "row": 2,
                    "column": 21
                  },
                  "end": {
                    "row": 2,
                    "column": 34
                  },
                  "text": "Sequence[int]",
                  "children": [
                    {
                      "type": "generic_type",
                      "start": {
                        "row": 2,
                        "column": 21
                      },
                      "end": {
                        "row": 2,
                        "column": 34
                      },
                      "text": "Sequence[int]",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 2,
                            "column": 21
                          },
                          "end": {
                            "row": 2,
                            "column": 29
                          },
                          "text": "Sequence"
                        },
                        {
                          "type": "type_parameter",
                          "start": {
                            "row": 2,
                            "column": 29
                          },
                          "end": {
                            "row": 2,
                            "column": 34
                          },
                          "text": "[int]",
                          "children": [
                            {
                              "type": "[",
                              "start": {
                                "row": 2,
                                "column": 29
                              },
                              "end": {
                                "row": 2,
                                "column": 30
                              },
                              "text": "["
                            },
                            {
                              "type": "type",
                              "start": {
                                "row": 2,
                                "column": 30
                              },
                              "end": {
                                "row": 2,
                                "column": 33
                              },
                              "text": "int",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 2,
                                    "column": 30
                                  },
                                  "end": {
                                    "row": 2,
                                    "column": 33
                                  },
                                  "text": "int"
                                }
                              ]
                            },
                            {
                              "type": "]",
                              "start": {
                                "row": 2,
                                "column": 33
                              },
                              "end": {
                                "row": 2,
                                "column": 34
                              },
                              "text": "]"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 2,
                "column": 34
              },
              "end": {
                "row": 2,
                "column": 35
              },
              "text": ","
            },
            {
              "type": "typed_default_parameter",
              "start": {
                "row": 3,
                "column": 12
              },
              "end": {
                "row": 3,
                "column": 36
              },
              "text": "allow_fill: bool = False",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 3,
                    "column": 12
                  },
                  "end": {
                    "row": 3,
                    "column": 22
                  },
                  "text": "allow_fill"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 3,
                    "column": 22
                  },
                  "end": {
                    "row": 3,
                    "column": 23
                  },
                  "text": ":"
                },
                {
                  "type": "type",
                  "start": {
                    "row": 3,
                    "column": 24
                  },
                  "end": {
                    "row": 3,
                    "column": 28
                  },
                  "text": "bool",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 3,
                        "column": 24
                      },
                      "end": {
                        "row": 3,
                        "column": 28
                      },
                      "text": "bool"
                    }
                  ]
                },
                {
                  "type": "=",
                  "start": {
                    "row": 3,
                    "column": 29
                  },
                  "end": {
                    "row": 3,
                    "column": 30
                  },
                  "text": "="
                },
                {
                  "type": "false",
                  "start": {
                    "row": 3,
                    "column": 31
                  },
                  "end": {
                    "row": 3,
                    "column": 36
                  },
                  "text": "False"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 3,
                "column": 36
              },
              "end": {
                "row": 3,
                "column": 37
              },
              "text": ","
            },
            {
              "type": "typed_default_parameter",
              "start": {
                "row": 4,
                "column": 12
              },
              "end": {
                "row": 4,
                "column": 34
              },
              "text": "fill_value: Any = None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 4,
                    "column": 12
                  },
                  "end": {
                    "row": 4,
                    "column": 22
                  },
                  "text": "fill_value"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 4,
                    "column": 22
                  },
                  "end": {
                    "row": 4,
                    "column": 23
                  },
                  "text": ":"
                },
                {
                  "type": "type",
                  "start": {
                    "row": 4,
                    "column": 24
                  },
                  "end": {
                    "row": 4,
                    "column": 27
                  },
                  "text": "Any",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 4,
                        "column": 24
                      },
                      "end": {
                        "row": 4,
                        "column": 27
                      },
                      "text": "Any"
                    }
                  ]
                },
                {
                  "type": "=",
                  "start": {
                    "row": 4,
                    "column": 28
                  },
                  "end": {
                    "row": 4,
                    "column": 29
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 4,
                    "column": 30
                  },
                  "end": {
                    "row": 4,
                    "column": 34
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 5,
                "column": 4
              },
              "end": {
                "row": 5,
                "column": 5
              },
              "text": ")"
            }
          ]
        },
        {
          "type": "->",
          "start": {
            "row": 5,
            "column": 6
          },
          "end": {
            "row": 5,
            "column": 8
          },
          "text": "->"
        },
        {
          "type": "type",
          "start": {
            "row": 5,
            "column": 9
          },
          "end": {
            "row": 5,
            "column": 26
          },
          "text": "ABCExtensionArray",
          "children": [
            {
              "type": "identifier",
              "start": {
                "row": 5,
                "column": 9
              },
              "end": {
                "row": 5,
                "column": 26
              },
              "text": "ABCExtensionArray"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 5,
            "column": 26
          },
          "end": {
            "row": 5,
            "column": 27
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 6,
            "column": 8
          },
          "end": {
            "row": 92,
            "column": 39
          },
          "text": "\"\"\"\n        Take elements from an array.\n\n        Parameters\n        ----------\n        indices : sequence of integers\n            Indices to be taken.\n        allow_fill : bool, default False\n            How to handle negative values in `indices`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right (the default). This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate\n              missing values. These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n        fill_value : any, optional\n            Fill value to use for NA-indices when `allow_fill` is True.\n            This may be ``None``, in which case the default NA value for\n            the type, ``self.dtype.na_value``, is used.\n\n            For many ExtensionArrays, there will be two representations of\n            `fill_value`: a user-facing \"boxed\" scalar, and a low-level\n            physical NA value. `fill_value` should be the user-facing version,\n            and the implementation should handle translating that to the\n            physical version for processing the take if necessary.\n\n        Returns\n        -------\n        ExtensionArray\n\n        Raises\n        ------\n        IndexError\n            When the indices are out of bounds for the array.\n        ValueError\n            When `indices` contains negative values other than ``-1``\n            and `allow_fill` is True.\n\n        Notes\n        -----\n        ExtensionArray.take is called by ``Series.__getitem__``, ``.loc``,\n        ``iloc``, when `indices` is a sequence of values. Additionally,\n        it's called by :meth:`Series.reindex`, or any other method\n        that causes realignment, with a `fill_value`.\n\n        See Also\n        --------\n        numpy.take\n        pandas.api.extensions.take\n\n        Examples\n        --------\n        Here's an example implementation, which relies on casting the\n        extension array to object dtype. This uses the helper method\n        :func:`pandas.api.extensions.take`.\n\n        .. code-block:: python\n\n           def take(self, indices, allow_fill=False, fill_value=None):\n               from pandas.core.algorithms import take\n\n               # If the ExtensionArray is backed by an ndarray, then\n               # just pass that here instead of coercing to object.\n               data = self.astype(object)\n\n               if allow_fill and fill_value is None:\n                   fill_value = self.dtype.na_value\n\n               # fill value should always be translated from the scalar\n               # type for the array, to the physical storage type for\n               # the data, before passing to take.\n\n               result = take(data, indices, fill_value=fill_value,\n                             allow_fill=allow_fill)\n               return self._from_sequence(result, dtype=self.dtype)\n        \"\"\"\n        # Implementer note: The `fill_value` parameter should be a user-facing\n        # value, an instance of self.dtype.type. When passed `fill_value=None`,\n        # the default of `self.dtype.na_value` should be used.\n        # This may differ from the physical storage type your ExtensionArray\n        # uses. In this case, your implementation is responsible for casting\n        # the user-facing type to the storage type, before using\n        # pandas.api.extensions.take\n        raise AbstractMethodError(self)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 6,
                "column": 8
              },
              "end": {
                "row": 84,
                "column": 11
              },
              "text": "\"\"\"\n        Take elements from an array.\n\n        Parameters\n        ----------\n        indices : sequence of integers\n            Indices to be taken.\n        allow_fill : bool, default False\n            How to handle negative values in `indices`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right (the default). This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate\n              missing values. These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n        fill_value : any, optional\n            Fill value to use for NA-indices when `allow_fill` is True.\n            This may be ``None``, in which case the default NA value for\n            the type, ``self.dtype.na_value``, is used.\n\n            For many ExtensionArrays, there will be two representations of\n            `fill_value`: a user-facing \"boxed\" scalar, and a low-level\n            physical NA value. `fill_value` should be the user-facing version,\n            and the implementation should handle translating that to the\n            physical version for processing the take if necessary.\n\n        Returns\n        -------\n        ExtensionArray\n\n        Raises\n        ------\n        IndexError\n            When the indices are out of bounds for the array.\n        ValueError\n            When `indices` contains negative values other than ``-1``\n            and `allow_fill` is True.\n\n        Notes\n        -----\n        ExtensionArray.take is called by ``Series.__getitem__``, ``.loc``,\n        ``iloc``, when `indices` is a sequence of values. Additionally,\n        it's called by :meth:`Series.reindex`, or any other method\n        that causes realignment, with a `fill_value`.\n\n        See Also\n        --------\n        numpy.take\n        pandas.api.extensions.take\n\n        Examples\n        --------\n        Here's an example implementation, which relies on casting the\n        extension array to object dtype. This uses the helper method\n        :func:`pandas.api.extensions.take`.\n\n        .. code-block:: python\n\n           def take(self, indices, allow_fill=False, fill_value=None):\n               from pandas.core.algorithms import take\n\n               # If the ExtensionArray is backed by an ndarray, then\n               # just pass that here instead of coercing to object.\n               data = self.astype(object)\n\n               if allow_fill and fill_value is None:\n                   fill_value = self.dtype.na_value\n\n               # fill value should always be translated from the scalar\n               # type for the array, to the physical storage type for\n               # the data, before passing to take.\n\n               result = take(data, indices, fill_value=fill_value,\n                             allow_fill=allow_fill)\n               return self._from_sequence(result, dtype=self.dtype)\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 6,
                    "column": 8
                  },
                  "end": {
                    "row": 84,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Take elements from an array.\n\n        Parameters\n        ----------\n        indices : sequence of integers\n            Indices to be taken.\n        allow_fill : bool, default False\n            How to handle negative values in `indices`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right (the default). This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate\n              missing values. These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n        fill_value : any, optional\n            Fill value to use for NA-indices when `allow_fill` is True.\n            This may be ``None``, in which case the default NA value for\n            the type, ``self.dtype.na_value``, is used.\n\n            For many ExtensionArrays, there will be two representations of\n            `fill_value`: a user-facing \"boxed\" scalar, and a low-level\n            physical NA value. `fill_value` should be the user-facing version,\n            and the implementation should handle translating that to the\n            physical version for processing the take if necessary.\n\n        Returns\n        -------\n        ExtensionArray\n\n        Raises\n        ------\n        IndexError\n            When the indices are out of bounds for the array.\n        ValueError\n            When `indices` contains negative values other than ``-1``\n            and `allow_fill` is True.\n\n        Notes\n        -----\n        ExtensionArray.take is called by ``Series.__getitem__``, ``.loc``,\n        ``iloc``, when `indices` is a sequence of values. Additionally,\n        it's called by :meth:`Series.reindex`, or any other method\n        that causes realignment, with a `fill_value`.\n\n        See Also\n        --------\n        numpy.take\n        pandas.api.extensions.take\n\n        Examples\n        --------\n        Here's an example implementation, which relies on casting the\n        extension array to object dtype. This uses the helper method\n        :func:`pandas.api.extensions.take`.\n\n        .. code-block:: python\n\n           def take(self, indices, allow_fill=False, fill_value=None):\n               from pandas.core.algorithms import take\n\n               # If the ExtensionArray is backed by an ndarray, then\n               # just pass that here instead of coercing to object.\n               data = self.astype(object)\n\n               if allow_fill and fill_value is None:\n                   fill_value = self.dtype.na_value\n\n               # fill value should always be translated from the scalar\n               # type for the array, to the physical storage type for\n               # the data, before passing to take.\n\n               result = take(data, indices, fill_value=fill_value,\n                             allow_fill=allow_fill)\n               return self._from_sequence(result, dtype=self.dtype)\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 6,
                        "column": 8
                      },
                      "end": {
                        "row": 6,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 6,
                        "column": 11
                      },
                      "end": {
                        "row": 84,
                        "column": 8
                      },
                      "text": "\n        Take elements from an array.\n\n        Parameters\n        ----------\n        indices : sequence of integers\n            Indices to be taken.\n        allow_fill : bool, default False\n            How to handle negative values in `indices`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right (the default). This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate\n              missing values. These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n        fill_value : any, optional\n            Fill value to use for NA-indices when `allow_fill` is True.\n            This may be ``None``, in which case the default NA value for\n            the type, ``self.dtype.na_value``, is used.\n\n            For many ExtensionArrays, there will be two representations of\n            `fill_value`: a user-facing \"boxed\" scalar, and a low-level\n            physical NA value. `fill_value` should be the user-facing version,\n            and the implementation should handle translating that to the\n            physical version for processing the take if necessary.\n\n        Returns\n        -------\n        ExtensionArray\n\n        Raises\n        ------\n        IndexError\n            When the indices are out of bounds for the array.\n        ValueError\n            When `indices` contains negative values other than ``-1``\n            and `allow_fill` is True.\n\n        Notes\n        -----\n        ExtensionArray.take is called by ``Series.__getitem__``, ``.loc``,\n        ``iloc``, when `indices` is a sequence of values. Additionally,\n        it's called by :meth:`Series.reindex`, or any other method\n        that causes realignment, with a `fill_value`.\n\n        See Also\n        --------\n        numpy.take\n        pandas.api.extensions.take\n\n        Examples\n        --------\n        Here's an example implementation, which relies on casting the\n        extension array to object dtype. This uses the helper method\n        :func:`pandas.api.extensions.take`.\n\n        .. code-block:: python\n\n           def take(self, indices, allow_fill=False, fill_value=None):\n               from pandas.core.algorithms import take\n\n               # If the ExtensionArray is backed by an ndarray, then\n               # just pass that here instead of coercing to object.\n               data = self.astype(object)\n\n               if allow_fill and fill_value is None:\n                   fill_value = self.dtype.na_value\n\n               # fill value should always be translated from the scalar\n               # type for the array, to the physical storage type for\n               # the data, before passing to take.\n\n               result = take(data, indices, fill_value=fill_value,\n                             allow_fill=allow_fill)\n               return self._from_sequence(result, dtype=self.dtype)\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 84,
                        "column": 8
                      },
                      "end": {
                        "row": 84,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 85,
                "column": 8
              },
              "end": {
                "row": 85,
                "column": 78
              },
              "text": "# Implementer note: The `fill_value` parameter should be a user-facing"
            },
            {
              "type": "comment",
              "start": {
                "row": 86,
                "column": 8
              },
              "end": {
                "row": 86,
                "column": 79
              },
              "text": "# value, an instance of self.dtype.type. When passed `fill_value=None`,"
            },
            {
              "type": "comment",
              "start": {
                "row": 87,
                "column": 8
              },
              "end": {
                "row": 87,
                "column": 62
              },
              "text": "# the default of `self.dtype.na_value` should be used."
            },
            {
              "type": "comment",
              "start": {
                "row": 88,
                "column": 8
              },
              "end": {
                "row": 88,
                "column": 76
              },
              "text": "# This may differ from the physical storage type your ExtensionArray"
            },
            {
              "type": "comment",
              "start": {
                "row": 89,
                "column": 8
              },
              "end": {
                "row": 89,
                "column": 76
              },
              "text": "# uses. In this case, your implementation is responsible for casting"
            },
            {
              "type": "comment",
              "start": {
                "row": 90,
                "column": 8
              },
              "end": {
                "row": 90,
                "column": 64
              },
              "text": "# the user-facing type to the storage type, before using"
            },
            {
              "type": "comment",
              "start": {
                "row": 91,
                "column": 8
              },
              "end": {
                "row": 91,
                "column": 36
              },
              "text": "# pandas.api.extensions.take"
            },
            {
              "type": "raise_statement",
              "start": {
                "row": 92,
                "column": 8
              },
              "end": {
                "row": 92,
                "column": 39
              },
              "text": "raise AbstractMethodError(self)",
              "children": [
                {
                  "type": "raise",
                  "start": {
                    "row": 92,
                    "column": 8
                  },
                  "end": {
                    "row": 92,
                    "column": 13
                  },
                  "text": "raise"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 92,
                    "column": 14
                  },
                  "end": {
                    "row": 92,
                    "column": 39
                  },
                  "text": "AbstractMethodError(self)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 92,
                        "column": 14
                      },
                      "end": {
                        "row": 92,
                        "column": 33
                      },
                      "text": "AbstractMethodError"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 92,
                        "column": 33
                      },
                      "end": {
                        "row": 92,
                        "column": 39
                      },
                      "text": "(self)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 92,
                            "column": 33
                          },
                          "end": {
                            "row": 92,
                            "column": 34
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 92,
                            "column": 34
                          },
                          "end": {
                            "row": 92,
                            "column": 38
                          },
                          "text": "self"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 92,
                            "column": 38
                          },
                          "end": {
                            "row": 92,
                            "column": 39
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}