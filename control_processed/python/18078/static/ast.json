{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 39,
    "column": 64
  },
  "text": "def image_embedding_column(key, module_spec):\n  \"\"\"Uses a Module to get a dense 1-D representation from the pixels of images.\n\n  This feature column can be used on images, represented as float32 tensors of\n  RGB pixel data in the range [0,1]. This can be read from a numeric_column()\n  if the tf.Example input data happens to have decoded images, all with the\n  same shape [height, width, 3]. More commonly, the input_fn will have code to\n  explicitly decode images, resize them (possibly after performing data\n  augmentation such as random crops etc.), and provide a batch of shape\n  [batch_size, height, width, 3].\n\n  The result of this feature column is the result of passing its `input`\n  through the module `m` instantiated from `module_spec`, as per\n  `result = m({\"images\": input})`. The `result` must have dtype float32 and\n  shape `[batch_size, num_features]` with a known value of num_features.\n\n  Example:\n\n  ```python\n    image_column = hub.image_embedding_column(\"embeddings\", \"/tmp/image-module\")\n    feature_columns = [image_column, ...]\n    estimator = tf.estimator.LinearClassifier(feature_columns, ...)\n    height, width = hub.get_expected_image_size(image_column.module_spec)\n    input_fn = ...  # Provides \"embeddings\" with shape [None, height, width, 3].\n    estimator.train(input_fn, ...)\n  ```\n\n  Args:\n    key: A string or `_FeatureColumn` identifying the input image data.\n    module_spec: A string handle or a `ModuleSpec` identifying the module.\n\n  Returns:\n    `_DenseColumn` that converts from pixel data.\n\n  Raises:\n     ValueError: if module_spec is not suitable for use in this feature column.\n  \"\"\"\n  module_spec = module.as_module_spec(module_spec)\n  _check_module_is_image_embedding(module_spec)\n  return _ImageEmbeddingColumn(key=key, module_spec=module_spec)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 39,
        "column": 64
      },
      "text": "def image_embedding_column(key, module_spec):\n  \"\"\"Uses a Module to get a dense 1-D representation from the pixels of images.\n\n  This feature column can be used on images, represented as float32 tensors of\n  RGB pixel data in the range [0,1]. This can be read from a numeric_column()\n  if the tf.Example input data happens to have decoded images, all with the\n  same shape [height, width, 3]. More commonly, the input_fn will have code to\n  explicitly decode images, resize them (possibly after performing data\n  augmentation such as random crops etc.), and provide a batch of shape\n  [batch_size, height, width, 3].\n\n  The result of this feature column is the result of passing its `input`\n  through the module `m` instantiated from `module_spec`, as per\n  `result = m({\"images\": input})`. The `result` must have dtype float32 and\n  shape `[batch_size, num_features]` with a known value of num_features.\n\n  Example:\n\n  ```python\n    image_column = hub.image_embedding_column(\"embeddings\", \"/tmp/image-module\")\n    feature_columns = [image_column, ...]\n    estimator = tf.estimator.LinearClassifier(feature_columns, ...)\n    height, width = hub.get_expected_image_size(image_column.module_spec)\n    input_fn = ...  # Provides \"embeddings\" with shape [None, height, width, 3].\n    estimator.train(input_fn, ...)\n  ```\n\n  Args:\n    key: A string or `_FeatureColumn` identifying the input image data.\n    module_spec: A string handle or a `ModuleSpec` identifying the module.\n\n  Returns:\n    `_DenseColumn` that converts from pixel data.\n\n  Raises:\n     ValueError: if module_spec is not suitable for use in this feature column.\n  \"\"\"\n  module_spec = module.as_module_spec(module_spec)\n  _check_module_is_image_embedding(module_spec)\n  return _ImageEmbeddingColumn(key=key, module_spec=module_spec)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 26
          },
          "text": "image_embedding_column"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 26
          },
          "end": {
            "row": 0,
            "column": 44
          },
          "text": "(key, module_spec)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 26
              },
              "end": {
                "row": 0,
                "column": 27
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 27
              },
              "end": {
                "row": 0,
                "column": 30
              },
              "text": "key"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 30
              },
              "end": {
                "row": 0,
                "column": 31
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 32
              },
              "end": {
                "row": 0,
                "column": 43
              },
              "text": "module_spec"
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 43
              },
              "end": {
                "row": 0,
                "column": 44
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 44
          },
          "end": {
            "row": 0,
            "column": 45
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 2
          },
          "end": {
            "row": 39,
            "column": 64
          },
          "text": "\"\"\"Uses a Module to get a dense 1-D representation from the pixels of images.\n\n  This feature column can be used on images, represented as float32 tensors of\n  RGB pixel data in the range [0,1]. This can be read from a numeric_column()\n  if the tf.Example input data happens to have decoded images, all with the\n  same shape [height, width, 3]. More commonly, the input_fn will have code to\n  explicitly decode images, resize them (possibly after performing data\n  augmentation such as random crops etc.), and provide a batch of shape\n  [batch_size, height, width, 3].\n\n  The result of this feature column is the result of passing its `input`\n  through the module `m` instantiated from `module_spec`, as per\n  `result = m({\"images\": input})`. The `result` must have dtype float32 and\n  shape `[batch_size, num_features]` with a known value of num_features.\n\n  Example:\n\n  ```python\n    image_column = hub.image_embedding_column(\"embeddings\", \"/tmp/image-module\")\n    feature_columns = [image_column, ...]\n    estimator = tf.estimator.LinearClassifier(feature_columns, ...)\n    height, width = hub.get_expected_image_size(image_column.module_spec)\n    input_fn = ...  # Provides \"embeddings\" with shape [None, height, width, 3].\n    estimator.train(input_fn, ...)\n  ```\n\n  Args:\n    key: A string or `_FeatureColumn` identifying the input image data.\n    module_spec: A string handle or a `ModuleSpec` identifying the module.\n\n  Returns:\n    `_DenseColumn` that converts from pixel data.\n\n  Raises:\n     ValueError: if module_spec is not suitable for use in this feature column.\n  \"\"\"\n  module_spec = module.as_module_spec(module_spec)\n  _check_module_is_image_embedding(module_spec)\n  return _ImageEmbeddingColumn(key=key, module_spec=module_spec)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 2
              },
              "end": {
                "row": 36,
                "column": 5
              },
              "text": "\"\"\"Uses a Module to get a dense 1-D representation from the pixels of images.\n\n  This feature column can be used on images, represented as float32 tensors of\n  RGB pixel data in the range [0,1]. This can be read from a numeric_column()\n  if the tf.Example input data happens to have decoded images, all with the\n  same shape [height, width, 3]. More commonly, the input_fn will have code to\n  explicitly decode images, resize them (possibly after performing data\n  augmentation such as random crops etc.), and provide a batch of shape\n  [batch_size, height, width, 3].\n\n  The result of this feature column is the result of passing its `input`\n  through the module `m` instantiated from `module_spec`, as per\n  `result = m({\"images\": input})`. The `result` must have dtype float32 and\n  shape `[batch_size, num_features]` with a known value of num_features.\n\n  Example:\n\n  ```python\n    image_column = hub.image_embedding_column(\"embeddings\", \"/tmp/image-module\")\n    feature_columns = [image_column, ...]\n    estimator = tf.estimator.LinearClassifier(feature_columns, ...)\n    height, width = hub.get_expected_image_size(image_column.module_spec)\n    input_fn = ...  # Provides \"embeddings\" with shape [None, height, width, 3].\n    estimator.train(input_fn, ...)\n  ```\n\n  Args:\n    key: A string or `_FeatureColumn` identifying the input image data.\n    module_spec: A string handle or a `ModuleSpec` identifying the module.\n\n  Returns:\n    `_DenseColumn` that converts from pixel data.\n\n  Raises:\n     ValueError: if module_spec is not suitable for use in this feature column.\n  \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 2
                  },
                  "end": {
                    "row": 36,
                    "column": 5
                  },
                  "text": "\"\"\"Uses a Module to get a dense 1-D representation from the pixels of images.\n\n  This feature column can be used on images, represented as float32 tensors of\n  RGB pixel data in the range [0,1]. This can be read from a numeric_column()\n  if the tf.Example input data happens to have decoded images, all with the\n  same shape [height, width, 3]. More commonly, the input_fn will have code to\n  explicitly decode images, resize them (possibly after performing data\n  augmentation such as random crops etc.), and provide a batch of shape\n  [batch_size, height, width, 3].\n\n  The result of this feature column is the result of passing its `input`\n  through the module `m` instantiated from `module_spec`, as per\n  `result = m({\"images\": input})`. The `result` must have dtype float32 and\n  shape `[batch_size, num_features]` with a known value of num_features.\n\n  Example:\n\n  ```python\n    image_column = hub.image_embedding_column(\"embeddings\", \"/tmp/image-module\")\n    feature_columns = [image_column, ...]\n    estimator = tf.estimator.LinearClassifier(feature_columns, ...)\n    height, width = hub.get_expected_image_size(image_column.module_spec)\n    input_fn = ...  # Provides \"embeddings\" with shape [None, height, width, 3].\n    estimator.train(input_fn, ...)\n  ```\n\n  Args:\n    key: A string or `_FeatureColumn` identifying the input image data.\n    module_spec: A string handle or a `ModuleSpec` identifying the module.\n\n  Returns:\n    `_DenseColumn` that converts from pixel data.\n\n  Raises:\n     ValueError: if module_spec is not suitable for use in this feature column.\n  \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 2
                      },
                      "end": {
                        "row": 1,
                        "column": 5
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 5
                      },
                      "end": {
                        "row": 36,
                        "column": 2
                      },
                      "text": "Uses a Module to get a dense 1-D representation from the pixels of images.\n\n  This feature column can be used on images, represented as float32 tensors of\n  RGB pixel data in the range [0,1]. This can be read from a numeric_column()\n  if the tf.Example input data happens to have decoded images, all with the\n  same shape [height, width, 3]. More commonly, the input_fn will have code to\n  explicitly decode images, resize them (possibly after performing data\n  augmentation such as random crops etc.), and provide a batch of shape\n  [batch_size, height, width, 3].\n\n  The result of this feature column is the result of passing its `input`\n  through the module `m` instantiated from `module_spec`, as per\n  `result = m({\"images\": input})`. The `result` must have dtype float32 and\n  shape `[batch_size, num_features]` with a known value of num_features.\n\n  Example:\n\n  ```python\n    image_column = hub.image_embedding_column(\"embeddings\", \"/tmp/image-module\")\n    feature_columns = [image_column, ...]\n    estimator = tf.estimator.LinearClassifier(feature_columns, ...)\n    height, width = hub.get_expected_image_size(image_column.module_spec)\n    input_fn = ...  # Provides \"embeddings\" with shape [None, height, width, 3].\n    estimator.train(input_fn, ...)\n  ```\n\n  Args:\n    key: A string or `_FeatureColumn` identifying the input image data.\n    module_spec: A string handle or a `ModuleSpec` identifying the module.\n\n  Returns:\n    `_DenseColumn` that converts from pixel data.\n\n  Raises:\n     ValueError: if module_spec is not suitable for use in this feature column.\n  "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 36,
                        "column": 2
                      },
                      "end": {
                        "row": 36,
                        "column": 5
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 37,
                "column": 2
              },
              "end": {
                "row": 37,
                "column": 50
              },
              "text": "module_spec = module.as_module_spec(module_spec)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 37,
                    "column": 2
                  },
                  "end": {
                    "row": 37,
                    "column": 50
                  },
                  "text": "module_spec = module.as_module_spec(module_spec)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 37,
                        "column": 2
                      },
                      "end": {
                        "row": 37,
                        "column": 13
                      },
                      "text": "module_spec"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 37,
                        "column": 14
                      },
                      "end": {
                        "row": 37,
                        "column": 15
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 37,
                        "column": 16
                      },
                      "end": {
                        "row": 37,
                        "column": 50
                      },
                      "text": "module.as_module_spec(module_spec)",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 37,
                            "column": 16
                          },
                          "end": {
                            "row": 37,
                            "column": 37
                          },
                          "text": "module.as_module_spec",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 37,
                                "column": 16
                              },
                              "end": {
                                "row": 37,
                                "column": 22
                              },
                              "text": "module"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 37,
                                "column": 22
                              },
                              "end": {
                                "row": 37,
                                "column": 23
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 37,
                                "column": 23
                              },
                              "end": {
                                "row": 37,
                                "column": 37
                              },
                              "text": "as_module_spec"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 37,
                            "column": 37
                          },
                          "end": {
                            "row": 37,
                            "column": 50
                          },
                          "text": "(module_spec)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 37,
                                "column": 37
                              },
                              "end": {
                                "row": 37,
                                "column": 38
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 37,
                                "column": 38
                              },
                              "end": {
                                "row": 37,
                                "column": 49
                              },
                              "text": "module_spec"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 37,
                                "column": 49
                              },
                              "end": {
                                "row": 37,
                                "column": 50
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 38,
                "column": 2
              },
              "end": {
                "row": 38,
                "column": 47
              },
              "text": "_check_module_is_image_embedding(module_spec)",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 38,
                    "column": 2
                  },
                  "end": {
                    "row": 38,
                    "column": 47
                  },
                  "text": "_check_module_is_image_embedding(module_spec)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 38,
                        "column": 2
                      },
                      "end": {
                        "row": 38,
                        "column": 34
                      },
                      "text": "_check_module_is_image_embedding"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 38,
                        "column": 34
                      },
                      "end": {
                        "row": 38,
                        "column": 47
                      },
                      "text": "(module_spec)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 38,
                            "column": 34
                          },
                          "end": {
                            "row": 38,
                            "column": 35
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 38,
                            "column": 35
                          },
                          "end": {
                            "row": 38,
                            "column": 46
                          },
                          "text": "module_spec"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 38,
                            "column": 46
                          },
                          "end": {
                            "row": 38,
                            "column": 47
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 39,
                "column": 2
              },
              "end": {
                "row": 39,
                "column": 64
              },
              "text": "return _ImageEmbeddingColumn(key=key, module_spec=module_spec)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 39,
                    "column": 2
                  },
                  "end": {
                    "row": 39,
                    "column": 8
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 39,
                    "column": 9
                  },
                  "end": {
                    "row": 39,
                    "column": 64
                  },
                  "text": "_ImageEmbeddingColumn(key=key, module_spec=module_spec)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 39,
                        "column": 9
                      },
                      "end": {
                        "row": 39,
                        "column": 30
                      },
                      "text": "_ImageEmbeddingColumn"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 39,
                        "column": 30
                      },
                      "end": {
                        "row": 39,
                        "column": 64
                      },
                      "text": "(key=key, module_spec=module_spec)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 39,
                            "column": 30
                          },
                          "end": {
                            "row": 39,
                            "column": 31
                          },
                          "text": "("
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 39,
                            "column": 31
                          },
                          "end": {
                            "row": 39,
                            "column": 38
                          },
                          "text": "key=key",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 39,
                                "column": 31
                              },
                              "end": {
                                "row": 39,
                                "column": 34
                              },
                              "text": "key"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 39,
                                "column": 34
                              },
                              "end": {
                                "row": 39,
                                "column": 35
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 39,
                                "column": 35
                              },
                              "end": {
                                "row": 39,
                                "column": 38
                              },
                              "text": "key"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 39,
                            "column": 38
                          },
                          "end": {
                            "row": 39,
                            "column": 39
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 39,
                            "column": 40
                          },
                          "end": {
                            "row": 39,
                            "column": 63
                          },
                          "text": "module_spec=module_spec",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 39,
                                "column": 40
                              },
                              "end": {
                                "row": 39,
                                "column": 51
                              },
                              "text": "module_spec"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 39,
                                "column": 51
                              },
                              "end": {
                                "row": 39,
                                "column": 52
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 39,
                                "column": 52
                              },
                              "end": {
                                "row": 39,
                                "column": 63
                              },
                              "text": "module_spec"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 39,
                            "column": 63
                          },
                          "end": {
                            "row": 39,
                            "column": 64
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}