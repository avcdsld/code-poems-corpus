{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 510,
    "column": 16
  },
  "text": "def create(dataset, label=None, features=None, distance=None, method='auto',\n           verbose=True, **kwargs):\n    \"\"\"\n    Create a nearest neighbor model, which can be searched efficiently and\n    quickly for the nearest neighbors of a query observation. If the `method`\n    argument is specified as `auto`, the type of model is chosen automatically\n    based on the type of data in `dataset`.\n\n    .. warning::\n\n        The 'dot_product' distance is deprecated and will be removed in future\n        versions of Turi Create. Please use 'transformed_dot_product'\n        distance instead, although note that this is more than a name change;\n        it is a *different* transformation of the dot product of two vectors.\n        Please see the distances module documentation for more details.\n\n    Parameters\n    ----------\n    dataset : SFrame\n        Reference data. If the features for each observation are numeric, they\n        may be in separate columns of 'dataset' or a single column with lists\n        of values. The features may also be in the form of a column of sparse\n        vectors (i.e. dictionaries), with string keys and numeric values.\n\n    label : string, optional\n        Name of the SFrame column with row labels. If 'label' is not specified,\n        row numbers are used to identify reference dataset rows when the model\n        is queried.\n\n    features : list[string], optional\n        Name of the columns with features to use in computing distances between\n        observations and the query points. 'None' (the default) indicates that\n        all columns except the label should be used as features. Each column\n        can be one of the following types:\n\n        - *Numeric*: values of numeric type integer or float.\n\n        - *Array*: list of numeric (integer or float) values. Each list element\n          is treated as a separate variable in the model.\n\n        - *Dictionary*: key-value pairs with numeric (integer or float) values.\n          Each key indicates a separate variable in the model.\n\n        - *List*: list of integer or string values. Each element is treated as\n          a separate variable in the model.\n\n        - *String*: string values.\n\n        Please note: if a composite distance is also specified, this parameter\n        is ignored.\n\n    distance : string, function, or list[list], optional\n        Function to measure the distance between any two input data rows. This\n        may be one of three types:\n\n        - *String*: the name of a standard distance function. One of\n          'euclidean', 'squared_euclidean', 'manhattan', 'levenshtein',\n          'jaccard', 'weighted_jaccard', 'cosine', 'dot_product' (deprecated),\n          or 'transformed_dot_product'.\n\n        - *Function*: a function handle from the\n          :mod:`~turicreate.toolkits.distances` module.\n\n        - *Composite distance*: the weighted sum of several standard distance\n          functions applied to various features. This is specified as a list of\n          distance components, each of which is itself a list containing three\n          items:\n\n          1. list or tuple of feature names (strings)\n\n          2. standard distance name (string)\n\n          3. scaling factor (int or float)\n\n        For more information about Turi Create distance functions, please\n        see the :py:mod:`~turicreate.toolkits.distances` module.\n\n        If 'distance' is left unspecified or set to 'auto', a composite\n        distance is constructed automatically based on feature types.\n\n    method : {'auto', 'ball_tree', 'brute_force', 'lsh'}, optional\n        Method for computing nearest neighbors. The options are:\n\n        - *auto* (default): the method is chosen automatically, based on the\n          type of data and the distance. If the distance is 'manhattan' or\n          'euclidean' and the features are numeric or vectors of numeric\n          values, then the 'ball_tree' method is used. Otherwise, the\n          'brute_force' method is used.\n\n        - *ball_tree*: use a tree structure to find the k-closest neighbors to\n          each query point. The ball tree model is slower to construct than the\n          brute force model, but queries are faster than linear time. This\n          method is not applicable for the cosine and dot product distances.\n          See `Liu, et al (2004)\n          <http://papers.nips.cc/paper/2666-an-investigation-of-p\n          ractical-approximat e-nearest-neighbor-algorithms>`_ for\n          implementation details.\n\n        - *brute_force*: compute the distance from a query point to all\n          reference observations. There is no computation time for model\n          creation with the brute force method (although the reference data is\n          held in the model, but each query takes linear time.\n\n        - *lsh*: use Locality Sensitive Hashing (LSH) to find approximate\n          nearest neighbors efficiently. The LSH model supports 'euclidean',\n          'squared_euclidean', 'manhattan', 'cosine', 'jaccard', 'dot_product'\n          (deprecated), and 'transformed_dot_product' distances. Two options\n          are provided for LSH -- ``num_tables`` and\n          ``num_projections_per_table``. See the notes below for details.\n\n    verbose: bool, optional\n        If True, print progress updates and model details.\n\n    **kwargs : optional\n        Options for the distance function and query method.\n\n        - *leaf_size*: for the ball tree method, the number of points in each\n          leaf of the tree. The default is to use the max of 1,000 and\n          n/(2^11), which ensures a maximum tree depth of 12.\n\n        - *num_tables*: For the LSH method, the number of hash tables\n          constructed. The default value is 20. We recommend choosing values\n          from 10 to 30.\n\n        - *num_projections_per_table*: For the LSH method, the number of\n          projections/hash functions for each hash table. The default value is\n          4 for 'jaccard' distance, 16 for 'cosine' distance and 8 for other\n          distances. We recommend using number 2 ~ 6 for 'jaccard' distance, 8\n          ~ 20 for 'cosine' distance and 4 ~ 12 for other distances.\n\n    Returns\n    -------\n    out : NearestNeighborsModel\n        A structure for efficiently computing the nearest neighbors in 'dataset'\n        of new query points.\n\n    See Also\n    --------\n    NearestNeighborsModel.query, turicreate.toolkits.distances\n\n    Notes\n    -----\n    - Missing data is not allowed in the 'dataset' provided to this function.\n      Please use the :func:`turicreate.SFrame.fillna` and\n      :func:`turicreate.SFrame.dropna` utilities to handle missing data before\n      creating a nearest neighbors model.\n\n    - Missing keys in sparse vectors are assumed to have value 0.\n\n    - The `composite_params` parameter was removed as of Turi Create\n      version 1.5. The `distance` parameter now accepts either standard or\n      composite distances. Please see the :mod:`~turicreate.toolkits.distances`\n      module documentation for more information on composite distances.\n\n    - If the features should be weighted equally in the distance calculations\n      but are measured on different scales, it is important to standardize the\n      features. One way to do this is to subtract the mean of each column and\n      divide by the standard deviation.\n\n    **Locality Sensitive Hashing (LSH)**\n\n    There are several efficient nearest neighbors search algorithms that work\n    well for data with low dimensions :math:`d` (approximately 50). However,\n    most of the solutions suffer from either space or query time that is\n    exponential in :math:`d`. For large :math:`d`, they often provide little,\n    if any, improvement over the 'brute_force' method. This is a well-known\n    consequence of the phenomenon called `The Curse of Dimensionality`.\n\n    `Locality Sensitive Hashing (LSH)\n    <https://en.wikipedia.org/wiki/Locality-sensitive_hashing>`_ is an approach\n    that is designed to efficiently solve the *approximate* nearest neighbor\n    search problem for high dimensional data. The key idea of LSH is to hash\n    the data points using several hash functions, so that the probability of\n    collision is much higher for data points which are close to each other than\n    those which are far apart.\n\n    An LSH family is a family of functions :math:`h` which map points from the\n    metric space to a bucket, so that\n\n    - if :math:`d(p, q) \\\\leq R`, then :math:`h(p) = h(q)` with at least probability :math:`p_1`.\n    - if :math:`d(p, q) \\\\geq cR`, then :math:`h(p) = h(q)` with probability at most :math:`p_2`.\n\n    LSH for efficient approximate nearest neighbor search:\n\n    - We define a new family of hash functions :math:`g`, where each\n      function :math:`g` is obtained by concatenating :math:`k` functions\n      :math:`h_1, ..., h_k`, i.e., :math:`g(p)=[h_1(p),...,h_k(p)]`.\n      The algorithm constructs :math:`L` hash tables, each of which\n      corresponds to a different randomly chosen hash function :math:`g`.\n      There are :math:`k \\\\cdot L` hash functions used in total.\n\n    - In the preprocessing step, we hash all :math:`n` reference points\n      into each of the :math:`L` hash tables.\n\n    - Given a query point :math:`q`, the algorithm iterates over the\n      :math:`L` hash functions :math:`g`. For each :math:`g` considered, it\n      retrieves the data points that are hashed into the same bucket as q.\n      These data points from all the :math:`L` hash tables are considered as\n      candidates that are then re-ranked by their real distances with the query\n      data.\n\n    **Note** that the number of tables :math:`L` and the number of hash\n    functions per table :math:`k` are two main parameters. They can be set\n    using the options ``num_tables`` and ``num_projections_per_table``\n    respectively.\n\n    Hash functions for different distances:\n\n    - `euclidean` and `squared_euclidean`:\n      :math:`h(q) = \\\\lfloor \\\\frac{a \\\\cdot q + b}{w} \\\\rfloor` where\n      :math:`a` is a vector, of which the elements are independently\n      sampled from normal distribution, and :math:`b` is a number\n      uniformly sampled from :math:`[0, r]`. :math:`r` is a parameter for the\n      bucket width. We set :math:`r` using the average all-pair `euclidean`\n      distances from a small randomly sampled subset of the reference data.\n\n    - `manhattan`: The hash function of `manhattan` is similar with that of\n      `euclidean`. The only difference is that the elements of `a` are sampled\n      from Cauchy distribution, instead of normal distribution.\n\n    - `cosine`: Random Projection is designed to approximate the cosine\n      distance between vectors. The hash function is :math:`h(q) = sgn(a \\\\cdot\n      q)`, where :math:`a` is randomly sampled normal unit vector.\n\n    - `jaccard`: We use a recently proposed method one permutation hashing by\n      Shrivastava and Li. See the paper `[Shrivastava and Li, UAI 2014]\n      <http://www.auai.org/uai2014/proceedings/individuals/225.pdf>`_ for\n      details.\n\n    - `dot_product`: The reference data points are first transformed to\n      fixed-norm vectors, and then the minimum `dot_product` distance search\n      problem can be solved via finding the reference data with smallest\n      `cosine` distances. See the paper `[Neyshabur and Srebro, ICML 2015]\n      <http://proceedings.mlr.press/v37/neyshabur15.html>`_ for details.\n\n    References\n    ----------\n    - `Wikipedia - nearest neighbor\n      search <http://en.wikipedia.org/wiki/Nearest_neighbor_search>`_\n\n    - `Wikipedia - ball tree <http://en.wikipedia.org/wiki/Ball_tree>`_\n\n    - Ball tree implementation: Liu, T., et al. (2004) `An Investigation of\n      Practical Approximate Nearest Neighbor Algorithms\n      <http://papers.nips.cc/paper/2666-an-investigation-of-p\n      ractical-approximat e-nearest-neighbor-algorithms>`_. Advances in Neural\n      Information Processing Systems pp. 825-832.\n\n    - `Wikipedia - Jaccard distance\n      <http://en.wikipedia.org/wiki/Jaccard_index>`_\n\n    - Weighted Jaccard distance: Chierichetti, F., et al. (2010) `Finding the\n      Jaccard Median\n      <http://theory.stanford.edu/~sergei/papers/soda10-jaccard.pdf>`_.\n      Proceedings of the Twenty-First Annual ACM-SIAM Symposium on Discrete\n      Algorithms. Society for Industrial and Applied Mathematics.\n\n    - `Wikipedia - Cosine distance\n      <http://en.wikipedia.org/wiki/Cosine_similarity>`_\n\n    - `Wikipedia - Levenshtein distance\n      <http://en.wikipedia.org/wiki/Levenshtein_distance>`_\n\n    - Locality Sensitive Hashing : Chapter 3 of the book `Mining Massive\n      Datasets <http://infolab.stanford.edu/~ullman/mmds/ch3.pdf>`_.\n\n    Examples\n    --------\n    Construct a nearest neighbors model with automatically determined method\n    and distance:\n\n    >>> sf = turicreate.SFrame({'X1': [0.98, 0.62, 0.11],\n    ...                       'X2': [0.69, 0.58, 0.36],\n    ...                       'str_feature': ['cat', 'dog', 'fossa']})\n    >>> model = turicreate.nearest_neighbors.create(sf, features=['X1', 'X2'])\n\n    For datasets with a large number of rows and up to about 100 variables, the\n    ball tree method often leads to much faster queries.\n\n    >>> model = turicreate.nearest_neighbors.create(sf, features=['X1', 'X2'],\n    ...                                           method='ball_tree')\n\n    Often the final determination of a neighbor is based on several distance\n    computations over different sets of features. Each part of this composite\n    distance may have a different relative weight.\n\n    >>> my_dist = [[['X1', 'X2'], 'euclidean', 2.],\n    ...            [['str_feature'], 'levenshtein', 3.]]\n    ...\n    >>> model = turicreate.nearest_neighbors.create(sf, distance=my_dist)\n    \"\"\"\n\n    ## Validate the 'dataset' input\n    _tkutl._raise_error_if_not_sframe(dataset, \"dataset\")\n    _tkutl._raise_error_if_sframe_empty(dataset, \"dataset\")\n\n    ## Basic validation of the features input\n    if features is not None and not isinstance(features, list):\n        raise TypeError(\"If specified, input 'features' must be a list of \" +\n                        \"strings.\")\n\n    ## Clean the method options and create the options dictionary\n    allowed_kwargs = ['leaf_size', 'num_tables', 'num_projections_per_table']\n    _method_options = {}\n\n    for k, v in kwargs.items():\n        if k in allowed_kwargs:\n            _method_options[k] = v\n        else:\n            raise _ToolkitError(\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \" +\n                                \"check for capitalization and other typos.\")\n\n\n    ## Exclude inappropriate combinations of method an distance\n    if method == 'ball_tree' and (distance == 'cosine'\n                                  or distance == _turicreate.distances.cosine\n                                  or distance == 'dot_product'\n                                  or distance == _turicreate.distances.dot_product\n                                  or distance == 'transformed_dot_product'\n                                  or distance == _turicreate.distances.transformed_dot_product):\n        raise TypeError(\"The ball tree method does not work with 'cosine' \" +\n                        \"'dot_product', or 'transformed_dot_product' distance.\" +\n                        \"Please use the 'brute_force' method for these distances.\")\n\n\n    if method == 'lsh' and ('num_projections_per_table' not in _method_options):\n        if distance == 'jaccard' or distance == _turicreate.distances.jaccard:\n            _method_options['num_projections_per_table'] = 4\n        elif distance == 'cosine' or distance == _turicreate.distances.cosine:\n            _method_options['num_projections_per_table'] = 16\n        else:\n            _method_options['num_projections_per_table'] = 8\n\n    ## Initial validation and processing of the label\n    if label is None:\n        _label = _robust_column_name('__id', dataset.column_names())\n        _dataset = dataset.add_row_number(_label)\n    else:\n        _label = label\n        _dataset = _copy.copy(dataset)\n\n    col_type_map = {c:_dataset[c].dtype for c in _dataset.column_names()}\n    _validate_row_label(_label, col_type_map)\n    ref_labels = _dataset[_label]\n\n\n    ## Determine the internal list of available feature names (may still include\n    #  the row label name).\n    if features is None:\n        _features = _dataset.column_names()\n    else:\n        _features = _copy.deepcopy(features)\n\n\n    ## Check if there's only one feature and it's the same as the row label.\n    #  This would also be trapped by the composite distance validation, but the\n    #  error message is not very informative for the user.\n    free_features = set(_features).difference([_label])\n    if len(free_features) < 1:\n        raise _ToolkitError(\"The only available feature is the same as the \" +\n                            \"row label column. Please specify features \" +\n                            \"that are not also row labels.\")\n\n\n    ### Validate and preprocess the distance function\n    ### ---------------------------------------------\n    # - The form of the 'distance' controls how we interact with the 'features'\n    #   parameter as well.\n    # - At this point, the row label 'label' may still be in the list(s) of\n    #   features.\n\n    ## Convert any distance function input into a single composite distance.\n    # distance is already a composite distance\n    if isinstance(distance, list):\n        distance = _copy.deepcopy(distance)\n\n    # distance is a single name (except 'auto') or function handle.\n    elif (hasattr(distance, '__call__') or\n        (isinstance(distance, str) and not distance == 'auto')):\n        distance = [[_features, distance, 1]]\n\n    # distance is unspecified and needs to be constructed.\n    elif distance is None or distance == 'auto':\n        sample = _dataset.head()\n        distance = _construct_auto_distance(_features,\n                                            _dataset.column_names(),\n                                            _dataset.column_types(),\n                                            sample)\n\n    else:\n        raise TypeError(\"Input 'distance' not understood. The 'distance' \"\n                        \" argument must be a string, function handle, or \" +\n                        \"composite distance.\")\n\n    ## Basic composite distance validation, remove the row label from all\n    #  feature lists, and convert string distance names into distance functions.\n    distance = _scrub_composite_distance_features(distance, [_label])\n    distance = _convert_distance_names_to_functions(distance)\n    _validate_composite_distance(distance)\n\n    ## Raise an error if any distances are used with non-lists\n    list_features_to_check = []\n    sparse_distances = ['jaccard', 'weighted_jaccard', 'cosine', 'dot_product', 'transformed_dot_product']\n    sparse_distances = [_turicreate.distances.__dict__[k] for k in sparse_distances]\n    for d in distance:\n        feature_names, dist, _ = d\n        list_features = [f for f in feature_names if _dataset[f].dtype == list]\n        for f in list_features:\n            if dist in sparse_distances:\n                list_features_to_check.append(f)\n            else:\n                raise TypeError(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")\n    for f in list_features_to_check:\n        only_str_lists = _validate_lists(_dataset[f], [str])\n        if not only_str_lists:\n            raise TypeError(\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \" +\n                            \"any list features accordingly before creating \" +\n                            \"the nearest neighbors model.\")\n\n    ## Raise an error if any component has string features are in single columns\n    for d in distance:\n        feature_names, dist, _ = d\n\n        if (len(feature_names) > 1) and (dist == _turicreate.distances.levenshtein):\n            raise ValueError(\"Levenshtein distance cannot be used with multiple \" +\n                             \"columns. Please concatenate strings into a single \" +\n                             \"column before creating the nearest neighbors model.\")\n\n    ## Get the union of feature names and make a clean dataset.\n    clean_features = _get_composite_distance_features(distance)\n    sf_clean = _tkutl._toolkits_select_columns(_dataset, clean_features)\n\n\n    ## Decide which method to use\n    ## - If more than one distance component (specified either directly or\n    #  generated automatically because distance set to 'auto'), then do brute\n    #  force.\n    if len(distance) > 1:\n        _method = 'brute_force'\n\n        if method != 'brute_force' and verbose is True:\n            print(\"Defaulting to brute force instead of ball tree because \" +\\\n                \"there are multiple distance components.\")\n\n    else:\n        if method == 'auto':\n\n            # get the total number of variables. Assume the number of elements in\n            # array type columns does not change\n            num_variables = sum([len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])])\n\n            # flag if all the features in the single composite are of numeric\n            # type.\n            numeric_type_flag = all([x in [int, float, list, array.array]\n                for x in sf_clean.column_types()])\n\n            ## Conditions necessary for ball tree to work and be worth it\n            if ((distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])\n                    and numeric_type_flag is True\n                    and num_variables <= 200):\n\n                    _method = 'ball_tree'\n\n            else:\n                _method = 'brute_force'\n\n        else:\n            _method = method\n\n\n    ## Pick the right model name for the method\n    if _method == 'ball_tree':\n        model_name = 'nearest_neighbors_ball_tree'\n\n    elif _method == 'brute_force':\n        model_name = 'nearest_neighbors_brute_force'\n\n    elif _method == 'lsh':\n        model_name = 'nearest_neighbors_lsh'\n\n    else:\n        raise ValueError(\"Method must be 'auto', 'ball_tree', 'brute_force', \" +\n                         \"or 'lsh'.\")\n\n\n    ## Package the model options\n    opts = {}\n    opts.update(_method_options)\n    opts.update(\n        {'model_name': model_name,\n        'ref_labels': ref_labels,\n        'label': label,\n        'sf_features': sf_clean,\n        'composite_params': distance})\n\n    ## Construct the nearest neighbors model\n    with QuietProgress(verbose):\n        result = _turicreate.extensions._nearest_neighbors.train(opts)\n\n    model_proxy = result['model']\n    model = NearestNeighborsModel(model_proxy)\n\n    return model",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 510,
        "column": 16
      },
      "text": "def create(dataset, label=None, features=None, distance=None, method='auto',\n           verbose=True, **kwargs):\n    \"\"\"\n    Create a nearest neighbor model, which can be searched efficiently and\n    quickly for the nearest neighbors of a query observation. If the `method`\n    argument is specified as `auto`, the type of model is chosen automatically\n    based on the type of data in `dataset`.\n\n    .. warning::\n\n        The 'dot_product' distance is deprecated and will be removed in future\n        versions of Turi Create. Please use 'transformed_dot_product'\n        distance instead, although note that this is more than a name change;\n        it is a *different* transformation of the dot product of two vectors.\n        Please see the distances module documentation for more details.\n\n    Parameters\n    ----------\n    dataset : SFrame\n        Reference data. If the features for each observation are numeric, they\n        may be in separate columns of 'dataset' or a single column with lists\n        of values. The features may also be in the form of a column of sparse\n        vectors (i.e. dictionaries), with string keys and numeric values.\n\n    label : string, optional\n        Name of the SFrame column with row labels. If 'label' is not specified,\n        row numbers are used to identify reference dataset rows when the model\n        is queried.\n\n    features : list[string], optional\n        Name of the columns with features to use in computing distances between\n        observations and the query points. 'None' (the default) indicates that\n        all columns except the label should be used as features. Each column\n        can be one of the following types:\n\n        - *Numeric*: values of numeric type integer or float.\n\n        - *Array*: list of numeric (integer or float) values. Each list element\n          is treated as a separate variable in the model.\n\n        - *Dictionary*: key-value pairs with numeric (integer or float) values.\n          Each key indicates a separate variable in the model.\n\n        - *List*: list of integer or string values. Each element is treated as\n          a separate variable in the model.\n\n        - *String*: string values.\n\n        Please note: if a composite distance is also specified, this parameter\n        is ignored.\n\n    distance : string, function, or list[list], optional\n        Function to measure the distance between any two input data rows. This\n        may be one of three types:\n\n        - *String*: the name of a standard distance function. One of\n          'euclidean', 'squared_euclidean', 'manhattan', 'levenshtein',\n          'jaccard', 'weighted_jaccard', 'cosine', 'dot_product' (deprecated),\n          or 'transformed_dot_product'.\n\n        - *Function*: a function handle from the\n          :mod:`~turicreate.toolkits.distances` module.\n\n        - *Composite distance*: the weighted sum of several standard distance\n          functions applied to various features. This is specified as a list of\n          distance components, each of which is itself a list containing three\n          items:\n\n          1. list or tuple of feature names (strings)\n\n          2. standard distance name (string)\n\n          3. scaling factor (int or float)\n\n        For more information about Turi Create distance functions, please\n        see the :py:mod:`~turicreate.toolkits.distances` module.\n\n        If 'distance' is left unspecified or set to 'auto', a composite\n        distance is constructed automatically based on feature types.\n\n    method : {'auto', 'ball_tree', 'brute_force', 'lsh'}, optional\n        Method for computing nearest neighbors. The options are:\n\n        - *auto* (default): the method is chosen automatically, based on the\n          type of data and the distance. If the distance is 'manhattan' or\n          'euclidean' and the features are numeric or vectors of numeric\n          values, then the 'ball_tree' method is used. Otherwise, the\n          'brute_force' method is used.\n\n        - *ball_tree*: use a tree structure to find the k-closest neighbors to\n          each query point. The ball tree model is slower to construct than the\n          brute force model, but queries are faster than linear time. This\n          method is not applicable for the cosine and dot product distances.\n          See `Liu, et al (2004)\n          <http://papers.nips.cc/paper/2666-an-investigation-of-p\n          ractical-approximat e-nearest-neighbor-algorithms>`_ for\n          implementation details.\n\n        - *brute_force*: compute the distance from a query point to all\n          reference observations. There is no computation time for model\n          creation with the brute force method (although the reference data is\n          held in the model, but each query takes linear time.\n\n        - *lsh*: use Locality Sensitive Hashing (LSH) to find approximate\n          nearest neighbors efficiently. The LSH model supports 'euclidean',\n          'squared_euclidean', 'manhattan', 'cosine', 'jaccard', 'dot_product'\n          (deprecated), and 'transformed_dot_product' distances. Two options\n          are provided for LSH -- ``num_tables`` and\n          ``num_projections_per_table``. See the notes below for details.\n\n    verbose: bool, optional\n        If True, print progress updates and model details.\n\n    **kwargs : optional\n        Options for the distance function and query method.\n\n        - *leaf_size*: for the ball tree method, the number of points in each\n          leaf of the tree. The default is to use the max of 1,000 and\n          n/(2^11), which ensures a maximum tree depth of 12.\n\n        - *num_tables*: For the LSH method, the number of hash tables\n          constructed. The default value is 20. We recommend choosing values\n          from 10 to 30.\n\n        - *num_projections_per_table*: For the LSH method, the number of\n          projections/hash functions for each hash table. The default value is\n          4 for 'jaccard' distance, 16 for 'cosine' distance and 8 for other\n          distances. We recommend using number 2 ~ 6 for 'jaccard' distance, 8\n          ~ 20 for 'cosine' distance and 4 ~ 12 for other distances.\n\n    Returns\n    -------\n    out : NearestNeighborsModel\n        A structure for efficiently computing the nearest neighbors in 'dataset'\n        of new query points.\n\n    See Also\n    --------\n    NearestNeighborsModel.query, turicreate.toolkits.distances\n\n    Notes\n    -----\n    - Missing data is not allowed in the 'dataset' provided to this function.\n      Please use the :func:`turicreate.SFrame.fillna` and\n      :func:`turicreate.SFrame.dropna` utilities to handle missing data before\n      creating a nearest neighbors model.\n\n    - Missing keys in sparse vectors are assumed to have value 0.\n\n    - The `composite_params` parameter was removed as of Turi Create\n      version 1.5. The `distance` parameter now accepts either standard or\n      composite distances. Please see the :mod:`~turicreate.toolkits.distances`\n      module documentation for more information on composite distances.\n\n    - If the features should be weighted equally in the distance calculations\n      but are measured on different scales, it is important to standardize the\n      features. One way to do this is to subtract the mean of each column and\n      divide by the standard deviation.\n\n    **Locality Sensitive Hashing (LSH)**\n\n    There are several efficient nearest neighbors search algorithms that work\n    well for data with low dimensions :math:`d` (approximately 50). However,\n    most of the solutions suffer from either space or query time that is\n    exponential in :math:`d`. For large :math:`d`, they often provide little,\n    if any, improvement over the 'brute_force' method. This is a well-known\n    consequence of the phenomenon called `The Curse of Dimensionality`.\n\n    `Locality Sensitive Hashing (LSH)\n    <https://en.wikipedia.org/wiki/Locality-sensitive_hashing>`_ is an approach\n    that is designed to efficiently solve the *approximate* nearest neighbor\n    search problem for high dimensional data. The key idea of LSH is to hash\n    the data points using several hash functions, so that the probability of\n    collision is much higher for data points which are close to each other than\n    those which are far apart.\n\n    An LSH family is a family of functions :math:`h` which map points from the\n    metric space to a bucket, so that\n\n    - if :math:`d(p, q) \\\\leq R`, then :math:`h(p) = h(q)` with at least probability :math:`p_1`.\n    - if :math:`d(p, q) \\\\geq cR`, then :math:`h(p) = h(q)` with probability at most :math:`p_2`.\n\n    LSH for efficient approximate nearest neighbor search:\n\n    - We define a new family of hash functions :math:`g`, where each\n      function :math:`g` is obtained by concatenating :math:`k` functions\n      :math:`h_1, ..., h_k`, i.e., :math:`g(p)=[h_1(p),...,h_k(p)]`.\n      The algorithm constructs :math:`L` hash tables, each of which\n      corresponds to a different randomly chosen hash function :math:`g`.\n      There are :math:`k \\\\cdot L` hash functions used in total.\n\n    - In the preprocessing step, we hash all :math:`n` reference points\n      into each of the :math:`L` hash tables.\n\n    - Given a query point :math:`q`, the algorithm iterates over the\n      :math:`L` hash functions :math:`g`. For each :math:`g` considered, it\n      retrieves the data points that are hashed into the same bucket as q.\n      These data points from all the :math:`L` hash tables are considered as\n      candidates that are then re-ranked by their real distances with the query\n      data.\n\n    **Note** that the number of tables :math:`L` and the number of hash\n    functions per table :math:`k` are two main parameters. They can be set\n    using the options ``num_tables`` and ``num_projections_per_table``\n    respectively.\n\n    Hash functions for different distances:\n\n    - `euclidean` and `squared_euclidean`:\n      :math:`h(q) = \\\\lfloor \\\\frac{a \\\\cdot q + b}{w} \\\\rfloor` where\n      :math:`a` is a vector, of which the elements are independently\n      sampled from normal distribution, and :math:`b` is a number\n      uniformly sampled from :math:`[0, r]`. :math:`r` is a parameter for the\n      bucket width. We set :math:`r` using the average all-pair `euclidean`\n      distances from a small randomly sampled subset of the reference data.\n\n    - `manhattan`: The hash function of `manhattan` is similar with that of\n      `euclidean`. The only difference is that the elements of `a` are sampled\n      from Cauchy distribution, instead of normal distribution.\n\n    - `cosine`: Random Projection is designed to approximate the cosine\n      distance between vectors. The hash function is :math:`h(q) = sgn(a \\\\cdot\n      q)`, where :math:`a` is randomly sampled normal unit vector.\n\n    - `jaccard`: We use a recently proposed method one permutation hashing by\n      Shrivastava and Li. See the paper `[Shrivastava and Li, UAI 2014]\n      <http://www.auai.org/uai2014/proceedings/individuals/225.pdf>`_ for\n      details.\n\n    - `dot_product`: The reference data points are first transformed to\n      fixed-norm vectors, and then the minimum `dot_product` distance search\n      problem can be solved via finding the reference data with smallest\n      `cosine` distances. See the paper `[Neyshabur and Srebro, ICML 2015]\n      <http://proceedings.mlr.press/v37/neyshabur15.html>`_ for details.\n\n    References\n    ----------\n    - `Wikipedia - nearest neighbor\n      search <http://en.wikipedia.org/wiki/Nearest_neighbor_search>`_\n\n    - `Wikipedia - ball tree <http://en.wikipedia.org/wiki/Ball_tree>`_\n\n    - Ball tree implementation: Liu, T., et al. (2004) `An Investigation of\n      Practical Approximate Nearest Neighbor Algorithms\n      <http://papers.nips.cc/paper/2666-an-investigation-of-p\n      ractical-approximat e-nearest-neighbor-algorithms>`_. Advances in Neural\n      Information Processing Systems pp. 825-832.\n\n    - `Wikipedia - Jaccard distance\n      <http://en.wikipedia.org/wiki/Jaccard_index>`_\n\n    - Weighted Jaccard distance: Chierichetti, F., et al. (2010) `Finding the\n      Jaccard Median\n      <http://theory.stanford.edu/~sergei/papers/soda10-jaccard.pdf>`_.\n      Proceedings of the Twenty-First Annual ACM-SIAM Symposium on Discrete\n      Algorithms. Society for Industrial and Applied Mathematics.\n\n    - `Wikipedia - Cosine distance\n      <http://en.wikipedia.org/wiki/Cosine_similarity>`_\n\n    - `Wikipedia - Levenshtein distance\n      <http://en.wikipedia.org/wiki/Levenshtein_distance>`_\n\n    - Locality Sensitive Hashing : Chapter 3 of the book `Mining Massive\n      Datasets <http://infolab.stanford.edu/~ullman/mmds/ch3.pdf>`_.\n\n    Examples\n    --------\n    Construct a nearest neighbors model with automatically determined method\n    and distance:\n\n    >>> sf = turicreate.SFrame({'X1': [0.98, 0.62, 0.11],\n    ...                       'X2': [0.69, 0.58, 0.36],\n    ...                       'str_feature': ['cat', 'dog', 'fossa']})\n    >>> model = turicreate.nearest_neighbors.create(sf, features=['X1', 'X2'])\n\n    For datasets with a large number of rows and up to about 100 variables, the\n    ball tree method often leads to much faster queries.\n\n    >>> model = turicreate.nearest_neighbors.create(sf, features=['X1', 'X2'],\n    ...                                           method='ball_tree')\n\n    Often the final determination of a neighbor is based on several distance\n    computations over different sets of features. Each part of this composite\n    distance may have a different relative weight.\n\n    >>> my_dist = [[['X1', 'X2'], 'euclidean', 2.],\n    ...            [['str_feature'], 'levenshtein', 3.]]\n    ...\n    >>> model = turicreate.nearest_neighbors.create(sf, distance=my_dist)\n    \"\"\"\n\n    ## Validate the 'dataset' input\n    _tkutl._raise_error_if_not_sframe(dataset, \"dataset\")\n    _tkutl._raise_error_if_sframe_empty(dataset, \"dataset\")\n\n    ## Basic validation of the features input\n    if features is not None and not isinstance(features, list):\n        raise TypeError(\"If specified, input 'features' must be a list of \" +\n                        \"strings.\")\n\n    ## Clean the method options and create the options dictionary\n    allowed_kwargs = ['leaf_size', 'num_tables', 'num_projections_per_table']\n    _method_options = {}\n\n    for k, v in kwargs.items():\n        if k in allowed_kwargs:\n            _method_options[k] = v\n        else:\n            raise _ToolkitError(\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \" +\n                                \"check for capitalization and other typos.\")\n\n\n    ## Exclude inappropriate combinations of method an distance\n    if method == 'ball_tree' and (distance == 'cosine'\n                                  or distance == _turicreate.distances.cosine\n                                  or distance == 'dot_product'\n                                  or distance == _turicreate.distances.dot_product\n                                  or distance == 'transformed_dot_product'\n                                  or distance == _turicreate.distances.transformed_dot_product):\n        raise TypeError(\"The ball tree method does not work with 'cosine' \" +\n                        \"'dot_product', or 'transformed_dot_product' distance.\" +\n                        \"Please use the 'brute_force' method for these distances.\")\n\n\n    if method == 'lsh' and ('num_projections_per_table' not in _method_options):\n        if distance == 'jaccard' or distance == _turicreate.distances.jaccard:\n            _method_options['num_projections_per_table'] = 4\n        elif distance == 'cosine' or distance == _turicreate.distances.cosine:\n            _method_options['num_projections_per_table'] = 16\n        else:\n            _method_options['num_projections_per_table'] = 8\n\n    ## Initial validation and processing of the label\n    if label is None:\n        _label = _robust_column_name('__id', dataset.column_names())\n        _dataset = dataset.add_row_number(_label)\n    else:\n        _label = label\n        _dataset = _copy.copy(dataset)\n\n    col_type_map = {c:_dataset[c].dtype for c in _dataset.column_names()}\n    _validate_row_label(_label, col_type_map)\n    ref_labels = _dataset[_label]\n\n\n    ## Determine the internal list of available feature names (may still include\n    #  the row label name).\n    if features is None:\n        _features = _dataset.column_names()\n    else:\n        _features = _copy.deepcopy(features)\n\n\n    ## Check if there's only one feature and it's the same as the row label.\n    #  This would also be trapped by the composite distance validation, but the\n    #  error message is not very informative for the user.\n    free_features = set(_features).difference([_label])\n    if len(free_features) < 1:\n        raise _ToolkitError(\"The only available feature is the same as the \" +\n                            \"row label column. Please specify features \" +\n                            \"that are not also row labels.\")\n\n\n    ### Validate and preprocess the distance function\n    ### ---------------------------------------------\n    # - The form of the 'distance' controls how we interact with the 'features'\n    #   parameter as well.\n    # - At this point, the row label 'label' may still be in the list(s) of\n    #   features.\n\n    ## Convert any distance function input into a single composite distance.\n    # distance is already a composite distance\n    if isinstance(distance, list):\n        distance = _copy.deepcopy(distance)\n\n    # distance is a single name (except 'auto') or function handle.\n    elif (hasattr(distance, '__call__') or\n        (isinstance(distance, str) and not distance == 'auto')):\n        distance = [[_features, distance, 1]]\n\n    # distance is unspecified and needs to be constructed.\n    elif distance is None or distance == 'auto':\n        sample = _dataset.head()\n        distance = _construct_auto_distance(_features,\n                                            _dataset.column_names(),\n                                            _dataset.column_types(),\n                                            sample)\n\n    else:\n        raise TypeError(\"Input 'distance' not understood. The 'distance' \"\n                        \" argument must be a string, function handle, or \" +\n                        \"composite distance.\")\n\n    ## Basic composite distance validation, remove the row label from all\n    #  feature lists, and convert string distance names into distance functions.\n    distance = _scrub_composite_distance_features(distance, [_label])\n    distance = _convert_distance_names_to_functions(distance)\n    _validate_composite_distance(distance)\n\n    ## Raise an error if any distances are used with non-lists\n    list_features_to_check = []\n    sparse_distances = ['jaccard', 'weighted_jaccard', 'cosine', 'dot_product', 'transformed_dot_product']\n    sparse_distances = [_turicreate.distances.__dict__[k] for k in sparse_distances]\n    for d in distance:\n        feature_names, dist, _ = d\n        list_features = [f for f in feature_names if _dataset[f].dtype == list]\n        for f in list_features:\n            if dist in sparse_distances:\n                list_features_to_check.append(f)\n            else:\n                raise TypeError(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")\n    for f in list_features_to_check:\n        only_str_lists = _validate_lists(_dataset[f], [str])\n        if not only_str_lists:\n            raise TypeError(\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \" +\n                            \"any list features accordingly before creating \" +\n                            \"the nearest neighbors model.\")\n\n    ## Raise an error if any component has string features are in single columns\n    for d in distance:\n        feature_names, dist, _ = d\n\n        if (len(feature_names) > 1) and (dist == _turicreate.distances.levenshtein):\n            raise ValueError(\"Levenshtein distance cannot be used with multiple \" +\n                             \"columns. Please concatenate strings into a single \" +\n                             \"column before creating the nearest neighbors model.\")\n\n    ## Get the union of feature names and make a clean dataset.\n    clean_features = _get_composite_distance_features(distance)\n    sf_clean = _tkutl._toolkits_select_columns(_dataset, clean_features)\n\n\n    ## Decide which method to use\n    ## - If more than one distance component (specified either directly or\n    #  generated automatically because distance set to 'auto'), then do brute\n    #  force.\n    if len(distance) > 1:\n        _method = 'brute_force'\n\n        if method != 'brute_force' and verbose is True:\n            print(\"Defaulting to brute force instead of ball tree because \" +\\\n                \"there are multiple distance components.\")\n\n    else:\n        if method == 'auto':\n\n            # get the total number of variables. Assume the number of elements in\n            # array type columns does not change\n            num_variables = sum([len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])])\n\n            # flag if all the features in the single composite are of numeric\n            # type.\n            numeric_type_flag = all([x in [int, float, list, array.array]\n                for x in sf_clean.column_types()])\n\n            ## Conditions necessary for ball tree to work and be worth it\n            if ((distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])\n                    and numeric_type_flag is True\n                    and num_variables <= 200):\n\n                    _method = 'ball_tree'\n\n            else:\n                _method = 'brute_force'\n\n        else:\n            _method = method\n\n\n    ## Pick the right model name for the method\n    if _method == 'ball_tree':\n        model_name = 'nearest_neighbors_ball_tree'\n\n    elif _method == 'brute_force':\n        model_name = 'nearest_neighbors_brute_force'\n\n    elif _method == 'lsh':\n        model_name = 'nearest_neighbors_lsh'\n\n    else:\n        raise ValueError(\"Method must be 'auto', 'ball_tree', 'brute_force', \" +\n                         \"or 'lsh'.\")\n\n\n    ## Package the model options\n    opts = {}\n    opts.update(_method_options)\n    opts.update(\n        {'model_name': model_name,\n        'ref_labels': ref_labels,\n        'label': label,\n        'sf_features': sf_clean,\n        'composite_params': distance})\n\n    ## Construct the nearest neighbors model\n    with QuietProgress(verbose):\n        result = _turicreate.extensions._nearest_neighbors.train(opts)\n\n    model_proxy = result['model']\n    model = NearestNeighborsModel(model_proxy)\n\n    return model",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 10
          },
          "text": "create"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 10
          },
          "end": {
            "row": 1,
            "column": 34
          },
          "text": "(dataset, label=None, features=None, distance=None, method='auto',\n           verbose=True, **kwargs)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 10
              },
              "end": {
                "row": 0,
                "column": 11
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 11
              },
              "end": {
                "row": 0,
                "column": 18
              },
              "text": "dataset"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 18
              },
              "end": {
                "row": 0,
                "column": 19
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 30
              },
              "text": "label=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 20
                  },
                  "end": {
                    "row": 0,
                    "column": 25
                  },
                  "text": "label"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 25
                  },
                  "end": {
                    "row": 0,
                    "column": 26
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 26
                  },
                  "end": {
                    "row": 0,
                    "column": 30
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 30
              },
              "end": {
                "row": 0,
                "column": 31
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 32
              },
              "end": {
                "row": 0,
                "column": 45
              },
              "text": "features=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 32
                  },
                  "end": {
                    "row": 0,
                    "column": 40
                  },
                  "text": "features"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 40
                  },
                  "end": {
                    "row": 0,
                    "column": 41
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 41
                  },
                  "end": {
                    "row": 0,
                    "column": 45
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 45
              },
              "end": {
                "row": 0,
                "column": 46
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 47
              },
              "end": {
                "row": 0,
                "column": 60
              },
              "text": "distance=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 47
                  },
                  "end": {
                    "row": 0,
                    "column": 55
                  },
                  "text": "distance"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 55
                  },
                  "end": {
                    "row": 0,
                    "column": 56
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 56
                  },
                  "end": {
                    "row": 0,
                    "column": 60
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 60
              },
              "end": {
                "row": 0,
                "column": 61
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 62
              },
              "end": {
                "row": 0,
                "column": 75
              },
              "text": "method='auto'",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 62
                  },
                  "end": {
                    "row": 0,
                    "column": 68
                  },
                  "text": "method"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 68
                  },
                  "end": {
                    "row": 0,
                    "column": 69
                  },
                  "text": "="
                },
                {
                  "type": "string",
                  "start": {
                    "row": 0,
                    "column": 69
                  },
                  "end": {
                    "row": 0,
                    "column": 75
                  },
                  "text": "'auto'",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 0,
                        "column": 69
                      },
                      "end": {
                        "row": 0,
                        "column": 70
                      },
                      "text": "'"
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 0,
                        "column": 70
                      },
                      "end": {
                        "row": 0,
                        "column": 74
                      },
                      "text": "auto"
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 0,
                        "column": 74
                      },
                      "end": {
                        "row": 0,
                        "column": 75
                      },
                      "text": "'"
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 75
              },
              "end": {
                "row": 0,
                "column": 76
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 1,
                "column": 11
              },
              "end": {
                "row": 1,
                "column": 23
              },
              "text": "verbose=True",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 1,
                    "column": 11
                  },
                  "end": {
                    "row": 1,
                    "column": 18
                  },
                  "text": "verbose"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 1,
                    "column": 18
                  },
                  "end": {
                    "row": 1,
                    "column": 19
                  },
                  "text": "="
                },
                {
                  "type": "true",
                  "start": {
                    "row": 1,
                    "column": 19
                  },
                  "end": {
                    "row": 1,
                    "column": 23
                  },
                  "text": "True"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 1,
                "column": 23
              },
              "end": {
                "row": 1,
                "column": 24
              },
              "text": ","
            },
            {
              "type": "dictionary_splat_pattern",
              "start": {
                "row": 1,
                "column": 25
              },
              "end": {
                "row": 1,
                "column": 33
              },
              "text": "**kwargs",
              "children": [
                {
                  "type": "**",
                  "start": {
                    "row": 1,
                    "column": 25
                  },
                  "end": {
                    "row": 1,
                    "column": 27
                  },
                  "text": "**"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 1,
                    "column": 27
                  },
                  "end": {
                    "row": 1,
                    "column": 33
                  },
                  "text": "kwargs"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 1,
                "column": 33
              },
              "end": {
                "row": 1,
                "column": 34
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 1,
            "column": 34
          },
          "end": {
            "row": 1,
            "column": 35
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 2,
            "column": 4
          },
          "end": {
            "row": 510,
            "column": 16
          },
          "text": "\"\"\"\n    Create a nearest neighbor model, which can be searched efficiently and\n    quickly for the nearest neighbors of a query observation. If the `method`\n    argument is specified as `auto`, the type of model is chosen automatically\n    based on the type of data in `dataset`.\n\n    .. warning::\n\n        The 'dot_product' distance is deprecated and will be removed in future\n        versions of Turi Create. Please use 'transformed_dot_product'\n        distance instead, although note that this is more than a name change;\n        it is a *different* transformation of the dot product of two vectors.\n        Please see the distances module documentation for more details.\n\n    Parameters\n    ----------\n    dataset : SFrame\n        Reference data. If the features for each observation are numeric, they\n        may be in separate columns of 'dataset' or a single column with lists\n        of values. The features may also be in the form of a column of sparse\n        vectors (i.e. dictionaries), with string keys and numeric values.\n\n    label : string, optional\n        Name of the SFrame column with row labels. If 'label' is not specified,\n        row numbers are used to identify reference dataset rows when the model\n        is queried.\n\n    features : list[string], optional\n        Name of the columns with features to use in computing distances between\n        observations and the query points. 'None' (the default) indicates that\n        all columns except the label should be used as features. Each column\n        can be one of the following types:\n\n        - *Numeric*: values of numeric type integer or float.\n\n        - *Array*: list of numeric (integer or float) values. Each list element\n          is treated as a separate variable in the model.\n\n        - *Dictionary*: key-value pairs with numeric (integer or float) values.\n          Each key indicates a separate variable in the model.\n\n        - *List*: list of integer or string values. Each element is treated as\n          a separate variable in the model.\n\n        - *String*: string values.\n\n        Please note: if a composite distance is also specified, this parameter\n        is ignored.\n\n    distance : string, function, or list[list], optional\n        Function to measure the distance between any two input data rows. This\n        may be one of three types:\n\n        - *String*: the name of a standard distance function. One of\n          'euclidean', 'squared_euclidean', 'manhattan', 'levenshtein',\n          'jaccard', 'weighted_jaccard', 'cosine', 'dot_product' (deprecated),\n          or 'transformed_dot_product'.\n\n        - *Function*: a function handle from the\n          :mod:`~turicreate.toolkits.distances` module.\n\n        - *Composite distance*: the weighted sum of several standard distance\n          functions applied to various features. This is specified as a list of\n          distance components, each of which is itself a list containing three\n          items:\n\n          1. list or tuple of feature names (strings)\n\n          2. standard distance name (string)\n\n          3. scaling factor (int or float)\n\n        For more information about Turi Create distance functions, please\n        see the :py:mod:`~turicreate.toolkits.distances` module.\n\n        If 'distance' is left unspecified or set to 'auto', a composite\n        distance is constructed automatically based on feature types.\n\n    method : {'auto', 'ball_tree', 'brute_force', 'lsh'}, optional\n        Method for computing nearest neighbors. The options are:\n\n        - *auto* (default): the method is chosen automatically, based on the\n          type of data and the distance. If the distance is 'manhattan' or\n          'euclidean' and the features are numeric or vectors of numeric\n          values, then the 'ball_tree' method is used. Otherwise, the\n          'brute_force' method is used.\n\n        - *ball_tree*: use a tree structure to find the k-closest neighbors to\n          each query point. The ball tree model is slower to construct than the\n          brute force model, but queries are faster than linear time. This\n          method is not applicable for the cosine and dot product distances.\n          See `Liu, et al (2004)\n          <http://papers.nips.cc/paper/2666-an-investigation-of-p\n          ractical-approximat e-nearest-neighbor-algorithms>`_ for\n          implementation details.\n\n        - *brute_force*: compute the distance from a query point to all\n          reference observations. There is no computation time for model\n          creation with the brute force method (although the reference data is\n          held in the model, but each query takes linear time.\n\n        - *lsh*: use Locality Sensitive Hashing (LSH) to find approximate\n          nearest neighbors efficiently. The LSH model supports 'euclidean',\n          'squared_euclidean', 'manhattan', 'cosine', 'jaccard', 'dot_product'\n          (deprecated), and 'transformed_dot_product' distances. Two options\n          are provided for LSH -- ``num_tables`` and\n          ``num_projections_per_table``. See the notes below for details.\n\n    verbose: bool, optional\n        If True, print progress updates and model details.\n\n    **kwargs : optional\n        Options for the distance function and query method.\n\n        - *leaf_size*: for the ball tree method, the number of points in each\n          leaf of the tree. The default is to use the max of 1,000 and\n          n/(2^11), which ensures a maximum tree depth of 12.\n\n        - *num_tables*: For the LSH method, the number of hash tables\n          constructed. The default value is 20. We recommend choosing values\n          from 10 to 30.\n\n        - *num_projections_per_table*: For the LSH method, the number of\n          projections/hash functions for each hash table. The default value is\n          4 for 'jaccard' distance, 16 for 'cosine' distance and 8 for other\n          distances. We recommend using number 2 ~ 6 for 'jaccard' distance, 8\n          ~ 20 for 'cosine' distance and 4 ~ 12 for other distances.\n\n    Returns\n    -------\n    out : NearestNeighborsModel\n        A structure for efficiently computing the nearest neighbors in 'dataset'\n        of new query points.\n\n    See Also\n    --------\n    NearestNeighborsModel.query, turicreate.toolkits.distances\n\n    Notes\n    -----\n    - Missing data is not allowed in the 'dataset' provided to this function.\n      Please use the :func:`turicreate.SFrame.fillna` and\n      :func:`turicreate.SFrame.dropna` utilities to handle missing data before\n      creating a nearest neighbors model.\n\n    - Missing keys in sparse vectors are assumed to have value 0.\n\n    - The `composite_params` parameter was removed as of Turi Create\n      version 1.5. The `distance` parameter now accepts either standard or\n      composite distances. Please see the :mod:`~turicreate.toolkits.distances`\n      module documentation for more information on composite distances.\n\n    - If the features should be weighted equally in the distance calculations\n      but are measured on different scales, it is important to standardize the\n      features. One way to do this is to subtract the mean of each column and\n      divide by the standard deviation.\n\n    **Locality Sensitive Hashing (LSH)**\n\n    There are several efficient nearest neighbors search algorithms that work\n    well for data with low dimensions :math:`d` (approximately 50). However,\n    most of the solutions suffer from either space or query time that is\n    exponential in :math:`d`. For large :math:`d`, they often provide little,\n    if any, improvement over the 'brute_force' method. This is a well-known\n    consequence of the phenomenon called `The Curse of Dimensionality`.\n\n    `Locality Sensitive Hashing (LSH)\n    <https://en.wikipedia.org/wiki/Locality-sensitive_hashing>`_ is an approach\n    that is designed to efficiently solve the *approximate* nearest neighbor\n    search problem for high dimensional data. The key idea of LSH is to hash\n    the data points using several hash functions, so that the probability of\n    collision is much higher for data points which are close to each other than\n    those which are far apart.\n\n    An LSH family is a family of functions :math:`h` which map points from the\n    metric space to a bucket, so that\n\n    - if :math:`d(p, q) \\\\leq R`, then :math:`h(p) = h(q)` with at least probability :math:`p_1`.\n    - if :math:`d(p, q) \\\\geq cR`, then :math:`h(p) = h(q)` with probability at most :math:`p_2`.\n\n    LSH for efficient approximate nearest neighbor search:\n\n    - We define a new family of hash functions :math:`g`, where each\n      function :math:`g` is obtained by concatenating :math:`k` functions\n      :math:`h_1, ..., h_k`, i.e., :math:`g(p)=[h_1(p),...,h_k(p)]`.\n      The algorithm constructs :math:`L` hash tables, each of which\n      corresponds to a different randomly chosen hash function :math:`g`.\n      There are :math:`k \\\\cdot L` hash functions used in total.\n\n    - In the preprocessing step, we hash all :math:`n` reference points\n      into each of the :math:`L` hash tables.\n\n    - Given a query point :math:`q`, the algorithm iterates over the\n      :math:`L` hash functions :math:`g`. For each :math:`g` considered, it\n      retrieves the data points that are hashed into the same bucket as q.\n      These data points from all the :math:`L` hash tables are considered as\n      candidates that are then re-ranked by their real distances with the query\n      data.\n\n    **Note** that the number of tables :math:`L` and the number of hash\n    functions per table :math:`k` are two main parameters. They can be set\n    using the options ``num_tables`` and ``num_projections_per_table``\n    respectively.\n\n    Hash functions for different distances:\n\n    - `euclidean` and `squared_euclidean`:\n      :math:`h(q) = \\\\lfloor \\\\frac{a \\\\cdot q + b}{w} \\\\rfloor` where\n      :math:`a` is a vector, of which the elements are independently\n      sampled from normal distribution, and :math:`b` is a number\n      uniformly sampled from :math:`[0, r]`. :math:`r` is a parameter for the\n      bucket width. We set :math:`r` using the average all-pair `euclidean`\n      distances from a small randomly sampled subset of the reference data.\n\n    - `manhattan`: The hash function of `manhattan` is similar with that of\n      `euclidean`. The only difference is that the elements of `a` are sampled\n      from Cauchy distribution, instead of normal distribution.\n\n    - `cosine`: Random Projection is designed to approximate the cosine\n      distance between vectors. The hash function is :math:`h(q) = sgn(a \\\\cdot\n      q)`, where :math:`a` is randomly sampled normal unit vector.\n\n    - `jaccard`: We use a recently proposed method one permutation hashing by\n      Shrivastava and Li. See the paper `[Shrivastava and Li, UAI 2014]\n      <http://www.auai.org/uai2014/proceedings/individuals/225.pdf>`_ for\n      details.\n\n    - `dot_product`: The reference data points are first transformed to\n      fixed-norm vectors, and then the minimum `dot_product` distance search\n      problem can be solved via finding the reference data with smallest\n      `cosine` distances. See the paper `[Neyshabur and Srebro, ICML 2015]\n      <http://proceedings.mlr.press/v37/neyshabur15.html>`_ for details.\n\n    References\n    ----------\n    - `Wikipedia - nearest neighbor\n      search <http://en.wikipedia.org/wiki/Nearest_neighbor_search>`_\n\n    - `Wikipedia - ball tree <http://en.wikipedia.org/wiki/Ball_tree>`_\n\n    - Ball tree implementation: Liu, T., et al. (2004) `An Investigation of\n      Practical Approximate Nearest Neighbor Algorithms\n      <http://papers.nips.cc/paper/2666-an-investigation-of-p\n      ractical-approximat e-nearest-neighbor-algorithms>`_. Advances in Neural\n      Information Processing Systems pp. 825-832.\n\n    - `Wikipedia - Jaccard distance\n      <http://en.wikipedia.org/wiki/Jaccard_index>`_\n\n    - Weighted Jaccard distance: Chierichetti, F., et al. (2010) `Finding the\n      Jaccard Median\n      <http://theory.stanford.edu/~sergei/papers/soda10-jaccard.pdf>`_.\n      Proceedings of the Twenty-First Annual ACM-SIAM Symposium on Discrete\n      Algorithms. Society for Industrial and Applied Mathematics.\n\n    - `Wikipedia - Cosine distance\n      <http://en.wikipedia.org/wiki/Cosine_similarity>`_\n\n    - `Wikipedia - Levenshtein distance\n      <http://en.wikipedia.org/wiki/Levenshtein_distance>`_\n\n    - Locality Sensitive Hashing : Chapter 3 of the book `Mining Massive\n      Datasets <http://infolab.stanford.edu/~ullman/mmds/ch3.pdf>`_.\n\n    Examples\n    --------\n    Construct a nearest neighbors model with automatically determined method\n    and distance:\n\n    >>> sf = turicreate.SFrame({'X1': [0.98, 0.62, 0.11],\n    ...                       'X2': [0.69, 0.58, 0.36],\n    ...                       'str_feature': ['cat', 'dog', 'fossa']})\n    >>> model = turicreate.nearest_neighbors.create(sf, features=['X1', 'X2'])\n\n    For datasets with a large number of rows and up to about 100 variables, the\n    ball tree method often leads to much faster queries.\n\n    >>> model = turicreate.nearest_neighbors.create(sf, features=['X1', 'X2'],\n    ...                                           method='ball_tree')\n\n    Often the final determination of a neighbor is based on several distance\n    computations over different sets of features. Each part of this composite\n    distance may have a different relative weight.\n\n    >>> my_dist = [[['X1', 'X2'], 'euclidean', 2.],\n    ...            [['str_feature'], 'levenshtein', 3.]]\n    ...\n    >>> model = turicreate.nearest_neighbors.create(sf, distance=my_dist)\n    \"\"\"\n\n    ## Validate the 'dataset' input\n    _tkutl._raise_error_if_not_sframe(dataset, \"dataset\")\n    _tkutl._raise_error_if_sframe_empty(dataset, \"dataset\")\n\n    ## Basic validation of the features input\n    if features is not None and not isinstance(features, list):\n        raise TypeError(\"If specified, input 'features' must be a list of \" +\n                        \"strings.\")\n\n    ## Clean the method options and create the options dictionary\n    allowed_kwargs = ['leaf_size', 'num_tables', 'num_projections_per_table']\n    _method_options = {}\n\n    for k, v in kwargs.items():\n        if k in allowed_kwargs:\n            _method_options[k] = v\n        else:\n            raise _ToolkitError(\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \" +\n                                \"check for capitalization and other typos.\")\n\n\n    ## Exclude inappropriate combinations of method an distance\n    if method == 'ball_tree' and (distance == 'cosine'\n                                  or distance == _turicreate.distances.cosine\n                                  or distance == 'dot_product'\n                                  or distance == _turicreate.distances.dot_product\n                                  or distance == 'transformed_dot_product'\n                                  or distance == _turicreate.distances.transformed_dot_product):\n        raise TypeError(\"The ball tree method does not work with 'cosine' \" +\n                        \"'dot_product', or 'transformed_dot_product' distance.\" +\n                        \"Please use the 'brute_force' method for these distances.\")\n\n\n    if method == 'lsh' and ('num_projections_per_table' not in _method_options):\n        if distance == 'jaccard' or distance == _turicreate.distances.jaccard:\n            _method_options['num_projections_per_table'] = 4\n        elif distance == 'cosine' or distance == _turicreate.distances.cosine:\n            _method_options['num_projections_per_table'] = 16\n        else:\n            _method_options['num_projections_per_table'] = 8\n\n    ## Initial validation and processing of the label\n    if label is None:\n        _label = _robust_column_name('__id', dataset.column_names())\n        _dataset = dataset.add_row_number(_label)\n    else:\n        _label = label\n        _dataset = _copy.copy(dataset)\n\n    col_type_map = {c:_dataset[c].dtype for c in _dataset.column_names()}\n    _validate_row_label(_label, col_type_map)\n    ref_labels = _dataset[_label]\n\n\n    ## Determine the internal list of available feature names (may still include\n    #  the row label name).\n    if features is None:\n        _features = _dataset.column_names()\n    else:\n        _features = _copy.deepcopy(features)\n\n\n    ## Check if there's only one feature and it's the same as the row label.\n    #  This would also be trapped by the composite distance validation, but the\n    #  error message is not very informative for the user.\n    free_features = set(_features).difference([_label])\n    if len(free_features) < 1:\n        raise _ToolkitError(\"The only available feature is the same as the \" +\n                            \"row label column. Please specify features \" +\n                            \"that are not also row labels.\")\n\n\n    ### Validate and preprocess the distance function\n    ### ---------------------------------------------\n    # - The form of the 'distance' controls how we interact with the 'features'\n    #   parameter as well.\n    # - At this point, the row label 'label' may still be in the list(s) of\n    #   features.\n\n    ## Convert any distance function input into a single composite distance.\n    # distance is already a composite distance\n    if isinstance(distance, list):\n        distance = _copy.deepcopy(distance)\n\n    # distance is a single name (except 'auto') or function handle.\n    elif (hasattr(distance, '__call__') or\n        (isinstance(distance, str) and not distance == 'auto')):\n        distance = [[_features, distance, 1]]\n\n    # distance is unspecified and needs to be constructed.\n    elif distance is None or distance == 'auto':\n        sample = _dataset.head()\n        distance = _construct_auto_distance(_features,\n                                            _dataset.column_names(),\n                                            _dataset.column_types(),\n                                            sample)\n\n    else:\n        raise TypeError(\"Input 'distance' not understood. The 'distance' \"\n                        \" argument must be a string, function handle, or \" +\n                        \"composite distance.\")\n\n    ## Basic composite distance validation, remove the row label from all\n    #  feature lists, and convert string distance names into distance functions.\n    distance = _scrub_composite_distance_features(distance, [_label])\n    distance = _convert_distance_names_to_functions(distance)\n    _validate_composite_distance(distance)\n\n    ## Raise an error if any distances are used with non-lists\n    list_features_to_check = []\n    sparse_distances = ['jaccard', 'weighted_jaccard', 'cosine', 'dot_product', 'transformed_dot_product']\n    sparse_distances = [_turicreate.distances.__dict__[k] for k in sparse_distances]\n    for d in distance:\n        feature_names, dist, _ = d\n        list_features = [f for f in feature_names if _dataset[f].dtype == list]\n        for f in list_features:\n            if dist in sparse_distances:\n                list_features_to_check.append(f)\n            else:\n                raise TypeError(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")\n    for f in list_features_to_check:\n        only_str_lists = _validate_lists(_dataset[f], [str])\n        if not only_str_lists:\n            raise TypeError(\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \" +\n                            \"any list features accordingly before creating \" +\n                            \"the nearest neighbors model.\")\n\n    ## Raise an error if any component has string features are in single columns\n    for d in distance:\n        feature_names, dist, _ = d\n\n        if (len(feature_names) > 1) and (dist == _turicreate.distances.levenshtein):\n            raise ValueError(\"Levenshtein distance cannot be used with multiple \" +\n                             \"columns. Please concatenate strings into a single \" +\n                             \"column before creating the nearest neighbors model.\")\n\n    ## Get the union of feature names and make a clean dataset.\n    clean_features = _get_composite_distance_features(distance)\n    sf_clean = _tkutl._toolkits_select_columns(_dataset, clean_features)\n\n\n    ## Decide which method to use\n    ## - If more than one distance component (specified either directly or\n    #  generated automatically because distance set to 'auto'), then do brute\n    #  force.\n    if len(distance) > 1:\n        _method = 'brute_force'\n\n        if method != 'brute_force' and verbose is True:\n            print(\"Defaulting to brute force instead of ball tree because \" +\\\n                \"there are multiple distance components.\")\n\n    else:\n        if method == 'auto':\n\n            # get the total number of variables. Assume the number of elements in\n            # array type columns does not change\n            num_variables = sum([len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])])\n\n            # flag if all the features in the single composite are of numeric\n            # type.\n            numeric_type_flag = all([x in [int, float, list, array.array]\n                for x in sf_clean.column_types()])\n\n            ## Conditions necessary for ball tree to work and be worth it\n            if ((distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])\n                    and numeric_type_flag is True\n                    and num_variables <= 200):\n\n                    _method = 'ball_tree'\n\n            else:\n                _method = 'brute_force'\n\n        else:\n            _method = method\n\n\n    ## Pick the right model name for the method\n    if _method == 'ball_tree':\n        model_name = 'nearest_neighbors_ball_tree'\n\n    elif _method == 'brute_force':\n        model_name = 'nearest_neighbors_brute_force'\n\n    elif _method == 'lsh':\n        model_name = 'nearest_neighbors_lsh'\n\n    else:\n        raise ValueError(\"Method must be 'auto', 'ball_tree', 'brute_force', \" +\n                         \"or 'lsh'.\")\n\n\n    ## Package the model options\n    opts = {}\n    opts.update(_method_options)\n    opts.update(\n        {'model_name': model_name,\n        'ref_labels': ref_labels,\n        'label': label,\n        'sf_features': sf_clean,\n        'composite_params': distance})\n\n    ## Construct the nearest neighbors model\n    with QuietProgress(verbose):\n        result = _turicreate.extensions._nearest_neighbors.train(opts)\n\n    model_proxy = result['model']\n    model = NearestNeighborsModel(model_proxy)\n\n    return model",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 2,
                "column": 4
              },
              "end": {
                "row": 290,
                "column": 7
              },
              "text": "\"\"\"\n    Create a nearest neighbor model, which can be searched efficiently and\n    quickly for the nearest neighbors of a query observation. If the `method`\n    argument is specified as `auto`, the type of model is chosen automatically\n    based on the type of data in `dataset`.\n\n    .. warning::\n\n        The 'dot_product' distance is deprecated and will be removed in future\n        versions of Turi Create. Please use 'transformed_dot_product'\n        distance instead, although note that this is more than a name change;\n        it is a *different* transformation of the dot product of two vectors.\n        Please see the distances module documentation for more details.\n\n    Parameters\n    ----------\n    dataset : SFrame\n        Reference data. If the features for each observation are numeric, they\n        may be in separate columns of 'dataset' or a single column with lists\n        of values. The features may also be in the form of a column of sparse\n        vectors (i.e. dictionaries), with string keys and numeric values.\n\n    label : string, optional\n        Name of the SFrame column with row labels. If 'label' is not specified,\n        row numbers are used to identify reference dataset rows when the model\n        is queried.\n\n    features : list[string], optional\n        Name of the columns with features to use in computing distances between\n        observations and the query points. 'None' (the default) indicates that\n        all columns except the label should be used as features. Each column\n        can be one of the following types:\n\n        - *Numeric*: values of numeric type integer or float.\n\n        - *Array*: list of numeric (integer or float) values. Each list element\n          is treated as a separate variable in the model.\n\n        - *Dictionary*: key-value pairs with numeric (integer or float) values.\n          Each key indicates a separate variable in the model.\n\n        - *List*: list of integer or string values. Each element is treated as\n          a separate variable in the model.\n\n        - *String*: string values.\n\n        Please note: if a composite distance is also specified, this parameter\n        is ignored.\n\n    distance : string, function, or list[list], optional\n        Function to measure the distance between any two input data rows. This\n        may be one of three types:\n\n        - *String*: the name of a standard distance function. One of\n          'euclidean', 'squared_euclidean', 'manhattan', 'levenshtein',\n          'jaccard', 'weighted_jaccard', 'cosine', 'dot_product' (deprecated),\n          or 'transformed_dot_product'.\n\n        - *Function*: a function handle from the\n          :mod:`~turicreate.toolkits.distances` module.\n\n        - *Composite distance*: the weighted sum of several standard distance\n          functions applied to various features. This is specified as a list of\n          distance components, each of which is itself a list containing three\n          items:\n\n          1. list or tuple of feature names (strings)\n\n          2. standard distance name (string)\n\n          3. scaling factor (int or float)\n\n        For more information about Turi Create distance functions, please\n        see the :py:mod:`~turicreate.toolkits.distances` module.\n\n        If 'distance' is left unspecified or set to 'auto', a composite\n        distance is constructed automatically based on feature types.\n\n    method : {'auto', 'ball_tree', 'brute_force', 'lsh'}, optional\n        Method for computing nearest neighbors. The options are:\n\n        - *auto* (default): the method is chosen automatically, based on the\n          type of data and the distance. If the distance is 'manhattan' or\n          'euclidean' and the features are numeric or vectors of numeric\n          values, then the 'ball_tree' method is used. Otherwise, the\n          'brute_force' method is used.\n\n        - *ball_tree*: use a tree structure to find the k-closest neighbors to\n          each query point. The ball tree model is slower to construct than the\n          brute force model, but queries are faster than linear time. This\n          method is not applicable for the cosine and dot product distances.\n          See `Liu, et al (2004)\n          <http://papers.nips.cc/paper/2666-an-investigation-of-p\n          ractical-approximat e-nearest-neighbor-algorithms>`_ for\n          implementation details.\n\n        - *brute_force*: compute the distance from a query point to all\n          reference observations. There is no computation time for model\n          creation with the brute force method (although the reference data is\n          held in the model, but each query takes linear time.\n\n        - *lsh*: use Locality Sensitive Hashing (LSH) to find approximate\n          nearest neighbors efficiently. The LSH model supports 'euclidean',\n          'squared_euclidean', 'manhattan', 'cosine', 'jaccard', 'dot_product'\n          (deprecated), and 'transformed_dot_product' distances. Two options\n          are provided for LSH -- ``num_tables`` and\n          ``num_projections_per_table``. See the notes below for details.\n\n    verbose: bool, optional\n        If True, print progress updates and model details.\n\n    **kwargs : optional\n        Options for the distance function and query method.\n\n        - *leaf_size*: for the ball tree method, the number of points in each\n          leaf of the tree. The default is to use the max of 1,000 and\n          n/(2^11), which ensures a maximum tree depth of 12.\n\n        - *num_tables*: For the LSH method, the number of hash tables\n          constructed. The default value is 20. We recommend choosing values\n          from 10 to 30.\n\n        - *num_projections_per_table*: For the LSH method, the number of\n          projections/hash functions for each hash table. The default value is\n          4 for 'jaccard' distance, 16 for 'cosine' distance and 8 for other\n          distances. We recommend using number 2 ~ 6 for 'jaccard' distance, 8\n          ~ 20 for 'cosine' distance and 4 ~ 12 for other distances.\n\n    Returns\n    -------\n    out : NearestNeighborsModel\n        A structure for efficiently computing the nearest neighbors in 'dataset'\n        of new query points.\n\n    See Also\n    --------\n    NearestNeighborsModel.query, turicreate.toolkits.distances\n\n    Notes\n    -----\n    - Missing data is not allowed in the 'dataset' provided to this function.\n      Please use the :func:`turicreate.SFrame.fillna` and\n      :func:`turicreate.SFrame.dropna` utilities to handle missing data before\n      creating a nearest neighbors model.\n\n    - Missing keys in sparse vectors are assumed to have value 0.\n\n    - The `composite_params` parameter was removed as of Turi Create\n      version 1.5. The `distance` parameter now accepts either standard or\n      composite distances. Please see the :mod:`~turicreate.toolkits.distances`\n      module documentation for more information on composite distances.\n\n    - If the features should be weighted equally in the distance calculations\n      but are measured on different scales, it is important to standardize the\n      features. One way to do this is to subtract the mean of each column and\n      divide by the standard deviation.\n\n    **Locality Sensitive Hashing (LSH)**\n\n    There are several efficient nearest neighbors search algorithms that work\n    well for data with low dimensions :math:`d` (approximately 50). However,\n    most of the solutions suffer from either space or query time that is\n    exponential in :math:`d`. For large :math:`d`, they often provide little,\n    if any, improvement over the 'brute_force' method. This is a well-known\n    consequence of the phenomenon called `The Curse of Dimensionality`.\n\n    `Locality Sensitive Hashing (LSH)\n    <https://en.wikipedia.org/wiki/Locality-sensitive_hashing>`_ is an approach\n    that is designed to efficiently solve the *approximate* nearest neighbor\n    search problem for high dimensional data. The key idea of LSH is to hash\n    the data points using several hash functions, so that the probability of\n    collision is much higher for data points which are close to each other than\n    those which are far apart.\n\n    An LSH family is a family of functions :math:`h` which map points from the\n    metric space to a bucket, so that\n\n    - if :math:`d(p, q) \\\\leq R`, then :math:`h(p) = h(q)` with at least probability :math:`p_1`.\n    - if :math:`d(p, q) \\\\geq cR`, then :math:`h(p) = h(q)` with probability at most :math:`p_2`.\n\n    LSH for efficient approximate nearest neighbor search:\n\n    - We define a new family of hash functions :math:`g`, where each\n      function :math:`g` is obtained by concatenating :math:`k` functions\n      :math:`h_1, ..., h_k`, i.e., :math:`g(p)=[h_1(p),...,h_k(p)]`.\n      The algorithm constructs :math:`L` hash tables, each of which\n      corresponds to a different randomly chosen hash function :math:`g`.\n      There are :math:`k \\\\cdot L` hash functions used in total.\n\n    - In the preprocessing step, we hash all :math:`n` reference points\n      into each of the :math:`L` hash tables.\n\n    - Given a query point :math:`q`, the algorithm iterates over the\n      :math:`L` hash functions :math:`g`. For each :math:`g` considered, it\n      retrieves the data points that are hashed into the same bucket as q.\n      These data points from all the :math:`L` hash tables are considered as\n      candidates that are then re-ranked by their real distances with the query\n      data.\n\n    **Note** that the number of tables :math:`L` and the number of hash\n    functions per table :math:`k` are two main parameters. They can be set\n    using the options ``num_tables`` and ``num_projections_per_table``\n    respectively.\n\n    Hash functions for different distances:\n\n    - `euclidean` and `squared_euclidean`:\n      :math:`h(q) = \\\\lfloor \\\\frac{a \\\\cdot q + b}{w} \\\\rfloor` where\n      :math:`a` is a vector, of which the elements are independently\n      sampled from normal distribution, and :math:`b` is a number\n      uniformly sampled from :math:`[0, r]`. :math:`r` is a parameter for the\n      bucket width. We set :math:`r` using the average all-pair `euclidean`\n      distances from a small randomly sampled subset of the reference data.\n\n    - `manhattan`: The hash function of `manhattan` is similar with that of\n      `euclidean`. The only difference is that the elements of `a` are sampled\n      from Cauchy distribution, instead of normal distribution.\n\n    - `cosine`: Random Projection is designed to approximate the cosine\n      distance between vectors. The hash function is :math:`h(q) = sgn(a \\\\cdot\n      q)`, where :math:`a` is randomly sampled normal unit vector.\n\n    - `jaccard`: We use a recently proposed method one permutation hashing by\n      Shrivastava and Li. See the paper `[Shrivastava and Li, UAI 2014]\n      <http://www.auai.org/uai2014/proceedings/individuals/225.pdf>`_ for\n      details.\n\n    - `dot_product`: The reference data points are first transformed to\n      fixed-norm vectors, and then the minimum `dot_product` distance search\n      problem can be solved via finding the reference data with smallest\n      `cosine` distances. See the paper `[Neyshabur and Srebro, ICML 2015]\n      <http://proceedings.mlr.press/v37/neyshabur15.html>`_ for details.\n\n    References\n    ----------\n    - `Wikipedia - nearest neighbor\n      search <http://en.wikipedia.org/wiki/Nearest_neighbor_search>`_\n\n    - `Wikipedia - ball tree <http://en.wikipedia.org/wiki/Ball_tree>`_\n\n    - Ball tree implementation: Liu, T., et al. (2004) `An Investigation of\n      Practical Approximate Nearest Neighbor Algorithms\n      <http://papers.nips.cc/paper/2666-an-investigation-of-p\n      ractical-approximat e-nearest-neighbor-algorithms>`_. Advances in Neural\n      Information Processing Systems pp. 825-832.\n\n    - `Wikipedia - Jaccard distance\n      <http://en.wikipedia.org/wiki/Jaccard_index>`_\n\n    - Weighted Jaccard distance: Chierichetti, F., et al. (2010) `Finding the\n      Jaccard Median\n      <http://theory.stanford.edu/~sergei/papers/soda10-jaccard.pdf>`_.\n      Proceedings of the Twenty-First Annual ACM-SIAM Symposium on Discrete\n      Algorithms. Society for Industrial and Applied Mathematics.\n\n    - `Wikipedia - Cosine distance\n      <http://en.wikipedia.org/wiki/Cosine_similarity>`_\n\n    - `Wikipedia - Levenshtein distance\n      <http://en.wikipedia.org/wiki/Levenshtein_distance>`_\n\n    - Locality Sensitive Hashing : Chapter 3 of the book `Mining Massive\n      Datasets <http://infolab.stanford.edu/~ullman/mmds/ch3.pdf>`_.\n\n    Examples\n    --------\n    Construct a nearest neighbors model with automatically determined method\n    and distance:\n\n    >>> sf = turicreate.SFrame({'X1': [0.98, 0.62, 0.11],\n    ...                       'X2': [0.69, 0.58, 0.36],\n    ...                       'str_feature': ['cat', 'dog', 'fossa']})\n    >>> model = turicreate.nearest_neighbors.create(sf, features=['X1', 'X2'])\n\n    For datasets with a large number of rows and up to about 100 variables, the\n    ball tree method often leads to much faster queries.\n\n    >>> model = turicreate.nearest_neighbors.create(sf, features=['X1', 'X2'],\n    ...                                           method='ball_tree')\n\n    Often the final determination of a neighbor is based on several distance\n    computations over different sets of features. Each part of this composite\n    distance may have a different relative weight.\n\n    >>> my_dist = [[['X1', 'X2'], 'euclidean', 2.],\n    ...            [['str_feature'], 'levenshtein', 3.]]\n    ...\n    >>> model = turicreate.nearest_neighbors.create(sf, distance=my_dist)\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 2,
                    "column": 4
                  },
                  "end": {
                    "row": 290,
                    "column": 7
                  },
                  "text": "\"\"\"\n    Create a nearest neighbor model, which can be searched efficiently and\n    quickly for the nearest neighbors of a query observation. If the `method`\n    argument is specified as `auto`, the type of model is chosen automatically\n    based on the type of data in `dataset`.\n\n    .. warning::\n\n        The 'dot_product' distance is deprecated and will be removed in future\n        versions of Turi Create. Please use 'transformed_dot_product'\n        distance instead, although note that this is more than a name change;\n        it is a *different* transformation of the dot product of two vectors.\n        Please see the distances module documentation for more details.\n\n    Parameters\n    ----------\n    dataset : SFrame\n        Reference data. If the features for each observation are numeric, they\n        may be in separate columns of 'dataset' or a single column with lists\n        of values. The features may also be in the form of a column of sparse\n        vectors (i.e. dictionaries), with string keys and numeric values.\n\n    label : string, optional\n        Name of the SFrame column with row labels. If 'label' is not specified,\n        row numbers are used to identify reference dataset rows when the model\n        is queried.\n\n    features : list[string], optional\n        Name of the columns with features to use in computing distances between\n        observations and the query points. 'None' (the default) indicates that\n        all columns except the label should be used as features. Each column\n        can be one of the following types:\n\n        - *Numeric*: values of numeric type integer or float.\n\n        - *Array*: list of numeric (integer or float) values. Each list element\n          is treated as a separate variable in the model.\n\n        - *Dictionary*: key-value pairs with numeric (integer or float) values.\n          Each key indicates a separate variable in the model.\n\n        - *List*: list of integer or string values. Each element is treated as\n          a separate variable in the model.\n\n        - *String*: string values.\n\n        Please note: if a composite distance is also specified, this parameter\n        is ignored.\n\n    distance : string, function, or list[list], optional\n        Function to measure the distance between any two input data rows. This\n        may be one of three types:\n\n        - *String*: the name of a standard distance function. One of\n          'euclidean', 'squared_euclidean', 'manhattan', 'levenshtein',\n          'jaccard', 'weighted_jaccard', 'cosine', 'dot_product' (deprecated),\n          or 'transformed_dot_product'.\n\n        - *Function*: a function handle from the\n          :mod:`~turicreate.toolkits.distances` module.\n\n        - *Composite distance*: the weighted sum of several standard distance\n          functions applied to various features. This is specified as a list of\n          distance components, each of which is itself a list containing three\n          items:\n\n          1. list or tuple of feature names (strings)\n\n          2. standard distance name (string)\n\n          3. scaling factor (int or float)\n\n        For more information about Turi Create distance functions, please\n        see the :py:mod:`~turicreate.toolkits.distances` module.\n\n        If 'distance' is left unspecified or set to 'auto', a composite\n        distance is constructed automatically based on feature types.\n\n    method : {'auto', 'ball_tree', 'brute_force', 'lsh'}, optional\n        Method for computing nearest neighbors. The options are:\n\n        - *auto* (default): the method is chosen automatically, based on the\n          type of data and the distance. If the distance is 'manhattan' or\n          'euclidean' and the features are numeric or vectors of numeric\n          values, then the 'ball_tree' method is used. Otherwise, the\n          'brute_force' method is used.\n\n        - *ball_tree*: use a tree structure to find the k-closest neighbors to\n          each query point. The ball tree model is slower to construct than the\n          brute force model, but queries are faster than linear time. This\n          method is not applicable for the cosine and dot product distances.\n          See `Liu, et al (2004)\n          <http://papers.nips.cc/paper/2666-an-investigation-of-p\n          ractical-approximat e-nearest-neighbor-algorithms>`_ for\n          implementation details.\n\n        - *brute_force*: compute the distance from a query point to all\n          reference observations. There is no computation time for model\n          creation with the brute force method (although the reference data is\n          held in the model, but each query takes linear time.\n\n        - *lsh*: use Locality Sensitive Hashing (LSH) to find approximate\n          nearest neighbors efficiently. The LSH model supports 'euclidean',\n          'squared_euclidean', 'manhattan', 'cosine', 'jaccard', 'dot_product'\n          (deprecated), and 'transformed_dot_product' distances. Two options\n          are provided for LSH -- ``num_tables`` and\n          ``num_projections_per_table``. See the notes below for details.\n\n    verbose: bool, optional\n        If True, print progress updates and model details.\n\n    **kwargs : optional\n        Options for the distance function and query method.\n\n        - *leaf_size*: for the ball tree method, the number of points in each\n          leaf of the tree. The default is to use the max of 1,000 and\n          n/(2^11), which ensures a maximum tree depth of 12.\n\n        - *num_tables*: For the LSH method, the number of hash tables\n          constructed. The default value is 20. We recommend choosing values\n          from 10 to 30.\n\n        - *num_projections_per_table*: For the LSH method, the number of\n          projections/hash functions for each hash table. The default value is\n          4 for 'jaccard' distance, 16 for 'cosine' distance and 8 for other\n          distances. We recommend using number 2 ~ 6 for 'jaccard' distance, 8\n          ~ 20 for 'cosine' distance and 4 ~ 12 for other distances.\n\n    Returns\n    -------\n    out : NearestNeighborsModel\n        A structure for efficiently computing the nearest neighbors in 'dataset'\n        of new query points.\n\n    See Also\n    --------\n    NearestNeighborsModel.query, turicreate.toolkits.distances\n\n    Notes\n    -----\n    - Missing data is not allowed in the 'dataset' provided to this function.\n      Please use the :func:`turicreate.SFrame.fillna` and\n      :func:`turicreate.SFrame.dropna` utilities to handle missing data before\n      creating a nearest neighbors model.\n\n    - Missing keys in sparse vectors are assumed to have value 0.\n\n    - The `composite_params` parameter was removed as of Turi Create\n      version 1.5. The `distance` parameter now accepts either standard or\n      composite distances. Please see the :mod:`~turicreate.toolkits.distances`\n      module documentation for more information on composite distances.\n\n    - If the features should be weighted equally in the distance calculations\n      but are measured on different scales, it is important to standardize the\n      features. One way to do this is to subtract the mean of each column and\n      divide by the standard deviation.\n\n    **Locality Sensitive Hashing (LSH)**\n\n    There are several efficient nearest neighbors search algorithms that work\n    well for data with low dimensions :math:`d` (approximately 50). However,\n    most of the solutions suffer from either space or query time that is\n    exponential in :math:`d`. For large :math:`d`, they often provide little,\n    if any, improvement over the 'brute_force' method. This is a well-known\n    consequence of the phenomenon called `The Curse of Dimensionality`.\n\n    `Locality Sensitive Hashing (LSH)\n    <https://en.wikipedia.org/wiki/Locality-sensitive_hashing>`_ is an approach\n    that is designed to efficiently solve the *approximate* nearest neighbor\n    search problem for high dimensional data. The key idea of LSH is to hash\n    the data points using several hash functions, so that the probability of\n    collision is much higher for data points which are close to each other than\n    those which are far apart.\n\n    An LSH family is a family of functions :math:`h` which map points from the\n    metric space to a bucket, so that\n\n    - if :math:`d(p, q) \\\\leq R`, then :math:`h(p) = h(q)` with at least probability :math:`p_1`.\n    - if :math:`d(p, q) \\\\geq cR`, then :math:`h(p) = h(q)` with probability at most :math:`p_2`.\n\n    LSH for efficient approximate nearest neighbor search:\n\n    - We define a new family of hash functions :math:`g`, where each\n      function :math:`g` is obtained by concatenating :math:`k` functions\n      :math:`h_1, ..., h_k`, i.e., :math:`g(p)=[h_1(p),...,h_k(p)]`.\n      The algorithm constructs :math:`L` hash tables, each of which\n      corresponds to a different randomly chosen hash function :math:`g`.\n      There are :math:`k \\\\cdot L` hash functions used in total.\n\n    - In the preprocessing step, we hash all :math:`n` reference points\n      into each of the :math:`L` hash tables.\n\n    - Given a query point :math:`q`, the algorithm iterates over the\n      :math:`L` hash functions :math:`g`. For each :math:`g` considered, it\n      retrieves the data points that are hashed into the same bucket as q.\n      These data points from all the :math:`L` hash tables are considered as\n      candidates that are then re-ranked by their real distances with the query\n      data.\n\n    **Note** that the number of tables :math:`L` and the number of hash\n    functions per table :math:`k` are two main parameters. They can be set\n    using the options ``num_tables`` and ``num_projections_per_table``\n    respectively.\n\n    Hash functions for different distances:\n\n    - `euclidean` and `squared_euclidean`:\n      :math:`h(q) = \\\\lfloor \\\\frac{a \\\\cdot q + b}{w} \\\\rfloor` where\n      :math:`a` is a vector, of which the elements are independently\n      sampled from normal distribution, and :math:`b` is a number\n      uniformly sampled from :math:`[0, r]`. :math:`r` is a parameter for the\n      bucket width. We set :math:`r` using the average all-pair `euclidean`\n      distances from a small randomly sampled subset of the reference data.\n\n    - `manhattan`: The hash function of `manhattan` is similar with that of\n      `euclidean`. The only difference is that the elements of `a` are sampled\n      from Cauchy distribution, instead of normal distribution.\n\n    - `cosine`: Random Projection is designed to approximate the cosine\n      distance between vectors. The hash function is :math:`h(q) = sgn(a \\\\cdot\n      q)`, where :math:`a` is randomly sampled normal unit vector.\n\n    - `jaccard`: We use a recently proposed method one permutation hashing by\n      Shrivastava and Li. See the paper `[Shrivastava and Li, UAI 2014]\n      <http://www.auai.org/uai2014/proceedings/individuals/225.pdf>`_ for\n      details.\n\n    - `dot_product`: The reference data points are first transformed to\n      fixed-norm vectors, and then the minimum `dot_product` distance search\n      problem can be solved via finding the reference data with smallest\n      `cosine` distances. See the paper `[Neyshabur and Srebro, ICML 2015]\n      <http://proceedings.mlr.press/v37/neyshabur15.html>`_ for details.\n\n    References\n    ----------\n    - `Wikipedia - nearest neighbor\n      search <http://en.wikipedia.org/wiki/Nearest_neighbor_search>`_\n\n    - `Wikipedia - ball tree <http://en.wikipedia.org/wiki/Ball_tree>`_\n\n    - Ball tree implementation: Liu, T., et al. (2004) `An Investigation of\n      Practical Approximate Nearest Neighbor Algorithms\n      <http://papers.nips.cc/paper/2666-an-investigation-of-p\n      ractical-approximat e-nearest-neighbor-algorithms>`_. Advances in Neural\n      Information Processing Systems pp. 825-832.\n\n    - `Wikipedia - Jaccard distance\n      <http://en.wikipedia.org/wiki/Jaccard_index>`_\n\n    - Weighted Jaccard distance: Chierichetti, F., et al. (2010) `Finding the\n      Jaccard Median\n      <http://theory.stanford.edu/~sergei/papers/soda10-jaccard.pdf>`_.\n      Proceedings of the Twenty-First Annual ACM-SIAM Symposium on Discrete\n      Algorithms. Society for Industrial and Applied Mathematics.\n\n    - `Wikipedia - Cosine distance\n      <http://en.wikipedia.org/wiki/Cosine_similarity>`_\n\n    - `Wikipedia - Levenshtein distance\n      <http://en.wikipedia.org/wiki/Levenshtein_distance>`_\n\n    - Locality Sensitive Hashing : Chapter 3 of the book `Mining Massive\n      Datasets <http://infolab.stanford.edu/~ullman/mmds/ch3.pdf>`_.\n\n    Examples\n    --------\n    Construct a nearest neighbors model with automatically determined method\n    and distance:\n\n    >>> sf = turicreate.SFrame({'X1': [0.98, 0.62, 0.11],\n    ...                       'X2': [0.69, 0.58, 0.36],\n    ...                       'str_feature': ['cat', 'dog', 'fossa']})\n    >>> model = turicreate.nearest_neighbors.create(sf, features=['X1', 'X2'])\n\n    For datasets with a large number of rows and up to about 100 variables, the\n    ball tree method often leads to much faster queries.\n\n    >>> model = turicreate.nearest_neighbors.create(sf, features=['X1', 'X2'],\n    ...                                           method='ball_tree')\n\n    Often the final determination of a neighbor is based on several distance\n    computations over different sets of features. Each part of this composite\n    distance may have a different relative weight.\n\n    >>> my_dist = [[['X1', 'X2'], 'euclidean', 2.],\n    ...            [['str_feature'], 'levenshtein', 3.]]\n    ...\n    >>> model = turicreate.nearest_neighbors.create(sf, distance=my_dist)\n    \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 2,
                        "column": 4
                      },
                      "end": {
                        "row": 2,
                        "column": 7
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 2,
                        "column": 7
                      },
                      "end": {
                        "row": 290,
                        "column": 4
                      },
                      "text": "\n    Create a nearest neighbor model, which can be searched efficiently and\n    quickly for the nearest neighbors of a query observation. If the `method`\n    argument is specified as `auto`, the type of model is chosen automatically\n    based on the type of data in `dataset`.\n\n    .. warning::\n\n        The 'dot_product' distance is deprecated and will be removed in future\n        versions of Turi Create. Please use 'transformed_dot_product'\n        distance instead, although note that this is more than a name change;\n        it is a *different* transformation of the dot product of two vectors.\n        Please see the distances module documentation for more details.\n\n    Parameters\n    ----------\n    dataset : SFrame\n        Reference data. If the features for each observation are numeric, they\n        may be in separate columns of 'dataset' or a single column with lists\n        of values. The features may also be in the form of a column of sparse\n        vectors (i.e. dictionaries), with string keys and numeric values.\n\n    label : string, optional\n        Name of the SFrame column with row labels. If 'label' is not specified,\n        row numbers are used to identify reference dataset rows when the model\n        is queried.\n\n    features : list[string], optional\n        Name of the columns with features to use in computing distances between\n        observations and the query points. 'None' (the default) indicates that\n        all columns except the label should be used as features. Each column\n        can be one of the following types:\n\n        - *Numeric*: values of numeric type integer or float.\n\n        - *Array*: list of numeric (integer or float) values. Each list element\n          is treated as a separate variable in the model.\n\n        - *Dictionary*: key-value pairs with numeric (integer or float) values.\n          Each key indicates a separate variable in the model.\n\n        - *List*: list of integer or string values. Each element is treated as\n          a separate variable in the model.\n\n        - *String*: string values.\n\n        Please note: if a composite distance is also specified, this parameter\n        is ignored.\n\n    distance : string, function, or list[list], optional\n        Function to measure the distance between any two input data rows. This\n        may be one of three types:\n\n        - *String*: the name of a standard distance function. One of\n          'euclidean', 'squared_euclidean', 'manhattan', 'levenshtein',\n          'jaccard', 'weighted_jaccard', 'cosine', 'dot_product' (deprecated),\n          or 'transformed_dot_product'.\n\n        - *Function*: a function handle from the\n          :mod:`~turicreate.toolkits.distances` module.\n\n        - *Composite distance*: the weighted sum of several standard distance\n          functions applied to various features. This is specified as a list of\n          distance components, each of which is itself a list containing three\n          items:\n\n          1. list or tuple of feature names (strings)\n\n          2. standard distance name (string)\n\n          3. scaling factor (int or float)\n\n        For more information about Turi Create distance functions, please\n        see the :py:mod:`~turicreate.toolkits.distances` module.\n\n        If 'distance' is left unspecified or set to 'auto', a composite\n        distance is constructed automatically based on feature types.\n\n    method : {'auto', 'ball_tree', 'brute_force', 'lsh'}, optional\n        Method for computing nearest neighbors. The options are:\n\n        - *auto* (default): the method is chosen automatically, based on the\n          type of data and the distance. If the distance is 'manhattan' or\n          'euclidean' and the features are numeric or vectors of numeric\n          values, then the 'ball_tree' method is used. Otherwise, the\n          'brute_force' method is used.\n\n        - *ball_tree*: use a tree structure to find the k-closest neighbors to\n          each query point. The ball tree model is slower to construct than the\n          brute force model, but queries are faster than linear time. This\n          method is not applicable for the cosine and dot product distances.\n          See `Liu, et al (2004)\n          <http://papers.nips.cc/paper/2666-an-investigation-of-p\n          ractical-approximat e-nearest-neighbor-algorithms>`_ for\n          implementation details.\n\n        - *brute_force*: compute the distance from a query point to all\n          reference observations. There is no computation time for model\n          creation with the brute force method (although the reference data is\n          held in the model, but each query takes linear time.\n\n        - *lsh*: use Locality Sensitive Hashing (LSH) to find approximate\n          nearest neighbors efficiently. The LSH model supports 'euclidean',\n          'squared_euclidean', 'manhattan', 'cosine', 'jaccard', 'dot_product'\n          (deprecated), and 'transformed_dot_product' distances. Two options\n          are provided for LSH -- ``num_tables`` and\n          ``num_projections_per_table``. See the notes below for details.\n\n    verbose: bool, optional\n        If True, print progress updates and model details.\n\n    **kwargs : optional\n        Options for the distance function and query method.\n\n        - *leaf_size*: for the ball tree method, the number of points in each\n          leaf of the tree. The default is to use the max of 1,000 and\n          n/(2^11), which ensures a maximum tree depth of 12.\n\n        - *num_tables*: For the LSH method, the number of hash tables\n          constructed. The default value is 20. We recommend choosing values\n          from 10 to 30.\n\n        - *num_projections_per_table*: For the LSH method, the number of\n          projections/hash functions for each hash table. The default value is\n          4 for 'jaccard' distance, 16 for 'cosine' distance and 8 for other\n          distances. We recommend using number 2 ~ 6 for 'jaccard' distance, 8\n          ~ 20 for 'cosine' distance and 4 ~ 12 for other distances.\n\n    Returns\n    -------\n    out : NearestNeighborsModel\n        A structure for efficiently computing the nearest neighbors in 'dataset'\n        of new query points.\n\n    See Also\n    --------\n    NearestNeighborsModel.query, turicreate.toolkits.distances\n\n    Notes\n    -----\n    - Missing data is not allowed in the 'dataset' provided to this function.\n      Please use the :func:`turicreate.SFrame.fillna` and\n      :func:`turicreate.SFrame.dropna` utilities to handle missing data before\n      creating a nearest neighbors model.\n\n    - Missing keys in sparse vectors are assumed to have value 0.\n\n    - The `composite_params` parameter was removed as of Turi Create\n      version 1.5. The `distance` parameter now accepts either standard or\n      composite distances. Please see the :mod:`~turicreate.toolkits.distances`\n      module documentation for more information on composite distances.\n\n    - If the features should be weighted equally in the distance calculations\n      but are measured on different scales, it is important to standardize the\n      features. One way to do this is to subtract the mean of each column and\n      divide by the standard deviation.\n\n    **Locality Sensitive Hashing (LSH)**\n\n    There are several efficient nearest neighbors search algorithms that work\n    well for data with low dimensions :math:`d` (approximately 50). However,\n    most of the solutions suffer from either space or query time that is\n    exponential in :math:`d`. For large :math:`d`, they often provide little,\n    if any, improvement over the 'brute_force' method. This is a well-known\n    consequence of the phenomenon called `The Curse of Dimensionality`.\n\n    `Locality Sensitive Hashing (LSH)\n    <https://en.wikipedia.org/wiki/Locality-sensitive_hashing>`_ is an approach\n    that is designed to efficiently solve the *approximate* nearest neighbor\n    search problem for high dimensional data. The key idea of LSH is to hash\n    the data points using several hash functions, so that the probability of\n    collision is much higher for data points which are close to each other than\n    those which are far apart.\n\n    An LSH family is a family of functions :math:`h` which map points from the\n    metric space to a bucket, so that\n\n    - if :math:`d(p, q) \\\\leq R`, then :math:`h(p) = h(q)` with at least probability :math:`p_1`.\n    - if :math:`d(p, q) \\\\geq cR`, then :math:`h(p) = h(q)` with probability at most :math:`p_2`.\n\n    LSH for efficient approximate nearest neighbor search:\n\n    - We define a new family of hash functions :math:`g`, where each\n      function :math:`g` is obtained by concatenating :math:`k` functions\n      :math:`h_1, ..., h_k`, i.e., :math:`g(p)=[h_1(p),...,h_k(p)]`.\n      The algorithm constructs :math:`L` hash tables, each of which\n      corresponds to a different randomly chosen hash function :math:`g`.\n      There are :math:`k \\\\cdot L` hash functions used in total.\n\n    - In the preprocessing step, we hash all :math:`n` reference points\n      into each of the :math:`L` hash tables.\n\n    - Given a query point :math:`q`, the algorithm iterates over the\n      :math:`L` hash functions :math:`g`. For each :math:`g` considered, it\n      retrieves the data points that are hashed into the same bucket as q.\n      These data points from all the :math:`L` hash tables are considered as\n      candidates that are then re-ranked by their real distances with the query\n      data.\n\n    **Note** that the number of tables :math:`L` and the number of hash\n    functions per table :math:`k` are two main parameters. They can be set\n    using the options ``num_tables`` and ``num_projections_per_table``\n    respectively.\n\n    Hash functions for different distances:\n\n    - `euclidean` and `squared_euclidean`:\n      :math:`h(q) = \\\\lfloor \\\\frac{a \\\\cdot q + b}{w} \\\\rfloor` where\n      :math:`a` is a vector, of which the elements are independently\n      sampled from normal distribution, and :math:`b` is a number\n      uniformly sampled from :math:`[0, r]`. :math:`r` is a parameter for the\n      bucket width. We set :math:`r` using the average all-pair `euclidean`\n      distances from a small randomly sampled subset of the reference data.\n\n    - `manhattan`: The hash function of `manhattan` is similar with that of\n      `euclidean`. The only difference is that the elements of `a` are sampled\n      from Cauchy distribution, instead of normal distribution.\n\n    - `cosine`: Random Projection is designed to approximate the cosine\n      distance between vectors. The hash function is :math:`h(q) = sgn(a \\\\cdot\n      q)`, where :math:`a` is randomly sampled normal unit vector.\n\n    - `jaccard`: We use a recently proposed method one permutation hashing by\n      Shrivastava and Li. See the paper `[Shrivastava and Li, UAI 2014]\n      <http://www.auai.org/uai2014/proceedings/individuals/225.pdf>`_ for\n      details.\n\n    - `dot_product`: The reference data points are first transformed to\n      fixed-norm vectors, and then the minimum `dot_product` distance search\n      problem can be solved via finding the reference data with smallest\n      `cosine` distances. See the paper `[Neyshabur and Srebro, ICML 2015]\n      <http://proceedings.mlr.press/v37/neyshabur15.html>`_ for details.\n\n    References\n    ----------\n    - `Wikipedia - nearest neighbor\n      search <http://en.wikipedia.org/wiki/Nearest_neighbor_search>`_\n\n    - `Wikipedia - ball tree <http://en.wikipedia.org/wiki/Ball_tree>`_\n\n    - Ball tree implementation: Liu, T., et al. (2004) `An Investigation of\n      Practical Approximate Nearest Neighbor Algorithms\n      <http://papers.nips.cc/paper/2666-an-investigation-of-p\n      ractical-approximat e-nearest-neighbor-algorithms>`_. Advances in Neural\n      Information Processing Systems pp. 825-832.\n\n    - `Wikipedia - Jaccard distance\n      <http://en.wikipedia.org/wiki/Jaccard_index>`_\n\n    - Weighted Jaccard distance: Chierichetti, F., et al. (2010) `Finding the\n      Jaccard Median\n      <http://theory.stanford.edu/~sergei/papers/soda10-jaccard.pdf>`_.\n      Proceedings of the Twenty-First Annual ACM-SIAM Symposium on Discrete\n      Algorithms. Society for Industrial and Applied Mathematics.\n\n    - `Wikipedia - Cosine distance\n      <http://en.wikipedia.org/wiki/Cosine_similarity>`_\n\n    - `Wikipedia - Levenshtein distance\n      <http://en.wikipedia.org/wiki/Levenshtein_distance>`_\n\n    - Locality Sensitive Hashing : Chapter 3 of the book `Mining Massive\n      Datasets <http://infolab.stanford.edu/~ullman/mmds/ch3.pdf>`_.\n\n    Examples\n    --------\n    Construct a nearest neighbors model with automatically determined method\n    and distance:\n\n    >>> sf = turicreate.SFrame({'X1': [0.98, 0.62, 0.11],\n    ...                       'X2': [0.69, 0.58, 0.36],\n    ...                       'str_feature': ['cat', 'dog', 'fossa']})\n    >>> model = turicreate.nearest_neighbors.create(sf, features=['X1', 'X2'])\n\n    For datasets with a large number of rows and up to about 100 variables, the\n    ball tree method often leads to much faster queries.\n\n    >>> model = turicreate.nearest_neighbors.create(sf, features=['X1', 'X2'],\n    ...                                           method='ball_tree')\n\n    Often the final determination of a neighbor is based on several distance\n    computations over different sets of features. Each part of this composite\n    distance may have a different relative weight.\n\n    >>> my_dist = [[['X1', 'X2'], 'euclidean', 2.],\n    ...            [['str_feature'], 'levenshtein', 3.]]\n    ...\n    >>> model = turicreate.nearest_neighbors.create(sf, distance=my_dist)\n    ",
                      "children": [
                        {
                          "type": "escape_sequence",
                          "start": {
                            "row": 179,
                            "column": 24
                          },
                          "end": {
                            "row": 179,
                            "column": 26
                          },
                          "text": "\\\\"
                        },
                        {
                          "type": "escape_sequence",
                          "start": {
                            "row": 180,
                            "column": 24
                          },
                          "end": {
                            "row": 180,
                            "column": 26
                          },
                          "text": "\\\\"
                        },
                        {
                          "type": "escape_sequence",
                          "start": {
                            "row": 189,
                            "column": 25
                          },
                          "end": {
                            "row": 189,
                            "column": 27
                          },
                          "text": "\\\\"
                        },
                        {
                          "type": "escape_sequence",
                          "start": {
                            "row": 209,
                            "column": 20
                          },
                          "end": {
                            "row": 209,
                            "column": 22
                          },
                          "text": "\\\\"
                        },
                        {
                          "type": "escape_sequence",
                          "start": {
                            "row": 209,
                            "column": 29
                          },
                          "end": {
                            "row": 209,
                            "column": 31
                          },
                          "text": "\\\\"
                        },
                        {
                          "type": "escape_sequence",
                          "start": {
                            "row": 209,
                            "column": 38
                          },
                          "end": {
                            "row": 209,
                            "column": 40
                          },
                          "text": "\\\\"
                        },
                        {
                          "type": "escape_sequence",
                          "start": {
                            "row": 209,
                            "column": 55
                          },
                          "end": {
                            "row": 209,
                            "column": 57
                          },
                          "text": "\\\\"
                        },
                        {
                          "type": "escape_sequence",
                          "start": {
                            "row": 221,
                            "column": 73
                          },
                          "end": {
                            "row": 221,
                            "column": 75
                          },
                          "text": "\\\\"
                        }
                      ]
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 290,
                        "column": 4
                      },
                      "end": {
                        "row": 290,
                        "column": 7
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 292,
                "column": 4
              },
              "end": {
                "row": 292,
                "column": 35
              },
              "text": "## Validate the 'dataset' input"
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 293,
                "column": 4
              },
              "end": {
                "row": 293,
                "column": 57
              },
              "text": "_tkutl._raise_error_if_not_sframe(dataset, \"dataset\")",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 293,
                    "column": 4
                  },
                  "end": {
                    "row": 293,
                    "column": 57
                  },
                  "text": "_tkutl._raise_error_if_not_sframe(dataset, \"dataset\")",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 293,
                        "column": 4
                      },
                      "end": {
                        "row": 293,
                        "column": 37
                      },
                      "text": "_tkutl._raise_error_if_not_sframe",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 293,
                            "column": 4
                          },
                          "end": {
                            "row": 293,
                            "column": 10
                          },
                          "text": "_tkutl"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 293,
                            "column": 10
                          },
                          "end": {
                            "row": 293,
                            "column": 11
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 293,
                            "column": 11
                          },
                          "end": {
                            "row": 293,
                            "column": 37
                          },
                          "text": "_raise_error_if_not_sframe"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 293,
                        "column": 37
                      },
                      "end": {
                        "row": 293,
                        "column": 57
                      },
                      "text": "(dataset, \"dataset\")",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 293,
                            "column": 37
                          },
                          "end": {
                            "row": 293,
                            "column": 38
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 293,
                            "column": 38
                          },
                          "end": {
                            "row": 293,
                            "column": 45
                          },
                          "text": "dataset"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 293,
                            "column": 45
                          },
                          "end": {
                            "row": 293,
                            "column": 46
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 293,
                            "column": 47
                          },
                          "end": {
                            "row": 293,
                            "column": 56
                          },
                          "text": "\"dataset\"",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 293,
                                "column": 47
                              },
                              "end": {
                                "row": 293,
                                "column": 48
                              },
                              "text": "\""
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 293,
                                "column": 48
                              },
                              "end": {
                                "row": 293,
                                "column": 55
                              },
                              "text": "dataset"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 293,
                                "column": 55
                              },
                              "end": {
                                "row": 293,
                                "column": 56
                              },
                              "text": "\""
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 293,
                            "column": 56
                          },
                          "end": {
                            "row": 293,
                            "column": 57
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 294,
                "column": 4
              },
              "end": {
                "row": 294,
                "column": 59
              },
              "text": "_tkutl._raise_error_if_sframe_empty(dataset, \"dataset\")",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 294,
                    "column": 4
                  },
                  "end": {
                    "row": 294,
                    "column": 59
                  },
                  "text": "_tkutl._raise_error_if_sframe_empty(dataset, \"dataset\")",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 294,
                        "column": 4
                      },
                      "end": {
                        "row": 294,
                        "column": 39
                      },
                      "text": "_tkutl._raise_error_if_sframe_empty",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 294,
                            "column": 4
                          },
                          "end": {
                            "row": 294,
                            "column": 10
                          },
                          "text": "_tkutl"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 294,
                            "column": 10
                          },
                          "end": {
                            "row": 294,
                            "column": 11
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 294,
                            "column": 11
                          },
                          "end": {
                            "row": 294,
                            "column": 39
                          },
                          "text": "_raise_error_if_sframe_empty"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 294,
                        "column": 39
                      },
                      "end": {
                        "row": 294,
                        "column": 59
                      },
                      "text": "(dataset, \"dataset\")",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 294,
                            "column": 39
                          },
                          "end": {
                            "row": 294,
                            "column": 40
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 294,
                            "column": 40
                          },
                          "end": {
                            "row": 294,
                            "column": 47
                          },
                          "text": "dataset"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 294,
                            "column": 47
                          },
                          "end": {
                            "row": 294,
                            "column": 48
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 294,
                            "column": 49
                          },
                          "end": {
                            "row": 294,
                            "column": 58
                          },
                          "text": "\"dataset\"",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 294,
                                "column": 49
                              },
                              "end": {
                                "row": 294,
                                "column": 50
                              },
                              "text": "\""
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 294,
                                "column": 50
                              },
                              "end": {
                                "row": 294,
                                "column": 57
                              },
                              "text": "dataset"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 294,
                                "column": 57
                              },
                              "end": {
                                "row": 294,
                                "column": 58
                              },
                              "text": "\""
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 294,
                            "column": 58
                          },
                          "end": {
                            "row": 294,
                            "column": 59
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 296,
                "column": 4
              },
              "end": {
                "row": 296,
                "column": 45
              },
              "text": "## Basic validation of the features input"
            },
            {
              "type": "if_statement",
              "start": {
                "row": 297,
                "column": 4
              },
              "end": {
                "row": 299,
                "column": 35
              },
              "text": "if features is not None and not isinstance(features, list):\n        raise TypeError(\"If specified, input 'features' must be a list of \" +\n                        \"strings.\")",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 297,
                    "column": 4
                  },
                  "end": {
                    "row": 297,
                    "column": 6
                  },
                  "text": "if"
                },
                {
                  "type": "boolean_operator",
                  "start": {
                    "row": 297,
                    "column": 7
                  },
                  "end": {
                    "row": 297,
                    "column": 62
                  },
                  "text": "features is not None and not isinstance(features, list)",
                  "children": [
                    {
                      "type": "comparison_operator",
                      "start": {
                        "row": 297,
                        "column": 7
                      },
                      "end": {
                        "row": 297,
                        "column": 27
                      },
                      "text": "features is not None",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 297,
                            "column": 7
                          },
                          "end": {
                            "row": 297,
                            "column": 15
                          },
                          "text": "features"
                        },
                        {
                          "type": "is not",
                          "start": {
                            "row": 297,
                            "column": 16
                          },
                          "end": {
                            "row": 297,
                            "column": 18
                          },
                          "text": "is"
                        },
                        {
                          "type": "is not",
                          "start": {
                            "row": 297,
                            "column": 19
                          },
                          "end": {
                            "row": 297,
                            "column": 22
                          },
                          "text": "not"
                        },
                        {
                          "type": "none",
                          "start": {
                            "row": 297,
                            "column": 23
                          },
                          "end": {
                            "row": 297,
                            "column": 27
                          },
                          "text": "None"
                        }
                      ]
                    },
                    {
                      "type": "and",
                      "start": {
                        "row": 297,
                        "column": 28
                      },
                      "end": {
                        "row": 297,
                        "column": 31
                      },
                      "text": "and"
                    },
                    {
                      "type": "not_operator",
                      "start": {
                        "row": 297,
                        "column": 32
                      },
                      "end": {
                        "row": 297,
                        "column": 62
                      },
                      "text": "not isinstance(features, list)",
                      "children": [
                        {
                          "type": "not",
                          "start": {
                            "row": 297,
                            "column": 32
                          },
                          "end": {
                            "row": 297,
                            "column": 35
                          },
                          "text": "not"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 297,
                            "column": 36
                          },
                          "end": {
                            "row": 297,
                            "column": 62
                          },
                          "text": "isinstance(features, list)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 297,
                                "column": 36
                              },
                              "end": {
                                "row": 297,
                                "column": 46
                              },
                              "text": "isinstance"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 297,
                                "column": 46
                              },
                              "end": {
                                "row": 297,
                                "column": 62
                              },
                              "text": "(features, list)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 297,
                                    "column": 46
                                  },
                                  "end": {
                                    "row": 297,
                                    "column": 47
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 297,
                                    "column": 47
                                  },
                                  "end": {
                                    "row": 297,
                                    "column": 55
                                  },
                                  "text": "features"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 297,
                                    "column": 55
                                  },
                                  "end": {
                                    "row": 297,
                                    "column": 56
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 297,
                                    "column": 57
                                  },
                                  "end": {
                                    "row": 297,
                                    "column": 61
                                  },
                                  "text": "list"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 297,
                                    "column": 61
                                  },
                                  "end": {
                                    "row": 297,
                                    "column": 62
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 297,
                    "column": 62
                  },
                  "end": {
                    "row": 297,
                    "column": 63
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 298,
                    "column": 8
                  },
                  "end": {
                    "row": 299,
                    "column": 35
                  },
                  "text": "raise TypeError(\"If specified, input 'features' must be a list of \" +\n                        \"strings.\")",
                  "children": [
                    {
                      "type": "raise_statement",
                      "start": {
                        "row": 298,
                        "column": 8
                      },
                      "end": {
                        "row": 299,
                        "column": 35
                      },
                      "text": "raise TypeError(\"If specified, input 'features' must be a list of \" +\n                        \"strings.\")",
                      "children": [
                        {
                          "type": "raise",
                          "start": {
                            "row": 298,
                            "column": 8
                          },
                          "end": {
                            "row": 298,
                            "column": 13
                          },
                          "text": "raise"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 298,
                            "column": 14
                          },
                          "end": {
                            "row": 299,
                            "column": 35
                          },
                          "text": "TypeError(\"If specified, input 'features' must be a list of \" +\n                        \"strings.\")",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 298,
                                "column": 14
                              },
                              "end": {
                                "row": 298,
                                "column": 23
                              },
                              "text": "TypeError"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 298,
                                "column": 23
                              },
                              "end": {
                                "row": 299,
                                "column": 35
                              },
                              "text": "(\"If specified, input 'features' must be a list of \" +\n                        \"strings.\")",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 298,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 298,
                                    "column": 24
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "binary_operator",
                                  "start": {
                                    "row": 298,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 299,
                                    "column": 34
                                  },
                                  "text": "\"If specified, input 'features' must be a list of \" +\n                        \"strings.\"",
                                  "children": [
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 298,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 298,
                                        "column": 75
                                      },
                                      "text": "\"If specified, input 'features' must be a list of \"",
                                      "children": [
                                        {
                                          "type": "string_start",
                                          "start": {
                                            "row": 298,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 298,
                                            "column": 25
                                          },
                                          "text": "\""
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 298,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 298,
                                            "column": 74
                                          },
                                          "text": "If specified, input 'features' must be a list of "
                                        },
                                        {
                                          "type": "string_end",
                                          "start": {
                                            "row": 298,
                                            "column": 74
                                          },
                                          "end": {
                                            "row": 298,
                                            "column": 75
                                          },
                                          "text": "\""
                                        }
                                      ]
                                    },
                                    {
                                      "type": "+",
                                      "start": {
                                        "row": 298,
                                        "column": 76
                                      },
                                      "end": {
                                        "row": 298,
                                        "column": 77
                                      },
                                      "text": "+"
                                    },
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 299,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 299,
                                        "column": 34
                                      },
                                      "text": "\"strings.\"",
                                      "children": [
                                        {
                                          "type": "string_start",
                                          "start": {
                                            "row": 299,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 299,
                                            "column": 25
                                          },
                                          "text": "\""
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 299,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 299,
                                            "column": 33
                                          },
                                          "text": "strings."
                                        },
                                        {
                                          "type": "string_end",
                                          "start": {
                                            "row": 299,
                                            "column": 33
                                          },
                                          "end": {
                                            "row": 299,
                                            "column": 34
                                          },
                                          "text": "\""
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 299,
                                    "column": 34
                                  },
                                  "end": {
                                    "row": 299,
                                    "column": 35
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 301,
                "column": 4
              },
              "end": {
                "row": 301,
                "column": 65
              },
              "text": "## Clean the method options and create the options dictionary"
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 302,
                "column": 4
              },
              "end": {
                "row": 302,
                "column": 77
              },
              "text": "allowed_kwargs = ['leaf_size', 'num_tables', 'num_projections_per_table']",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 302,
                    "column": 4
                  },
                  "end": {
                    "row": 302,
                    "column": 77
                  },
                  "text": "allowed_kwargs = ['leaf_size', 'num_tables', 'num_projections_per_table']",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 302,
                        "column": 4
                      },
                      "end": {
                        "row": 302,
                        "column": 18
                      },
                      "text": "allowed_kwargs"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 302,
                        "column": 19
                      },
                      "end": {
                        "row": 302,
                        "column": 20
                      },
                      "text": "="
                    },
                    {
                      "type": "list",
                      "start": {
                        "row": 302,
                        "column": 21
                      },
                      "end": {
                        "row": 302,
                        "column": 77
                      },
                      "text": "['leaf_size', 'num_tables', 'num_projections_per_table']",
                      "children": [
                        {
                          "type": "[",
                          "start": {
                            "row": 302,
                            "column": 21
                          },
                          "end": {
                            "row": 302,
                            "column": 22
                          },
                          "text": "["
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 302,
                            "column": 22
                          },
                          "end": {
                            "row": 302,
                            "column": 33
                          },
                          "text": "'leaf_size'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 302,
                                "column": 22
                              },
                              "end": {
                                "row": 302,
                                "column": 23
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 302,
                                "column": 23
                              },
                              "end": {
                                "row": 302,
                                "column": 32
                              },
                              "text": "leaf_size"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 302,
                                "column": 32
                              },
                              "end": {
                                "row": 302,
                                "column": 33
                              },
                              "text": "'"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 302,
                            "column": 33
                          },
                          "end": {
                            "row": 302,
                            "column": 34
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 302,
                            "column": 35
                          },
                          "end": {
                            "row": 302,
                            "column": 47
                          },
                          "text": "'num_tables'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 302,
                                "column": 35
                              },
                              "end": {
                                "row": 302,
                                "column": 36
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 302,
                                "column": 36
                              },
                              "end": {
                                "row": 302,
                                "column": 46
                              },
                              "text": "num_tables"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 302,
                                "column": 46
                              },
                              "end": {
                                "row": 302,
                                "column": 47
                              },
                              "text": "'"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 302,
                            "column": 47
                          },
                          "end": {
                            "row": 302,
                            "column": 48
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 302,
                            "column": 49
                          },
                          "end": {
                            "row": 302,
                            "column": 76
                          },
                          "text": "'num_projections_per_table'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 302,
                                "column": 49
                              },
                              "end": {
                                "row": 302,
                                "column": 50
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 302,
                                "column": 50
                              },
                              "end": {
                                "row": 302,
                                "column": 75
                              },
                              "text": "num_projections_per_table"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 302,
                                "column": 75
                              },
                              "end": {
                                "row": 302,
                                "column": 76
                              },
                              "text": "'"
                            }
                          ]
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 302,
                            "column": 76
                          },
                          "end": {
                            "row": 302,
                            "column": 77
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 303,
                "column": 4
              },
              "end": {
                "row": 303,
                "column": 24
              },
              "text": "_method_options = {}",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 303,
                    "column": 4
                  },
                  "end": {
                    "row": 303,
                    "column": 24
                  },
                  "text": "_method_options = {}",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 303,
                        "column": 4
                      },
                      "end": {
                        "row": 303,
                        "column": 19
                      },
                      "text": "_method_options"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 303,
                        "column": 20
                      },
                      "end": {
                        "row": 303,
                        "column": 21
                      },
                      "text": "="
                    },
                    {
                      "type": "dictionary",
                      "start": {
                        "row": 303,
                        "column": 22
                      },
                      "end": {
                        "row": 303,
                        "column": 24
                      },
                      "text": "{}",
                      "children": [
                        {
                          "type": "{",
                          "start": {
                            "row": 303,
                            "column": 22
                          },
                          "end": {
                            "row": 303,
                            "column": 23
                          },
                          "text": "{"
                        },
                        {
                          "type": "}",
                          "start": {
                            "row": 303,
                            "column": 23
                          },
                          "end": {
                            "row": 303,
                            "column": 24
                          },
                          "text": "}"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "for_statement",
              "start": {
                "row": 305,
                "column": 4
              },
              "end": {
                "row": 311,
                "column": 76
              },
              "text": "for k, v in kwargs.items():\n        if k in allowed_kwargs:\n            _method_options[k] = v\n        else:\n            raise _ToolkitError(\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \" +\n                                \"check for capitalization and other typos.\")",
              "children": [
                {
                  "type": "for",
                  "start": {
                    "row": 305,
                    "column": 4
                  },
                  "end": {
                    "row": 305,
                    "column": 7
                  },
                  "text": "for"
                },
                {
                  "type": "pattern_list",
                  "start": {
                    "row": 305,
                    "column": 8
                  },
                  "end": {
                    "row": 305,
                    "column": 12
                  },
                  "text": "k, v",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 305,
                        "column": 8
                      },
                      "end": {
                        "row": 305,
                        "column": 9
                      },
                      "text": "k"
                    },
                    {
                      "type": ",",
                      "start": {
                        "row": 305,
                        "column": 9
                      },
                      "end": {
                        "row": 305,
                        "column": 10
                      },
                      "text": ","
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 305,
                        "column": 11
                      },
                      "end": {
                        "row": 305,
                        "column": 12
                      },
                      "text": "v"
                    }
                  ]
                },
                {
                  "type": "in",
                  "start": {
                    "row": 305,
                    "column": 13
                  },
                  "end": {
                    "row": 305,
                    "column": 15
                  },
                  "text": "in"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 305,
                    "column": 16
                  },
                  "end": {
                    "row": 305,
                    "column": 30
                  },
                  "text": "kwargs.items()",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 305,
                        "column": 16
                      },
                      "end": {
                        "row": 305,
                        "column": 28
                      },
                      "text": "kwargs.items",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 305,
                            "column": 16
                          },
                          "end": {
                            "row": 305,
                            "column": 22
                          },
                          "text": "kwargs"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 305,
                            "column": 22
                          },
                          "end": {
                            "row": 305,
                            "column": 23
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 305,
                            "column": 23
                          },
                          "end": {
                            "row": 305,
                            "column": 28
                          },
                          "text": "items"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 305,
                        "column": 28
                      },
                      "end": {
                        "row": 305,
                        "column": 30
                      },
                      "text": "()",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 305,
                            "column": 28
                          },
                          "end": {
                            "row": 305,
                            "column": 29
                          },
                          "text": "("
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 305,
                            "column": 29
                          },
                          "end": {
                            "row": 305,
                            "column": 30
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 305,
                    "column": 30
                  },
                  "end": {
                    "row": 305,
                    "column": 31
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 306,
                    "column": 8
                  },
                  "end": {
                    "row": 311,
                    "column": 76
                  },
                  "text": "if k in allowed_kwargs:\n            _method_options[k] = v\n        else:\n            raise _ToolkitError(\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \" +\n                                \"check for capitalization and other typos.\")",
                  "children": [
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 306,
                        "column": 8
                      },
                      "end": {
                        "row": 311,
                        "column": 76
                      },
                      "text": "if k in allowed_kwargs:\n            _method_options[k] = v\n        else:\n            raise _ToolkitError(\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \" +\n                                \"check for capitalization and other typos.\")",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 306,
                            "column": 8
                          },
                          "end": {
                            "row": 306,
                            "column": 10
                          },
                          "text": "if"
                        },
                        {
                          "type": "comparison_operator",
                          "start": {
                            "row": 306,
                            "column": 11
                          },
                          "end": {
                            "row": 306,
                            "column": 30
                          },
                          "text": "k in allowed_kwargs",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 306,
                                "column": 11
                              },
                              "end": {
                                "row": 306,
                                "column": 12
                              },
                              "text": "k"
                            },
                            {
                              "type": "in",
                              "start": {
                                "row": 306,
                                "column": 13
                              },
                              "end": {
                                "row": 306,
                                "column": 15
                              },
                              "text": "in"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 306,
                                "column": 16
                              },
                              "end": {
                                "row": 306,
                                "column": 30
                              },
                              "text": "allowed_kwargs"
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 306,
                            "column": 30
                          },
                          "end": {
                            "row": 306,
                            "column": 31
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 307,
                            "column": 12
                          },
                          "end": {
                            "row": 307,
                            "column": 34
                          },
                          "text": "_method_options[k] = v",
                          "children": [
                            {
                              "type": "expression_statement",
                              "start": {
                                "row": 307,
                                "column": 12
                              },
                              "end": {
                                "row": 307,
                                "column": 34
                              },
                              "text": "_method_options[k] = v",
                              "children": [
                                {
                                  "type": "assignment",
                                  "start": {
                                    "row": 307,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 307,
                                    "column": 34
                                  },
                                  "text": "_method_options[k] = v",
                                  "children": [
                                    {
                                      "type": "subscript",
                                      "start": {
                                        "row": 307,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 307,
                                        "column": 30
                                      },
                                      "text": "_method_options[k]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 307,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 307,
                                            "column": 27
                                          },
                                          "text": "_method_options"
                                        },
                                        {
                                          "type": "[",
                                          "start": {
                                            "row": 307,
                                            "column": 27
                                          },
                                          "end": {
                                            "row": 307,
                                            "column": 28
                                          },
                                          "text": "["
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 307,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 307,
                                            "column": 29
                                          },
                                          "text": "k"
                                        },
                                        {
                                          "type": "]",
                                          "start": {
                                            "row": 307,
                                            "column": 29
                                          },
                                          "end": {
                                            "row": 307,
                                            "column": 30
                                          },
                                          "text": "]"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "=",
                                      "start": {
                                        "row": 307,
                                        "column": 31
                                      },
                                      "end": {
                                        "row": 307,
                                        "column": 32
                                      },
                                      "text": "="
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 307,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 307,
                                        "column": 34
                                      },
                                      "text": "v"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "else_clause",
                          "start": {
                            "row": 308,
                            "column": 8
                          },
                          "end": {
                            "row": 311,
                            "column": 76
                          },
                          "text": "else:\n            raise _ToolkitError(\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \" +\n                                \"check for capitalization and other typos.\")",
                          "children": [
                            {
                              "type": "else",
                              "start": {
                                "row": 308,
                                "column": 8
                              },
                              "end": {
                                "row": 308,
                                "column": 12
                              },
                              "text": "else"
                            },
                            {
                              "type": ":",
                              "start": {
                                "row": 308,
                                "column": 12
                              },
                              "end": {
                                "row": 308,
                                "column": 13
                              },
                              "text": ":"
                            },
                            {
                              "type": "block",
                              "start": {
                                "row": 309,
                                "column": 12
                              },
                              "end": {
                                "row": 311,
                                "column": 76
                              },
                              "text": "raise _ToolkitError(\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \" +\n                                \"check for capitalization and other typos.\")",
                              "children": [
                                {
                                  "type": "raise_statement",
                                  "start": {
                                    "row": 309,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 311,
                                    "column": 76
                                  },
                                  "text": "raise _ToolkitError(\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \" +\n                                \"check for capitalization and other typos.\")",
                                  "children": [
                                    {
                                      "type": "raise",
                                      "start": {
                                        "row": 309,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 309,
                                        "column": 17
                                      },
                                      "text": "raise"
                                    },
                                    {
                                      "type": "call",
                                      "start": {
                                        "row": 309,
                                        "column": 18
                                      },
                                      "end": {
                                        "row": 311,
                                        "column": 76
                                      },
                                      "text": "_ToolkitError(\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \" +\n                                \"check for capitalization and other typos.\")",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 309,
                                            "column": 18
                                          },
                                          "end": {
                                            "row": 309,
                                            "column": 31
                                          },
                                          "text": "_ToolkitError"
                                        },
                                        {
                                          "type": "argument_list",
                                          "start": {
                                            "row": 309,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 311,
                                            "column": 76
                                          },
                                          "text": "(\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \" +\n                                \"check for capitalization and other typos.\")",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start": {
                                                "row": 309,
                                                "column": 31
                                              },
                                              "end": {
                                                "row": 309,
                                                "column": 32
                                              },
                                              "text": "("
                                            },
                                            {
                                              "type": "binary_operator",
                                              "start": {
                                                "row": 309,
                                                "column": 32
                                              },
                                              "end": {
                                                "row": 311,
                                                "column": 75
                                              },
                                              "text": "\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \" +\n                                \"check for capitalization and other typos.\"",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "start": {
                                                    "row": 309,
                                                    "column": 32
                                                  },
                                                  "end": {
                                                    "row": 310,
                                                    "column": 75
                                                  },
                                                  "text": "\"'{}' is not a valid keyword argument\".format(k) +\n                                \" for the nearest neighbors model. Please \"",
                                                  "children": [
                                                    {
                                                      "type": "call",
                                                      "start": {
                                                        "row": 309,
                                                        "column": 32
                                                      },
                                                      "end": {
                                                        "row": 309,
                                                        "column": 80
                                                      },
                                                      "text": "\"'{}' is not a valid keyword argument\".format(k)",
                                                      "children": [
                                                        {
                                                          "type": "attribute",
                                                          "start": {
                                                            "row": 309,
                                                            "column": 32
                                                          },
                                                          "end": {
                                                            "row": 309,
                                                            "column": 77
                                                          },
                                                          "text": "\"'{}' is not a valid keyword argument\".format",
                                                          "children": [
                                                            {
                                                              "type": "string",
                                                              "start": {
                                                                "row": 309,
                                                                "column": 32
                                                              },
                                                              "end": {
                                                                "row": 309,
                                                                "column": 70
                                                              },
                                                              "text": "\"'{}' is not a valid keyword argument\"",
                                                              "children": [
                                                                {
                                                                  "type": "string_start",
                                                                  "start": {
                                                                    "row": 309,
                                                                    "column": 32
                                                                  },
                                                                  "end": {
                                                                    "row": 309,
                                                                    "column": 33
                                                                  },
                                                                  "text": "\""
                                                                },
                                                                {
                                                                  "type": "string_content",
                                                                  "start": {
                                                                    "row": 309,
                                                                    "column": 33
                                                                  },
                                                                  "end": {
                                                                    "row": 309,
                                                                    "column": 69
                                                                  },
                                                                  "text": "'{}' is not a valid keyword argument"
                                                                },
                                                                {
                                                                  "type": "string_end",
                                                                  "start": {
                                                                    "row": 309,
                                                                    "column": 69
                                                                  },
                                                                  "end": {
                                                                    "row": 309,
                                                                    "column": 70
                                                                  },
                                                                  "text": "\""
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ".",
                                                              "start": {
                                                                "row": 309,
                                                                "column": 70
                                                              },
                                                              "end": {
                                                                "row": 309,
                                                                "column": 71
                                                              },
                                                              "text": "."
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "start": {
                                                                "row": 309,
                                                                "column": 71
                                                              },
                                                              "end": {
                                                                "row": 309,
                                                                "column": 77
                                                              },
                                                              "text": "format"
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "start": {
                                                            "row": 309,
                                                            "column": 77
                                                          },
                                                          "end": {
                                                            "row": 309,
                                                            "column": 80
                                                          },
                                                          "text": "(k)",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "start": {
                                                                "row": 309,
                                                                "column": 77
                                                              },
                                                              "end": {
                                                                "row": 309,
                                                                "column": 78
                                                              },
                                                              "text": "("
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "start": {
                                                                "row": 309,
                                                                "column": 78
                                                              },
                                                              "end": {
                                                                "row": 309,
                                                                "column": 79
                                                              },
                                                              "text": "k"
                                                            },
                                                            {
                                                              "type": ")",
                                                              "start": {
                                                                "row": 309,
                                                                "column": 79
                                                              },
                                                              "end": {
                                                                "row": 309,
                                                                "column": 80
                                                              },
                                                              "text": ")"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "+",
                                                      "start": {
                                                        "row": 309,
                                                        "column": 81
                                                      },
                                                      "end": {
                                                        "row": 309,
                                                        "column": 82
                                                      },
                                                      "text": "+"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "start": {
                                                        "row": 310,
                                                        "column": 32
                                                      },
                                                      "end": {
                                                        "row": 310,
                                                        "column": 75
                                                      },
                                                      "text": "\" for the nearest neighbors model. Please \"",
                                                      "children": [
                                                        {
                                                          "type": "string_start",
                                                          "start": {
                                                            "row": 310,
                                                            "column": 32
                                                          },
                                                          "end": {
                                                            "row": 310,
                                                            "column": 33
                                                          },
                                                          "text": "\""
                                                        },
                                                        {
                                                          "type": "string_content",
                                                          "start": {
                                                            "row": 310,
                                                            "column": 33
                                                          },
                                                          "end": {
                                                            "row": 310,
                                                            "column": 74
                                                          },
                                                          "text": " for the nearest neighbors model. Please "
                                                        },
                                                        {
                                                          "type": "string_end",
                                                          "start": {
                                                            "row": 310,
                                                            "column": 74
                                                          },
                                                          "end": {
                                                            "row": 310,
                                                            "column": 75
                                                          },
                                                          "text": "\""
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "+",
                                                  "start": {
                                                    "row": 310,
                                                    "column": 76
                                                  },
                                                  "end": {
                                                    "row": 310,
                                                    "column": 77
                                                  },
                                                  "text": "+"
                                                },
                                                {
                                                  "type": "string",
                                                  "start": {
                                                    "row": 311,
                                                    "column": 32
                                                  },
                                                  "end": {
                                                    "row": 311,
                                                    "column": 75
                                                  },
                                                  "text": "\"check for capitalization and other typos.\"",
                                                  "children": [
                                                    {
                                                      "type": "string_start",
                                                      "start": {
                                                        "row": 311,
                                                        "column": 32
                                                      },
                                                      "end": {
                                                        "row": 311,
                                                        "column": 33
                                                      },
                                                      "text": "\""
                                                    },
                                                    {
                                                      "type": "string_content",
                                                      "start": {
                                                        "row": 311,
                                                        "column": 33
                                                      },
                                                      "end": {
                                                        "row": 311,
                                                        "column": 74
                                                      },
                                                      "text": "check for capitalization and other typos."
                                                    },
                                                    {
                                                      "type": "string_end",
                                                      "start": {
                                                        "row": 311,
                                                        "column": 74
                                                      },
                                                      "end": {
                                                        "row": 311,
                                                        "column": 75
                                                      },
                                                      "text": "\""
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "start": {
                                                "row": 311,
                                                "column": 75
                                              },
                                              "end": {
                                                "row": 311,
                                                "column": 76
                                              },
                                              "text": ")"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 314,
                "column": 4
              },
              "end": {
                "row": 314,
                "column": 63
              },
              "text": "## Exclude inappropriate combinations of method an distance"
            },
            {
              "type": "if_statement",
              "start": {
                "row": 315,
                "column": 4
              },
              "end": {
                "row": 323,
                "column": 83
              },
              "text": "if method == 'ball_tree' and (distance == 'cosine'\n                                  or distance == _turicreate.distances.cosine\n                                  or distance == 'dot_product'\n                                  or distance == _turicreate.distances.dot_product\n                                  or distance == 'transformed_dot_product'\n                                  or distance == _turicreate.distances.transformed_dot_product):\n        raise TypeError(\"The ball tree method does not work with 'cosine' \" +\n                        \"'dot_product', or 'transformed_dot_product' distance.\" +\n                        \"Please use the 'brute_force' method for these distances.\")",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 315,
                    "column": 4
                  },
                  "end": {
                    "row": 315,
                    "column": 6
                  },
                  "text": "if"
                },
                {
                  "type": "boolean_operator",
                  "start": {
                    "row": 315,
                    "column": 7
                  },
                  "end": {
                    "row": 320,
                    "column": 95
                  },
                  "text": "method == 'ball_tree' and (distance == 'cosine'\n                                  or distance == _turicreate.distances.cosine\n                                  or distance == 'dot_product'\n                                  or distance == _turicreate.distances.dot_product\n                                  or distance == 'transformed_dot_product'\n                                  or distance == _turicreate.distances.transformed_dot_product)",
                  "children": [
                    {
                      "type": "comparison_operator",
                      "start": {
                        "row": 315,
                        "column": 7
                      },
                      "end": {
                        "row": 315,
                        "column": 28
                      },
                      "text": "method == 'ball_tree'",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 315,
                            "column": 7
                          },
                          "end": {
                            "row": 315,
                            "column": 13
                          },
                          "text": "method"
                        },
                        {
                          "type": "==",
                          "start": {
                            "row": 315,
                            "column": 14
                          },
                          "end": {
                            "row": 315,
                            "column": 16
                          },
                          "text": "=="
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 315,
                            "column": 17
                          },
                          "end": {
                            "row": 315,
                            "column": 28
                          },
                          "text": "'ball_tree'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 315,
                                "column": 17
                              },
                              "end": {
                                "row": 315,
                                "column": 18
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 315,
                                "column": 18
                              },
                              "end": {
                                "row": 315,
                                "column": 27
                              },
                              "text": "ball_tree"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 315,
                                "column": 27
                              },
                              "end": {
                                "row": 315,
                                "column": 28
                              },
                              "text": "'"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "and",
                      "start": {
                        "row": 315,
                        "column": 29
                      },
                      "end": {
                        "row": 315,
                        "column": 32
                      },
                      "text": "and"
                    },
                    {
                      "type": "parenthesized_expression",
                      "start": {
                        "row": 315,
                        "column": 33
                      },
                      "end": {
                        "row": 320,
                        "column": 95
                      },
                      "text": "(distance == 'cosine'\n                                  or distance == _turicreate.distances.cosine\n                                  or distance == 'dot_product'\n                                  or distance == _turicreate.distances.dot_product\n                                  or distance == 'transformed_dot_product'\n                                  or distance == _turicreate.distances.transformed_dot_product)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 315,
                            "column": 33
                          },
                          "end": {
                            "row": 315,
                            "column": 34
                          },
                          "text": "("
                        },
                        {
                          "type": "boolean_operator",
                          "start": {
                            "row": 315,
                            "column": 34
                          },
                          "end": {
                            "row": 320,
                            "column": 94
                          },
                          "text": "distance == 'cosine'\n                                  or distance == _turicreate.distances.cosine\n                                  or distance == 'dot_product'\n                                  or distance == _turicreate.distances.dot_product\n                                  or distance == 'transformed_dot_product'\n                                  or distance == _turicreate.distances.transformed_dot_product",
                          "children": [
                            {
                              "type": "boolean_operator",
                              "start": {
                                "row": 315,
                                "column": 34
                              },
                              "end": {
                                "row": 319,
                                "column": 74
                              },
                              "text": "distance == 'cosine'\n                                  or distance == _turicreate.distances.cosine\n                                  or distance == 'dot_product'\n                                  or distance == _turicreate.distances.dot_product\n                                  or distance == 'transformed_dot_product'",
                              "children": [
                                {
                                  "type": "boolean_operator",
                                  "start": {
                                    "row": 315,
                                    "column": 34
                                  },
                                  "end": {
                                    "row": 318,
                                    "column": 82
                                  },
                                  "text": "distance == 'cosine'\n                                  or distance == _turicreate.distances.cosine\n                                  or distance == 'dot_product'\n                                  or distance == _turicreate.distances.dot_product",
                                  "children": [
                                    {
                                      "type": "boolean_operator",
                                      "start": {
                                        "row": 315,
                                        "column": 34
                                      },
                                      "end": {
                                        "row": 317,
                                        "column": 62
                                      },
                                      "text": "distance == 'cosine'\n                                  or distance == _turicreate.distances.cosine\n                                  or distance == 'dot_product'",
                                      "children": [
                                        {
                                          "type": "boolean_operator",
                                          "start": {
                                            "row": 315,
                                            "column": 34
                                          },
                                          "end": {
                                            "row": 316,
                                            "column": 77
                                          },
                                          "text": "distance == 'cosine'\n                                  or distance == _turicreate.distances.cosine",
                                          "children": [
                                            {
                                              "type": "comparison_operator",
                                              "start": {
                                                "row": 315,
                                                "column": 34
                                              },
                                              "end": {
                                                "row": 315,
                                                "column": 54
                                              },
                                              "text": "distance == 'cosine'",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 315,
                                                    "column": 34
                                                  },
                                                  "end": {
                                                    "row": 315,
                                                    "column": 42
                                                  },
                                                  "text": "distance"
                                                },
                                                {
                                                  "type": "==",
                                                  "start": {
                                                    "row": 315,
                                                    "column": 43
                                                  },
                                                  "end": {
                                                    "row": 315,
                                                    "column": 45
                                                  },
                                                  "text": "=="
                                                },
                                                {
                                                  "type": "string",
                                                  "start": {
                                                    "row": 315,
                                                    "column": 46
                                                  },
                                                  "end": {
                                                    "row": 315,
                                                    "column": 54
                                                  },
                                                  "text": "'cosine'",
                                                  "children": [
                                                    {
                                                      "type": "string_start",
                                                      "start": {
                                                        "row": 315,
                                                        "column": 46
                                                      },
                                                      "end": {
                                                        "row": 315,
                                                        "column": 47
                                                      },
                                                      "text": "'"
                                                    },
                                                    {
                                                      "type": "string_content",
                                                      "start": {
                                                        "row": 315,
                                                        "column": 47
                                                      },
                                                      "end": {
                                                        "row": 315,
                                                        "column": 53
                                                      },
                                                      "text": "cosine"
                                                    },
                                                    {
                                                      "type": "string_end",
                                                      "start": {
                                                        "row": 315,
                                                        "column": 53
                                                      },
                                                      "end": {
                                                        "row": 315,
                                                        "column": 54
                                                      },
                                                      "text": "'"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "or",
                                              "start": {
                                                "row": 316,
                                                "column": 34
                                              },
                                              "end": {
                                                "row": 316,
                                                "column": 36
                                              },
                                              "text": "or"
                                            },
                                            {
                                              "type": "comparison_operator",
                                              "start": {
                                                "row": 316,
                                                "column": 37
                                              },
                                              "end": {
                                                "row": 316,
                                                "column": 77
                                              },
                                              "text": "distance == _turicreate.distances.cosine",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 316,
                                                    "column": 37
                                                  },
                                                  "end": {
                                                    "row": 316,
                                                    "column": 45
                                                  },
                                                  "text": "distance"
                                                },
                                                {
                                                  "type": "==",
                                                  "start": {
                                                    "row": 316,
                                                    "column": 46
                                                  },
                                                  "end": {
                                                    "row": 316,
                                                    "column": 48
                                                  },
                                                  "text": "=="
                                                },
                                                {
                                                  "type": "attribute",
                                                  "start": {
                                                    "row": 316,
                                                    "column": 49
                                                  },
                                                  "end": {
                                                    "row": 316,
                                                    "column": 77
                                                  },
                                                  "text": "_turicreate.distances.cosine",
                                                  "children": [
                                                    {
                                                      "type": "attribute",
                                                      "start": {
                                                        "row": 316,
                                                        "column": 49
                                                      },
                                                      "end": {
                                                        "row": 316,
                                                        "column": 70
                                                      },
                                                      "text": "_turicreate.distances",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 316,
                                                            "column": 49
                                                          },
                                                          "end": {
                                                            "row": 316,
                                                            "column": 60
                                                          },
                                                          "text": "_turicreate"
                                                        },
                                                        {
                                                          "type": ".",
                                                          "start": {
                                                            "row": 316,
                                                            "column": 60
                                                          },
                                                          "end": {
                                                            "row": 316,
                                                            "column": 61
                                                          },
                                                          "text": "."
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 316,
                                                            "column": 61
                                                          },
                                                          "end": {
                                                            "row": 316,
                                                            "column": 70
                                                          },
                                                          "text": "distances"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ".",
                                                      "start": {
                                                        "row": 316,
                                                        "column": 70
                                                      },
                                                      "end": {
                                                        "row": 316,
                                                        "column": 71
                                                      },
                                                      "text": "."
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 316,
                                                        "column": 71
                                                      },
                                                      "end": {
                                                        "row": 316,
                                                        "column": 77
                                                      },
                                                      "text": "cosine"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "or",
                                          "start": {
                                            "row": 317,
                                            "column": 34
                                          },
                                          "end": {
                                            "row": 317,
                                            "column": 36
                                          },
                                          "text": "or"
                                        },
                                        {
                                          "type": "comparison_operator",
                                          "start": {
                                            "row": 317,
                                            "column": 37
                                          },
                                          "end": {
                                            "row": 317,
                                            "column": 62
                                          },
                                          "text": "distance == 'dot_product'",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 317,
                                                "column": 37
                                              },
                                              "end": {
                                                "row": 317,
                                                "column": 45
                                              },
                                              "text": "distance"
                                            },
                                            {
                                              "type": "==",
                                              "start": {
                                                "row": 317,
                                                "column": 46
                                              },
                                              "end": {
                                                "row": 317,
                                                "column": 48
                                              },
                                              "text": "=="
                                            },
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 317,
                                                "column": 49
                                              },
                                              "end": {
                                                "row": 317,
                                                "column": 62
                                              },
                                              "text": "'dot_product'",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 317,
                                                    "column": 49
                                                  },
                                                  "end": {
                                                    "row": 317,
                                                    "column": 50
                                                  },
                                                  "text": "'"
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 317,
                                                    "column": 50
                                                  },
                                                  "end": {
                                                    "row": 317,
                                                    "column": 61
                                                  },
                                                  "text": "dot_product"
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 317,
                                                    "column": 61
                                                  },
                                                  "end": {
                                                    "row": 317,
                                                    "column": 62
                                                  },
                                                  "text": "'"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "or",
                                      "start": {
                                        "row": 318,
                                        "column": 34
                                      },
                                      "end": {
                                        "row": 318,
                                        "column": 36
                                      },
                                      "text": "or"
                                    },
                                    {
                                      "type": "comparison_operator",
                                      "start": {
                                        "row": 318,
                                        "column": 37
                                      },
                                      "end": {
                                        "row": 318,
                                        "column": 82
                                      },
                                      "text": "distance == _turicreate.distances.dot_product",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 318,
                                            "column": 37
                                          },
                                          "end": {
                                            "row": 318,
                                            "column": 45
                                          },
                                          "text": "distance"
                                        },
                                        {
                                          "type": "==",
                                          "start": {
                                            "row": 318,
                                            "column": 46
                                          },
                                          "end": {
                                            "row": 318,
                                            "column": 48
                                          },
                                          "text": "=="
                                        },
                                        {
                                          "type": "attribute",
                                          "start": {
                                            "row": 318,
                                            "column": 49
                                          },
                                          "end": {
                                            "row": 318,
                                            "column": 82
                                          },
                                          "text": "_turicreate.distances.dot_product",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "start": {
                                                "row": 318,
                                                "column": 49
                                              },
                                              "end": {
                                                "row": 318,
                                                "column": 70
                                              },
                                              "text": "_turicreate.distances",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 318,
                                                    "column": 49
                                                  },
                                                  "end": {
                                                    "row": 318,
                                                    "column": 60
                                                  },
                                                  "text": "_turicreate"
                                                },
                                                {
                                                  "type": ".",
                                                  "start": {
                                                    "row": 318,
                                                    "column": 60
                                                  },
                                                  "end": {
                                                    "row": 318,
                                                    "column": 61
                                                  },
                                                  "text": "."
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 318,
                                                    "column": 61
                                                  },
                                                  "end": {
                                                    "row": 318,
                                                    "column": 70
                                                  },
                                                  "text": "distances"
                                                }
                                              ]
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 318,
                                                "column": 70
                                              },
                                              "end": {
                                                "row": 318,
                                                "column": 71
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 318,
                                                "column": 71
                                              },
                                              "end": {
                                                "row": 318,
                                                "column": 82
                                              },
                                              "text": "dot_product"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "or",
                                  "start": {
                                    "row": 319,
                                    "column": 34
                                  },
                                  "end": {
                                    "row": 319,
                                    "column": 36
                                  },
                                  "text": "or"
                                },
                                {
                                  "type": "comparison_operator",
                                  "start": {
                                    "row": 319,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 319,
                                    "column": 74
                                  },
                                  "text": "distance == 'transformed_dot_product'",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 319,
                                        "column": 37
                                      },
                                      "end": {
                                        "row": 319,
                                        "column": 45
                                      },
                                      "text": "distance"
                                    },
                                    {
                                      "type": "==",
                                      "start": {
                                        "row": 319,
                                        "column": 46
                                      },
                                      "end": {
                                        "row": 319,
                                        "column": 48
                                      },
                                      "text": "=="
                                    },
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 319,
                                        "column": 49
                                      },
                                      "end": {
                                        "row": 319,
                                        "column": 74
                                      },
                                      "text": "'transformed_dot_product'",
                                      "children": [
                                        {
                                          "type": "string_start",
                                          "start": {
                                            "row": 319,
                                            "column": 49
                                          },
                                          "end": {
                                            "row": 319,
                                            "column": 50
                                          },
                                          "text": "'"
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 319,
                                            "column": 50
                                          },
                                          "end": {
                                            "row": 319,
                                            "column": 73
                                          },
                                          "text": "transformed_dot_product"
                                        },
                                        {
                                          "type": "string_end",
                                          "start": {
                                            "row": 319,
                                            "column": 73
                                          },
                                          "end": {
                                            "row": 319,
                                            "column": 74
                                          },
                                          "text": "'"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "or",
                              "start": {
                                "row": 320,
                                "column": 34
                              },
                              "end": {
                                "row": 320,
                                "column": 36
                              },
                              "text": "or"
                            },
                            {
                              "type": "comparison_operator",
                              "start": {
                                "row": 320,
                                "column": 37
                              },
                              "end": {
                                "row": 320,
                                "column": 94
                              },
                              "text": "distance == _turicreate.distances.transformed_dot_product",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 320,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 320,
                                    "column": 45
                                  },
                                  "text": "distance"
                                },
                                {
                                  "type": "==",
                                  "start": {
                                    "row": 320,
                                    "column": 46
                                  },
                                  "end": {
                                    "row": 320,
                                    "column": 48
                                  },
                                  "text": "=="
                                },
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 320,
                                    "column": 49
                                  },
                                  "end": {
                                    "row": 320,
                                    "column": 94
                                  },
                                  "text": "_turicreate.distances.transformed_dot_product",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 320,
                                        "column": 49
                                      },
                                      "end": {
                                        "row": 320,
                                        "column": 70
                                      },
                                      "text": "_turicreate.distances",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 320,
                                            "column": 49
                                          },
                                          "end": {
                                            "row": 320,
                                            "column": 60
                                          },
                                          "text": "_turicreate"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 320,
                                            "column": 60
                                          },
                                          "end": {
                                            "row": 320,
                                            "column": 61
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 320,
                                            "column": 61
                                          },
                                          "end": {
                                            "row": 320,
                                            "column": 70
                                          },
                                          "text": "distances"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 320,
                                        "column": 70
                                      },
                                      "end": {
                                        "row": 320,
                                        "column": 71
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 320,
                                        "column": 71
                                      },
                                      "end": {
                                        "row": 320,
                                        "column": 94
                                      },
                                      "text": "transformed_dot_product"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 320,
                            "column": 94
                          },
                          "end": {
                            "row": 320,
                            "column": 95
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 320,
                    "column": 95
                  },
                  "end": {
                    "row": 320,
                    "column": 96
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 321,
                    "column": 8
                  },
                  "end": {
                    "row": 323,
                    "column": 83
                  },
                  "text": "raise TypeError(\"The ball tree method does not work with 'cosine' \" +\n                        \"'dot_product', or 'transformed_dot_product' distance.\" +\n                        \"Please use the 'brute_force' method for these distances.\")",
                  "children": [
                    {
                      "type": "raise_statement",
                      "start": {
                        "row": 321,
                        "column": 8
                      },
                      "end": {
                        "row": 323,
                        "column": 83
                      },
                      "text": "raise TypeError(\"The ball tree method does not work with 'cosine' \" +\n                        \"'dot_product', or 'transformed_dot_product' distance.\" +\n                        \"Please use the 'brute_force' method for these distances.\")",
                      "children": [
                        {
                          "type": "raise",
                          "start": {
                            "row": 321,
                            "column": 8
                          },
                          "end": {
                            "row": 321,
                            "column": 13
                          },
                          "text": "raise"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 321,
                            "column": 14
                          },
                          "end": {
                            "row": 323,
                            "column": 83
                          },
                          "text": "TypeError(\"The ball tree method does not work with 'cosine' \" +\n                        \"'dot_product', or 'transformed_dot_product' distance.\" +\n                        \"Please use the 'brute_force' method for these distances.\")",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 321,
                                "column": 14
                              },
                              "end": {
                                "row": 321,
                                "column": 23
                              },
                              "text": "TypeError"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 321,
                                "column": 23
                              },
                              "end": {
                                "row": 323,
                                "column": 83
                              },
                              "text": "(\"The ball tree method does not work with 'cosine' \" +\n                        \"'dot_product', or 'transformed_dot_product' distance.\" +\n                        \"Please use the 'brute_force' method for these distances.\")",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 321,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 321,
                                    "column": 24
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "binary_operator",
                                  "start": {
                                    "row": 321,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 323,
                                    "column": 82
                                  },
                                  "text": "\"The ball tree method does not work with 'cosine' \" +\n                        \"'dot_product', or 'transformed_dot_product' distance.\" +\n                        \"Please use the 'brute_force' method for these distances.\"",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "start": {
                                        "row": 321,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 322,
                                        "column": 79
                                      },
                                      "text": "\"The ball tree method does not work with 'cosine' \" +\n                        \"'dot_product', or 'transformed_dot_product' distance.\"",
                                      "children": [
                                        {
                                          "type": "string",
                                          "start": {
                                            "row": 321,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 321,
                                            "column": 75
                                          },
                                          "text": "\"The ball tree method does not work with 'cosine' \"",
                                          "children": [
                                            {
                                              "type": "string_start",
                                              "start": {
                                                "row": 321,
                                                "column": 24
                                              },
                                              "end": {
                                                "row": 321,
                                                "column": 25
                                              },
                                              "text": "\""
                                            },
                                            {
                                              "type": "string_content",
                                              "start": {
                                                "row": 321,
                                                "column": 25
                                              },
                                              "end": {
                                                "row": 321,
                                                "column": 74
                                              },
                                              "text": "The ball tree method does not work with 'cosine' "
                                            },
                                            {
                                              "type": "string_end",
                                              "start": {
                                                "row": 321,
                                                "column": 74
                                              },
                                              "end": {
                                                "row": 321,
                                                "column": 75
                                              },
                                              "text": "\""
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "start": {
                                            "row": 321,
                                            "column": 76
                                          },
                                          "end": {
                                            "row": 321,
                                            "column": 77
                                          },
                                          "text": "+"
                                        },
                                        {
                                          "type": "string",
                                          "start": {
                                            "row": 322,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 322,
                                            "column": 79
                                          },
                                          "text": "\"'dot_product', or 'transformed_dot_product' distance.\"",
                                          "children": [
                                            {
                                              "type": "string_start",
                                              "start": {
                                                "row": 322,
                                                "column": 24
                                              },
                                              "end": {
                                                "row": 322,
                                                "column": 25
                                              },
                                              "text": "\""
                                            },
                                            {
                                              "type": "string_content",
                                              "start": {
                                                "row": 322,
                                                "column": 25
                                              },
                                              "end": {
                                                "row": 322,
                                                "column": 78
                                              },
                                              "text": "'dot_product', or 'transformed_dot_product' distance."
                                            },
                                            {
                                              "type": "string_end",
                                              "start": {
                                                "row": 322,
                                                "column": 78
                                              },
                                              "end": {
                                                "row": 322,
                                                "column": 79
                                              },
                                              "text": "\""
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "+",
                                      "start": {
                                        "row": 322,
                                        "column": 80
                                      },
                                      "end": {
                                        "row": 322,
                                        "column": 81
                                      },
                                      "text": "+"
                                    },
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 323,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 323,
                                        "column": 82
                                      },
                                      "text": "\"Please use the 'brute_force' method for these distances.\"",
                                      "children": [
                                        {
                                          "type": "string_start",
                                          "start": {
                                            "row": 323,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 323,
                                            "column": 25
                                          },
                                          "text": "\""
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 323,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 323,
                                            "column": 81
                                          },
                                          "text": "Please use the 'brute_force' method for these distances."
                                        },
                                        {
                                          "type": "string_end",
                                          "start": {
                                            "row": 323,
                                            "column": 81
                                          },
                                          "end": {
                                            "row": 323,
                                            "column": 82
                                          },
                                          "text": "\""
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 323,
                                    "column": 82
                                  },
                                  "end": {
                                    "row": 323,
                                    "column": 83
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 326,
                "column": 4
              },
              "end": {
                "row": 332,
                "column": 60
              },
              "text": "if method == 'lsh' and ('num_projections_per_table' not in _method_options):\n        if distance == 'jaccard' or distance == _turicreate.distances.jaccard:\n            _method_options['num_projections_per_table'] = 4\n        elif distance == 'cosine' or distance == _turicreate.distances.cosine:\n            _method_options['num_projections_per_table'] = 16\n        else:\n            _method_options['num_projections_per_table'] = 8",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 326,
                    "column": 4
                  },
                  "end": {
                    "row": 326,
                    "column": 6
                  },
                  "text": "if"
                },
                {
                  "type": "boolean_operator",
                  "start": {
                    "row": 326,
                    "column": 7
                  },
                  "end": {
                    "row": 326,
                    "column": 79
                  },
                  "text": "method == 'lsh' and ('num_projections_per_table' not in _method_options)",
                  "children": [
                    {
                      "type": "comparison_operator",
                      "start": {
                        "row": 326,
                        "column": 7
                      },
                      "end": {
                        "row": 326,
                        "column": 22
                      },
                      "text": "method == 'lsh'",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 326,
                            "column": 7
                          },
                          "end": {
                            "row": 326,
                            "column": 13
                          },
                          "text": "method"
                        },
                        {
                          "type": "==",
                          "start": {
                            "row": 326,
                            "column": 14
                          },
                          "end": {
                            "row": 326,
                            "column": 16
                          },
                          "text": "=="
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 326,
                            "column": 17
                          },
                          "end": {
                            "row": 326,
                            "column": 22
                          },
                          "text": "'lsh'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 326,
                                "column": 17
                              },
                              "end": {
                                "row": 326,
                                "column": 18
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 326,
                                "column": 18
                              },
                              "end": {
                                "row": 326,
                                "column": 21
                              },
                              "text": "lsh"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 326,
                                "column": 21
                              },
                              "end": {
                                "row": 326,
                                "column": 22
                              },
                              "text": "'"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "and",
                      "start": {
                        "row": 326,
                        "column": 23
                      },
                      "end": {
                        "row": 326,
                        "column": 26
                      },
                      "text": "and"
                    },
                    {
                      "type": "parenthesized_expression",
                      "start": {
                        "row": 326,
                        "column": 27
                      },
                      "end": {
                        "row": 326,
                        "column": 79
                      },
                      "text": "('num_projections_per_table' not in _method_options)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 326,
                            "column": 27
                          },
                          "end": {
                            "row": 326,
                            "column": 28
                          },
                          "text": "("
                        },
                        {
                          "type": "comparison_operator",
                          "start": {
                            "row": 326,
                            "column": 28
                          },
                          "end": {
                            "row": 326,
                            "column": 78
                          },
                          "text": "'num_projections_per_table' not in _method_options",
                          "children": [
                            {
                              "type": "string",
                              "start": {
                                "row": 326,
                                "column": 28
                              },
                              "end": {
                                "row": 326,
                                "column": 55
                              },
                              "text": "'num_projections_per_table'",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 326,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 326,
                                    "column": 29
                                  },
                                  "text": "'"
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 326,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 326,
                                    "column": 54
                                  },
                                  "text": "num_projections_per_table"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 326,
                                    "column": 54
                                  },
                                  "end": {
                                    "row": 326,
                                    "column": 55
                                  },
                                  "text": "'"
                                }
                              ]
                            },
                            {
                              "type": "not in",
                              "start": {
                                "row": 326,
                                "column": 56
                              },
                              "end": {
                                "row": 326,
                                "column": 59
                              },
                              "text": "not"
                            },
                            {
                              "type": "not in",
                              "start": {
                                "row": 326,
                                "column": 60
                              },
                              "end": {
                                "row": 326,
                                "column": 62
                              },
                              "text": "in"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 326,
                                "column": 63
                              },
                              "end": {
                                "row": 326,
                                "column": 78
                              },
                              "text": "_method_options"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 326,
                            "column": 78
                          },
                          "end": {
                            "row": 326,
                            "column": 79
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 326,
                    "column": 79
                  },
                  "end": {
                    "row": 326,
                    "column": 80
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 327,
                    "column": 8
                  },
                  "end": {
                    "row": 332,
                    "column": 60
                  },
                  "text": "if distance == 'jaccard' or distance == _turicreate.distances.jaccard:\n            _method_options['num_projections_per_table'] = 4\n        elif distance == 'cosine' or distance == _turicreate.distances.cosine:\n            _method_options['num_projections_per_table'] = 16\n        else:\n            _method_options['num_projections_per_table'] = 8",
                  "children": [
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 327,
                        "column": 8
                      },
                      "end": {
                        "row": 332,
                        "column": 60
                      },
                      "text": "if distance == 'jaccard' or distance == _turicreate.distances.jaccard:\n            _method_options['num_projections_per_table'] = 4\n        elif distance == 'cosine' or distance == _turicreate.distances.cosine:\n            _method_options['num_projections_per_table'] = 16\n        else:\n            _method_options['num_projections_per_table'] = 8",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 327,
                            "column": 8
                          },
                          "end": {
                            "row": 327,
                            "column": 10
                          },
                          "text": "if"
                        },
                        {
                          "type": "boolean_operator",
                          "start": {
                            "row": 327,
                            "column": 11
                          },
                          "end": {
                            "row": 327,
                            "column": 77
                          },
                          "text": "distance == 'jaccard' or distance == _turicreate.distances.jaccard",
                          "children": [
                            {
                              "type": "comparison_operator",
                              "start": {
                                "row": 327,
                                "column": 11
                              },
                              "end": {
                                "row": 327,
                                "column": 32
                              },
                              "text": "distance == 'jaccard'",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 327,
                                    "column": 11
                                  },
                                  "end": {
                                    "row": 327,
                                    "column": 19
                                  },
                                  "text": "distance"
                                },
                                {
                                  "type": "==",
                                  "start": {
                                    "row": 327,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 327,
                                    "column": 22
                                  },
                                  "text": "=="
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 327,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 327,
                                    "column": 32
                                  },
                                  "text": "'jaccard'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 327,
                                        "column": 23
                                      },
                                      "end": {
                                        "row": 327,
                                        "column": 24
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 327,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 327,
                                        "column": 31
                                      },
                                      "text": "jaccard"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 327,
                                        "column": 31
                                      },
                                      "end": {
                                        "row": 327,
                                        "column": 32
                                      },
                                      "text": "'"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "or",
                              "start": {
                                "row": 327,
                                "column": 33
                              },
                              "end": {
                                "row": 327,
                                "column": 35
                              },
                              "text": "or"
                            },
                            {
                              "type": "comparison_operator",
                              "start": {
                                "row": 327,
                                "column": 36
                              },
                              "end": {
                                "row": 327,
                                "column": 77
                              },
                              "text": "distance == _turicreate.distances.jaccard",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 327,
                                    "column": 36
                                  },
                                  "end": {
                                    "row": 327,
                                    "column": 44
                                  },
                                  "text": "distance"
                                },
                                {
                                  "type": "==",
                                  "start": {
                                    "row": 327,
                                    "column": 45
                                  },
                                  "end": {
                                    "row": 327,
                                    "column": 47
                                  },
                                  "text": "=="
                                },
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 327,
                                    "column": 48
                                  },
                                  "end": {
                                    "row": 327,
                                    "column": 77
                                  },
                                  "text": "_turicreate.distances.jaccard",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 327,
                                        "column": 48
                                      },
                                      "end": {
                                        "row": 327,
                                        "column": 69
                                      },
                                      "text": "_turicreate.distances",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 327,
                                            "column": 48
                                          },
                                          "end": {
                                            "row": 327,
                                            "column": 59
                                          },
                                          "text": "_turicreate"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 327,
                                            "column": 59
                                          },
                                          "end": {
                                            "row": 327,
                                            "column": 60
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 327,
                                            "column": 60
                                          },
                                          "end": {
                                            "row": 327,
                                            "column": 69
                                          },
                                          "text": "distances"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 327,
                                        "column": 69
                                      },
                                      "end": {
                                        "row": 327,
                                        "column": 70
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 327,
                                        "column": 70
                                      },
                                      "end": {
                                        "row": 327,
                                        "column": 77
                                      },
                                      "text": "jaccard"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 327,
                            "column": 77
                          },
                          "end": {
                            "row": 327,
                            "column": 78
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 328,
                            "column": 12
                          },
                          "end": {
                            "row": 328,
                            "column": 60
                          },
                          "text": "_method_options['num_projections_per_table'] = 4",
                          "children": [
                            {
                              "type": "expression_statement",
                              "start": {
                                "row": 328,
                                "column": 12
                              },
                              "end": {
                                "row": 328,
                                "column": 60
                              },
                              "text": "_method_options['num_projections_per_table'] = 4",
                              "children": [
                                {
                                  "type": "assignment",
                                  "start": {
                                    "row": 328,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 328,
                                    "column": 60
                                  },
                                  "text": "_method_options['num_projections_per_table'] = 4",
                                  "children": [
                                    {
                                      "type": "subscript",
                                      "start": {
                                        "row": 328,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 328,
                                        "column": 56
                                      },
                                      "text": "_method_options['num_projections_per_table']",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 328,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 328,
                                            "column": 27
                                          },
                                          "text": "_method_options"
                                        },
                                        {
                                          "type": "[",
                                          "start": {
                                            "row": 328,
                                            "column": 27
                                          },
                                          "end": {
                                            "row": 328,
                                            "column": 28
                                          },
                                          "text": "["
                                        },
                                        {
                                          "type": "string",
                                          "start": {
                                            "row": 328,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 328,
                                            "column": 55
                                          },
                                          "text": "'num_projections_per_table'",
                                          "children": [
                                            {
                                              "type": "string_start",
                                              "start": {
                                                "row": 328,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 328,
                                                "column": 29
                                              },
                                              "text": "'"
                                            },
                                            {
                                              "type": "string_content",
                                              "start": {
                                                "row": 328,
                                                "column": 29
                                              },
                                              "end": {
                                                "row": 328,
                                                "column": 54
                                              },
                                              "text": "num_projections_per_table"
                                            },
                                            {
                                              "type": "string_end",
                                              "start": {
                                                "row": 328,
                                                "column": 54
                                              },
                                              "end": {
                                                "row": 328,
                                                "column": 55
                                              },
                                              "text": "'"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "]",
                                          "start": {
                                            "row": 328,
                                            "column": 55
                                          },
                                          "end": {
                                            "row": 328,
                                            "column": 56
                                          },
                                          "text": "]"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "=",
                                      "start": {
                                        "row": 328,
                                        "column": 57
                                      },
                                      "end": {
                                        "row": 328,
                                        "column": 58
                                      },
                                      "text": "="
                                    },
                                    {
                                      "type": "integer",
                                      "start": {
                                        "row": 328,
                                        "column": 59
                                      },
                                      "end": {
                                        "row": 328,
                                        "column": 60
                                      },
                                      "text": "4"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "elif_clause",
                          "start": {
                            "row": 329,
                            "column": 8
                          },
                          "end": {
                            "row": 330,
                            "column": 61
                          },
                          "text": "elif distance == 'cosine' or distance == _turicreate.distances.cosine:\n            _method_options['num_projections_per_table'] = 16",
                          "children": [
                            {
                              "type": "elif",
                              "start": {
                                "row": 329,
                                "column": 8
                              },
                              "end": {
                                "row": 329,
                                "column": 12
                              },
                              "text": "elif"
                            },
                            {
                              "type": "boolean_operator",
                              "start": {
                                "row": 329,
                                "column": 13
                              },
                              "end": {
                                "row": 329,
                                "column": 77
                              },
                              "text": "distance == 'cosine' or distance == _turicreate.distances.cosine",
                              "children": [
                                {
                                  "type": "comparison_operator",
                                  "start": {
                                    "row": 329,
                                    "column": 13
                                  },
                                  "end": {
                                    "row": 329,
                                    "column": 33
                                  },
                                  "text": "distance == 'cosine'",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 329,
                                        "column": 13
                                      },
                                      "end": {
                                        "row": 329,
                                        "column": 21
                                      },
                                      "text": "distance"
                                    },
                                    {
                                      "type": "==",
                                      "start": {
                                        "row": 329,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 329,
                                        "column": 24
                                      },
                                      "text": "=="
                                    },
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 329,
                                        "column": 25
                                      },
                                      "end": {
                                        "row": 329,
                                        "column": 33
                                      },
                                      "text": "'cosine'",
                                      "children": [
                                        {
                                          "type": "string_start",
                                          "start": {
                                            "row": 329,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 329,
                                            "column": 26
                                          },
                                          "text": "'"
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 329,
                                            "column": 26
                                          },
                                          "end": {
                                            "row": 329,
                                            "column": 32
                                          },
                                          "text": "cosine"
                                        },
                                        {
                                          "type": "string_end",
                                          "start": {
                                            "row": 329,
                                            "column": 32
                                          },
                                          "end": {
                                            "row": 329,
                                            "column": 33
                                          },
                                          "text": "'"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "or",
                                  "start": {
                                    "row": 329,
                                    "column": 34
                                  },
                                  "end": {
                                    "row": 329,
                                    "column": 36
                                  },
                                  "text": "or"
                                },
                                {
                                  "type": "comparison_operator",
                                  "start": {
                                    "row": 329,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 329,
                                    "column": 77
                                  },
                                  "text": "distance == _turicreate.distances.cosine",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 329,
                                        "column": 37
                                      },
                                      "end": {
                                        "row": 329,
                                        "column": 45
                                      },
                                      "text": "distance"
                                    },
                                    {
                                      "type": "==",
                                      "start": {
                                        "row": 329,
                                        "column": 46
                                      },
                                      "end": {
                                        "row": 329,
                                        "column": 48
                                      },
                                      "text": "=="
                                    },
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 329,
                                        "column": 49
                                      },
                                      "end": {
                                        "row": 329,
                                        "column": 77
                                      },
                                      "text": "_turicreate.distances.cosine",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "start": {
                                            "row": 329,
                                            "column": 49
                                          },
                                          "end": {
                                            "row": 329,
                                            "column": 70
                                          },
                                          "text": "_turicreate.distances",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 329,
                                                "column": 49
                                              },
                                              "end": {
                                                "row": 329,
                                                "column": 60
                                              },
                                              "text": "_turicreate"
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 329,
                                                "column": 60
                                              },
                                              "end": {
                                                "row": 329,
                                                "column": 61
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 329,
                                                "column": 61
                                              },
                                              "end": {
                                                "row": 329,
                                                "column": 70
                                              },
                                              "text": "distances"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 329,
                                            "column": 70
                                          },
                                          "end": {
                                            "row": 329,
                                            "column": 71
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 329,
                                            "column": 71
                                          },
                                          "end": {
                                            "row": 329,
                                            "column": 77
                                          },
                                          "text": "cosine"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ":",
                              "start": {
                                "row": 329,
                                "column": 77
                              },
                              "end": {
                                "row": 329,
                                "column": 78
                              },
                              "text": ":"
                            },
                            {
                              "type": "block",
                              "start": {
                                "row": 330,
                                "column": 12
                              },
                              "end": {
                                "row": 330,
                                "column": 61
                              },
                              "text": "_method_options['num_projections_per_table'] = 16",
                              "children": [
                                {
                                  "type": "expression_statement",
                                  "start": {
                                    "row": 330,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 330,
                                    "column": 61
                                  },
                                  "text": "_method_options['num_projections_per_table'] = 16",
                                  "children": [
                                    {
                                      "type": "assignment",
                                      "start": {
                                        "row": 330,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 330,
                                        "column": 61
                                      },
                                      "text": "_method_options['num_projections_per_table'] = 16",
                                      "children": [
                                        {
                                          "type": "subscript",
                                          "start": {
                                            "row": 330,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 330,
                                            "column": 56
                                          },
                                          "text": "_method_options['num_projections_per_table']",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 330,
                                                "column": 12
                                              },
                                              "end": {
                                                "row": 330,
                                                "column": 27
                                              },
                                              "text": "_method_options"
                                            },
                                            {
                                              "type": "[",
                                              "start": {
                                                "row": 330,
                                                "column": 27
                                              },
                                              "end": {
                                                "row": 330,
                                                "column": 28
                                              },
                                              "text": "["
                                            },
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 330,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 330,
                                                "column": 55
                                              },
                                              "text": "'num_projections_per_table'",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 330,
                                                    "column": 28
                                                  },
                                                  "end": {
                                                    "row": 330,
                                                    "column": 29
                                                  },
                                                  "text": "'"
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 330,
                                                    "column": 29
                                                  },
                                                  "end": {
                                                    "row": 330,
                                                    "column": 54
                                                  },
                                                  "text": "num_projections_per_table"
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 330,
                                                    "column": 54
                                                  },
                                                  "end": {
                                                    "row": 330,
                                                    "column": 55
                                                  },
                                                  "text": "'"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "]",
                                              "start": {
                                                "row": 330,
                                                "column": 55
                                              },
                                              "end": {
                                                "row": 330,
                                                "column": 56
                                              },
                                              "text": "]"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "=",
                                          "start": {
                                            "row": 330,
                                            "column": 57
                                          },
                                          "end": {
                                            "row": 330,
                                            "column": 58
                                          },
                                          "text": "="
                                        },
                                        {
                                          "type": "integer",
                                          "start": {
                                            "row": 330,
                                            "column": 59
                                          },
                                          "end": {
                                            "row": 330,
                                            "column": 61
                                          },
                                          "text": "16"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "else_clause",
                          "start": {
                            "row": 331,
                            "column": 8
                          },
                          "end": {
                            "row": 332,
                            "column": 60
                          },
                          "text": "else:\n            _method_options['num_projections_per_table'] = 8",
                          "children": [
                            {
                              "type": "else",
                              "start": {
                                "row": 331,
                                "column": 8
                              },
                              "end": {
                                "row": 331,
                                "column": 12
                              },
                              "text": "else"
                            },
                            {
                              "type": ":",
                              "start": {
                                "row": 331,
                                "column": 12
                              },
                              "end": {
                                "row": 331,
                                "column": 13
                              },
                              "text": ":"
                            },
                            {
                              "type": "block",
                              "start": {
                                "row": 332,
                                "column": 12
                              },
                              "end": {
                                "row": 332,
                                "column": 60
                              },
                              "text": "_method_options['num_projections_per_table'] = 8",
                              "children": [
                                {
                                  "type": "expression_statement",
                                  "start": {
                                    "row": 332,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 332,
                                    "column": 60
                                  },
                                  "text": "_method_options['num_projections_per_table'] = 8",
                                  "children": [
                                    {
                                      "type": "assignment",
                                      "start": {
                                        "row": 332,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 332,
                                        "column": 60
                                      },
                                      "text": "_method_options['num_projections_per_table'] = 8",
                                      "children": [
                                        {
                                          "type": "subscript",
                                          "start": {
                                            "row": 332,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 332,
                                            "column": 56
                                          },
                                          "text": "_method_options['num_projections_per_table']",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 332,
                                                "column": 12
                                              },
                                              "end": {
                                                "row": 332,
                                                "column": 27
                                              },
                                              "text": "_method_options"
                                            },
                                            {
                                              "type": "[",
                                              "start": {
                                                "row": 332,
                                                "column": 27
                                              },
                                              "end": {
                                                "row": 332,
                                                "column": 28
                                              },
                                              "text": "["
                                            },
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 332,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 332,
                                                "column": 55
                                              },
                                              "text": "'num_projections_per_table'",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 332,
                                                    "column": 28
                                                  },
                                                  "end": {
                                                    "row": 332,
                                                    "column": 29
                                                  },
                                                  "text": "'"
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 332,
                                                    "column": 29
                                                  },
                                                  "end": {
                                                    "row": 332,
                                                    "column": 54
                                                  },
                                                  "text": "num_projections_per_table"
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 332,
                                                    "column": 54
                                                  },
                                                  "end": {
                                                    "row": 332,
                                                    "column": 55
                                                  },
                                                  "text": "'"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "]",
                                              "start": {
                                                "row": 332,
                                                "column": 55
                                              },
                                              "end": {
                                                "row": 332,
                                                "column": 56
                                              },
                                              "text": "]"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "=",
                                          "start": {
                                            "row": 332,
                                            "column": 57
                                          },
                                          "end": {
                                            "row": 332,
                                            "column": 58
                                          },
                                          "text": "="
                                        },
                                        {
                                          "type": "integer",
                                          "start": {
                                            "row": 332,
                                            "column": 59
                                          },
                                          "end": {
                                            "row": 332,
                                            "column": 60
                                          },
                                          "text": "8"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 334,
                "column": 4
              },
              "end": {
                "row": 334,
                "column": 53
              },
              "text": "## Initial validation and processing of the label"
            },
            {
              "type": "if_statement",
              "start": {
                "row": 335,
                "column": 4
              },
              "end": {
                "row": 340,
                "column": 38
              },
              "text": "if label is None:\n        _label = _robust_column_name('__id', dataset.column_names())\n        _dataset = dataset.add_row_number(_label)\n    else:\n        _label = label\n        _dataset = _copy.copy(dataset)",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 335,
                    "column": 4
                  },
                  "end": {
                    "row": 335,
                    "column": 6
                  },
                  "text": "if"
                },
                {
                  "type": "comparison_operator",
                  "start": {
                    "row": 335,
                    "column": 7
                  },
                  "end": {
                    "row": 335,
                    "column": 20
                  },
                  "text": "label is None",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 335,
                        "column": 7
                      },
                      "end": {
                        "row": 335,
                        "column": 12
                      },
                      "text": "label"
                    },
                    {
                      "type": "is",
                      "start": {
                        "row": 335,
                        "column": 13
                      },
                      "end": {
                        "row": 335,
                        "column": 15
                      },
                      "text": "is"
                    },
                    {
                      "type": "none",
                      "start": {
                        "row": 335,
                        "column": 16
                      },
                      "end": {
                        "row": 335,
                        "column": 20
                      },
                      "text": "None"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 335,
                    "column": 20
                  },
                  "end": {
                    "row": 335,
                    "column": 21
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 336,
                    "column": 8
                  },
                  "end": {
                    "row": 337,
                    "column": 49
                  },
                  "text": "_label = _robust_column_name('__id', dataset.column_names())\n        _dataset = dataset.add_row_number(_label)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 336,
                        "column": 8
                      },
                      "end": {
                        "row": 336,
                        "column": 68
                      },
                      "text": "_label = _robust_column_name('__id', dataset.column_names())",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 336,
                            "column": 8
                          },
                          "end": {
                            "row": 336,
                            "column": 68
                          },
                          "text": "_label = _robust_column_name('__id', dataset.column_names())",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 336,
                                "column": 8
                              },
                              "end": {
                                "row": 336,
                                "column": 14
                              },
                              "text": "_label"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 336,
                                "column": 15
                              },
                              "end": {
                                "row": 336,
                                "column": 16
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 336,
                                "column": 17
                              },
                              "end": {
                                "row": 336,
                                "column": 68
                              },
                              "text": "_robust_column_name('__id', dataset.column_names())",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 336,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 336,
                                    "column": 36
                                  },
                                  "text": "_robust_column_name"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 336,
                                    "column": 36
                                  },
                                  "end": {
                                    "row": 336,
                                    "column": 68
                                  },
                                  "text": "('__id', dataset.column_names())",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 336,
                                        "column": 36
                                      },
                                      "end": {
                                        "row": 336,
                                        "column": 37
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 336,
                                        "column": 37
                                      },
                                      "end": {
                                        "row": 336,
                                        "column": 43
                                      },
                                      "text": "'__id'",
                                      "children": [
                                        {
                                          "type": "string_start",
                                          "start": {
                                            "row": 336,
                                            "column": 37
                                          },
                                          "end": {
                                            "row": 336,
                                            "column": 38
                                          },
                                          "text": "'"
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 336,
                                            "column": 38
                                          },
                                          "end": {
                                            "row": 336,
                                            "column": 42
                                          },
                                          "text": "__id"
                                        },
                                        {
                                          "type": "string_end",
                                          "start": {
                                            "row": 336,
                                            "column": 42
                                          },
                                          "end": {
                                            "row": 336,
                                            "column": 43
                                          },
                                          "text": "'"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 336,
                                        "column": 43
                                      },
                                      "end": {
                                        "row": 336,
                                        "column": 44
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "call",
                                      "start": {
                                        "row": 336,
                                        "column": 45
                                      },
                                      "end": {
                                        "row": 336,
                                        "column": 67
                                      },
                                      "text": "dataset.column_names()",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "start": {
                                            "row": 336,
                                            "column": 45
                                          },
                                          "end": {
                                            "row": 336,
                                            "column": 65
                                          },
                                          "text": "dataset.column_names",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 336,
                                                "column": 45
                                              },
                                              "end": {
                                                "row": 336,
                                                "column": 52
                                              },
                                              "text": "dataset"
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 336,
                                                "column": 52
                                              },
                                              "end": {
                                                "row": 336,
                                                "column": 53
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 336,
                                                "column": 53
                                              },
                                              "end": {
                                                "row": 336,
                                                "column": 65
                                              },
                                              "text": "column_names"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "argument_list",
                                          "start": {
                                            "row": 336,
                                            "column": 65
                                          },
                                          "end": {
                                            "row": 336,
                                            "column": 67
                                          },
                                          "text": "()",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start": {
                                                "row": 336,
                                                "column": 65
                                              },
                                              "end": {
                                                "row": 336,
                                                "column": 66
                                              },
                                              "text": "("
                                            },
                                            {
                                              "type": ")",
                                              "start": {
                                                "row": 336,
                                                "column": 66
                                              },
                                              "end": {
                                                "row": 336,
                                                "column": 67
                                              },
                                              "text": ")"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 336,
                                        "column": 67
                                      },
                                      "end": {
                                        "row": 336,
                                        "column": 68
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 337,
                        "column": 8
                      },
                      "end": {
                        "row": 337,
                        "column": 49
                      },
                      "text": "_dataset = dataset.add_row_number(_label)",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 337,
                            "column": 8
                          },
                          "end": {
                            "row": 337,
                            "column": 49
                          },
                          "text": "_dataset = dataset.add_row_number(_label)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 337,
                                "column": 8
                              },
                              "end": {
                                "row": 337,
                                "column": 16
                              },
                              "text": "_dataset"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 337,
                                "column": 17
                              },
                              "end": {
                                "row": 337,
                                "column": 18
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 337,
                                "column": 19
                              },
                              "end": {
                                "row": 337,
                                "column": 49
                              },
                              "text": "dataset.add_row_number(_label)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 337,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 337,
                                    "column": 41
                                  },
                                  "text": "dataset.add_row_number",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 337,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 337,
                                        "column": 26
                                      },
                                      "text": "dataset"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 337,
                                        "column": 26
                                      },
                                      "end": {
                                        "row": 337,
                                        "column": 27
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 337,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 337,
                                        "column": 41
                                      },
                                      "text": "add_row_number"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 337,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 337,
                                    "column": 49
                                  },
                                  "text": "(_label)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 337,
                                        "column": 41
                                      },
                                      "end": {
                                        "row": 337,
                                        "column": 42
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 337,
                                        "column": 42
                                      },
                                      "end": {
                                        "row": 337,
                                        "column": 48
                                      },
                                      "text": "_label"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 337,
                                        "column": 48
                                      },
                                      "end": {
                                        "row": 337,
                                        "column": 49
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start": {
                    "row": 338,
                    "column": 4
                  },
                  "end": {
                    "row": 340,
                    "column": 38
                  },
                  "text": "else:\n        _label = label\n        _dataset = _copy.copy(dataset)",
                  "children": [
                    {
                      "type": "else",
                      "start": {
                        "row": 338,
                        "column": 4
                      },
                      "end": {
                        "row": 338,
                        "column": 8
                      },
                      "text": "else"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 338,
                        "column": 8
                      },
                      "end": {
                        "row": 338,
                        "column": 9
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 339,
                        "column": 8
                      },
                      "end": {
                        "row": 340,
                        "column": 38
                      },
                      "text": "_label = label\n        _dataset = _copy.copy(dataset)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 339,
                            "column": 8
                          },
                          "end": {
                            "row": 339,
                            "column": 22
                          },
                          "text": "_label = label",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 339,
                                "column": 8
                              },
                              "end": {
                                "row": 339,
                                "column": 22
                              },
                              "text": "_label = label",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 339,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 339,
                                    "column": 14
                                  },
                                  "text": "_label"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 339,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 339,
                                    "column": 16
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 339,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 339,
                                    "column": 22
                                  },
                                  "text": "label"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 340,
                            "column": 8
                          },
                          "end": {
                            "row": 340,
                            "column": 38
                          },
                          "text": "_dataset = _copy.copy(dataset)",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 340,
                                "column": 8
                              },
                              "end": {
                                "row": 340,
                                "column": 38
                              },
                              "text": "_dataset = _copy.copy(dataset)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 340,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 340,
                                    "column": 16
                                  },
                                  "text": "_dataset"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 340,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 340,
                                    "column": 18
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 340,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 340,
                                    "column": 38
                                  },
                                  "text": "_copy.copy(dataset)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 340,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 340,
                                        "column": 29
                                      },
                                      "text": "_copy.copy",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 340,
                                            "column": 19
                                          },
                                          "end": {
                                            "row": 340,
                                            "column": 24
                                          },
                                          "text": "_copy"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 340,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 340,
                                            "column": 25
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 340,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 340,
                                            "column": 29
                                          },
                                          "text": "copy"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 340,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 340,
                                        "column": 38
                                      },
                                      "text": "(dataset)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 340,
                                            "column": 29
                                          },
                                          "end": {
                                            "row": 340,
                                            "column": 30
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 340,
                                            "column": 30
                                          },
                                          "end": {
                                            "row": 340,
                                            "column": 37
                                          },
                                          "text": "dataset"
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 340,
                                            "column": 37
                                          },
                                          "end": {
                                            "row": 340,
                                            "column": 38
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 342,
                "column": 4
              },
              "end": {
                "row": 342,
                "column": 73
              },
              "text": "col_type_map = {c:_dataset[c].dtype for c in _dataset.column_names()}",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 342,
                    "column": 4
                  },
                  "end": {
                    "row": 342,
                    "column": 73
                  },
                  "text": "col_type_map = {c:_dataset[c].dtype for c in _dataset.column_names()}",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 342,
                        "column": 4
                      },
                      "end": {
                        "row": 342,
                        "column": 16
                      },
                      "text": "col_type_map"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 342,
                        "column": 17
                      },
                      "end": {
                        "row": 342,
                        "column": 18
                      },
                      "text": "="
                    },
                    {
                      "type": "dictionary_comprehension",
                      "start": {
                        "row": 342,
                        "column": 19
                      },
                      "end": {
                        "row": 342,
                        "column": 73
                      },
                      "text": "{c:_dataset[c].dtype for c in _dataset.column_names()}",
                      "children": [
                        {
                          "type": "{",
                          "start": {
                            "row": 342,
                            "column": 19
                          },
                          "end": {
                            "row": 342,
                            "column": 20
                          },
                          "text": "{"
                        },
                        {
                          "type": "pair",
                          "start": {
                            "row": 342,
                            "column": 20
                          },
                          "end": {
                            "row": 342,
                            "column": 39
                          },
                          "text": "c:_dataset[c].dtype",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 342,
                                "column": 20
                              },
                              "end": {
                                "row": 342,
                                "column": 21
                              },
                              "text": "c"
                            },
                            {
                              "type": ":",
                              "start": {
                                "row": 342,
                                "column": 21
                              },
                              "end": {
                                "row": 342,
                                "column": 22
                              },
                              "text": ":"
                            },
                            {
                              "type": "attribute",
                              "start": {
                                "row": 342,
                                "column": 22
                              },
                              "end": {
                                "row": 342,
                                "column": 39
                              },
                              "text": "_dataset[c].dtype",
                              "children": [
                                {
                                  "type": "subscript",
                                  "start": {
                                    "row": 342,
                                    "column": 22
                                  },
                                  "end": {
                                    "row": 342,
                                    "column": 33
                                  },
                                  "text": "_dataset[c]",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 342,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 342,
                                        "column": 30
                                      },
                                      "text": "_dataset"
                                    },
                                    {
                                      "type": "[",
                                      "start": {
                                        "row": 342,
                                        "column": 30
                                      },
                                      "end": {
                                        "row": 342,
                                        "column": 31
                                      },
                                      "text": "["
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 342,
                                        "column": 31
                                      },
                                      "end": {
                                        "row": 342,
                                        "column": 32
                                      },
                                      "text": "c"
                                    },
                                    {
                                      "type": "]",
                                      "start": {
                                        "row": 342,
                                        "column": 32
                                      },
                                      "end": {
                                        "row": 342,
                                        "column": 33
                                      },
                                      "text": "]"
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 342,
                                    "column": 33
                                  },
                                  "end": {
                                    "row": 342,
                                    "column": 34
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 342,
                                    "column": 34
                                  },
                                  "end": {
                                    "row": 342,
                                    "column": 39
                                  },
                                  "text": "dtype"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "for_in_clause",
                          "start": {
                            "row": 342,
                            "column": 40
                          },
                          "end": {
                            "row": 342,
                            "column": 72
                          },
                          "text": "for c in _dataset.column_names()",
                          "children": [
                            {
                              "type": "for",
                              "start": {
                                "row": 342,
                                "column": 40
                              },
                              "end": {
                                "row": 342,
                                "column": 43
                              },
                              "text": "for"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 342,
                                "column": 44
                              },
                              "end": {
                                "row": 342,
                                "column": 45
                              },
                              "text": "c"
                            },
                            {
                              "type": "in",
                              "start": {
                                "row": 342,
                                "column": 46
                              },
                              "end": {
                                "row": 342,
                                "column": 48
                              },
                              "text": "in"
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 342,
                                "column": 49
                              },
                              "end": {
                                "row": 342,
                                "column": 72
                              },
                              "text": "_dataset.column_names()",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 342,
                                    "column": 49
                                  },
                                  "end": {
                                    "row": 342,
                                    "column": 70
                                  },
                                  "text": "_dataset.column_names",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 342,
                                        "column": 49
                                      },
                                      "end": {
                                        "row": 342,
                                        "column": 57
                                      },
                                      "text": "_dataset"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 342,
                                        "column": 57
                                      },
                                      "end": {
                                        "row": 342,
                                        "column": 58
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 342,
                                        "column": 58
                                      },
                                      "end": {
                                        "row": 342,
                                        "column": 70
                                      },
                                      "text": "column_names"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 342,
                                    "column": 70
                                  },
                                  "end": {
                                    "row": 342,
                                    "column": 72
                                  },
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 342,
                                        "column": 70
                                      },
                                      "end": {
                                        "row": 342,
                                        "column": 71
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 342,
                                        "column": 71
                                      },
                                      "end": {
                                        "row": 342,
                                        "column": 72
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "start": {
                            "row": 342,
                            "column": 72
                          },
                          "end": {
                            "row": 342,
                            "column": 73
                          },
                          "text": "}"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 343,
                "column": 4
              },
              "end": {
                "row": 343,
                "column": 45
              },
              "text": "_validate_row_label(_label, col_type_map)",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 343,
                    "column": 4
                  },
                  "end": {
                    "row": 343,
                    "column": 45
                  },
                  "text": "_validate_row_label(_label, col_type_map)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 343,
                        "column": 4
                      },
                      "end": {
                        "row": 343,
                        "column": 23
                      },
                      "text": "_validate_row_label"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 343,
                        "column": 23
                      },
                      "end": {
                        "row": 343,
                        "column": 45
                      },
                      "text": "(_label, col_type_map)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 343,
                            "column": 23
                          },
                          "end": {
                            "row": 343,
                            "column": 24
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 343,
                            "column": 24
                          },
                          "end": {
                            "row": 343,
                            "column": 30
                          },
                          "text": "_label"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 343,
                            "column": 30
                          },
                          "end": {
                            "row": 343,
                            "column": 31
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 343,
                            "column": 32
                          },
                          "end": {
                            "row": 343,
                            "column": 44
                          },
                          "text": "col_type_map"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 343,
                            "column": 44
                          },
                          "end": {
                            "row": 343,
                            "column": 45
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 344,
                "column": 4
              },
              "end": {
                "row": 344,
                "column": 33
              },
              "text": "ref_labels = _dataset[_label]",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 344,
                    "column": 4
                  },
                  "end": {
                    "row": 344,
                    "column": 33
                  },
                  "text": "ref_labels = _dataset[_label]",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 344,
                        "column": 4
                      },
                      "end": {
                        "row": 344,
                        "column": 14
                      },
                      "text": "ref_labels"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 344,
                        "column": 15
                      },
                      "end": {
                        "row": 344,
                        "column": 16
                      },
                      "text": "="
                    },
                    {
                      "type": "subscript",
                      "start": {
                        "row": 344,
                        "column": 17
                      },
                      "end": {
                        "row": 344,
                        "column": 33
                      },
                      "text": "_dataset[_label]",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 344,
                            "column": 17
                          },
                          "end": {
                            "row": 344,
                            "column": 25
                          },
                          "text": "_dataset"
                        },
                        {
                          "type": "[",
                          "start": {
                            "row": 344,
                            "column": 25
                          },
                          "end": {
                            "row": 344,
                            "column": 26
                          },
                          "text": "["
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 344,
                            "column": 26
                          },
                          "end": {
                            "row": 344,
                            "column": 32
                          },
                          "text": "_label"
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 344,
                            "column": 32
                          },
                          "end": {
                            "row": 344,
                            "column": 33
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 347,
                "column": 4
              },
              "end": {
                "row": 347,
                "column": 80
              },
              "text": "## Determine the internal list of available feature names (may still include"
            },
            {
              "type": "comment",
              "start": {
                "row": 348,
                "column": 4
              },
              "end": {
                "row": 348,
                "column": 27
              },
              "text": "#  the row label name)."
            },
            {
              "type": "if_statement",
              "start": {
                "row": 349,
                "column": 4
              },
              "end": {
                "row": 352,
                "column": 44
              },
              "text": "if features is None:\n        _features = _dataset.column_names()\n    else:\n        _features = _copy.deepcopy(features)",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 349,
                    "column": 4
                  },
                  "end": {
                    "row": 349,
                    "column": 6
                  },
                  "text": "if"
                },
                {
                  "type": "comparison_operator",
                  "start": {
                    "row": 349,
                    "column": 7
                  },
                  "end": {
                    "row": 349,
                    "column": 23
                  },
                  "text": "features is None",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 349,
                        "column": 7
                      },
                      "end": {
                        "row": 349,
                        "column": 15
                      },
                      "text": "features"
                    },
                    {
                      "type": "is",
                      "start": {
                        "row": 349,
                        "column": 16
                      },
                      "end": {
                        "row": 349,
                        "column": 18
                      },
                      "text": "is"
                    },
                    {
                      "type": "none",
                      "start": {
                        "row": 349,
                        "column": 19
                      },
                      "end": {
                        "row": 349,
                        "column": 23
                      },
                      "text": "None"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 349,
                    "column": 23
                  },
                  "end": {
                    "row": 349,
                    "column": 24
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 350,
                    "column": 8
                  },
                  "end": {
                    "row": 350,
                    "column": 43
                  },
                  "text": "_features = _dataset.column_names()",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 350,
                        "column": 8
                      },
                      "end": {
                        "row": 350,
                        "column": 43
                      },
                      "text": "_features = _dataset.column_names()",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 350,
                            "column": 8
                          },
                          "end": {
                            "row": 350,
                            "column": 43
                          },
                          "text": "_features = _dataset.column_names()",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 350,
                                "column": 8
                              },
                              "end": {
                                "row": 350,
                                "column": 17
                              },
                              "text": "_features"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 350,
                                "column": 18
                              },
                              "end": {
                                "row": 350,
                                "column": 19
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 350,
                                "column": 20
                              },
                              "end": {
                                "row": 350,
                                "column": 43
                              },
                              "text": "_dataset.column_names()",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 350,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 350,
                                    "column": 41
                                  },
                                  "text": "_dataset.column_names",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 350,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 350,
                                        "column": 28
                                      },
                                      "text": "_dataset"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 350,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 350,
                                        "column": 29
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 350,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 350,
                                        "column": 41
                                      },
                                      "text": "column_names"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 350,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 350,
                                    "column": 43
                                  },
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 350,
                                        "column": 41
                                      },
                                      "end": {
                                        "row": 350,
                                        "column": 42
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 350,
                                        "column": 42
                                      },
                                      "end": {
                                        "row": 350,
                                        "column": 43
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start": {
                    "row": 351,
                    "column": 4
                  },
                  "end": {
                    "row": 352,
                    "column": 44
                  },
                  "text": "else:\n        _features = _copy.deepcopy(features)",
                  "children": [
                    {
                      "type": "else",
                      "start": {
                        "row": 351,
                        "column": 4
                      },
                      "end": {
                        "row": 351,
                        "column": 8
                      },
                      "text": "else"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 351,
                        "column": 8
                      },
                      "end": {
                        "row": 351,
                        "column": 9
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 352,
                        "column": 8
                      },
                      "end": {
                        "row": 352,
                        "column": 44
                      },
                      "text": "_features = _copy.deepcopy(features)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 352,
                            "column": 8
                          },
                          "end": {
                            "row": 352,
                            "column": 44
                          },
                          "text": "_features = _copy.deepcopy(features)",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 352,
                                "column": 8
                              },
                              "end": {
                                "row": 352,
                                "column": 44
                              },
                              "text": "_features = _copy.deepcopy(features)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 352,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 352,
                                    "column": 17
                                  },
                                  "text": "_features"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 352,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 352,
                                    "column": 19
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 352,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 352,
                                    "column": 44
                                  },
                                  "text": "_copy.deepcopy(features)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 352,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 352,
                                        "column": 34
                                      },
                                      "text": "_copy.deepcopy",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 352,
                                            "column": 20
                                          },
                                          "end": {
                                            "row": 352,
                                            "column": 25
                                          },
                                          "text": "_copy"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 352,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 352,
                                            "column": 26
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 352,
                                            "column": 26
                                          },
                                          "end": {
                                            "row": 352,
                                            "column": 34
                                          },
                                          "text": "deepcopy"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 352,
                                        "column": 34
                                      },
                                      "end": {
                                        "row": 352,
                                        "column": 44
                                      },
                                      "text": "(features)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 352,
                                            "column": 34
                                          },
                                          "end": {
                                            "row": 352,
                                            "column": 35
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 352,
                                            "column": 35
                                          },
                                          "end": {
                                            "row": 352,
                                            "column": 43
                                          },
                                          "text": "features"
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 352,
                                            "column": 43
                                          },
                                          "end": {
                                            "row": 352,
                                            "column": 44
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 355,
                "column": 4
              },
              "end": {
                "row": 355,
                "column": 76
              },
              "text": "## Check if there's only one feature and it's the same as the row label."
            },
            {
              "type": "comment",
              "start": {
                "row": 356,
                "column": 4
              },
              "end": {
                "row": 356,
                "column": 79
              },
              "text": "#  This would also be trapped by the composite distance validation, but the"
            },
            {
              "type": "comment",
              "start": {
                "row": 357,
                "column": 4
              },
              "end": {
                "row": 357,
                "column": 58
              },
              "text": "#  error message is not very informative for the user."
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 358,
                "column": 4
              },
              "end": {
                "row": 358,
                "column": 55
              },
              "text": "free_features = set(_features).difference([_label])",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 358,
                    "column": 4
                  },
                  "end": {
                    "row": 358,
                    "column": 55
                  },
                  "text": "free_features = set(_features).difference([_label])",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 358,
                        "column": 4
                      },
                      "end": {
                        "row": 358,
                        "column": 17
                      },
                      "text": "free_features"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 358,
                        "column": 18
                      },
                      "end": {
                        "row": 358,
                        "column": 19
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 358,
                        "column": 20
                      },
                      "end": {
                        "row": 358,
                        "column": 55
                      },
                      "text": "set(_features).difference([_label])",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 358,
                            "column": 20
                          },
                          "end": {
                            "row": 358,
                            "column": 45
                          },
                          "text": "set(_features).difference",
                          "children": [
                            {
                              "type": "call",
                              "start": {
                                "row": 358,
                                "column": 20
                              },
                              "end": {
                                "row": 358,
                                "column": 34
                              },
                              "text": "set(_features)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 358,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 358,
                                    "column": 23
                                  },
                                  "text": "set"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 358,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 358,
                                    "column": 34
                                  },
                                  "text": "(_features)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 358,
                                        "column": 23
                                      },
                                      "end": {
                                        "row": 358,
                                        "column": 24
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 358,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 358,
                                        "column": 33
                                      },
                                      "text": "_features"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 358,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 358,
                                        "column": 34
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 358,
                                "column": 34
                              },
                              "end": {
                                "row": 358,
                                "column": 35
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 358,
                                "column": 35
                              },
                              "end": {
                                "row": 358,
                                "column": 45
                              },
                              "text": "difference"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 358,
                            "column": 45
                          },
                          "end": {
                            "row": 358,
                            "column": 55
                          },
                          "text": "([_label])",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 358,
                                "column": 45
                              },
                              "end": {
                                "row": 358,
                                "column": 46
                              },
                              "text": "("
                            },
                            {
                              "type": "list",
                              "start": {
                                "row": 358,
                                "column": 46
                              },
                              "end": {
                                "row": 358,
                                "column": 54
                              },
                              "text": "[_label]",
                              "children": [
                                {
                                  "type": "[",
                                  "start": {
                                    "row": 358,
                                    "column": 46
                                  },
                                  "end": {
                                    "row": 358,
                                    "column": 47
                                  },
                                  "text": "["
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 358,
                                    "column": 47
                                  },
                                  "end": {
                                    "row": 358,
                                    "column": 53
                                  },
                                  "text": "_label"
                                },
                                {
                                  "type": "]",
                                  "start": {
                                    "row": 358,
                                    "column": 53
                                  },
                                  "end": {
                                    "row": 358,
                                    "column": 54
                                  },
                                  "text": "]"
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 358,
                                "column": 54
                              },
                              "end": {
                                "row": 358,
                                "column": 55
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 359,
                "column": 4
              },
              "end": {
                "row": 362,
                "column": 60
              },
              "text": "if len(free_features) < 1:\n        raise _ToolkitError(\"The only available feature is the same as the \" +\n                            \"row label column. Please specify features \" +\n                            \"that are not also row labels.\")",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 359,
                    "column": 4
                  },
                  "end": {
                    "row": 359,
                    "column": 6
                  },
                  "text": "if"
                },
                {
                  "type": "comparison_operator",
                  "start": {
                    "row": 359,
                    "column": 7
                  },
                  "end": {
                    "row": 359,
                    "column": 29
                  },
                  "text": "len(free_features) < 1",
                  "children": [
                    {
                      "type": "call",
                      "start": {
                        "row": 359,
                        "column": 7
                      },
                      "end": {
                        "row": 359,
                        "column": 25
                      },
                      "text": "len(free_features)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 359,
                            "column": 7
                          },
                          "end": {
                            "row": 359,
                            "column": 10
                          },
                          "text": "len"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 359,
                            "column": 10
                          },
                          "end": {
                            "row": 359,
                            "column": 25
                          },
                          "text": "(free_features)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 359,
                                "column": 10
                              },
                              "end": {
                                "row": 359,
                                "column": 11
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 359,
                                "column": 11
                              },
                              "end": {
                                "row": 359,
                                "column": 24
                              },
                              "text": "free_features"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 359,
                                "column": 24
                              },
                              "end": {
                                "row": 359,
                                "column": 25
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "<",
                      "start": {
                        "row": 359,
                        "column": 26
                      },
                      "end": {
                        "row": 359,
                        "column": 27
                      },
                      "text": "<"
                    },
                    {
                      "type": "integer",
                      "start": {
                        "row": 359,
                        "column": 28
                      },
                      "end": {
                        "row": 359,
                        "column": 29
                      },
                      "text": "1"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 359,
                    "column": 29
                  },
                  "end": {
                    "row": 359,
                    "column": 30
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 360,
                    "column": 8
                  },
                  "end": {
                    "row": 362,
                    "column": 60
                  },
                  "text": "raise _ToolkitError(\"The only available feature is the same as the \" +\n                            \"row label column. Please specify features \" +\n                            \"that are not also row labels.\")",
                  "children": [
                    {
                      "type": "raise_statement",
                      "start": {
                        "row": 360,
                        "column": 8
                      },
                      "end": {
                        "row": 362,
                        "column": 60
                      },
                      "text": "raise _ToolkitError(\"The only available feature is the same as the \" +\n                            \"row label column. Please specify features \" +\n                            \"that are not also row labels.\")",
                      "children": [
                        {
                          "type": "raise",
                          "start": {
                            "row": 360,
                            "column": 8
                          },
                          "end": {
                            "row": 360,
                            "column": 13
                          },
                          "text": "raise"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 360,
                            "column": 14
                          },
                          "end": {
                            "row": 362,
                            "column": 60
                          },
                          "text": "_ToolkitError(\"The only available feature is the same as the \" +\n                            \"row label column. Please specify features \" +\n                            \"that are not also row labels.\")",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 360,
                                "column": 14
                              },
                              "end": {
                                "row": 360,
                                "column": 27
                              },
                              "text": "_ToolkitError"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 360,
                                "column": 27
                              },
                              "end": {
                                "row": 362,
                                "column": 60
                              },
                              "text": "(\"The only available feature is the same as the \" +\n                            \"row label column. Please specify features \" +\n                            \"that are not also row labels.\")",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 360,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 360,
                                    "column": 28
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "binary_operator",
                                  "start": {
                                    "row": 360,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 362,
                                    "column": 59
                                  },
                                  "text": "\"The only available feature is the same as the \" +\n                            \"row label column. Please specify features \" +\n                            \"that are not also row labels.\"",
                                  "children": [
                                    {
                                      "type": "binary_operator",
                                      "start": {
                                        "row": 360,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 361,
                                        "column": 72
                                      },
                                      "text": "\"The only available feature is the same as the \" +\n                            \"row label column. Please specify features \"",
                                      "children": [
                                        {
                                          "type": "string",
                                          "start": {
                                            "row": 360,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 360,
                                            "column": 76
                                          },
                                          "text": "\"The only available feature is the same as the \"",
                                          "children": [
                                            {
                                              "type": "string_start",
                                              "start": {
                                                "row": 360,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 360,
                                                "column": 29
                                              },
                                              "text": "\""
                                            },
                                            {
                                              "type": "string_content",
                                              "start": {
                                                "row": 360,
                                                "column": 29
                                              },
                                              "end": {
                                                "row": 360,
                                                "column": 75
                                              },
                                              "text": "The only available feature is the same as the "
                                            },
                                            {
                                              "type": "string_end",
                                              "start": {
                                                "row": 360,
                                                "column": 75
                                              },
                                              "end": {
                                                "row": 360,
                                                "column": 76
                                              },
                                              "text": "\""
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "start": {
                                            "row": 360,
                                            "column": 77
                                          },
                                          "end": {
                                            "row": 360,
                                            "column": 78
                                          },
                                          "text": "+"
                                        },
                                        {
                                          "type": "string",
                                          "start": {
                                            "row": 361,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 361,
                                            "column": 72
                                          },
                                          "text": "\"row label column. Please specify features \"",
                                          "children": [
                                            {
                                              "type": "string_start",
                                              "start": {
                                                "row": 361,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 361,
                                                "column": 29
                                              },
                                              "text": "\""
                                            },
                                            {
                                              "type": "string_content",
                                              "start": {
                                                "row": 361,
                                                "column": 29
                                              },
                                              "end": {
                                                "row": 361,
                                                "column": 71
                                              },
                                              "text": "row label column. Please specify features "
                                            },
                                            {
                                              "type": "string_end",
                                              "start": {
                                                "row": 361,
                                                "column": 71
                                              },
                                              "end": {
                                                "row": 361,
                                                "column": 72
                                              },
                                              "text": "\""
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "+",
                                      "start": {
                                        "row": 361,
                                        "column": 73
                                      },
                                      "end": {
                                        "row": 361,
                                        "column": 74
                                      },
                                      "text": "+"
                                    },
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 362,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 362,
                                        "column": 59
                                      },
                                      "text": "\"that are not also row labels.\"",
                                      "children": [
                                        {
                                          "type": "string_start",
                                          "start": {
                                            "row": 362,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 362,
                                            "column": 29
                                          },
                                          "text": "\""
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 362,
                                            "column": 29
                                          },
                                          "end": {
                                            "row": 362,
                                            "column": 58
                                          },
                                          "text": "that are not also row labels."
                                        },
                                        {
                                          "type": "string_end",
                                          "start": {
                                            "row": 362,
                                            "column": 58
                                          },
                                          "end": {
                                            "row": 362,
                                            "column": 59
                                          },
                                          "text": "\""
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 362,
                                    "column": 59
                                  },
                                  "end": {
                                    "row": 362,
                                    "column": 60
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 365,
                "column": 4
              },
              "end": {
                "row": 365,
                "column": 53
              },
              "text": "### Validate and preprocess the distance function"
            },
            {
              "type": "comment",
              "start": {
                "row": 366,
                "column": 4
              },
              "end": {
                "row": 366,
                "column": 53
              },
              "text": "### ---------------------------------------------"
            },
            {
              "type": "comment",
              "start": {
                "row": 367,
                "column": 4
              },
              "end": {
                "row": 367,
                "column": 79
              },
              "text": "# - The form of the 'distance' controls how we interact with the 'features'"
            },
            {
              "type": "comment",
              "start": {
                "row": 368,
                "column": 4
              },
              "end": {
                "row": 368,
                "column": 26
              },
              "text": "#   parameter as well."
            },
            {
              "type": "comment",
              "start": {
                "row": 369,
                "column": 4
              },
              "end": {
                "row": 369,
                "column": 75
              },
              "text": "# - At this point, the row label 'label' may still be in the list(s) of"
            },
            {
              "type": "comment",
              "start": {
                "row": 370,
                "column": 4
              },
              "end": {
                "row": 370,
                "column": 17
              },
              "text": "#   features."
            },
            {
              "type": "comment",
              "start": {
                "row": 372,
                "column": 4
              },
              "end": {
                "row": 372,
                "column": 76
              },
              "text": "## Convert any distance function input into a single composite distance."
            },
            {
              "type": "comment",
              "start": {
                "row": 373,
                "column": 4
              },
              "end": {
                "row": 373,
                "column": 46
              },
              "text": "# distance is already a composite distance"
            },
            {
              "type": "if_statement",
              "start": {
                "row": 374,
                "column": 4
              },
              "end": {
                "row": 393,
                "column": 46
              },
              "text": "if isinstance(distance, list):\n        distance = _copy.deepcopy(distance)\n\n    # distance is a single name (except 'auto') or function handle.\n    elif (hasattr(distance, '__call__') or\n        (isinstance(distance, str) and not distance == 'auto')):\n        distance = [[_features, distance, 1]]\n\n    # distance is unspecified and needs to be constructed.\n    elif distance is None or distance == 'auto':\n        sample = _dataset.head()\n        distance = _construct_auto_distance(_features,\n                                            _dataset.column_names(),\n                                            _dataset.column_types(),\n                                            sample)\n\n    else:\n        raise TypeError(\"Input 'distance' not understood. The 'distance' \"\n                        \" argument must be a string, function handle, or \" +\n                        \"composite distance.\")",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 374,
                    "column": 4
                  },
                  "end": {
                    "row": 374,
                    "column": 6
                  },
                  "text": "if"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 374,
                    "column": 7
                  },
                  "end": {
                    "row": 374,
                    "column": 33
                  },
                  "text": "isinstance(distance, list)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 374,
                        "column": 7
                      },
                      "end": {
                        "row": 374,
                        "column": 17
                      },
                      "text": "isinstance"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 374,
                        "column": 17
                      },
                      "end": {
                        "row": 374,
                        "column": 33
                      },
                      "text": "(distance, list)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 374,
                            "column": 17
                          },
                          "end": {
                            "row": 374,
                            "column": 18
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 374,
                            "column": 18
                          },
                          "end": {
                            "row": 374,
                            "column": 26
                          },
                          "text": "distance"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 374,
                            "column": 26
                          },
                          "end": {
                            "row": 374,
                            "column": 27
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 374,
                            "column": 28
                          },
                          "end": {
                            "row": 374,
                            "column": 32
                          },
                          "text": "list"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 374,
                            "column": 32
                          },
                          "end": {
                            "row": 374,
                            "column": 33
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 374,
                    "column": 33
                  },
                  "end": {
                    "row": 374,
                    "column": 34
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 375,
                    "column": 8
                  },
                  "end": {
                    "row": 375,
                    "column": 43
                  },
                  "text": "distance = _copy.deepcopy(distance)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 375,
                        "column": 8
                      },
                      "end": {
                        "row": 375,
                        "column": 43
                      },
                      "text": "distance = _copy.deepcopy(distance)",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 375,
                            "column": 8
                          },
                          "end": {
                            "row": 375,
                            "column": 43
                          },
                          "text": "distance = _copy.deepcopy(distance)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 375,
                                "column": 8
                              },
                              "end": {
                                "row": 375,
                                "column": 16
                              },
                              "text": "distance"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 375,
                                "column": 17
                              },
                              "end": {
                                "row": 375,
                                "column": 18
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 375,
                                "column": 19
                              },
                              "end": {
                                "row": 375,
                                "column": 43
                              },
                              "text": "_copy.deepcopy(distance)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 375,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 375,
                                    "column": 33
                                  },
                                  "text": "_copy.deepcopy",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 375,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 375,
                                        "column": 24
                                      },
                                      "text": "_copy"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 375,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 375,
                                        "column": 25
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 375,
                                        "column": 25
                                      },
                                      "end": {
                                        "row": 375,
                                        "column": 33
                                      },
                                      "text": "deepcopy"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 375,
                                    "column": 33
                                  },
                                  "end": {
                                    "row": 375,
                                    "column": 43
                                  },
                                  "text": "(distance)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 375,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 375,
                                        "column": 34
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 375,
                                        "column": 34
                                      },
                                      "end": {
                                        "row": 375,
                                        "column": 42
                                      },
                                      "text": "distance"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 375,
                                        "column": 42
                                      },
                                      "end": {
                                        "row": 375,
                                        "column": 43
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "start": {
                    "row": 377,
                    "column": 4
                  },
                  "end": {
                    "row": 377,
                    "column": 67
                  },
                  "text": "# distance is a single name (except 'auto') or function handle."
                },
                {
                  "type": "elif_clause",
                  "start": {
                    "row": 378,
                    "column": 4
                  },
                  "end": {
                    "row": 380,
                    "column": 45
                  },
                  "text": "elif (hasattr(distance, '__call__') or\n        (isinstance(distance, str) and not distance == 'auto')):\n        distance = [[_features, distance, 1]]",
                  "children": [
                    {
                      "type": "elif",
                      "start": {
                        "row": 378,
                        "column": 4
                      },
                      "end": {
                        "row": 378,
                        "column": 8
                      },
                      "text": "elif"
                    },
                    {
                      "type": "parenthesized_expression",
                      "start": {
                        "row": 378,
                        "column": 9
                      },
                      "end": {
                        "row": 379,
                        "column": 63
                      },
                      "text": "(hasattr(distance, '__call__') or\n        (isinstance(distance, str) and not distance == 'auto'))",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 378,
                            "column": 9
                          },
                          "end": {
                            "row": 378,
                            "column": 10
                          },
                          "text": "("
                        },
                        {
                          "type": "boolean_operator",
                          "start": {
                            "row": 378,
                            "column": 10
                          },
                          "end": {
                            "row": 379,
                            "column": 62
                          },
                          "text": "hasattr(distance, '__call__') or\n        (isinstance(distance, str) and not distance == 'auto')",
                          "children": [
                            {
                              "type": "call",
                              "start": {
                                "row": 378,
                                "column": 10
                              },
                              "end": {
                                "row": 378,
                                "column": 39
                              },
                              "text": "hasattr(distance, '__call__')",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 378,
                                    "column": 10
                                  },
                                  "end": {
                                    "row": 378,
                                    "column": 17
                                  },
                                  "text": "hasattr"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 378,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 378,
                                    "column": 39
                                  },
                                  "text": "(distance, '__call__')",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 378,
                                        "column": 17
                                      },
                                      "end": {
                                        "row": 378,
                                        "column": 18
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 378,
                                        "column": 18
                                      },
                                      "end": {
                                        "row": 378,
                                        "column": 26
                                      },
                                      "text": "distance"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 378,
                                        "column": 26
                                      },
                                      "end": {
                                        "row": 378,
                                        "column": 27
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 378,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 378,
                                        "column": 38
                                      },
                                      "text": "'__call__'",
                                      "children": [
                                        {
                                          "type": "string_start",
                                          "start": {
                                            "row": 378,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 378,
                                            "column": 29
                                          },
                                          "text": "'"
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 378,
                                            "column": 29
                                          },
                                          "end": {
                                            "row": 378,
                                            "column": 37
                                          },
                                          "text": "__call__"
                                        },
                                        {
                                          "type": "string_end",
                                          "start": {
                                            "row": 378,
                                            "column": 37
                                          },
                                          "end": {
                                            "row": 378,
                                            "column": 38
                                          },
                                          "text": "'"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 378,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 378,
                                        "column": 39
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "or",
                              "start": {
                                "row": 378,
                                "column": 40
                              },
                              "end": {
                                "row": 378,
                                "column": 42
                              },
                              "text": "or"
                            },
                            {
                              "type": "parenthesized_expression",
                              "start": {
                                "row": 379,
                                "column": 8
                              },
                              "end": {
                                "row": 379,
                                "column": 62
                              },
                              "text": "(isinstance(distance, str) and not distance == 'auto')",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 379,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 379,
                                    "column": 9
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "boolean_operator",
                                  "start": {
                                    "row": 379,
                                    "column": 9
                                  },
                                  "end": {
                                    "row": 379,
                                    "column": 61
                                  },
                                  "text": "isinstance(distance, str) and not distance == 'auto'",
                                  "children": [
                                    {
                                      "type": "call",
                                      "start": {
                                        "row": 379,
                                        "column": 9
                                      },
                                      "end": {
                                        "row": 379,
                                        "column": 34
                                      },
                                      "text": "isinstance(distance, str)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 379,
                                            "column": 9
                                          },
                                          "end": {
                                            "row": 379,
                                            "column": 19
                                          },
                                          "text": "isinstance"
                                        },
                                        {
                                          "type": "argument_list",
                                          "start": {
                                            "row": 379,
                                            "column": 19
                                          },
                                          "end": {
                                            "row": 379,
                                            "column": 34
                                          },
                                          "text": "(distance, str)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start": {
                                                "row": 379,
                                                "column": 19
                                              },
                                              "end": {
                                                "row": 379,
                                                "column": 20
                                              },
                                              "text": "("
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 379,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 379,
                                                "column": 28
                                              },
                                              "text": "distance"
                                            },
                                            {
                                              "type": ",",
                                              "start": {
                                                "row": 379,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 379,
                                                "column": 29
                                              },
                                              "text": ","
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 379,
                                                "column": 30
                                              },
                                              "end": {
                                                "row": 379,
                                                "column": 33
                                              },
                                              "text": "str"
                                            },
                                            {
                                              "type": ")",
                                              "start": {
                                                "row": 379,
                                                "column": 33
                                              },
                                              "end": {
                                                "row": 379,
                                                "column": 34
                                              },
                                              "text": ")"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "and",
                                      "start": {
                                        "row": 379,
                                        "column": 35
                                      },
                                      "end": {
                                        "row": 379,
                                        "column": 38
                                      },
                                      "text": "and"
                                    },
                                    {
                                      "type": "not_operator",
                                      "start": {
                                        "row": 379,
                                        "column": 39
                                      },
                                      "end": {
                                        "row": 379,
                                        "column": 61
                                      },
                                      "text": "not distance == 'auto'",
                                      "children": [
                                        {
                                          "type": "not",
                                          "start": {
                                            "row": 379,
                                            "column": 39
                                          },
                                          "end": {
                                            "row": 379,
                                            "column": 42
                                          },
                                          "text": "not"
                                        },
                                        {
                                          "type": "comparison_operator",
                                          "start": {
                                            "row": 379,
                                            "column": 43
                                          },
                                          "end": {
                                            "row": 379,
                                            "column": 61
                                          },
                                          "text": "distance == 'auto'",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 379,
                                                "column": 43
                                              },
                                              "end": {
                                                "row": 379,
                                                "column": 51
                                              },
                                              "text": "distance"
                                            },
                                            {
                                              "type": "==",
                                              "start": {
                                                "row": 379,
                                                "column": 52
                                              },
                                              "end": {
                                                "row": 379,
                                                "column": 54
                                              },
                                              "text": "=="
                                            },
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 379,
                                                "column": 55
                                              },
                                              "end": {
                                                "row": 379,
                                                "column": 61
                                              },
                                              "text": "'auto'",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 379,
                                                    "column": 55
                                                  },
                                                  "end": {
                                                    "row": 379,
                                                    "column": 56
                                                  },
                                                  "text": "'"
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 379,
                                                    "column": 56
                                                  },
                                                  "end": {
                                                    "row": 379,
                                                    "column": 60
                                                  },
                                                  "text": "auto"
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 379,
                                                    "column": 60
                                                  },
                                                  "end": {
                                                    "row": 379,
                                                    "column": 61
                                                  },
                                                  "text": "'"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 379,
                                    "column": 61
                                  },
                                  "end": {
                                    "row": 379,
                                    "column": 62
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 379,
                            "column": 62
                          },
                          "end": {
                            "row": 379,
                            "column": 63
                          },
                          "text": ")"
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 379,
                        "column": 63
                      },
                      "end": {
                        "row": 379,
                        "column": 64
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 380,
                        "column": 8
                      },
                      "end": {
                        "row": 380,
                        "column": 45
                      },
                      "text": "distance = [[_features, distance, 1]]",
                      "children": [
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 380,
                            "column": 8
                          },
                          "end": {
                            "row": 380,
                            "column": 45
                          },
                          "text": "distance = [[_features, distance, 1]]",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 380,
                                "column": 8
                              },
                              "end": {
                                "row": 380,
                                "column": 45
                              },
                              "text": "distance = [[_features, distance, 1]]",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 380,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 380,
                                    "column": 16
                                  },
                                  "text": "distance"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 380,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 380,
                                    "column": 18
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "list",
                                  "start": {
                                    "row": 380,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 380,
                                    "column": 45
                                  },
                                  "text": "[[_features, distance, 1]]",
                                  "children": [
                                    {
                                      "type": "[",
                                      "start": {
                                        "row": 380,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 380,
                                        "column": 20
                                      },
                                      "text": "["
                                    },
                                    {
                                      "type": "list",
                                      "start": {
                                        "row": 380,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 380,
                                        "column": 44
                                      },
                                      "text": "[_features, distance, 1]",
                                      "children": [
                                        {
                                          "type": "[",
                                          "start": {
                                            "row": 380,
                                            "column": 20
                                          },
                                          "end": {
                                            "row": 380,
                                            "column": 21
                                          },
                                          "text": "["
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 380,
                                            "column": 21
                                          },
                                          "end": {
                                            "row": 380,
                                            "column": 30
                                          },
                                          "text": "_features"
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 380,
                                            "column": 30
                                          },
                                          "end": {
                                            "row": 380,
                                            "column": 31
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 380,
                                            "column": 32
                                          },
                                          "end": {
                                            "row": 380,
                                            "column": 40
                                          },
                                          "text": "distance"
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 380,
                                            "column": 40
                                          },
                                          "end": {
                                            "row": 380,
                                            "column": 41
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": "integer",
                                          "start": {
                                            "row": 380,
                                            "column": 42
                                          },
                                          "end": {
                                            "row": 380,
                                            "column": 43
                                          },
                                          "text": "1"
                                        },
                                        {
                                          "type": "]",
                                          "start": {
                                            "row": 380,
                                            "column": 43
                                          },
                                          "end": {
                                            "row": 380,
                                            "column": 44
                                          },
                                          "text": "]"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "]",
                                      "start": {
                                        "row": 380,
                                        "column": 44
                                      },
                                      "end": {
                                        "row": 380,
                                        "column": 45
                                      },
                                      "text": "]"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "comment",
                  "start": {
                    "row": 382,
                    "column": 4
                  },
                  "end": {
                    "row": 382,
                    "column": 58
                  },
                  "text": "# distance is unspecified and needs to be constructed."
                },
                {
                  "type": "elif_clause",
                  "start": {
                    "row": 383,
                    "column": 4
                  },
                  "end": {
                    "row": 388,
                    "column": 51
                  },
                  "text": "elif distance is None or distance == 'auto':\n        sample = _dataset.head()\n        distance = _construct_auto_distance(_features,\n                                            _dataset.column_names(),\n                                            _dataset.column_types(),\n                                            sample)",
                  "children": [
                    {
                      "type": "elif",
                      "start": {
                        "row": 383,
                        "column": 4
                      },
                      "end": {
                        "row": 383,
                        "column": 8
                      },
                      "text": "elif"
                    },
                    {
                      "type": "boolean_operator",
                      "start": {
                        "row": 383,
                        "column": 9
                      },
                      "end": {
                        "row": 383,
                        "column": 47
                      },
                      "text": "distance is None or distance == 'auto'",
                      "children": [
                        {
                          "type": "comparison_operator",
                          "start": {
                            "row": 383,
                            "column": 9
                          },
                          "end": {
                            "row": 383,
                            "column": 25
                          },
                          "text": "distance is None",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 383,
                                "column": 9
                              },
                              "end": {
                                "row": 383,
                                "column": 17
                              },
                              "text": "distance"
                            },
                            {
                              "type": "is",
                              "start": {
                                "row": 383,
                                "column": 18
                              },
                              "end": {
                                "row": 383,
                                "column": 20
                              },
                              "text": "is"
                            },
                            {
                              "type": "none",
                              "start": {
                                "row": 383,
                                "column": 21
                              },
                              "end": {
                                "row": 383,
                                "column": 25
                              },
                              "text": "None"
                            }
                          ]
                        },
                        {
                          "type": "or",
                          "start": {
                            "row": 383,
                            "column": 26
                          },
                          "end": {
                            "row": 383,
                            "column": 28
                          },
                          "text": "or"
                        },
                        {
                          "type": "comparison_operator",
                          "start": {
                            "row": 383,
                            "column": 29
                          },
                          "end": {
                            "row": 383,
                            "column": 47
                          },
                          "text": "distance == 'auto'",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 383,
                                "column": 29
                              },
                              "end": {
                                "row": 383,
                                "column": 37
                              },
                              "text": "distance"
                            },
                            {
                              "type": "==",
                              "start": {
                                "row": 383,
                                "column": 38
                              },
                              "end": {
                                "row": 383,
                                "column": 40
                              },
                              "text": "=="
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 383,
                                "column": 41
                              },
                              "end": {
                                "row": 383,
                                "column": 47
                              },
                              "text": "'auto'",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 383,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 383,
                                    "column": 42
                                  },
                                  "text": "'"
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 383,
                                    "column": 42
                                  },
                                  "end": {
                                    "row": 383,
                                    "column": 46
                                  },
                                  "text": "auto"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 383,
                                    "column": 46
                                  },
                                  "end": {
                                    "row": 383,
                                    "column": 47
                                  },
                                  "text": "'"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 383,
                        "column": 47
                      },
                      "end": {
                        "row": 383,
                        "column": 48
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 384,
                        "column": 8
                      },
                      "end": {
                        "row": 388,
                        "column": 51
                      },
                      "text": "sample = _dataset.head()\n        distance = _construct_auto_distance(_features,\n                                            _dataset.column_names(),\n                                            _dataset.column_types(),\n                                            sample)",
                      "children": [
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 384,
                            "column": 8
                          },
                          "end": {
                            "row": 384,
                            "column": 32
                          },
                          "text": "sample = _dataset.head()",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 384,
                                "column": 8
                              },
                              "end": {
                                "row": 384,
                                "column": 32
                              },
                              "text": "sample = _dataset.head()",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 384,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 384,
                                    "column": 14
                                  },
                                  "text": "sample"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 384,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 384,
                                    "column": 16
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 384,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 384,
                                    "column": 32
                                  },
                                  "text": "_dataset.head()",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 384,
                                        "column": 17
                                      },
                                      "end": {
                                        "row": 384,
                                        "column": 30
                                      },
                                      "text": "_dataset.head",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 384,
                                            "column": 17
                                          },
                                          "end": {
                                            "row": 384,
                                            "column": 25
                                          },
                                          "text": "_dataset"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 384,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 384,
                                            "column": 26
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 384,
                                            "column": 26
                                          },
                                          "end": {
                                            "row": 384,
                                            "column": 30
                                          },
                                          "text": "head"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 384,
                                        "column": 30
                                      },
                                      "end": {
                                        "row": 384,
                                        "column": 32
                                      },
                                      "text": "()",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 384,
                                            "column": 30
                                          },
                                          "end": {
                                            "row": 384,
                                            "column": 31
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 384,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 384,
                                            "column": 32
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 385,
                            "column": 8
                          },
                          "end": {
                            "row": 388,
                            "column": 51
                          },
                          "text": "distance = _construct_auto_distance(_features,\n                                            _dataset.column_names(),\n                                            _dataset.column_types(),\n                                            sample)",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 385,
                                "column": 8
                              },
                              "end": {
                                "row": 388,
                                "column": 51
                              },
                              "text": "distance = _construct_auto_distance(_features,\n                                            _dataset.column_names(),\n                                            _dataset.column_types(),\n                                            sample)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 385,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 385,
                                    "column": 16
                                  },
                                  "text": "distance"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 385,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 385,
                                    "column": 18
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 385,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 388,
                                    "column": 51
                                  },
                                  "text": "_construct_auto_distance(_features,\n                                            _dataset.column_names(),\n                                            _dataset.column_types(),\n                                            sample)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 385,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 385,
                                        "column": 43
                                      },
                                      "text": "_construct_auto_distance"
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 385,
                                        "column": 43
                                      },
                                      "end": {
                                        "row": 388,
                                        "column": 51
                                      },
                                      "text": "(_features,\n                                            _dataset.column_names(),\n                                            _dataset.column_types(),\n                                            sample)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 385,
                                            "column": 43
                                          },
                                          "end": {
                                            "row": 385,
                                            "column": 44
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 385,
                                            "column": 44
                                          },
                                          "end": {
                                            "row": 385,
                                            "column": 53
                                          },
                                          "text": "_features"
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 385,
                                            "column": 53
                                          },
                                          "end": {
                                            "row": 385,
                                            "column": 54
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": "call",
                                          "start": {
                                            "row": 386,
                                            "column": 44
                                          },
                                          "end": {
                                            "row": 386,
                                            "column": 67
                                          },
                                          "text": "_dataset.column_names()",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "start": {
                                                "row": 386,
                                                "column": 44
                                              },
                                              "end": {
                                                "row": 386,
                                                "column": 65
                                              },
                                              "text": "_dataset.column_names",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 386,
                                                    "column": 44
                                                  },
                                                  "end": {
                                                    "row": 386,
                                                    "column": 52
                                                  },
                                                  "text": "_dataset"
                                                },
                                                {
                                                  "type": ".",
                                                  "start": {
                                                    "row": 386,
                                                    "column": 52
                                                  },
                                                  "end": {
                                                    "row": 386,
                                                    "column": 53
                                                  },
                                                  "text": "."
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 386,
                                                    "column": 53
                                                  },
                                                  "end": {
                                                    "row": 386,
                                                    "column": 65
                                                  },
                                                  "text": "column_names"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 386,
                                                "column": 65
                                              },
                                              "end": {
                                                "row": 386,
                                                "column": 67
                                              },
                                              "text": "()",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 386,
                                                    "column": 65
                                                  },
                                                  "end": {
                                                    "row": 386,
                                                    "column": 66
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 386,
                                                    "column": 66
                                                  },
                                                  "end": {
                                                    "row": 386,
                                                    "column": 67
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 386,
                                            "column": 67
                                          },
                                          "end": {
                                            "row": 386,
                                            "column": 68
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": "call",
                                          "start": {
                                            "row": 387,
                                            "column": 44
                                          },
                                          "end": {
                                            "row": 387,
                                            "column": 67
                                          },
                                          "text": "_dataset.column_types()",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "start": {
                                                "row": 387,
                                                "column": 44
                                              },
                                              "end": {
                                                "row": 387,
                                                "column": 65
                                              },
                                              "text": "_dataset.column_types",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 387,
                                                    "column": 44
                                                  },
                                                  "end": {
                                                    "row": 387,
                                                    "column": 52
                                                  },
                                                  "text": "_dataset"
                                                },
                                                {
                                                  "type": ".",
                                                  "start": {
                                                    "row": 387,
                                                    "column": 52
                                                  },
                                                  "end": {
                                                    "row": 387,
                                                    "column": 53
                                                  },
                                                  "text": "."
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 387,
                                                    "column": 53
                                                  },
                                                  "end": {
                                                    "row": 387,
                                                    "column": 65
                                                  },
                                                  "text": "column_types"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 387,
                                                "column": 65
                                              },
                                              "end": {
                                                "row": 387,
                                                "column": 67
                                              },
                                              "text": "()",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 387,
                                                    "column": 65
                                                  },
                                                  "end": {
                                                    "row": 387,
                                                    "column": 66
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 387,
                                                    "column": 66
                                                  },
                                                  "end": {
                                                    "row": 387,
                                                    "column": 67
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 387,
                                            "column": 67
                                          },
                                          "end": {
                                            "row": 387,
                                            "column": 68
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 388,
                                            "column": 44
                                          },
                                          "end": {
                                            "row": 388,
                                            "column": 50
                                          },
                                          "text": "sample"
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 388,
                                            "column": 50
                                          },
                                          "end": {
                                            "row": 388,
                                            "column": 51
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start": {
                    "row": 390,
                    "column": 4
                  },
                  "end": {
                    "row": 393,
                    "column": 46
                  },
                  "text": "else:\n        raise TypeError(\"Input 'distance' not understood. The 'distance' \"\n                        \" argument must be a string, function handle, or \" +\n                        \"composite distance.\")",
                  "children": [
                    {
                      "type": "else",
                      "start": {
                        "row": 390,
                        "column": 4
                      },
                      "end": {
                        "row": 390,
                        "column": 8
                      },
                      "text": "else"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 390,
                        "column": 8
                      },
                      "end": {
                        "row": 390,
                        "column": 9
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 391,
                        "column": 8
                      },
                      "end": {
                        "row": 393,
                        "column": 46
                      },
                      "text": "raise TypeError(\"Input 'distance' not understood. The 'distance' \"\n                        \" argument must be a string, function handle, or \" +\n                        \"composite distance.\")",
                      "children": [
                        {
                          "type": "raise_statement",
                          "start": {
                            "row": 391,
                            "column": 8
                          },
                          "end": {
                            "row": 393,
                            "column": 46
                          },
                          "text": "raise TypeError(\"Input 'distance' not understood. The 'distance' \"\n                        \" argument must be a string, function handle, or \" +\n                        \"composite distance.\")",
                          "children": [
                            {
                              "type": "raise",
                              "start": {
                                "row": 391,
                                "column": 8
                              },
                              "end": {
                                "row": 391,
                                "column": 13
                              },
                              "text": "raise"
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 391,
                                "column": 14
                              },
                              "end": {
                                "row": 393,
                                "column": 46
                              },
                              "text": "TypeError(\"Input 'distance' not understood. The 'distance' \"\n                        \" argument must be a string, function handle, or \" +\n                        \"composite distance.\")",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 391,
                                    "column": 14
                                  },
                                  "end": {
                                    "row": 391,
                                    "column": 23
                                  },
                                  "text": "TypeError"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 391,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 393,
                                    "column": 46
                                  },
                                  "text": "(\"Input 'distance' not understood. The 'distance' \"\n                        \" argument must be a string, function handle, or \" +\n                        \"composite distance.\")",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 391,
                                        "column": 23
                                      },
                                      "end": {
                                        "row": 391,
                                        "column": 24
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "binary_operator",
                                      "start": {
                                        "row": 391,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 393,
                                        "column": 45
                                      },
                                      "text": "\"Input 'distance' not understood. The 'distance' \"\n                        \" argument must be a string, function handle, or \" +\n                        \"composite distance.\"",
                                      "children": [
                                        {
                                          "type": "concatenated_string",
                                          "start": {
                                            "row": 391,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 392,
                                            "column": 74
                                          },
                                          "text": "\"Input 'distance' not understood. The 'distance' \"\n                        \" argument must be a string, function handle, or \"",
                                          "children": [
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 391,
                                                "column": 24
                                              },
                                              "end": {
                                                "row": 391,
                                                "column": 74
                                              },
                                              "text": "\"Input 'distance' not understood. The 'distance' \"",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 391,
                                                    "column": 24
                                                  },
                                                  "end": {
                                                    "row": 391,
                                                    "column": 25
                                                  },
                                                  "text": "\""
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 391,
                                                    "column": 25
                                                  },
                                                  "end": {
                                                    "row": 391,
                                                    "column": 73
                                                  },
                                                  "text": "Input 'distance' not understood. The 'distance' "
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 391,
                                                    "column": 73
                                                  },
                                                  "end": {
                                                    "row": 391,
                                                    "column": 74
                                                  },
                                                  "text": "\""
                                                }
                                              ]
                                            },
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 392,
                                                "column": 24
                                              },
                                              "end": {
                                                "row": 392,
                                                "column": 74
                                              },
                                              "text": "\" argument must be a string, function handle, or \"",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 392,
                                                    "column": 24
                                                  },
                                                  "end": {
                                                    "row": 392,
                                                    "column": 25
                                                  },
                                                  "text": "\""
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 392,
                                                    "column": 25
                                                  },
                                                  "end": {
                                                    "row": 392,
                                                    "column": 73
                                                  },
                                                  "text": " argument must be a string, function handle, or "
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 392,
                                                    "column": 73
                                                  },
                                                  "end": {
                                                    "row": 392,
                                                    "column": 74
                                                  },
                                                  "text": "\""
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "start": {
                                            "row": 392,
                                            "column": 75
                                          },
                                          "end": {
                                            "row": 392,
                                            "column": 76
                                          },
                                          "text": "+"
                                        },
                                        {
                                          "type": "string",
                                          "start": {
                                            "row": 393,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 393,
                                            "column": 45
                                          },
                                          "text": "\"composite distance.\"",
                                          "children": [
                                            {
                                              "type": "string_start",
                                              "start": {
                                                "row": 393,
                                                "column": 24
                                              },
                                              "end": {
                                                "row": 393,
                                                "column": 25
                                              },
                                              "text": "\""
                                            },
                                            {
                                              "type": "string_content",
                                              "start": {
                                                "row": 393,
                                                "column": 25
                                              },
                                              "end": {
                                                "row": 393,
                                                "column": 44
                                              },
                                              "text": "composite distance."
                                            },
                                            {
                                              "type": "string_end",
                                              "start": {
                                                "row": 393,
                                                "column": 44
                                              },
                                              "end": {
                                                "row": 393,
                                                "column": 45
                                              },
                                              "text": "\""
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 393,
                                        "column": 45
                                      },
                                      "end": {
                                        "row": 393,
                                        "column": 46
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 395,
                "column": 4
              },
              "end": {
                "row": 395,
                "column": 73
              },
              "text": "## Basic composite distance validation, remove the row label from all"
            },
            {
              "type": "comment",
              "start": {
                "row": 396,
                "column": 4
              },
              "end": {
                "row": 396,
                "column": 80
              },
              "text": "#  feature lists, and convert string distance names into distance functions."
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 397,
                "column": 4
              },
              "end": {
                "row": 397,
                "column": 69
              },
              "text": "distance = _scrub_composite_distance_features(distance, [_label])",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 397,
                    "column": 4
                  },
                  "end": {
                    "row": 397,
                    "column": 69
                  },
                  "text": "distance = _scrub_composite_distance_features(distance, [_label])",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 397,
                        "column": 4
                      },
                      "end": {
                        "row": 397,
                        "column": 12
                      },
                      "text": "distance"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 397,
                        "column": 13
                      },
                      "end": {
                        "row": 397,
                        "column": 14
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 397,
                        "column": 15
                      },
                      "end": {
                        "row": 397,
                        "column": 69
                      },
                      "text": "_scrub_composite_distance_features(distance, [_label])",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 397,
                            "column": 15
                          },
                          "end": {
                            "row": 397,
                            "column": 49
                          },
                          "text": "_scrub_composite_distance_features"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 397,
                            "column": 49
                          },
                          "end": {
                            "row": 397,
                            "column": 69
                          },
                          "text": "(distance, [_label])",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 397,
                                "column": 49
                              },
                              "end": {
                                "row": 397,
                                "column": 50
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 397,
                                "column": 50
                              },
                              "end": {
                                "row": 397,
                                "column": 58
                              },
                              "text": "distance"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 397,
                                "column": 58
                              },
                              "end": {
                                "row": 397,
                                "column": 59
                              },
                              "text": ","
                            },
                            {
                              "type": "list",
                              "start": {
                                "row": 397,
                                "column": 60
                              },
                              "end": {
                                "row": 397,
                                "column": 68
                              },
                              "text": "[_label]",
                              "children": [
                                {
                                  "type": "[",
                                  "start": {
                                    "row": 397,
                                    "column": 60
                                  },
                                  "end": {
                                    "row": 397,
                                    "column": 61
                                  },
                                  "text": "["
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 397,
                                    "column": 61
                                  },
                                  "end": {
                                    "row": 397,
                                    "column": 67
                                  },
                                  "text": "_label"
                                },
                                {
                                  "type": "]",
                                  "start": {
                                    "row": 397,
                                    "column": 67
                                  },
                                  "end": {
                                    "row": 397,
                                    "column": 68
                                  },
                                  "text": "]"
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 397,
                                "column": 68
                              },
                              "end": {
                                "row": 397,
                                "column": 69
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 398,
                "column": 4
              },
              "end": {
                "row": 398,
                "column": 61
              },
              "text": "distance = _convert_distance_names_to_functions(distance)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 398,
                    "column": 4
                  },
                  "end": {
                    "row": 398,
                    "column": 61
                  },
                  "text": "distance = _convert_distance_names_to_functions(distance)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 398,
                        "column": 4
                      },
                      "end": {
                        "row": 398,
                        "column": 12
                      },
                      "text": "distance"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 398,
                        "column": 13
                      },
                      "end": {
                        "row": 398,
                        "column": 14
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 398,
                        "column": 15
                      },
                      "end": {
                        "row": 398,
                        "column": 61
                      },
                      "text": "_convert_distance_names_to_functions(distance)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 398,
                            "column": 15
                          },
                          "end": {
                            "row": 398,
                            "column": 51
                          },
                          "text": "_convert_distance_names_to_functions"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 398,
                            "column": 51
                          },
                          "end": {
                            "row": 398,
                            "column": 61
                          },
                          "text": "(distance)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 398,
                                "column": 51
                              },
                              "end": {
                                "row": 398,
                                "column": 52
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 398,
                                "column": 52
                              },
                              "end": {
                                "row": 398,
                                "column": 60
                              },
                              "text": "distance"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 398,
                                "column": 60
                              },
                              "end": {
                                "row": 398,
                                "column": 61
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 399,
                "column": 4
              },
              "end": {
                "row": 399,
                "column": 42
              },
              "text": "_validate_composite_distance(distance)",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 399,
                    "column": 4
                  },
                  "end": {
                    "row": 399,
                    "column": 42
                  },
                  "text": "_validate_composite_distance(distance)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 399,
                        "column": 4
                      },
                      "end": {
                        "row": 399,
                        "column": 32
                      },
                      "text": "_validate_composite_distance"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 399,
                        "column": 32
                      },
                      "end": {
                        "row": 399,
                        "column": 42
                      },
                      "text": "(distance)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 399,
                            "column": 32
                          },
                          "end": {
                            "row": 399,
                            "column": 33
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 399,
                            "column": 33
                          },
                          "end": {
                            "row": 399,
                            "column": 41
                          },
                          "text": "distance"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 399,
                            "column": 41
                          },
                          "end": {
                            "row": 399,
                            "column": 42
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 401,
                "column": 4
              },
              "end": {
                "row": 401,
                "column": 62
              },
              "text": "## Raise an error if any distances are used with non-lists"
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 402,
                "column": 4
              },
              "end": {
                "row": 402,
                "column": 31
              },
              "text": "list_features_to_check = []",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 402,
                    "column": 4
                  },
                  "end": {
                    "row": 402,
                    "column": 31
                  },
                  "text": "list_features_to_check = []",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 402,
                        "column": 4
                      },
                      "end": {
                        "row": 402,
                        "column": 26
                      },
                      "text": "list_features_to_check"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 402,
                        "column": 27
                      },
                      "end": {
                        "row": 402,
                        "column": 28
                      },
                      "text": "="
                    },
                    {
                      "type": "list",
                      "start": {
                        "row": 402,
                        "column": 29
                      },
                      "end": {
                        "row": 402,
                        "column": 31
                      },
                      "text": "[]",
                      "children": [
                        {
                          "type": "[",
                          "start": {
                            "row": 402,
                            "column": 29
                          },
                          "end": {
                            "row": 402,
                            "column": 30
                          },
                          "text": "["
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 402,
                            "column": 30
                          },
                          "end": {
                            "row": 402,
                            "column": 31
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 403,
                "column": 4
              },
              "end": {
                "row": 403,
                "column": 106
              },
              "text": "sparse_distances = ['jaccard', 'weighted_jaccard', 'cosine', 'dot_product', 'transformed_dot_product']",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 403,
                    "column": 4
                  },
                  "end": {
                    "row": 403,
                    "column": 106
                  },
                  "text": "sparse_distances = ['jaccard', 'weighted_jaccard', 'cosine', 'dot_product', 'transformed_dot_product']",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 403,
                        "column": 4
                      },
                      "end": {
                        "row": 403,
                        "column": 20
                      },
                      "text": "sparse_distances"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 403,
                        "column": 21
                      },
                      "end": {
                        "row": 403,
                        "column": 22
                      },
                      "text": "="
                    },
                    {
                      "type": "list",
                      "start": {
                        "row": 403,
                        "column": 23
                      },
                      "end": {
                        "row": 403,
                        "column": 106
                      },
                      "text": "['jaccard', 'weighted_jaccard', 'cosine', 'dot_product', 'transformed_dot_product']",
                      "children": [
                        {
                          "type": "[",
                          "start": {
                            "row": 403,
                            "column": 23
                          },
                          "end": {
                            "row": 403,
                            "column": 24
                          },
                          "text": "["
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 403,
                            "column": 24
                          },
                          "end": {
                            "row": 403,
                            "column": 33
                          },
                          "text": "'jaccard'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 403,
                                "column": 24
                              },
                              "end": {
                                "row": 403,
                                "column": 25
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 403,
                                "column": 25
                              },
                              "end": {
                                "row": 403,
                                "column": 32
                              },
                              "text": "jaccard"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 403,
                                "column": 32
                              },
                              "end": {
                                "row": 403,
                                "column": 33
                              },
                              "text": "'"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 403,
                            "column": 33
                          },
                          "end": {
                            "row": 403,
                            "column": 34
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 403,
                            "column": 35
                          },
                          "end": {
                            "row": 403,
                            "column": 53
                          },
                          "text": "'weighted_jaccard'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 403,
                                "column": 35
                              },
                              "end": {
                                "row": 403,
                                "column": 36
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 403,
                                "column": 36
                              },
                              "end": {
                                "row": 403,
                                "column": 52
                              },
                              "text": "weighted_jaccard"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 403,
                                "column": 52
                              },
                              "end": {
                                "row": 403,
                                "column": 53
                              },
                              "text": "'"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 403,
                            "column": 53
                          },
                          "end": {
                            "row": 403,
                            "column": 54
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 403,
                            "column": 55
                          },
                          "end": {
                            "row": 403,
                            "column": 63
                          },
                          "text": "'cosine'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 403,
                                "column": 55
                              },
                              "end": {
                                "row": 403,
                                "column": 56
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 403,
                                "column": 56
                              },
                              "end": {
                                "row": 403,
                                "column": 62
                              },
                              "text": "cosine"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 403,
                                "column": 62
                              },
                              "end": {
                                "row": 403,
                                "column": 63
                              },
                              "text": "'"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 403,
                            "column": 63
                          },
                          "end": {
                            "row": 403,
                            "column": 64
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 403,
                            "column": 65
                          },
                          "end": {
                            "row": 403,
                            "column": 78
                          },
                          "text": "'dot_product'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 403,
                                "column": 65
                              },
                              "end": {
                                "row": 403,
                                "column": 66
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 403,
                                "column": 66
                              },
                              "end": {
                                "row": 403,
                                "column": 77
                              },
                              "text": "dot_product"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 403,
                                "column": 77
                              },
                              "end": {
                                "row": 403,
                                "column": 78
                              },
                              "text": "'"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 403,
                            "column": 78
                          },
                          "end": {
                            "row": 403,
                            "column": 79
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 403,
                            "column": 80
                          },
                          "end": {
                            "row": 403,
                            "column": 105
                          },
                          "text": "'transformed_dot_product'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 403,
                                "column": 80
                              },
                              "end": {
                                "row": 403,
                                "column": 81
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 403,
                                "column": 81
                              },
                              "end": {
                                "row": 403,
                                "column": 104
                              },
                              "text": "transformed_dot_product"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 403,
                                "column": 104
                              },
                              "end": {
                                "row": 403,
                                "column": 105
                              },
                              "text": "'"
                            }
                          ]
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 403,
                            "column": 105
                          },
                          "end": {
                            "row": 403,
                            "column": 106
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 404,
                "column": 4
              },
              "end": {
                "row": 404,
                "column": 84
              },
              "text": "sparse_distances = [_turicreate.distances.__dict__[k] for k in sparse_distances]",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 404,
                    "column": 4
                  },
                  "end": {
                    "row": 404,
                    "column": 84
                  },
                  "text": "sparse_distances = [_turicreate.distances.__dict__[k] for k in sparse_distances]",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 404,
                        "column": 4
                      },
                      "end": {
                        "row": 404,
                        "column": 20
                      },
                      "text": "sparse_distances"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 404,
                        "column": 21
                      },
                      "end": {
                        "row": 404,
                        "column": 22
                      },
                      "text": "="
                    },
                    {
                      "type": "list_comprehension",
                      "start": {
                        "row": 404,
                        "column": 23
                      },
                      "end": {
                        "row": 404,
                        "column": 84
                      },
                      "text": "[_turicreate.distances.__dict__[k] for k in sparse_distances]",
                      "children": [
                        {
                          "type": "[",
                          "start": {
                            "row": 404,
                            "column": 23
                          },
                          "end": {
                            "row": 404,
                            "column": 24
                          },
                          "text": "["
                        },
                        {
                          "type": "subscript",
                          "start": {
                            "row": 404,
                            "column": 24
                          },
                          "end": {
                            "row": 404,
                            "column": 57
                          },
                          "text": "_turicreate.distances.__dict__[k]",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 404,
                                "column": 24
                              },
                              "end": {
                                "row": 404,
                                "column": 54
                              },
                              "text": "_turicreate.distances.__dict__",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 404,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 404,
                                    "column": 45
                                  },
                                  "text": "_turicreate.distances",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 404,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 404,
                                        "column": 35
                                      },
                                      "text": "_turicreate"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 404,
                                        "column": 35
                                      },
                                      "end": {
                                        "row": 404,
                                        "column": 36
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 404,
                                        "column": 36
                                      },
                                      "end": {
                                        "row": 404,
                                        "column": 45
                                      },
                                      "text": "distances"
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 404,
                                    "column": 45
                                  },
                                  "end": {
                                    "row": 404,
                                    "column": 46
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 404,
                                    "column": 46
                                  },
                                  "end": {
                                    "row": 404,
                                    "column": 54
                                  },
                                  "text": "__dict__"
                                }
                              ]
                            },
                            {
                              "type": "[",
                              "start": {
                                "row": 404,
                                "column": 54
                              },
                              "end": {
                                "row": 404,
                                "column": 55
                              },
                              "text": "["
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 404,
                                "column": 55
                              },
                              "end": {
                                "row": 404,
                                "column": 56
                              },
                              "text": "k"
                            },
                            {
                              "type": "]",
                              "start": {
                                "row": 404,
                                "column": 56
                              },
                              "end": {
                                "row": 404,
                                "column": 57
                              },
                              "text": "]"
                            }
                          ]
                        },
                        {
                          "type": "for_in_clause",
                          "start": {
                            "row": 404,
                            "column": 58
                          },
                          "end": {
                            "row": 404,
                            "column": 83
                          },
                          "text": "for k in sparse_distances",
                          "children": [
                            {
                              "type": "for",
                              "start": {
                                "row": 404,
                                "column": 58
                              },
                              "end": {
                                "row": 404,
                                "column": 61
                              },
                              "text": "for"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 404,
                                "column": 62
                              },
                              "end": {
                                "row": 404,
                                "column": 63
                              },
                              "text": "k"
                            },
                            {
                              "type": "in",
                              "start": {
                                "row": 404,
                                "column": 64
                              },
                              "end": {
                                "row": 404,
                                "column": 66
                              },
                              "text": "in"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 404,
                                "column": 67
                              },
                              "end": {
                                "row": 404,
                                "column": 83
                              },
                              "text": "sparse_distances"
                            }
                          ]
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 404,
                            "column": 83
                          },
                          "end": {
                            "row": 404,
                            "column": 84
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "for_statement",
              "start": {
                "row": 405,
                "column": 4
              },
              "end": {
                "row": 413,
                "column": 57
              },
              "text": "for d in distance:\n        feature_names, dist, _ = d\n        list_features = [f for f in feature_names if _dataset[f].dtype == list]\n        for f in list_features:\n            if dist in sparse_distances:\n                list_features_to_check.append(f)\n            else:\n                raise TypeError(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")",
              "children": [
                {
                  "type": "for",
                  "start": {
                    "row": 405,
                    "column": 4
                  },
                  "end": {
                    "row": 405,
                    "column": 7
                  },
                  "text": "for"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 405,
                    "column": 8
                  },
                  "end": {
                    "row": 405,
                    "column": 9
                  },
                  "text": "d"
                },
                {
                  "type": "in",
                  "start": {
                    "row": 405,
                    "column": 10
                  },
                  "end": {
                    "row": 405,
                    "column": 12
                  },
                  "text": "in"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 405,
                    "column": 13
                  },
                  "end": {
                    "row": 405,
                    "column": 21
                  },
                  "text": "distance"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 405,
                    "column": 21
                  },
                  "end": {
                    "row": 405,
                    "column": 22
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 406,
                    "column": 8
                  },
                  "end": {
                    "row": 413,
                    "column": 57
                  },
                  "text": "feature_names, dist, _ = d\n        list_features = [f for f in feature_names if _dataset[f].dtype == list]\n        for f in list_features:\n            if dist in sparse_distances:\n                list_features_to_check.append(f)\n            else:\n                raise TypeError(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 406,
                        "column": 8
                      },
                      "end": {
                        "row": 406,
                        "column": 34
                      },
                      "text": "feature_names, dist, _ = d",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 406,
                            "column": 8
                          },
                          "end": {
                            "row": 406,
                            "column": 34
                          },
                          "text": "feature_names, dist, _ = d",
                          "children": [
                            {
                              "type": "pattern_list",
                              "start": {
                                "row": 406,
                                "column": 8
                              },
                              "end": {
                                "row": 406,
                                "column": 30
                              },
                              "text": "feature_names, dist, _",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 406,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 406,
                                    "column": 21
                                  },
                                  "text": "feature_names"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 406,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 406,
                                    "column": 22
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 406,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 406,
                                    "column": 27
                                  },
                                  "text": "dist"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 406,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 406,
                                    "column": 28
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 406,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 406,
                                    "column": 30
                                  },
                                  "text": "_"
                                }
                              ]
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 406,
                                "column": 31
                              },
                              "end": {
                                "row": 406,
                                "column": 32
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 406,
                                "column": 33
                              },
                              "end": {
                                "row": 406,
                                "column": 34
                              },
                              "text": "d"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 407,
                        "column": 8
                      },
                      "end": {
                        "row": 407,
                        "column": 79
                      },
                      "text": "list_features = [f for f in feature_names if _dataset[f].dtype == list]",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 407,
                            "column": 8
                          },
                          "end": {
                            "row": 407,
                            "column": 79
                          },
                          "text": "list_features = [f for f in feature_names if _dataset[f].dtype == list]",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 407,
                                "column": 8
                              },
                              "end": {
                                "row": 407,
                                "column": 21
                              },
                              "text": "list_features"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 407,
                                "column": 22
                              },
                              "end": {
                                "row": 407,
                                "column": 23
                              },
                              "text": "="
                            },
                            {
                              "type": "list_comprehension",
                              "start": {
                                "row": 407,
                                "column": 24
                              },
                              "end": {
                                "row": 407,
                                "column": 79
                              },
                              "text": "[f for f in feature_names if _dataset[f].dtype == list]",
                              "children": [
                                {
                                  "type": "[",
                                  "start": {
                                    "row": 407,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 407,
                                    "column": 25
                                  },
                                  "text": "["
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 407,
                                    "column": 25
                                  },
                                  "end": {
                                    "row": 407,
                                    "column": 26
                                  },
                                  "text": "f"
                                },
                                {
                                  "type": "for_in_clause",
                                  "start": {
                                    "row": 407,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 407,
                                    "column": 49
                                  },
                                  "text": "for f in feature_names",
                                  "children": [
                                    {
                                      "type": "for",
                                      "start": {
                                        "row": 407,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 407,
                                        "column": 30
                                      },
                                      "text": "for"
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 407,
                                        "column": 31
                                      },
                                      "end": {
                                        "row": 407,
                                        "column": 32
                                      },
                                      "text": "f"
                                    },
                                    {
                                      "type": "in",
                                      "start": {
                                        "row": 407,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 407,
                                        "column": 35
                                      },
                                      "text": "in"
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 407,
                                        "column": 36
                                      },
                                      "end": {
                                        "row": 407,
                                        "column": 49
                                      },
                                      "text": "feature_names"
                                    }
                                  ]
                                },
                                {
                                  "type": "if_clause",
                                  "start": {
                                    "row": 407,
                                    "column": 50
                                  },
                                  "end": {
                                    "row": 407,
                                    "column": 78
                                  },
                                  "text": "if _dataset[f].dtype == list",
                                  "children": [
                                    {
                                      "type": "if",
                                      "start": {
                                        "row": 407,
                                        "column": 50
                                      },
                                      "end": {
                                        "row": 407,
                                        "column": 52
                                      },
                                      "text": "if"
                                    },
                                    {
                                      "type": "comparison_operator",
                                      "start": {
                                        "row": 407,
                                        "column": 53
                                      },
                                      "end": {
                                        "row": 407,
                                        "column": 78
                                      },
                                      "text": "_dataset[f].dtype == list",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "start": {
                                            "row": 407,
                                            "column": 53
                                          },
                                          "end": {
                                            "row": 407,
                                            "column": 70
                                          },
                                          "text": "_dataset[f].dtype",
                                          "children": [
                                            {
                                              "type": "subscript",
                                              "start": {
                                                "row": 407,
                                                "column": 53
                                              },
                                              "end": {
                                                "row": 407,
                                                "column": 64
                                              },
                                              "text": "_dataset[f]",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 407,
                                                    "column": 53
                                                  },
                                                  "end": {
                                                    "row": 407,
                                                    "column": 61
                                                  },
                                                  "text": "_dataset"
                                                },
                                                {
                                                  "type": "[",
                                                  "start": {
                                                    "row": 407,
                                                    "column": 61
                                                  },
                                                  "end": {
                                                    "row": 407,
                                                    "column": 62
                                                  },
                                                  "text": "["
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 407,
                                                    "column": 62
                                                  },
                                                  "end": {
                                                    "row": 407,
                                                    "column": 63
                                                  },
                                                  "text": "f"
                                                },
                                                {
                                                  "type": "]",
                                                  "start": {
                                                    "row": 407,
                                                    "column": 63
                                                  },
                                                  "end": {
                                                    "row": 407,
                                                    "column": 64
                                                  },
                                                  "text": "]"
                                                }
                                              ]
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 407,
                                                "column": 64
                                              },
                                              "end": {
                                                "row": 407,
                                                "column": 65
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 407,
                                                "column": 65
                                              },
                                              "end": {
                                                "row": 407,
                                                "column": 70
                                              },
                                              "text": "dtype"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "==",
                                          "start": {
                                            "row": 407,
                                            "column": 71
                                          },
                                          "end": {
                                            "row": 407,
                                            "column": 73
                                          },
                                          "text": "=="
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 407,
                                            "column": 74
                                          },
                                          "end": {
                                            "row": 407,
                                            "column": 78
                                          },
                                          "text": "list"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "]",
                                  "start": {
                                    "row": 407,
                                    "column": 78
                                  },
                                  "end": {
                                    "row": 407,
                                    "column": 79
                                  },
                                  "text": "]"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "for_statement",
                      "start": {
                        "row": 408,
                        "column": 8
                      },
                      "end": {
                        "row": 413,
                        "column": 57
                      },
                      "text": "for f in list_features:\n            if dist in sparse_distances:\n                list_features_to_check.append(f)\n            else:\n                raise TypeError(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")",
                      "children": [
                        {
                          "type": "for",
                          "start": {
                            "row": 408,
                            "column": 8
                          },
                          "end": {
                            "row": 408,
                            "column": 11
                          },
                          "text": "for"
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 408,
                            "column": 12
                          },
                          "end": {
                            "row": 408,
                            "column": 13
                          },
                          "text": "f"
                        },
                        {
                          "type": "in",
                          "start": {
                            "row": 408,
                            "column": 14
                          },
                          "end": {
                            "row": 408,
                            "column": 16
                          },
                          "text": "in"
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 408,
                            "column": 17
                          },
                          "end": {
                            "row": 408,
                            "column": 30
                          },
                          "text": "list_features"
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 408,
                            "column": 30
                          },
                          "end": {
                            "row": 408,
                            "column": 31
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 409,
                            "column": 12
                          },
                          "end": {
                            "row": 413,
                            "column": 57
                          },
                          "text": "if dist in sparse_distances:\n                list_features_to_check.append(f)\n            else:\n                raise TypeError(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")",
                          "children": [
                            {
                              "type": "if_statement",
                              "start": {
                                "row": 409,
                                "column": 12
                              },
                              "end": {
                                "row": 413,
                                "column": 57
                              },
                              "text": "if dist in sparse_distances:\n                list_features_to_check.append(f)\n            else:\n                raise TypeError(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")",
                              "children": [
                                {
                                  "type": "if",
                                  "start": {
                                    "row": 409,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 409,
                                    "column": 14
                                  },
                                  "text": "if"
                                },
                                {
                                  "type": "comparison_operator",
                                  "start": {
                                    "row": 409,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 409,
                                    "column": 39
                                  },
                                  "text": "dist in sparse_distances",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 409,
                                        "column": 15
                                      },
                                      "end": {
                                        "row": 409,
                                        "column": 19
                                      },
                                      "text": "dist"
                                    },
                                    {
                                      "type": "in",
                                      "start": {
                                        "row": 409,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 409,
                                        "column": 22
                                      },
                                      "text": "in"
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 409,
                                        "column": 23
                                      },
                                      "end": {
                                        "row": 409,
                                        "column": 39
                                      },
                                      "text": "sparse_distances"
                                    }
                                  ]
                                },
                                {
                                  "type": ":",
                                  "start": {
                                    "row": 409,
                                    "column": 39
                                  },
                                  "end": {
                                    "row": 409,
                                    "column": 40
                                  },
                                  "text": ":"
                                },
                                {
                                  "type": "block",
                                  "start": {
                                    "row": 410,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 410,
                                    "column": 48
                                  },
                                  "text": "list_features_to_check.append(f)",
                                  "children": [
                                    {
                                      "type": "expression_statement",
                                      "start": {
                                        "row": 410,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 410,
                                        "column": 48
                                      },
                                      "text": "list_features_to_check.append(f)",
                                      "children": [
                                        {
                                          "type": "call",
                                          "start": {
                                            "row": 410,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 410,
                                            "column": 48
                                          },
                                          "text": "list_features_to_check.append(f)",
                                          "children": [
                                            {
                                              "type": "attribute",
                                              "start": {
                                                "row": 410,
                                                "column": 16
                                              },
                                              "end": {
                                                "row": 410,
                                                "column": 45
                                              },
                                              "text": "list_features_to_check.append",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 410,
                                                    "column": 16
                                                  },
                                                  "end": {
                                                    "row": 410,
                                                    "column": 38
                                                  },
                                                  "text": "list_features_to_check"
                                                },
                                                {
                                                  "type": ".",
                                                  "start": {
                                                    "row": 410,
                                                    "column": 38
                                                  },
                                                  "end": {
                                                    "row": 410,
                                                    "column": 39
                                                  },
                                                  "text": "."
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 410,
                                                    "column": 39
                                                  },
                                                  "end": {
                                                    "row": 410,
                                                    "column": 45
                                                  },
                                                  "text": "append"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 410,
                                                "column": 45
                                              },
                                              "end": {
                                                "row": 410,
                                                "column": 48
                                              },
                                              "text": "(f)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 410,
                                                    "column": 45
                                                  },
                                                  "end": {
                                                    "row": 410,
                                                    "column": 46
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 410,
                                                    "column": 46
                                                  },
                                                  "end": {
                                                    "row": 410,
                                                    "column": 47
                                                  },
                                                  "text": "f"
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 410,
                                                    "column": 47
                                                  },
                                                  "end": {
                                                    "row": 410,
                                                    "column": 48
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "else_clause",
                                  "start": {
                                    "row": 411,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 413,
                                    "column": 57
                                  },
                                  "text": "else:\n                raise TypeError(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")",
                                  "children": [
                                    {
                                      "type": "else",
                                      "start": {
                                        "row": 411,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 411,
                                        "column": 16
                                      },
                                      "text": "else"
                                    },
                                    {
                                      "type": ":",
                                      "start": {
                                        "row": 411,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 411,
                                        "column": 17
                                      },
                                      "text": ":"
                                    },
                                    {
                                      "type": "block",
                                      "start": {
                                        "row": 412,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 413,
                                        "column": 57
                                      },
                                      "text": "raise TypeError(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")",
                                      "children": [
                                        {
                                          "type": "raise_statement",
                                          "start": {
                                            "row": 412,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 413,
                                            "column": 57
                                          },
                                          "text": "raise TypeError(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")",
                                          "children": [
                                            {
                                              "type": "raise",
                                              "start": {
                                                "row": 412,
                                                "column": 16
                                              },
                                              "end": {
                                                "row": 412,
                                                "column": 21
                                              },
                                              "text": "raise"
                                            },
                                            {
                                              "type": "call",
                                              "start": {
                                                "row": 412,
                                                "column": 22
                                              },
                                              "end": {
                                                "row": 413,
                                                "column": 57
                                              },
                                              "text": "TypeError(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 412,
                                                    "column": 22
                                                  },
                                                  "end": {
                                                    "row": 412,
                                                    "column": 31
                                                  },
                                                  "text": "TypeError"
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "start": {
                                                    "row": 412,
                                                    "column": 31
                                                  },
                                                  "end": {
                                                    "row": 413,
                                                    "column": 57
                                                  },
                                                  "text": "(\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\")",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "start": {
                                                        "row": 412,
                                                        "column": 31
                                                      },
                                                      "end": {
                                                        "row": 412,
                                                        "column": 32
                                                      },
                                                      "text": "("
                                                    },
                                                    {
                                                      "type": "binary_operator",
                                                      "start": {
                                                        "row": 412,
                                                        "column": 32
                                                      },
                                                      "end": {
                                                        "row": 413,
                                                        "column": 56
                                                      },
                                                      "text": "\"The chosen distance cannot currently be used \" +\n                                \"on list-typed columns.\"",
                                                      "children": [
                                                        {
                                                          "type": "string",
                                                          "start": {
                                                            "row": 412,
                                                            "column": 32
                                                          },
                                                          "end": {
                                                            "row": 412,
                                                            "column": 79
                                                          },
                                                          "text": "\"The chosen distance cannot currently be used \"",
                                                          "children": [
                                                            {
                                                              "type": "string_start",
                                                              "start": {
                                                                "row": 412,
                                                                "column": 32
                                                              },
                                                              "end": {
                                                                "row": 412,
                                                                "column": 33
                                                              },
                                                              "text": "\""
                                                            },
                                                            {
                                                              "type": "string_content",
                                                              "start": {
                                                                "row": 412,
                                                                "column": 33
                                                              },
                                                              "end": {
                                                                "row": 412,
                                                                "column": 78
                                                              },
                                                              "text": "The chosen distance cannot currently be used "
                                                            },
                                                            {
                                                              "type": "string_end",
                                                              "start": {
                                                                "row": 412,
                                                                "column": 78
                                                              },
                                                              "end": {
                                                                "row": 412,
                                                                "column": 79
                                                              },
                                                              "text": "\""
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "+",
                                                          "start": {
                                                            "row": 412,
                                                            "column": 80
                                                          },
                                                          "end": {
                                                            "row": 412,
                                                            "column": 81
                                                          },
                                                          "text": "+"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "start": {
                                                            "row": 413,
                                                            "column": 32
                                                          },
                                                          "end": {
                                                            "row": 413,
                                                            "column": 56
                                                          },
                                                          "text": "\"on list-typed columns.\"",
                                                          "children": [
                                                            {
                                                              "type": "string_start",
                                                              "start": {
                                                                "row": 413,
                                                                "column": 32
                                                              },
                                                              "end": {
                                                                "row": 413,
                                                                "column": 33
                                                              },
                                                              "text": "\""
                                                            },
                                                            {
                                                              "type": "string_content",
                                                              "start": {
                                                                "row": 413,
                                                                "column": 33
                                                              },
                                                              "end": {
                                                                "row": 413,
                                                                "column": 55
                                                              },
                                                              "text": "on list-typed columns."
                                                            },
                                                            {
                                                              "type": "string_end",
                                                              "start": {
                                                                "row": 413,
                                                                "column": 55
                                                              },
                                                              "end": {
                                                                "row": 413,
                                                                "column": 56
                                                              },
                                                              "text": "\""
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "start": {
                                                        "row": 413,
                                                        "column": 56
                                                      },
                                                      "end": {
                                                        "row": 413,
                                                        "column": 57
                                                      },
                                                      "text": ")"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "for_statement",
              "start": {
                "row": 414,
                "column": 4
              },
              "end": {
                "row": 421,
                "column": 59
              },
              "text": "for f in list_features_to_check:\n        only_str_lists = _validate_lists(_dataset[f], [str])\n        if not only_str_lists:\n            raise TypeError(\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \" +\n                            \"any list features accordingly before creating \" +\n                            \"the nearest neighbors model.\")",
              "children": [
                {
                  "type": "for",
                  "start": {
                    "row": 414,
                    "column": 4
                  },
                  "end": {
                    "row": 414,
                    "column": 7
                  },
                  "text": "for"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 414,
                    "column": 8
                  },
                  "end": {
                    "row": 414,
                    "column": 9
                  },
                  "text": "f"
                },
                {
                  "type": "in",
                  "start": {
                    "row": 414,
                    "column": 10
                  },
                  "end": {
                    "row": 414,
                    "column": 12
                  },
                  "text": "in"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 414,
                    "column": 13
                  },
                  "end": {
                    "row": 414,
                    "column": 35
                  },
                  "text": "list_features_to_check"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 414,
                    "column": 35
                  },
                  "end": {
                    "row": 414,
                    "column": 36
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 415,
                    "column": 8
                  },
                  "end": {
                    "row": 421,
                    "column": 59
                  },
                  "text": "only_str_lists = _validate_lists(_dataset[f], [str])\n        if not only_str_lists:\n            raise TypeError(\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \" +\n                            \"any list features accordingly before creating \" +\n                            \"the nearest neighbors model.\")",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 415,
                        "column": 8
                      },
                      "end": {
                        "row": 415,
                        "column": 60
                      },
                      "text": "only_str_lists = _validate_lists(_dataset[f], [str])",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 415,
                            "column": 8
                          },
                          "end": {
                            "row": 415,
                            "column": 60
                          },
                          "text": "only_str_lists = _validate_lists(_dataset[f], [str])",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 415,
                                "column": 8
                              },
                              "end": {
                                "row": 415,
                                "column": 22
                              },
                              "text": "only_str_lists"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 415,
                                "column": 23
                              },
                              "end": {
                                "row": 415,
                                "column": 24
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 415,
                                "column": 25
                              },
                              "end": {
                                "row": 415,
                                "column": 60
                              },
                              "text": "_validate_lists(_dataset[f], [str])",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 415,
                                    "column": 25
                                  },
                                  "end": {
                                    "row": 415,
                                    "column": 40
                                  },
                                  "text": "_validate_lists"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 415,
                                    "column": 40
                                  },
                                  "end": {
                                    "row": 415,
                                    "column": 60
                                  },
                                  "text": "(_dataset[f], [str])",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 415,
                                        "column": 40
                                      },
                                      "end": {
                                        "row": 415,
                                        "column": 41
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "subscript",
                                      "start": {
                                        "row": 415,
                                        "column": 41
                                      },
                                      "end": {
                                        "row": 415,
                                        "column": 52
                                      },
                                      "text": "_dataset[f]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 415,
                                            "column": 41
                                          },
                                          "end": {
                                            "row": 415,
                                            "column": 49
                                          },
                                          "text": "_dataset"
                                        },
                                        {
                                          "type": "[",
                                          "start": {
                                            "row": 415,
                                            "column": 49
                                          },
                                          "end": {
                                            "row": 415,
                                            "column": 50
                                          },
                                          "text": "["
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 415,
                                            "column": 50
                                          },
                                          "end": {
                                            "row": 415,
                                            "column": 51
                                          },
                                          "text": "f"
                                        },
                                        {
                                          "type": "]",
                                          "start": {
                                            "row": 415,
                                            "column": 51
                                          },
                                          "end": {
                                            "row": 415,
                                            "column": 52
                                          },
                                          "text": "]"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 415,
                                        "column": 52
                                      },
                                      "end": {
                                        "row": 415,
                                        "column": 53
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "list",
                                      "start": {
                                        "row": 415,
                                        "column": 54
                                      },
                                      "end": {
                                        "row": 415,
                                        "column": 59
                                      },
                                      "text": "[str]",
                                      "children": [
                                        {
                                          "type": "[",
                                          "start": {
                                            "row": 415,
                                            "column": 54
                                          },
                                          "end": {
                                            "row": 415,
                                            "column": 55
                                          },
                                          "text": "["
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 415,
                                            "column": 55
                                          },
                                          "end": {
                                            "row": 415,
                                            "column": 58
                                          },
                                          "text": "str"
                                        },
                                        {
                                          "type": "]",
                                          "start": {
                                            "row": 415,
                                            "column": 58
                                          },
                                          "end": {
                                            "row": 415,
                                            "column": 59
                                          },
                                          "text": "]"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 415,
                                        "column": 59
                                      },
                                      "end": {
                                        "row": 415,
                                        "column": 60
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 416,
                        "column": 8
                      },
                      "end": {
                        "row": 421,
                        "column": 59
                      },
                      "text": "if not only_str_lists:\n            raise TypeError(\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \" +\n                            \"any list features accordingly before creating \" +\n                            \"the nearest neighbors model.\")",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 416,
                            "column": 8
                          },
                          "end": {
                            "row": 416,
                            "column": 10
                          },
                          "text": "if"
                        },
                        {
                          "type": "not_operator",
                          "start": {
                            "row": 416,
                            "column": 11
                          },
                          "end": {
                            "row": 416,
                            "column": 29
                          },
                          "text": "not only_str_lists",
                          "children": [
                            {
                              "type": "not",
                              "start": {
                                "row": 416,
                                "column": 11
                              },
                              "end": {
                                "row": 416,
                                "column": 14
                              },
                              "text": "not"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 416,
                                "column": 15
                              },
                              "end": {
                                "row": 416,
                                "column": 29
                              },
                              "text": "only_str_lists"
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 416,
                            "column": 29
                          },
                          "end": {
                            "row": 416,
                            "column": 30
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 417,
                            "column": 12
                          },
                          "end": {
                            "row": 421,
                            "column": 59
                          },
                          "text": "raise TypeError(\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \" +\n                            \"any list features accordingly before creating \" +\n                            \"the nearest neighbors model.\")",
                          "children": [
                            {
                              "type": "raise_statement",
                              "start": {
                                "row": 417,
                                "column": 12
                              },
                              "end": {
                                "row": 421,
                                "column": 59
                              },
                              "text": "raise TypeError(\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \" +\n                            \"any list features accordingly before creating \" +\n                            \"the nearest neighbors model.\")",
                              "children": [
                                {
                                  "type": "raise",
                                  "start": {
                                    "row": 417,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 417,
                                    "column": 17
                                  },
                                  "text": "raise"
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 417,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 421,
                                    "column": 59
                                  },
                                  "text": "TypeError(\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \" +\n                            \"any list features accordingly before creating \" +\n                            \"the nearest neighbors model.\")",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 417,
                                        "column": 18
                                      },
                                      "end": {
                                        "row": 417,
                                        "column": 27
                                      },
                                      "text": "TypeError"
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 417,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 421,
                                        "column": 59
                                      },
                                      "text": "(\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \" +\n                            \"any list features accordingly before creating \" +\n                            \"the nearest neighbors model.\")",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 417,
                                            "column": 27
                                          },
                                          "end": {
                                            "row": 417,
                                            "column": 28
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "binary_operator",
                                          "start": {
                                            "row": 417,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 421,
                                            "column": 58
                                          },
                                          "text": "\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \" +\n                            \"any list features accordingly before creating \" +\n                            \"the nearest neighbors model.\"",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "start": {
                                                "row": 417,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 420,
                                                "column": 76
                                              },
                                              "text": "\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \" +\n                            \"any list features accordingly before creating \"",
                                              "children": [
                                                {
                                                  "type": "binary_operator",
                                                  "start": {
                                                    "row": 417,
                                                    "column": 28
                                                  },
                                                  "end": {
                                                    "row": 419,
                                                    "column": 75
                                                  },
                                                  "text": "\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \" +\n                            \"lists containing only strings. Please modify \"",
                                                  "children": [
                                                    {
                                                      "type": "binary_operator",
                                                      "start": {
                                                        "row": 417,
                                                        "column": 28
                                                      },
                                                      "end": {
                                                        "row": 418,
                                                        "column": 72
                                                      },
                                                      "text": "\"Distances for sparse data, such as jaccard \" +\n                            \"and weighted_jaccard, can only be used on \"",
                                                      "children": [
                                                        {
                                                          "type": "string",
                                                          "start": {
                                                            "row": 417,
                                                            "column": 28
                                                          },
                                                          "end": {
                                                            "row": 417,
                                                            "column": 73
                                                          },
                                                          "text": "\"Distances for sparse data, such as jaccard \"",
                                                          "children": [
                                                            {
                                                              "type": "string_start",
                                                              "start": {
                                                                "row": 417,
                                                                "column": 28
                                                              },
                                                              "end": {
                                                                "row": 417,
                                                                "column": 29
                                                              },
                                                              "text": "\""
                                                            },
                                                            {
                                                              "type": "string_content",
                                                              "start": {
                                                                "row": 417,
                                                                "column": 29
                                                              },
                                                              "end": {
                                                                "row": 417,
                                                                "column": 72
                                                              },
                                                              "text": "Distances for sparse data, such as jaccard "
                                                            },
                                                            {
                                                              "type": "string_end",
                                                              "start": {
                                                                "row": 417,
                                                                "column": 72
                                                              },
                                                              "end": {
                                                                "row": 417,
                                                                "column": 73
                                                              },
                                                              "text": "\""
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "+",
                                                          "start": {
                                                            "row": 417,
                                                            "column": 74
                                                          },
                                                          "end": {
                                                            "row": 417,
                                                            "column": 75
                                                          },
                                                          "text": "+"
                                                        },
                                                        {
                                                          "type": "string",
                                                          "start": {
                                                            "row": 418,
                                                            "column": 28
                                                          },
                                                          "end": {
                                                            "row": 418,
                                                            "column": 72
                                                          },
                                                          "text": "\"and weighted_jaccard, can only be used on \"",
                                                          "children": [
                                                            {
                                                              "type": "string_start",
                                                              "start": {
                                                                "row": 418,
                                                                "column": 28
                                                              },
                                                              "end": {
                                                                "row": 418,
                                                                "column": 29
                                                              },
                                                              "text": "\""
                                                            },
                                                            {
                                                              "type": "string_content",
                                                              "start": {
                                                                "row": 418,
                                                                "column": 29
                                                              },
                                                              "end": {
                                                                "row": 418,
                                                                "column": 71
                                                              },
                                                              "text": "and weighted_jaccard, can only be used on "
                                                            },
                                                            {
                                                              "type": "string_end",
                                                              "start": {
                                                                "row": 418,
                                                                "column": 71
                                                              },
                                                              "end": {
                                                                "row": 418,
                                                                "column": 72
                                                              },
                                                              "text": "\""
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "+",
                                                      "start": {
                                                        "row": 418,
                                                        "column": 73
                                                      },
                                                      "end": {
                                                        "row": 418,
                                                        "column": 74
                                                      },
                                                      "text": "+"
                                                    },
                                                    {
                                                      "type": "string",
                                                      "start": {
                                                        "row": 419,
                                                        "column": 28
                                                      },
                                                      "end": {
                                                        "row": 419,
                                                        "column": 75
                                                      },
                                                      "text": "\"lists containing only strings. Please modify \"",
                                                      "children": [
                                                        {
                                                          "type": "string_start",
                                                          "start": {
                                                            "row": 419,
                                                            "column": 28
                                                          },
                                                          "end": {
                                                            "row": 419,
                                                            "column": 29
                                                          },
                                                          "text": "\""
                                                        },
                                                        {
                                                          "type": "string_content",
                                                          "start": {
                                                            "row": 419,
                                                            "column": 29
                                                          },
                                                          "end": {
                                                            "row": 419,
                                                            "column": 74
                                                          },
                                                          "text": "lists containing only strings. Please modify "
                                                        },
                                                        {
                                                          "type": "string_end",
                                                          "start": {
                                                            "row": 419,
                                                            "column": 74
                                                          },
                                                          "end": {
                                                            "row": 419,
                                                            "column": 75
                                                          },
                                                          "text": "\""
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "+",
                                                  "start": {
                                                    "row": 419,
                                                    "column": 76
                                                  },
                                                  "end": {
                                                    "row": 419,
                                                    "column": 77
                                                  },
                                                  "text": "+"
                                                },
                                                {
                                                  "type": "string",
                                                  "start": {
                                                    "row": 420,
                                                    "column": 28
                                                  },
                                                  "end": {
                                                    "row": 420,
                                                    "column": 76
                                                  },
                                                  "text": "\"any list features accordingly before creating \"",
                                                  "children": [
                                                    {
                                                      "type": "string_start",
                                                      "start": {
                                                        "row": 420,
                                                        "column": 28
                                                      },
                                                      "end": {
                                                        "row": 420,
                                                        "column": 29
                                                      },
                                                      "text": "\""
                                                    },
                                                    {
                                                      "type": "string_content",
                                                      "start": {
                                                        "row": 420,
                                                        "column": 29
                                                      },
                                                      "end": {
                                                        "row": 420,
                                                        "column": 75
                                                      },
                                                      "text": "any list features accordingly before creating "
                                                    },
                                                    {
                                                      "type": "string_end",
                                                      "start": {
                                                        "row": 420,
                                                        "column": 75
                                                      },
                                                      "end": {
                                                        "row": 420,
                                                        "column": 76
                                                      },
                                                      "text": "\""
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "+",
                                              "start": {
                                                "row": 420,
                                                "column": 77
                                              },
                                              "end": {
                                                "row": 420,
                                                "column": 78
                                              },
                                              "text": "+"
                                            },
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 421,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 421,
                                                "column": 58
                                              },
                                              "text": "\"the nearest neighbors model.\"",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 421,
                                                    "column": 28
                                                  },
                                                  "end": {
                                                    "row": 421,
                                                    "column": 29
                                                  },
                                                  "text": "\""
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 421,
                                                    "column": 29
                                                  },
                                                  "end": {
                                                    "row": 421,
                                                    "column": 57
                                                  },
                                                  "text": "the nearest neighbors model."
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 421,
                                                    "column": 57
                                                  },
                                                  "end": {
                                                    "row": 421,
                                                    "column": 58
                                                  },
                                                  "text": "\""
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 421,
                                            "column": 58
                                          },
                                          "end": {
                                            "row": 421,
                                            "column": 59
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 423,
                "column": 4
              },
              "end": {
                "row": 423,
                "column": 80
              },
              "text": "## Raise an error if any component has string features are in single columns"
            },
            {
              "type": "for_statement",
              "start": {
                "row": 424,
                "column": 4
              },
              "end": {
                "row": 430,
                "column": 83
              },
              "text": "for d in distance:\n        feature_names, dist, _ = d\n\n        if (len(feature_names) > 1) and (dist == _turicreate.distances.levenshtein):\n            raise ValueError(\"Levenshtein distance cannot be used with multiple \" +\n                             \"columns. Please concatenate strings into a single \" +\n                             \"column before creating the nearest neighbors model.\")",
              "children": [
                {
                  "type": "for",
                  "start": {
                    "row": 424,
                    "column": 4
                  },
                  "end": {
                    "row": 424,
                    "column": 7
                  },
                  "text": "for"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 424,
                    "column": 8
                  },
                  "end": {
                    "row": 424,
                    "column": 9
                  },
                  "text": "d"
                },
                {
                  "type": "in",
                  "start": {
                    "row": 424,
                    "column": 10
                  },
                  "end": {
                    "row": 424,
                    "column": 12
                  },
                  "text": "in"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 424,
                    "column": 13
                  },
                  "end": {
                    "row": 424,
                    "column": 21
                  },
                  "text": "distance"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 424,
                    "column": 21
                  },
                  "end": {
                    "row": 424,
                    "column": 22
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 425,
                    "column": 8
                  },
                  "end": {
                    "row": 430,
                    "column": 83
                  },
                  "text": "feature_names, dist, _ = d\n\n        if (len(feature_names) > 1) and (dist == _turicreate.distances.levenshtein):\n            raise ValueError(\"Levenshtein distance cannot be used with multiple \" +\n                             \"columns. Please concatenate strings into a single \" +\n                             \"column before creating the nearest neighbors model.\")",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 425,
                        "column": 8
                      },
                      "end": {
                        "row": 425,
                        "column": 34
                      },
                      "text": "feature_names, dist, _ = d",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 425,
                            "column": 8
                          },
                          "end": {
                            "row": 425,
                            "column": 34
                          },
                          "text": "feature_names, dist, _ = d",
                          "children": [
                            {
                              "type": "pattern_list",
                              "start": {
                                "row": 425,
                                "column": 8
                              },
                              "end": {
                                "row": 425,
                                "column": 30
                              },
                              "text": "feature_names, dist, _",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 425,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 425,
                                    "column": 21
                                  },
                                  "text": "feature_names"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 425,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 425,
                                    "column": 22
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 425,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 425,
                                    "column": 27
                                  },
                                  "text": "dist"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 425,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 425,
                                    "column": 28
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 425,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 425,
                                    "column": 30
                                  },
                                  "text": "_"
                                }
                              ]
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 425,
                                "column": 31
                              },
                              "end": {
                                "row": 425,
                                "column": 32
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 425,
                                "column": 33
                              },
                              "end": {
                                "row": 425,
                                "column": 34
                              },
                              "text": "d"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 427,
                        "column": 8
                      },
                      "end": {
                        "row": 430,
                        "column": 83
                      },
                      "text": "if (len(feature_names) > 1) and (dist == _turicreate.distances.levenshtein):\n            raise ValueError(\"Levenshtein distance cannot be used with multiple \" +\n                             \"columns. Please concatenate strings into a single \" +\n                             \"column before creating the nearest neighbors model.\")",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 427,
                            "column": 8
                          },
                          "end": {
                            "row": 427,
                            "column": 10
                          },
                          "text": "if"
                        },
                        {
                          "type": "boolean_operator",
                          "start": {
                            "row": 427,
                            "column": 11
                          },
                          "end": {
                            "row": 427,
                            "column": 83
                          },
                          "text": "(len(feature_names) > 1) and (dist == _turicreate.distances.levenshtein)",
                          "children": [
                            {
                              "type": "parenthesized_expression",
                              "start": {
                                "row": 427,
                                "column": 11
                              },
                              "end": {
                                "row": 427,
                                "column": 35
                              },
                              "text": "(len(feature_names) > 1)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 427,
                                    "column": 11
                                  },
                                  "end": {
                                    "row": 427,
                                    "column": 12
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "comparison_operator",
                                  "start": {
                                    "row": 427,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 427,
                                    "column": 34
                                  },
                                  "text": "len(feature_names) > 1",
                                  "children": [
                                    {
                                      "type": "call",
                                      "start": {
                                        "row": 427,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 427,
                                        "column": 30
                                      },
                                      "text": "len(feature_names)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 427,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 427,
                                            "column": 15
                                          },
                                          "text": "len"
                                        },
                                        {
                                          "type": "argument_list",
                                          "start": {
                                            "row": 427,
                                            "column": 15
                                          },
                                          "end": {
                                            "row": 427,
                                            "column": 30
                                          },
                                          "text": "(feature_names)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start": {
                                                "row": 427,
                                                "column": 15
                                              },
                                              "end": {
                                                "row": 427,
                                                "column": 16
                                              },
                                              "text": "("
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 427,
                                                "column": 16
                                              },
                                              "end": {
                                                "row": 427,
                                                "column": 29
                                              },
                                              "text": "feature_names"
                                            },
                                            {
                                              "type": ")",
                                              "start": {
                                                "row": 427,
                                                "column": 29
                                              },
                                              "end": {
                                                "row": 427,
                                                "column": 30
                                              },
                                              "text": ")"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ">",
                                      "start": {
                                        "row": 427,
                                        "column": 31
                                      },
                                      "end": {
                                        "row": 427,
                                        "column": 32
                                      },
                                      "text": ">"
                                    },
                                    {
                                      "type": "integer",
                                      "start": {
                                        "row": 427,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 427,
                                        "column": 34
                                      },
                                      "text": "1"
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 427,
                                    "column": 34
                                  },
                                  "end": {
                                    "row": 427,
                                    "column": 35
                                  },
                                  "text": ")"
                                }
                              ]
                            },
                            {
                              "type": "and",
                              "start": {
                                "row": 427,
                                "column": 36
                              },
                              "end": {
                                "row": 427,
                                "column": 39
                              },
                              "text": "and"
                            },
                            {
                              "type": "parenthesized_expression",
                              "start": {
                                "row": 427,
                                "column": 40
                              },
                              "end": {
                                "row": 427,
                                "column": 83
                              },
                              "text": "(dist == _turicreate.distances.levenshtein)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 427,
                                    "column": 40
                                  },
                                  "end": {
                                    "row": 427,
                                    "column": 41
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "comparison_operator",
                                  "start": {
                                    "row": 427,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 427,
                                    "column": 82
                                  },
                                  "text": "dist == _turicreate.distances.levenshtein",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 427,
                                        "column": 41
                                      },
                                      "end": {
                                        "row": 427,
                                        "column": 45
                                      },
                                      "text": "dist"
                                    },
                                    {
                                      "type": "==",
                                      "start": {
                                        "row": 427,
                                        "column": 46
                                      },
                                      "end": {
                                        "row": 427,
                                        "column": 48
                                      },
                                      "text": "=="
                                    },
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 427,
                                        "column": 49
                                      },
                                      "end": {
                                        "row": 427,
                                        "column": 82
                                      },
                                      "text": "_turicreate.distances.levenshtein",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "start": {
                                            "row": 427,
                                            "column": 49
                                          },
                                          "end": {
                                            "row": 427,
                                            "column": 70
                                          },
                                          "text": "_turicreate.distances",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 427,
                                                "column": 49
                                              },
                                              "end": {
                                                "row": 427,
                                                "column": 60
                                              },
                                              "text": "_turicreate"
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 427,
                                                "column": 60
                                              },
                                              "end": {
                                                "row": 427,
                                                "column": 61
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 427,
                                                "column": 61
                                              },
                                              "end": {
                                                "row": 427,
                                                "column": 70
                                              },
                                              "text": "distances"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 427,
                                            "column": 70
                                          },
                                          "end": {
                                            "row": 427,
                                            "column": 71
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 427,
                                            "column": 71
                                          },
                                          "end": {
                                            "row": 427,
                                            "column": 82
                                          },
                                          "text": "levenshtein"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 427,
                                    "column": 82
                                  },
                                  "end": {
                                    "row": 427,
                                    "column": 83
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 427,
                            "column": 83
                          },
                          "end": {
                            "row": 427,
                            "column": 84
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 428,
                            "column": 12
                          },
                          "end": {
                            "row": 430,
                            "column": 83
                          },
                          "text": "raise ValueError(\"Levenshtein distance cannot be used with multiple \" +\n                             \"columns. Please concatenate strings into a single \" +\n                             \"column before creating the nearest neighbors model.\")",
                          "children": [
                            {
                              "type": "raise_statement",
                              "start": {
                                "row": 428,
                                "column": 12
                              },
                              "end": {
                                "row": 430,
                                "column": 83
                              },
                              "text": "raise ValueError(\"Levenshtein distance cannot be used with multiple \" +\n                             \"columns. Please concatenate strings into a single \" +\n                             \"column before creating the nearest neighbors model.\")",
                              "children": [
                                {
                                  "type": "raise",
                                  "start": {
                                    "row": 428,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 428,
                                    "column": 17
                                  },
                                  "text": "raise"
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 428,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 430,
                                    "column": 83
                                  },
                                  "text": "ValueError(\"Levenshtein distance cannot be used with multiple \" +\n                             \"columns. Please concatenate strings into a single \" +\n                             \"column before creating the nearest neighbors model.\")",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 428,
                                        "column": 18
                                      },
                                      "end": {
                                        "row": 428,
                                        "column": 28
                                      },
                                      "text": "ValueError"
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 428,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 430,
                                        "column": 83
                                      },
                                      "text": "(\"Levenshtein distance cannot be used with multiple \" +\n                             \"columns. Please concatenate strings into a single \" +\n                             \"column before creating the nearest neighbors model.\")",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 428,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 428,
                                            "column": 29
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "binary_operator",
                                          "start": {
                                            "row": 428,
                                            "column": 29
                                          },
                                          "end": {
                                            "row": 430,
                                            "column": 82
                                          },
                                          "text": "\"Levenshtein distance cannot be used with multiple \" +\n                             \"columns. Please concatenate strings into a single \" +\n                             \"column before creating the nearest neighbors model.\"",
                                          "children": [
                                            {
                                              "type": "binary_operator",
                                              "start": {
                                                "row": 428,
                                                "column": 29
                                              },
                                              "end": {
                                                "row": 429,
                                                "column": 81
                                              },
                                              "text": "\"Levenshtein distance cannot be used with multiple \" +\n                             \"columns. Please concatenate strings into a single \"",
                                              "children": [
                                                {
                                                  "type": "string",
                                                  "start": {
                                                    "row": 428,
                                                    "column": 29
                                                  },
                                                  "end": {
                                                    "row": 428,
                                                    "column": 81
                                                  },
                                                  "text": "\"Levenshtein distance cannot be used with multiple \"",
                                                  "children": [
                                                    {
                                                      "type": "string_start",
                                                      "start": {
                                                        "row": 428,
                                                        "column": 29
                                                      },
                                                      "end": {
                                                        "row": 428,
                                                        "column": 30
                                                      },
                                                      "text": "\""
                                                    },
                                                    {
                                                      "type": "string_content",
                                                      "start": {
                                                        "row": 428,
                                                        "column": 30
                                                      },
                                                      "end": {
                                                        "row": 428,
                                                        "column": 80
                                                      },
                                                      "text": "Levenshtein distance cannot be used with multiple "
                                                    },
                                                    {
                                                      "type": "string_end",
                                                      "start": {
                                                        "row": 428,
                                                        "column": 80
                                                      },
                                                      "end": {
                                                        "row": 428,
                                                        "column": 81
                                                      },
                                                      "text": "\""
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "+",
                                                  "start": {
                                                    "row": 428,
                                                    "column": 82
                                                  },
                                                  "end": {
                                                    "row": 428,
                                                    "column": 83
                                                  },
                                                  "text": "+"
                                                },
                                                {
                                                  "type": "string",
                                                  "start": {
                                                    "row": 429,
                                                    "column": 29
                                                  },
                                                  "end": {
                                                    "row": 429,
                                                    "column": 81
                                                  },
                                                  "text": "\"columns. Please concatenate strings into a single \"",
                                                  "children": [
                                                    {
                                                      "type": "string_start",
                                                      "start": {
                                                        "row": 429,
                                                        "column": 29
                                                      },
                                                      "end": {
                                                        "row": 429,
                                                        "column": 30
                                                      },
                                                      "text": "\""
                                                    },
                                                    {
                                                      "type": "string_content",
                                                      "start": {
                                                        "row": 429,
                                                        "column": 30
                                                      },
                                                      "end": {
                                                        "row": 429,
                                                        "column": 80
                                                      },
                                                      "text": "columns. Please concatenate strings into a single "
                                                    },
                                                    {
                                                      "type": "string_end",
                                                      "start": {
                                                        "row": 429,
                                                        "column": 80
                                                      },
                                                      "end": {
                                                        "row": 429,
                                                        "column": 81
                                                      },
                                                      "text": "\""
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "+",
                                              "start": {
                                                "row": 429,
                                                "column": 82
                                              },
                                              "end": {
                                                "row": 429,
                                                "column": 83
                                              },
                                              "text": "+"
                                            },
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 430,
                                                "column": 29
                                              },
                                              "end": {
                                                "row": 430,
                                                "column": 82
                                              },
                                              "text": "\"column before creating the nearest neighbors model.\"",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 430,
                                                    "column": 29
                                                  },
                                                  "end": {
                                                    "row": 430,
                                                    "column": 30
                                                  },
                                                  "text": "\""
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 430,
                                                    "column": 30
                                                  },
                                                  "end": {
                                                    "row": 430,
                                                    "column": 81
                                                  },
                                                  "text": "column before creating the nearest neighbors model."
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 430,
                                                    "column": 81
                                                  },
                                                  "end": {
                                                    "row": 430,
                                                    "column": 82
                                                  },
                                                  "text": "\""
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 430,
                                            "column": 82
                                          },
                                          "end": {
                                            "row": 430,
                                            "column": 83
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 432,
                "column": 4
              },
              "end": {
                "row": 432,
                "column": 63
              },
              "text": "## Get the union of feature names and make a clean dataset."
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 433,
                "column": 4
              },
              "end": {
                "row": 433,
                "column": 63
              },
              "text": "clean_features = _get_composite_distance_features(distance)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 433,
                    "column": 4
                  },
                  "end": {
                    "row": 433,
                    "column": 63
                  },
                  "text": "clean_features = _get_composite_distance_features(distance)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 433,
                        "column": 4
                      },
                      "end": {
                        "row": 433,
                        "column": 18
                      },
                      "text": "clean_features"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 433,
                        "column": 19
                      },
                      "end": {
                        "row": 433,
                        "column": 20
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 433,
                        "column": 21
                      },
                      "end": {
                        "row": 433,
                        "column": 63
                      },
                      "text": "_get_composite_distance_features(distance)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 433,
                            "column": 21
                          },
                          "end": {
                            "row": 433,
                            "column": 53
                          },
                          "text": "_get_composite_distance_features"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 433,
                            "column": 53
                          },
                          "end": {
                            "row": 433,
                            "column": 63
                          },
                          "text": "(distance)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 433,
                                "column": 53
                              },
                              "end": {
                                "row": 433,
                                "column": 54
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 433,
                                "column": 54
                              },
                              "end": {
                                "row": 433,
                                "column": 62
                              },
                              "text": "distance"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 433,
                                "column": 62
                              },
                              "end": {
                                "row": 433,
                                "column": 63
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 434,
                "column": 4
              },
              "end": {
                "row": 434,
                "column": 72
              },
              "text": "sf_clean = _tkutl._toolkits_select_columns(_dataset, clean_features)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 434,
                    "column": 4
                  },
                  "end": {
                    "row": 434,
                    "column": 72
                  },
                  "text": "sf_clean = _tkutl._toolkits_select_columns(_dataset, clean_features)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 434,
                        "column": 4
                      },
                      "end": {
                        "row": 434,
                        "column": 12
                      },
                      "text": "sf_clean"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 434,
                        "column": 13
                      },
                      "end": {
                        "row": 434,
                        "column": 14
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 434,
                        "column": 15
                      },
                      "end": {
                        "row": 434,
                        "column": 72
                      },
                      "text": "_tkutl._toolkits_select_columns(_dataset, clean_features)",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 434,
                            "column": 15
                          },
                          "end": {
                            "row": 434,
                            "column": 46
                          },
                          "text": "_tkutl._toolkits_select_columns",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 434,
                                "column": 15
                              },
                              "end": {
                                "row": 434,
                                "column": 21
                              },
                              "text": "_tkutl"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 434,
                                "column": 21
                              },
                              "end": {
                                "row": 434,
                                "column": 22
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 434,
                                "column": 22
                              },
                              "end": {
                                "row": 434,
                                "column": 46
                              },
                              "text": "_toolkits_select_columns"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 434,
                            "column": 46
                          },
                          "end": {
                            "row": 434,
                            "column": 72
                          },
                          "text": "(_dataset, clean_features)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 434,
                                "column": 46
                              },
                              "end": {
                                "row": 434,
                                "column": 47
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 434,
                                "column": 47
                              },
                              "end": {
                                "row": 434,
                                "column": 55
                              },
                              "text": "_dataset"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 434,
                                "column": 55
                              },
                              "end": {
                                "row": 434,
                                "column": 56
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 434,
                                "column": 57
                              },
                              "end": {
                                "row": 434,
                                "column": 71
                              },
                              "text": "clean_features"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 434,
                                "column": 71
                              },
                              "end": {
                                "row": 434,
                                "column": 72
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 437,
                "column": 4
              },
              "end": {
                "row": 437,
                "column": 33
              },
              "text": "## Decide which method to use"
            },
            {
              "type": "comment",
              "start": {
                "row": 438,
                "column": 4
              },
              "end": {
                "row": 438,
                "column": 74
              },
              "text": "## - If more than one distance component (specified either directly or"
            },
            {
              "type": "comment",
              "start": {
                "row": 439,
                "column": 4
              },
              "end": {
                "row": 439,
                "column": 77
              },
              "text": "#  generated automatically because distance set to 'auto'), then do brute"
            },
            {
              "type": "comment",
              "start": {
                "row": 440,
                "column": 4
              },
              "end": {
                "row": 440,
                "column": 13
              },
              "text": "#  force."
            },
            {
              "type": "if_statement",
              "start": {
                "row": 441,
                "column": 4
              },
              "end": {
                "row": 475,
                "column": 28
              },
              "text": "if len(distance) > 1:\n        _method = 'brute_force'\n\n        if method != 'brute_force' and verbose is True:\n            print(\"Defaulting to brute force instead of ball tree because \" +\\\n                \"there are multiple distance components.\")\n\n    else:\n        if method == 'auto':\n\n            # get the total number of variables. Assume the number of elements in\n            # array type columns does not change\n            num_variables = sum([len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])])\n\n            # flag if all the features in the single composite are of numeric\n            # type.\n            numeric_type_flag = all([x in [int, float, list, array.array]\n                for x in sf_clean.column_types()])\n\n            ## Conditions necessary for ball tree to work and be worth it\n            if ((distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])\n                    and numeric_type_flag is True\n                    and num_variables <= 200):\n\n                    _method = 'ball_tree'\n\n            else:\n                _method = 'brute_force'\n\n        else:\n            _method = method",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 441,
                    "column": 4
                  },
                  "end": {
                    "row": 441,
                    "column": 6
                  },
                  "text": "if"
                },
                {
                  "type": "comparison_operator",
                  "start": {
                    "row": 441,
                    "column": 7
                  },
                  "end": {
                    "row": 441,
                    "column": 24
                  },
                  "text": "len(distance) > 1",
                  "children": [
                    {
                      "type": "call",
                      "start": {
                        "row": 441,
                        "column": 7
                      },
                      "end": {
                        "row": 441,
                        "column": 20
                      },
                      "text": "len(distance)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 441,
                            "column": 7
                          },
                          "end": {
                            "row": 441,
                            "column": 10
                          },
                          "text": "len"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 441,
                            "column": 10
                          },
                          "end": {
                            "row": 441,
                            "column": 20
                          },
                          "text": "(distance)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 441,
                                "column": 10
                              },
                              "end": {
                                "row": 441,
                                "column": 11
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 441,
                                "column": 11
                              },
                              "end": {
                                "row": 441,
                                "column": 19
                              },
                              "text": "distance"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 441,
                                "column": 19
                              },
                              "end": {
                                "row": 441,
                                "column": 20
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ">",
                      "start": {
                        "row": 441,
                        "column": 21
                      },
                      "end": {
                        "row": 441,
                        "column": 22
                      },
                      "text": ">"
                    },
                    {
                      "type": "integer",
                      "start": {
                        "row": 441,
                        "column": 23
                      },
                      "end": {
                        "row": 441,
                        "column": 24
                      },
                      "text": "1"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 441,
                    "column": 24
                  },
                  "end": {
                    "row": 441,
                    "column": 25
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 442,
                    "column": 8
                  },
                  "end": {
                    "row": 446,
                    "column": 58
                  },
                  "text": "_method = 'brute_force'\n\n        if method != 'brute_force' and verbose is True:\n            print(\"Defaulting to brute force instead of ball tree because \" +\\\n                \"there are multiple distance components.\")",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 442,
                        "column": 8
                      },
                      "end": {
                        "row": 442,
                        "column": 31
                      },
                      "text": "_method = 'brute_force'",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 442,
                            "column": 8
                          },
                          "end": {
                            "row": 442,
                            "column": 31
                          },
                          "text": "_method = 'brute_force'",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 442,
                                "column": 8
                              },
                              "end": {
                                "row": 442,
                                "column": 15
                              },
                              "text": "_method"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 442,
                                "column": 16
                              },
                              "end": {
                                "row": 442,
                                "column": 17
                              },
                              "text": "="
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 442,
                                "column": 18
                              },
                              "end": {
                                "row": 442,
                                "column": 31
                              },
                              "text": "'brute_force'",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 442,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 442,
                                    "column": 19
                                  },
                                  "text": "'"
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 442,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 442,
                                    "column": 30
                                  },
                                  "text": "brute_force"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 442,
                                    "column": 30
                                  },
                                  "end": {
                                    "row": 442,
                                    "column": 31
                                  },
                                  "text": "'"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 444,
                        "column": 8
                      },
                      "end": {
                        "row": 446,
                        "column": 58
                      },
                      "text": "if method != 'brute_force' and verbose is True:\n            print(\"Defaulting to brute force instead of ball tree because \" +\\\n                \"there are multiple distance components.\")",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 444,
                            "column": 8
                          },
                          "end": {
                            "row": 444,
                            "column": 10
                          },
                          "text": "if"
                        },
                        {
                          "type": "boolean_operator",
                          "start": {
                            "row": 444,
                            "column": 11
                          },
                          "end": {
                            "row": 444,
                            "column": 54
                          },
                          "text": "method != 'brute_force' and verbose is True",
                          "children": [
                            {
                              "type": "comparison_operator",
                              "start": {
                                "row": 444,
                                "column": 11
                              },
                              "end": {
                                "row": 444,
                                "column": 34
                              },
                              "text": "method != 'brute_force'",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 444,
                                    "column": 11
                                  },
                                  "end": {
                                    "row": 444,
                                    "column": 17
                                  },
                                  "text": "method"
                                },
                                {
                                  "type": "!=",
                                  "start": {
                                    "row": 444,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 444,
                                    "column": 20
                                  },
                                  "text": "!="
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 444,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 444,
                                    "column": 34
                                  },
                                  "text": "'brute_force'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 444,
                                        "column": 21
                                      },
                                      "end": {
                                        "row": 444,
                                        "column": 22
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 444,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 444,
                                        "column": 33
                                      },
                                      "text": "brute_force"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 444,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 444,
                                        "column": 34
                                      },
                                      "text": "'"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "and",
                              "start": {
                                "row": 444,
                                "column": 35
                              },
                              "end": {
                                "row": 444,
                                "column": 38
                              },
                              "text": "and"
                            },
                            {
                              "type": "comparison_operator",
                              "start": {
                                "row": 444,
                                "column": 39
                              },
                              "end": {
                                "row": 444,
                                "column": 54
                              },
                              "text": "verbose is True",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 444,
                                    "column": 39
                                  },
                                  "end": {
                                    "row": 444,
                                    "column": 46
                                  },
                                  "text": "verbose"
                                },
                                {
                                  "type": "is",
                                  "start": {
                                    "row": 444,
                                    "column": 47
                                  },
                                  "end": {
                                    "row": 444,
                                    "column": 49
                                  },
                                  "text": "is"
                                },
                                {
                                  "type": "true",
                                  "start": {
                                    "row": 444,
                                    "column": 50
                                  },
                                  "end": {
                                    "row": 444,
                                    "column": 54
                                  },
                                  "text": "True"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 444,
                            "column": 54
                          },
                          "end": {
                            "row": 444,
                            "column": 55
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 445,
                            "column": 12
                          },
                          "end": {
                            "row": 446,
                            "column": 58
                          },
                          "text": "print(\"Defaulting to brute force instead of ball tree because \" +\\\n                \"there are multiple distance components.\")",
                          "children": [
                            {
                              "type": "expression_statement",
                              "start": {
                                "row": 445,
                                "column": 12
                              },
                              "end": {
                                "row": 446,
                                "column": 58
                              },
                              "text": "print(\"Defaulting to brute force instead of ball tree because \" +\\\n                \"there are multiple distance components.\")",
                              "children": [
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 445,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 446,
                                    "column": 58
                                  },
                                  "text": "print(\"Defaulting to brute force instead of ball tree because \" +\\\n                \"there are multiple distance components.\")",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 445,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 445,
                                        "column": 17
                                      },
                                      "text": "print"
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 445,
                                        "column": 17
                                      },
                                      "end": {
                                        "row": 446,
                                        "column": 58
                                      },
                                      "text": "(\"Defaulting to brute force instead of ball tree because \" +\\\n                \"there are multiple distance components.\")",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 445,
                                            "column": 17
                                          },
                                          "end": {
                                            "row": 445,
                                            "column": 18
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "binary_operator",
                                          "start": {
                                            "row": 445,
                                            "column": 18
                                          },
                                          "end": {
                                            "row": 446,
                                            "column": 57
                                          },
                                          "text": "\"Defaulting to brute force instead of ball tree because \" +\\\n                \"there are multiple distance components.\"",
                                          "children": [
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 445,
                                                "column": 18
                                              },
                                              "end": {
                                                "row": 445,
                                                "column": 75
                                              },
                                              "text": "\"Defaulting to brute force instead of ball tree because \"",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 445,
                                                    "column": 18
                                                  },
                                                  "end": {
                                                    "row": 445,
                                                    "column": 19
                                                  },
                                                  "text": "\""
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 445,
                                                    "column": 19
                                                  },
                                                  "end": {
                                                    "row": 445,
                                                    "column": 74
                                                  },
                                                  "text": "Defaulting to brute force instead of ball tree because "
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 445,
                                                    "column": 74
                                                  },
                                                  "end": {
                                                    "row": 445,
                                                    "column": 75
                                                  },
                                                  "text": "\""
                                                }
                                              ]
                                            },
                                            {
                                              "type": "+",
                                              "start": {
                                                "row": 445,
                                                "column": 76
                                              },
                                              "end": {
                                                "row": 445,
                                                "column": 77
                                              },
                                              "text": "+"
                                            },
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 446,
                                                "column": 16
                                              },
                                              "end": {
                                                "row": 446,
                                                "column": 57
                                              },
                                              "text": "\"there are multiple distance components.\"",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 446,
                                                    "column": 16
                                                  },
                                                  "end": {
                                                    "row": 446,
                                                    "column": 17
                                                  },
                                                  "text": "\""
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 446,
                                                    "column": 17
                                                  },
                                                  "end": {
                                                    "row": 446,
                                                    "column": 56
                                                  },
                                                  "text": "there are multiple distance components."
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 446,
                                                    "column": 56
                                                  },
                                                  "end": {
                                                    "row": 446,
                                                    "column": 57
                                                  },
                                                  "text": "\""
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 446,
                                            "column": 57
                                          },
                                          "end": {
                                            "row": 446,
                                            "column": 58
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start": {
                    "row": 448,
                    "column": 4
                  },
                  "end": {
                    "row": 475,
                    "column": 28
                  },
                  "text": "else:\n        if method == 'auto':\n\n            # get the total number of variables. Assume the number of elements in\n            # array type columns does not change\n            num_variables = sum([len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])])\n\n            # flag if all the features in the single composite are of numeric\n            # type.\n            numeric_type_flag = all([x in [int, float, list, array.array]\n                for x in sf_clean.column_types()])\n\n            ## Conditions necessary for ball tree to work and be worth it\n            if ((distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])\n                    and numeric_type_flag is True\n                    and num_variables <= 200):\n\n                    _method = 'ball_tree'\n\n            else:\n                _method = 'brute_force'\n\n        else:\n            _method = method",
                  "children": [
                    {
                      "type": "else",
                      "start": {
                        "row": 448,
                        "column": 4
                      },
                      "end": {
                        "row": 448,
                        "column": 8
                      },
                      "text": "else"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 448,
                        "column": 8
                      },
                      "end": {
                        "row": 448,
                        "column": 9
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 449,
                        "column": 8
                      },
                      "end": {
                        "row": 475,
                        "column": 28
                      },
                      "text": "if method == 'auto':\n\n            # get the total number of variables. Assume the number of elements in\n            # array type columns does not change\n            num_variables = sum([len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])])\n\n            # flag if all the features in the single composite are of numeric\n            # type.\n            numeric_type_flag = all([x in [int, float, list, array.array]\n                for x in sf_clean.column_types()])\n\n            ## Conditions necessary for ball tree to work and be worth it\n            if ((distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])\n                    and numeric_type_flag is True\n                    and num_variables <= 200):\n\n                    _method = 'ball_tree'\n\n            else:\n                _method = 'brute_force'\n\n        else:\n            _method = method",
                      "children": [
                        {
                          "type": "if_statement",
                          "start": {
                            "row": 449,
                            "column": 8
                          },
                          "end": {
                            "row": 475,
                            "column": 28
                          },
                          "text": "if method == 'auto':\n\n            # get the total number of variables. Assume the number of elements in\n            # array type columns does not change\n            num_variables = sum([len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])])\n\n            # flag if all the features in the single composite are of numeric\n            # type.\n            numeric_type_flag = all([x in [int, float, list, array.array]\n                for x in sf_clean.column_types()])\n\n            ## Conditions necessary for ball tree to work and be worth it\n            if ((distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])\n                    and numeric_type_flag is True\n                    and num_variables <= 200):\n\n                    _method = 'ball_tree'\n\n            else:\n                _method = 'brute_force'\n\n        else:\n            _method = method",
                          "children": [
                            {
                              "type": "if",
                              "start": {
                                "row": 449,
                                "column": 8
                              },
                              "end": {
                                "row": 449,
                                "column": 10
                              },
                              "text": "if"
                            },
                            {
                              "type": "comparison_operator",
                              "start": {
                                "row": 449,
                                "column": 11
                              },
                              "end": {
                                "row": 449,
                                "column": 27
                              },
                              "text": "method == 'auto'",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 449,
                                    "column": 11
                                  },
                                  "end": {
                                    "row": 449,
                                    "column": 17
                                  },
                                  "text": "method"
                                },
                                {
                                  "type": "==",
                                  "start": {
                                    "row": 449,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 449,
                                    "column": 20
                                  },
                                  "text": "=="
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 449,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 449,
                                    "column": 27
                                  },
                                  "text": "'auto'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 449,
                                        "column": 21
                                      },
                                      "end": {
                                        "row": 449,
                                        "column": 22
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 449,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 449,
                                        "column": 26
                                      },
                                      "text": "auto"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 449,
                                        "column": 26
                                      },
                                      "end": {
                                        "row": 449,
                                        "column": 27
                                      },
                                      "text": "'"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ":",
                              "start": {
                                "row": 449,
                                "column": 27
                              },
                              "end": {
                                "row": 449,
                                "column": 28
                              },
                              "text": ":"
                            },
                            {
                              "type": "comment",
                              "start": {
                                "row": 451,
                                "column": 12
                              },
                              "end": {
                                "row": 451,
                                "column": 81
                              },
                              "text": "# get the total number of variables. Assume the number of elements in"
                            },
                            {
                              "type": "comment",
                              "start": {
                                "row": 452,
                                "column": 12
                              },
                              "end": {
                                "row": 452,
                                "column": 48
                              },
                              "text": "# array type columns does not change"
                            },
                            {
                              "type": "block",
                              "start": {
                                "row": 453,
                                "column": 12
                              },
                              "end": {
                                "row": 472,
                                "column": 39
                              },
                              "text": "num_variables = sum([len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])])\n\n            # flag if all the features in the single composite are of numeric\n            # type.\n            numeric_type_flag = all([x in [int, float, list, array.array]\n                for x in sf_clean.column_types()])\n\n            ## Conditions necessary for ball tree to work and be worth it\n            if ((distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])\n                    and numeric_type_flag is True\n                    and num_variables <= 200):\n\n                    _method = 'ball_tree'\n\n            else:\n                _method = 'brute_force'",
                              "children": [
                                {
                                  "type": "expression_statement",
                                  "start": {
                                    "row": 453,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 454,
                                    "column": 55
                                  },
                                  "text": "num_variables = sum([len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])])",
                                  "children": [
                                    {
                                      "type": "assignment",
                                      "start": {
                                        "row": 453,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 454,
                                        "column": 55
                                      },
                                      "text": "num_variables = sum([len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])])",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 453,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 453,
                                            "column": 25
                                          },
                                          "text": "num_variables"
                                        },
                                        {
                                          "type": "=",
                                          "start": {
                                            "row": 453,
                                            "column": 26
                                          },
                                          "end": {
                                            "row": 453,
                                            "column": 27
                                          },
                                          "text": "="
                                        },
                                        {
                                          "type": "call",
                                          "start": {
                                            "row": 453,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 454,
                                            "column": 55
                                          },
                                          "text": "sum([len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])])",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 453,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 453,
                                                "column": 31
                                              },
                                              "text": "sum"
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 453,
                                                "column": 31
                                              },
                                              "end": {
                                                "row": 454,
                                                "column": 55
                                              },
                                              "text": "([len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])])",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 453,
                                                    "column": 31
                                                  },
                                                  "end": {
                                                    "row": 453,
                                                    "column": 32
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": "list_comprehension",
                                                  "start": {
                                                    "row": 453,
                                                    "column": 32
                                                  },
                                                  "end": {
                                                    "row": 454,
                                                    "column": 54
                                                  },
                                                  "text": "[len(x) if hasattr(x, '__iter__') else 1\n                for x in _six.itervalues(sf_clean[0])]",
                                                  "children": [
                                                    {
                                                      "type": "[",
                                                      "start": {
                                                        "row": 453,
                                                        "column": 32
                                                      },
                                                      "end": {
                                                        "row": 453,
                                                        "column": 33
                                                      },
                                                      "text": "["
                                                    },
                                                    {
                                                      "type": "conditional_expression",
                                                      "start": {
                                                        "row": 453,
                                                        "column": 33
                                                      },
                                                      "end": {
                                                        "row": 453,
                                                        "column": 72
                                                      },
                                                      "text": "len(x) if hasattr(x, '__iter__') else 1",
                                                      "children": [
                                                        {
                                                          "type": "call",
                                                          "start": {
                                                            "row": 453,
                                                            "column": 33
                                                          },
                                                          "end": {
                                                            "row": 453,
                                                            "column": 39
                                                          },
                                                          "text": "len(x)",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "start": {
                                                                "row": 453,
                                                                "column": 33
                                                              },
                                                              "end": {
                                                                "row": 453,
                                                                "column": 36
                                                              },
                                                              "text": "len"
                                                            },
                                                            {
                                                              "type": "argument_list",
                                                              "start": {
                                                                "row": 453,
                                                                "column": 36
                                                              },
                                                              "end": {
                                                                "row": 453,
                                                                "column": 39
                                                              },
                                                              "text": "(x)",
                                                              "children": [
                                                                {
                                                                  "type": "(",
                                                                  "start": {
                                                                    "row": 453,
                                                                    "column": 36
                                                                  },
                                                                  "end": {
                                                                    "row": 453,
                                                                    "column": 37
                                                                  },
                                                                  "text": "("
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 453,
                                                                    "column": 37
                                                                  },
                                                                  "end": {
                                                                    "row": 453,
                                                                    "column": 38
                                                                  },
                                                                  "text": "x"
                                                                },
                                                                {
                                                                  "type": ")",
                                                                  "start": {
                                                                    "row": 453,
                                                                    "column": 38
                                                                  },
                                                                  "end": {
                                                                    "row": 453,
                                                                    "column": 39
                                                                  },
                                                                  "text": ")"
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "if",
                                                          "start": {
                                                            "row": 453,
                                                            "column": 40
                                                          },
                                                          "end": {
                                                            "row": 453,
                                                            "column": 42
                                                          },
                                                          "text": "if"
                                                        },
                                                        {
                                                          "type": "call",
                                                          "start": {
                                                            "row": 453,
                                                            "column": 43
                                                          },
                                                          "end": {
                                                            "row": 453,
                                                            "column": 65
                                                          },
                                                          "text": "hasattr(x, '__iter__')",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "start": {
                                                                "row": 453,
                                                                "column": 43
                                                              },
                                                              "end": {
                                                                "row": 453,
                                                                "column": 50
                                                              },
                                                              "text": "hasattr"
                                                            },
                                                            {
                                                              "type": "argument_list",
                                                              "start": {
                                                                "row": 453,
                                                                "column": 50
                                                              },
                                                              "end": {
                                                                "row": 453,
                                                                "column": 65
                                                              },
                                                              "text": "(x, '__iter__')",
                                                              "children": [
                                                                {
                                                                  "type": "(",
                                                                  "start": {
                                                                    "row": 453,
                                                                    "column": 50
                                                                  },
                                                                  "end": {
                                                                    "row": 453,
                                                                    "column": 51
                                                                  },
                                                                  "text": "("
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 453,
                                                                    "column": 51
                                                                  },
                                                                  "end": {
                                                                    "row": 453,
                                                                    "column": 52
                                                                  },
                                                                  "text": "x"
                                                                },
                                                                {
                                                                  "type": ",",
                                                                  "start": {
                                                                    "row": 453,
                                                                    "column": 52
                                                                  },
                                                                  "end": {
                                                                    "row": 453,
                                                                    "column": 53
                                                                  },
                                                                  "text": ","
                                                                },
                                                                {
                                                                  "type": "string",
                                                                  "start": {
                                                                    "row": 453,
                                                                    "column": 54
                                                                  },
                                                                  "end": {
                                                                    "row": 453,
                                                                    "column": 64
                                                                  },
                                                                  "text": "'__iter__'",
                                                                  "children": [
                                                                    {
                                                                      "type": "string_start",
                                                                      "start": {
                                                                        "row": 453,
                                                                        "column": 54
                                                                      },
                                                                      "end": {
                                                                        "row": 453,
                                                                        "column": 55
                                                                      },
                                                                      "text": "'"
                                                                    },
                                                                    {
                                                                      "type": "string_content",
                                                                      "start": {
                                                                        "row": 453,
                                                                        "column": 55
                                                                      },
                                                                      "end": {
                                                                        "row": 453,
                                                                        "column": 63
                                                                      },
                                                                      "text": "__iter__"
                                                                    },
                                                                    {
                                                                      "type": "string_end",
                                                                      "start": {
                                                                        "row": 453,
                                                                        "column": 63
                                                                      },
                                                                      "end": {
                                                                        "row": 453,
                                                                        "column": 64
                                                                      },
                                                                      "text": "'"
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": ")",
                                                                  "start": {
                                                                    "row": 453,
                                                                    "column": 64
                                                                  },
                                                                  "end": {
                                                                    "row": 453,
                                                                    "column": 65
                                                                  },
                                                                  "text": ")"
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "else",
                                                          "start": {
                                                            "row": 453,
                                                            "column": 66
                                                          },
                                                          "end": {
                                                            "row": 453,
                                                            "column": 70
                                                          },
                                                          "text": "else"
                                                        },
                                                        {
                                                          "type": "integer",
                                                          "start": {
                                                            "row": 453,
                                                            "column": 71
                                                          },
                                                          "end": {
                                                            "row": 453,
                                                            "column": 72
                                                          },
                                                          "text": "1"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "for_in_clause",
                                                      "start": {
                                                        "row": 454,
                                                        "column": 16
                                                      },
                                                      "end": {
                                                        "row": 454,
                                                        "column": 53
                                                      },
                                                      "text": "for x in _six.itervalues(sf_clean[0])",
                                                      "children": [
                                                        {
                                                          "type": "for",
                                                          "start": {
                                                            "row": 454,
                                                            "column": 16
                                                          },
                                                          "end": {
                                                            "row": 454,
                                                            "column": 19
                                                          },
                                                          "text": "for"
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 454,
                                                            "column": 20
                                                          },
                                                          "end": {
                                                            "row": 454,
                                                            "column": 21
                                                          },
                                                          "text": "x"
                                                        },
                                                        {
                                                          "type": "in",
                                                          "start": {
                                                            "row": 454,
                                                            "column": 22
                                                          },
                                                          "end": {
                                                            "row": 454,
                                                            "column": 24
                                                          },
                                                          "text": "in"
                                                        },
                                                        {
                                                          "type": "call",
                                                          "start": {
                                                            "row": 454,
                                                            "column": 25
                                                          },
                                                          "end": {
                                                            "row": 454,
                                                            "column": 53
                                                          },
                                                          "text": "_six.itervalues(sf_clean[0])",
                                                          "children": [
                                                            {
                                                              "type": "attribute",
                                                              "start": {
                                                                "row": 454,
                                                                "column": 25
                                                              },
                                                              "end": {
                                                                "row": 454,
                                                                "column": 40
                                                              },
                                                              "text": "_six.itervalues",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 454,
                                                                    "column": 25
                                                                  },
                                                                  "end": {
                                                                    "row": 454,
                                                                    "column": 29
                                                                  },
                                                                  "text": "_six"
                                                                },
                                                                {
                                                                  "type": ".",
                                                                  "start": {
                                                                    "row": 454,
                                                                    "column": 29
                                                                  },
                                                                  "end": {
                                                                    "row": 454,
                                                                    "column": 30
                                                                  },
                                                                  "text": "."
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 454,
                                                                    "column": 30
                                                                  },
                                                                  "end": {
                                                                    "row": 454,
                                                                    "column": 40
                                                                  },
                                                                  "text": "itervalues"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "argument_list",
                                                              "start": {
                                                                "row": 454,
                                                                "column": 40
                                                              },
                                                              "end": {
                                                                "row": 454,
                                                                "column": 53
                                                              },
                                                              "text": "(sf_clean[0])",
                                                              "children": [
                                                                {
                                                                  "type": "(",
                                                                  "start": {
                                                                    "row": 454,
                                                                    "column": 40
                                                                  },
                                                                  "end": {
                                                                    "row": 454,
                                                                    "column": 41
                                                                  },
                                                                  "text": "("
                                                                },
                                                                {
                                                                  "type": "subscript",
                                                                  "start": {
                                                                    "row": 454,
                                                                    "column": 41
                                                                  },
                                                                  "end": {
                                                                    "row": 454,
                                                                    "column": 52
                                                                  },
                                                                  "text": "sf_clean[0]",
                                                                  "children": [
                                                                    {
                                                                      "type": "identifier",
                                                                      "start": {
                                                                        "row": 454,
                                                                        "column": 41
                                                                      },
                                                                      "end": {
                                                                        "row": 454,
                                                                        "column": 49
                                                                      },
                                                                      "text": "sf_clean"
                                                                    },
                                                                    {
                                                                      "type": "[",
                                                                      "start": {
                                                                        "row": 454,
                                                                        "column": 49
                                                                      },
                                                                      "end": {
                                                                        "row": 454,
                                                                        "column": 50
                                                                      },
                                                                      "text": "["
                                                                    },
                                                                    {
                                                                      "type": "integer",
                                                                      "start": {
                                                                        "row": 454,
                                                                        "column": 50
                                                                      },
                                                                      "end": {
                                                                        "row": 454,
                                                                        "column": 51
                                                                      },
                                                                      "text": "0"
                                                                    },
                                                                    {
                                                                      "type": "]",
                                                                      "start": {
                                                                        "row": 454,
                                                                        "column": 51
                                                                      },
                                                                      "end": {
                                                                        "row": 454,
                                                                        "column": 52
                                                                      },
                                                                      "text": "]"
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": ")",
                                                                  "start": {
                                                                    "row": 454,
                                                                    "column": 52
                                                                  },
                                                                  "end": {
                                                                    "row": 454,
                                                                    "column": 53
                                                                  },
                                                                  "text": ")"
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "]",
                                                      "start": {
                                                        "row": 454,
                                                        "column": 53
                                                      },
                                                      "end": {
                                                        "row": 454,
                                                        "column": 54
                                                      },
                                                      "text": "]"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 454,
                                                    "column": 54
                                                  },
                                                  "end": {
                                                    "row": 454,
                                                    "column": 55
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "comment",
                                  "start": {
                                    "row": 456,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 456,
                                    "column": 77
                                  },
                                  "text": "# flag if all the features in the single composite are of numeric"
                                },
                                {
                                  "type": "comment",
                                  "start": {
                                    "row": 457,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 457,
                                    "column": 19
                                  },
                                  "text": "# type."
                                },
                                {
                                  "type": "expression_statement",
                                  "start": {
                                    "row": 458,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 459,
                                    "column": 50
                                  },
                                  "text": "numeric_type_flag = all([x in [int, float, list, array.array]\n                for x in sf_clean.column_types()])",
                                  "children": [
                                    {
                                      "type": "assignment",
                                      "start": {
                                        "row": 458,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 459,
                                        "column": 50
                                      },
                                      "text": "numeric_type_flag = all([x in [int, float, list, array.array]\n                for x in sf_clean.column_types()])",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 458,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 458,
                                            "column": 29
                                          },
                                          "text": "numeric_type_flag"
                                        },
                                        {
                                          "type": "=",
                                          "start": {
                                            "row": 458,
                                            "column": 30
                                          },
                                          "end": {
                                            "row": 458,
                                            "column": 31
                                          },
                                          "text": "="
                                        },
                                        {
                                          "type": "call",
                                          "start": {
                                            "row": 458,
                                            "column": 32
                                          },
                                          "end": {
                                            "row": 459,
                                            "column": 50
                                          },
                                          "text": "all([x in [int, float, list, array.array]\n                for x in sf_clean.column_types()])",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 458,
                                                "column": 32
                                              },
                                              "end": {
                                                "row": 458,
                                                "column": 35
                                              },
                                              "text": "all"
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 458,
                                                "column": 35
                                              },
                                              "end": {
                                                "row": 459,
                                                "column": 50
                                              },
                                              "text": "([x in [int, float, list, array.array]\n                for x in sf_clean.column_types()])",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 458,
                                                    "column": 35
                                                  },
                                                  "end": {
                                                    "row": 458,
                                                    "column": 36
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": "list_comprehension",
                                                  "start": {
                                                    "row": 458,
                                                    "column": 36
                                                  },
                                                  "end": {
                                                    "row": 459,
                                                    "column": 49
                                                  },
                                                  "text": "[x in [int, float, list, array.array]\n                for x in sf_clean.column_types()]",
                                                  "children": [
                                                    {
                                                      "type": "[",
                                                      "start": {
                                                        "row": 458,
                                                        "column": 36
                                                      },
                                                      "end": {
                                                        "row": 458,
                                                        "column": 37
                                                      },
                                                      "text": "["
                                                    },
                                                    {
                                                      "type": "comparison_operator",
                                                      "start": {
                                                        "row": 458,
                                                        "column": 37
                                                      },
                                                      "end": {
                                                        "row": 458,
                                                        "column": 73
                                                      },
                                                      "text": "x in [int, float, list, array.array]",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 458,
                                                            "column": 37
                                                          },
                                                          "end": {
                                                            "row": 458,
                                                            "column": 38
                                                          },
                                                          "text": "x"
                                                        },
                                                        {
                                                          "type": "in",
                                                          "start": {
                                                            "row": 458,
                                                            "column": 39
                                                          },
                                                          "end": {
                                                            "row": 458,
                                                            "column": 41
                                                          },
                                                          "text": "in"
                                                        },
                                                        {
                                                          "type": "list",
                                                          "start": {
                                                            "row": 458,
                                                            "column": 42
                                                          },
                                                          "end": {
                                                            "row": 458,
                                                            "column": 73
                                                          },
                                                          "text": "[int, float, list, array.array]",
                                                          "children": [
                                                            {
                                                              "type": "[",
                                                              "start": {
                                                                "row": 458,
                                                                "column": 42
                                                              },
                                                              "end": {
                                                                "row": 458,
                                                                "column": 43
                                                              },
                                                              "text": "["
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "start": {
                                                                "row": 458,
                                                                "column": 43
                                                              },
                                                              "end": {
                                                                "row": 458,
                                                                "column": 46
                                                              },
                                                              "text": "int"
                                                            },
                                                            {
                                                              "type": ",",
                                                              "start": {
                                                                "row": 458,
                                                                "column": 46
                                                              },
                                                              "end": {
                                                                "row": 458,
                                                                "column": 47
                                                              },
                                                              "text": ","
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "start": {
                                                                "row": 458,
                                                                "column": 48
                                                              },
                                                              "end": {
                                                                "row": 458,
                                                                "column": 53
                                                              },
                                                              "text": "float"
                                                            },
                                                            {
                                                              "type": ",",
                                                              "start": {
                                                                "row": 458,
                                                                "column": 53
                                                              },
                                                              "end": {
                                                                "row": 458,
                                                                "column": 54
                                                              },
                                                              "text": ","
                                                            },
                                                            {
                                                              "type": "identifier",
                                                              "start": {
                                                                "row": 458,
                                                                "column": 55
                                                              },
                                                              "end": {
                                                                "row": 458,
                                                                "column": 59
                                                              },
                                                              "text": "list"
                                                            },
                                                            {
                                                              "type": ",",
                                                              "start": {
                                                                "row": 458,
                                                                "column": 59
                                                              },
                                                              "end": {
                                                                "row": 458,
                                                                "column": 60
                                                              },
                                                              "text": ","
                                                            },
                                                            {
                                                              "type": "attribute",
                                                              "start": {
                                                                "row": 458,
                                                                "column": 61
                                                              },
                                                              "end": {
                                                                "row": 458,
                                                                "column": 72
                                                              },
                                                              "text": "array.array",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 458,
                                                                    "column": 61
                                                                  },
                                                                  "end": {
                                                                    "row": 458,
                                                                    "column": 66
                                                                  },
                                                                  "text": "array"
                                                                },
                                                                {
                                                                  "type": ".",
                                                                  "start": {
                                                                    "row": 458,
                                                                    "column": 66
                                                                  },
                                                                  "end": {
                                                                    "row": 458,
                                                                    "column": 67
                                                                  },
                                                                  "text": "."
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 458,
                                                                    "column": 67
                                                                  },
                                                                  "end": {
                                                                    "row": 458,
                                                                    "column": 72
                                                                  },
                                                                  "text": "array"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "]",
                                                              "start": {
                                                                "row": 458,
                                                                "column": 72
                                                              },
                                                              "end": {
                                                                "row": 458,
                                                                "column": 73
                                                              },
                                                              "text": "]"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "for_in_clause",
                                                      "start": {
                                                        "row": 459,
                                                        "column": 16
                                                      },
                                                      "end": {
                                                        "row": 459,
                                                        "column": 48
                                                      },
                                                      "text": "for x in sf_clean.column_types()",
                                                      "children": [
                                                        {
                                                          "type": "for",
                                                          "start": {
                                                            "row": 459,
                                                            "column": 16
                                                          },
                                                          "end": {
                                                            "row": 459,
                                                            "column": 19
                                                          },
                                                          "text": "for"
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 459,
                                                            "column": 20
                                                          },
                                                          "end": {
                                                            "row": 459,
                                                            "column": 21
                                                          },
                                                          "text": "x"
                                                        },
                                                        {
                                                          "type": "in",
                                                          "start": {
                                                            "row": 459,
                                                            "column": 22
                                                          },
                                                          "end": {
                                                            "row": 459,
                                                            "column": 24
                                                          },
                                                          "text": "in"
                                                        },
                                                        {
                                                          "type": "call",
                                                          "start": {
                                                            "row": 459,
                                                            "column": 25
                                                          },
                                                          "end": {
                                                            "row": 459,
                                                            "column": 48
                                                          },
                                                          "text": "sf_clean.column_types()",
                                                          "children": [
                                                            {
                                                              "type": "attribute",
                                                              "start": {
                                                                "row": 459,
                                                                "column": 25
                                                              },
                                                              "end": {
                                                                "row": 459,
                                                                "column": 46
                                                              },
                                                              "text": "sf_clean.column_types",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 459,
                                                                    "column": 25
                                                                  },
                                                                  "end": {
                                                                    "row": 459,
                                                                    "column": 33
                                                                  },
                                                                  "text": "sf_clean"
                                                                },
                                                                {
                                                                  "type": ".",
                                                                  "start": {
                                                                    "row": 459,
                                                                    "column": 33
                                                                  },
                                                                  "end": {
                                                                    "row": 459,
                                                                    "column": 34
                                                                  },
                                                                  "text": "."
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 459,
                                                                    "column": 34
                                                                  },
                                                                  "end": {
                                                                    "row": 459,
                                                                    "column": 46
                                                                  },
                                                                  "text": "column_types"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "argument_list",
                                                              "start": {
                                                                "row": 459,
                                                                "column": 46
                                                              },
                                                              "end": {
                                                                "row": 459,
                                                                "column": 48
                                                              },
                                                              "text": "()",
                                                              "children": [
                                                                {
                                                                  "type": "(",
                                                                  "start": {
                                                                    "row": 459,
                                                                    "column": 46
                                                                  },
                                                                  "end": {
                                                                    "row": 459,
                                                                    "column": 47
                                                                  },
                                                                  "text": "("
                                                                },
                                                                {
                                                                  "type": ")",
                                                                  "start": {
                                                                    "row": 459,
                                                                    "column": 47
                                                                  },
                                                                  "end": {
                                                                    "row": 459,
                                                                    "column": 48
                                                                  },
                                                                  "text": ")"
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "]",
                                                      "start": {
                                                        "row": 459,
                                                        "column": 48
                                                      },
                                                      "end": {
                                                        "row": 459,
                                                        "column": 49
                                                      },
                                                      "text": "]"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 459,
                                                    "column": 49
                                                  },
                                                  "end": {
                                                    "row": 459,
                                                    "column": 50
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": "comment",
                                  "start": {
                                    "row": 461,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 461,
                                    "column": 73
                                  },
                                  "text": "## Conditions necessary for ball tree to work and be worth it"
                                },
                                {
                                  "type": "if_statement",
                                  "start": {
                                    "row": 462,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 472,
                                    "column": 39
                                  },
                                  "text": "if ((distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])\n                    and numeric_type_flag is True\n                    and num_variables <= 200):\n\n                    _method = 'ball_tree'\n\n            else:\n                _method = 'brute_force'",
                                  "children": [
                                    {
                                      "type": "if",
                                      "start": {
                                        "row": 462,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 462,
                                        "column": 14
                                      },
                                      "text": "if"
                                    },
                                    {
                                      "type": "parenthesized_expression",
                                      "start": {
                                        "row": 462,
                                        "column": 15
                                      },
                                      "end": {
                                        "row": 467,
                                        "column": 45
                                      },
                                      "text": "((distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])\n                    and numeric_type_flag is True\n                    and num_variables <= 200)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 462,
                                            "column": 15
                                          },
                                          "end": {
                                            "row": 462,
                                            "column": 16
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "boolean_operator",
                                          "start": {
                                            "row": 462,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 467,
                                            "column": 44
                                          },
                                          "text": "(distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])\n                    and numeric_type_flag is True\n                    and num_variables <= 200",
                                          "children": [
                                            {
                                              "type": "boolean_operator",
                                              "start": {
                                                "row": 462,
                                                "column": 16
                                              },
                                              "end": {
                                                "row": 466,
                                                "column": 49
                                              },
                                              "text": "(distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])\n                    and numeric_type_flag is True",
                                              "children": [
                                                {
                                                  "type": "parenthesized_expression",
                                                  "start": {
                                                    "row": 462,
                                                    "column": 16
                                                  },
                                                  "end": {
                                                    "row": 465,
                                                    "column": 69
                                                  },
                                                  "text": "(distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan])",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "start": {
                                                        "row": 462,
                                                        "column": 16
                                                      },
                                                      "end": {
                                                        "row": 462,
                                                        "column": 17
                                                      },
                                                      "text": "("
                                                    },
                                                    {
                                                      "type": "comparison_operator",
                                                      "start": {
                                                        "row": 462,
                                                        "column": 17
                                                      },
                                                      "end": {
                                                        "row": 465,
                                                        "column": 68
                                                      },
                                                      "text": "distance[0][1] in ['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan]",
                                                      "children": [
                                                        {
                                                          "type": "subscript",
                                                          "start": {
                                                            "row": 462,
                                                            "column": 17
                                                          },
                                                          "end": {
                                                            "row": 462,
                                                            "column": 31
                                                          },
                                                          "text": "distance[0][1]",
                                                          "children": [
                                                            {
                                                              "type": "subscript",
                                                              "start": {
                                                                "row": 462,
                                                                "column": 17
                                                              },
                                                              "end": {
                                                                "row": 462,
                                                                "column": 28
                                                              },
                                                              "text": "distance[0]",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 462,
                                                                    "column": 17
                                                                  },
                                                                  "end": {
                                                                    "row": 462,
                                                                    "column": 25
                                                                  },
                                                                  "text": "distance"
                                                                },
                                                                {
                                                                  "type": "[",
                                                                  "start": {
                                                                    "row": 462,
                                                                    "column": 25
                                                                  },
                                                                  "end": {
                                                                    "row": 462,
                                                                    "column": 26
                                                                  },
                                                                  "text": "["
                                                                },
                                                                {
                                                                  "type": "integer",
                                                                  "start": {
                                                                    "row": 462,
                                                                    "column": 26
                                                                  },
                                                                  "end": {
                                                                    "row": 462,
                                                                    "column": 27
                                                                  },
                                                                  "text": "0"
                                                                },
                                                                {
                                                                  "type": "]",
                                                                  "start": {
                                                                    "row": 462,
                                                                    "column": 27
                                                                  },
                                                                  "end": {
                                                                    "row": 462,
                                                                    "column": 28
                                                                  },
                                                                  "text": "]"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "[",
                                                              "start": {
                                                                "row": 462,
                                                                "column": 28
                                                              },
                                                              "end": {
                                                                "row": 462,
                                                                "column": 29
                                                              },
                                                              "text": "["
                                                            },
                                                            {
                                                              "type": "integer",
                                                              "start": {
                                                                "row": 462,
                                                                "column": 29
                                                              },
                                                              "end": {
                                                                "row": 462,
                                                                "column": 30
                                                              },
                                                              "text": "1"
                                                            },
                                                            {
                                                              "type": "]",
                                                              "start": {
                                                                "row": 462,
                                                                "column": 30
                                                              },
                                                              "end": {
                                                                "row": 462,
                                                                "column": 31
                                                              },
                                                              "text": "]"
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "in",
                                                          "start": {
                                                            "row": 462,
                                                            "column": 32
                                                          },
                                                          "end": {
                                                            "row": 462,
                                                            "column": 34
                                                          },
                                                          "text": "in"
                                                        },
                                                        {
                                                          "type": "list",
                                                          "start": {
                                                            "row": 462,
                                                            "column": 35
                                                          },
                                                          "end": {
                                                            "row": 465,
                                                            "column": 68
                                                          },
                                                          "text": "['euclidean',\n                                    'manhattan',\n                                    _turicreate.distances.euclidean,\n                                    _turicreate.distances.manhattan]",
                                                          "children": [
                                                            {
                                                              "type": "[",
                                                              "start": {
                                                                "row": 462,
                                                                "column": 35
                                                              },
                                                              "end": {
                                                                "row": 462,
                                                                "column": 36
                                                              },
                                                              "text": "["
                                                            },
                                                            {
                                                              "type": "string",
                                                              "start": {
                                                                "row": 462,
                                                                "column": 36
                                                              },
                                                              "end": {
                                                                "row": 462,
                                                                "column": 47
                                                              },
                                                              "text": "'euclidean'",
                                                              "children": [
                                                                {
                                                                  "type": "string_start",
                                                                  "start": {
                                                                    "row": 462,
                                                                    "column": 36
                                                                  },
                                                                  "end": {
                                                                    "row": 462,
                                                                    "column": 37
                                                                  },
                                                                  "text": "'"
                                                                },
                                                                {
                                                                  "type": "string_content",
                                                                  "start": {
                                                                    "row": 462,
                                                                    "column": 37
                                                                  },
                                                                  "end": {
                                                                    "row": 462,
                                                                    "column": 46
                                                                  },
                                                                  "text": "euclidean"
                                                                },
                                                                {
                                                                  "type": "string_end",
                                                                  "start": {
                                                                    "row": 462,
                                                                    "column": 46
                                                                  },
                                                                  "end": {
                                                                    "row": 462,
                                                                    "column": 47
                                                                  },
                                                                  "text": "'"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ",",
                                                              "start": {
                                                                "row": 462,
                                                                "column": 47
                                                              },
                                                              "end": {
                                                                "row": 462,
                                                                "column": 48
                                                              },
                                                              "text": ","
                                                            },
                                                            {
                                                              "type": "string",
                                                              "start": {
                                                                "row": 463,
                                                                "column": 36
                                                              },
                                                              "end": {
                                                                "row": 463,
                                                                "column": 47
                                                              },
                                                              "text": "'manhattan'",
                                                              "children": [
                                                                {
                                                                  "type": "string_start",
                                                                  "start": {
                                                                    "row": 463,
                                                                    "column": 36
                                                                  },
                                                                  "end": {
                                                                    "row": 463,
                                                                    "column": 37
                                                                  },
                                                                  "text": "'"
                                                                },
                                                                {
                                                                  "type": "string_content",
                                                                  "start": {
                                                                    "row": 463,
                                                                    "column": 37
                                                                  },
                                                                  "end": {
                                                                    "row": 463,
                                                                    "column": 46
                                                                  },
                                                                  "text": "manhattan"
                                                                },
                                                                {
                                                                  "type": "string_end",
                                                                  "start": {
                                                                    "row": 463,
                                                                    "column": 46
                                                                  },
                                                                  "end": {
                                                                    "row": 463,
                                                                    "column": 47
                                                                  },
                                                                  "text": "'"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ",",
                                                              "start": {
                                                                "row": 463,
                                                                "column": 47
                                                              },
                                                              "end": {
                                                                "row": 463,
                                                                "column": 48
                                                              },
                                                              "text": ","
                                                            },
                                                            {
                                                              "type": "attribute",
                                                              "start": {
                                                                "row": 464,
                                                                "column": 36
                                                              },
                                                              "end": {
                                                                "row": 464,
                                                                "column": 67
                                                              },
                                                              "text": "_turicreate.distances.euclidean",
                                                              "children": [
                                                                {
                                                                  "type": "attribute",
                                                                  "start": {
                                                                    "row": 464,
                                                                    "column": 36
                                                                  },
                                                                  "end": {
                                                                    "row": 464,
                                                                    "column": 57
                                                                  },
                                                                  "text": "_turicreate.distances",
                                                                  "children": [
                                                                    {
                                                                      "type": "identifier",
                                                                      "start": {
                                                                        "row": 464,
                                                                        "column": 36
                                                                      },
                                                                      "end": {
                                                                        "row": 464,
                                                                        "column": 47
                                                                      },
                                                                      "text": "_turicreate"
                                                                    },
                                                                    {
                                                                      "type": ".",
                                                                      "start": {
                                                                        "row": 464,
                                                                        "column": 47
                                                                      },
                                                                      "end": {
                                                                        "row": 464,
                                                                        "column": 48
                                                                      },
                                                                      "text": "."
                                                                    },
                                                                    {
                                                                      "type": "identifier",
                                                                      "start": {
                                                                        "row": 464,
                                                                        "column": 48
                                                                      },
                                                                      "end": {
                                                                        "row": 464,
                                                                        "column": 57
                                                                      },
                                                                      "text": "distances"
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": ".",
                                                                  "start": {
                                                                    "row": 464,
                                                                    "column": 57
                                                                  },
                                                                  "end": {
                                                                    "row": 464,
                                                                    "column": 58
                                                                  },
                                                                  "text": "."
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 464,
                                                                    "column": 58
                                                                  },
                                                                  "end": {
                                                                    "row": 464,
                                                                    "column": 67
                                                                  },
                                                                  "text": "euclidean"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ",",
                                                              "start": {
                                                                "row": 464,
                                                                "column": 67
                                                              },
                                                              "end": {
                                                                "row": 464,
                                                                "column": 68
                                                              },
                                                              "text": ","
                                                            },
                                                            {
                                                              "type": "attribute",
                                                              "start": {
                                                                "row": 465,
                                                                "column": 36
                                                              },
                                                              "end": {
                                                                "row": 465,
                                                                "column": 67
                                                              },
                                                              "text": "_turicreate.distances.manhattan",
                                                              "children": [
                                                                {
                                                                  "type": "attribute",
                                                                  "start": {
                                                                    "row": 465,
                                                                    "column": 36
                                                                  },
                                                                  "end": {
                                                                    "row": 465,
                                                                    "column": 57
                                                                  },
                                                                  "text": "_turicreate.distances",
                                                                  "children": [
                                                                    {
                                                                      "type": "identifier",
                                                                      "start": {
                                                                        "row": 465,
                                                                        "column": 36
                                                                      },
                                                                      "end": {
                                                                        "row": 465,
                                                                        "column": 47
                                                                      },
                                                                      "text": "_turicreate"
                                                                    },
                                                                    {
                                                                      "type": ".",
                                                                      "start": {
                                                                        "row": 465,
                                                                        "column": 47
                                                                      },
                                                                      "end": {
                                                                        "row": 465,
                                                                        "column": 48
                                                                      },
                                                                      "text": "."
                                                                    },
                                                                    {
                                                                      "type": "identifier",
                                                                      "start": {
                                                                        "row": 465,
                                                                        "column": 48
                                                                      },
                                                                      "end": {
                                                                        "row": 465,
                                                                        "column": 57
                                                                      },
                                                                      "text": "distances"
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": ".",
                                                                  "start": {
                                                                    "row": 465,
                                                                    "column": 57
                                                                  },
                                                                  "end": {
                                                                    "row": 465,
                                                                    "column": 58
                                                                  },
                                                                  "text": "."
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 465,
                                                                    "column": 58
                                                                  },
                                                                  "end": {
                                                                    "row": 465,
                                                                    "column": 67
                                                                  },
                                                                  "text": "manhattan"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "]",
                                                              "start": {
                                                                "row": 465,
                                                                "column": 67
                                                              },
                                                              "end": {
                                                                "row": 465,
                                                                "column": 68
                                                              },
                                                              "text": "]"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "start": {
                                                        "row": 465,
                                                        "column": 68
                                                      },
                                                      "end": {
                                                        "row": 465,
                                                        "column": 69
                                                      },
                                                      "text": ")"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "and",
                                                  "start": {
                                                    "row": 466,
                                                    "column": 20
                                                  },
                                                  "end": {
                                                    "row": 466,
                                                    "column": 23
                                                  },
                                                  "text": "and"
                                                },
                                                {
                                                  "type": "comparison_operator",
                                                  "start": {
                                                    "row": 466,
                                                    "column": 24
                                                  },
                                                  "end": {
                                                    "row": 466,
                                                    "column": 49
                                                  },
                                                  "text": "numeric_type_flag is True",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 466,
                                                        "column": 24
                                                      },
                                                      "end": {
                                                        "row": 466,
                                                        "column": 41
                                                      },
                                                      "text": "numeric_type_flag"
                                                    },
                                                    {
                                                      "type": "is",
                                                      "start": {
                                                        "row": 466,
                                                        "column": 42
                                                      },
                                                      "end": {
                                                        "row": 466,
                                                        "column": 44
                                                      },
                                                      "text": "is"
                                                    },
                                                    {
                                                      "type": "true",
                                                      "start": {
                                                        "row": 466,
                                                        "column": 45
                                                      },
                                                      "end": {
                                                        "row": 466,
                                                        "column": 49
                                                      },
                                                      "text": "True"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "and",
                                              "start": {
                                                "row": 467,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 467,
                                                "column": 23
                                              },
                                              "text": "and"
                                            },
                                            {
                                              "type": "comparison_operator",
                                              "start": {
                                                "row": 467,
                                                "column": 24
                                              },
                                              "end": {
                                                "row": 467,
                                                "column": 44
                                              },
                                              "text": "num_variables <= 200",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 467,
                                                    "column": 24
                                                  },
                                                  "end": {
                                                    "row": 467,
                                                    "column": 37
                                                  },
                                                  "text": "num_variables"
                                                },
                                                {
                                                  "type": "<=",
                                                  "start": {
                                                    "row": 467,
                                                    "column": 38
                                                  },
                                                  "end": {
                                                    "row": 467,
                                                    "column": 40
                                                  },
                                                  "text": "<="
                                                },
                                                {
                                                  "type": "integer",
                                                  "start": {
                                                    "row": 467,
                                                    "column": 41
                                                  },
                                                  "end": {
                                                    "row": 467,
                                                    "column": 44
                                                  },
                                                  "text": "200"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 467,
                                            "column": 44
                                          },
                                          "end": {
                                            "row": 467,
                                            "column": 45
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ":",
                                      "start": {
                                        "row": 467,
                                        "column": 45
                                      },
                                      "end": {
                                        "row": 467,
                                        "column": 46
                                      },
                                      "text": ":"
                                    },
                                    {
                                      "type": "block",
                                      "start": {
                                        "row": 469,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 469,
                                        "column": 41
                                      },
                                      "text": "_method = 'ball_tree'",
                                      "children": [
                                        {
                                          "type": "expression_statement",
                                          "start": {
                                            "row": 469,
                                            "column": 20
                                          },
                                          "end": {
                                            "row": 469,
                                            "column": 41
                                          },
                                          "text": "_method = 'ball_tree'",
                                          "children": [
                                            {
                                              "type": "assignment",
                                              "start": {
                                                "row": 469,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 469,
                                                "column": 41
                                              },
                                              "text": "_method = 'ball_tree'",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 469,
                                                    "column": 20
                                                  },
                                                  "end": {
                                                    "row": 469,
                                                    "column": 27
                                                  },
                                                  "text": "_method"
                                                },
                                                {
                                                  "type": "=",
                                                  "start": {
                                                    "row": 469,
                                                    "column": 28
                                                  },
                                                  "end": {
                                                    "row": 469,
                                                    "column": 29
                                                  },
                                                  "text": "="
                                                },
                                                {
                                                  "type": "string",
                                                  "start": {
                                                    "row": 469,
                                                    "column": 30
                                                  },
                                                  "end": {
                                                    "row": 469,
                                                    "column": 41
                                                  },
                                                  "text": "'ball_tree'",
                                                  "children": [
                                                    {
                                                      "type": "string_start",
                                                      "start": {
                                                        "row": 469,
                                                        "column": 30
                                                      },
                                                      "end": {
                                                        "row": 469,
                                                        "column": 31
                                                      },
                                                      "text": "'"
                                                    },
                                                    {
                                                      "type": "string_content",
                                                      "start": {
                                                        "row": 469,
                                                        "column": 31
                                                      },
                                                      "end": {
                                                        "row": 469,
                                                        "column": 40
                                                      },
                                                      "text": "ball_tree"
                                                    },
                                                    {
                                                      "type": "string_end",
                                                      "start": {
                                                        "row": 469,
                                                        "column": 40
                                                      },
                                                      "end": {
                                                        "row": 469,
                                                        "column": 41
                                                      },
                                                      "text": "'"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "else_clause",
                                      "start": {
                                        "row": 471,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 472,
                                        "column": 39
                                      },
                                      "text": "else:\n                _method = 'brute_force'",
                                      "children": [
                                        {
                                          "type": "else",
                                          "start": {
                                            "row": 471,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 471,
                                            "column": 16
                                          },
                                          "text": "else"
                                        },
                                        {
                                          "type": ":",
                                          "start": {
                                            "row": 471,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 471,
                                            "column": 17
                                          },
                                          "text": ":"
                                        },
                                        {
                                          "type": "block",
                                          "start": {
                                            "row": 472,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 472,
                                            "column": 39
                                          },
                                          "text": "_method = 'brute_force'",
                                          "children": [
                                            {
                                              "type": "expression_statement",
                                              "start": {
                                                "row": 472,
                                                "column": 16
                                              },
                                              "end": {
                                                "row": 472,
                                                "column": 39
                                              },
                                              "text": "_method = 'brute_force'",
                                              "children": [
                                                {
                                                  "type": "assignment",
                                                  "start": {
                                                    "row": 472,
                                                    "column": 16
                                                  },
                                                  "end": {
                                                    "row": 472,
                                                    "column": 39
                                                  },
                                                  "text": "_method = 'brute_force'",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 472,
                                                        "column": 16
                                                      },
                                                      "end": {
                                                        "row": 472,
                                                        "column": 23
                                                      },
                                                      "text": "_method"
                                                    },
                                                    {
                                                      "type": "=",
                                                      "start": {
                                                        "row": 472,
                                                        "column": 24
                                                      },
                                                      "end": {
                                                        "row": 472,
                                                        "column": 25
                                                      },
                                                      "text": "="
                                                    },
                                                    {
                                                      "type": "string",
                                                      "start": {
                                                        "row": 472,
                                                        "column": 26
                                                      },
                                                      "end": {
                                                        "row": 472,
                                                        "column": 39
                                                      },
                                                      "text": "'brute_force'",
                                                      "children": [
                                                        {
                                                          "type": "string_start",
                                                          "start": {
                                                            "row": 472,
                                                            "column": 26
                                                          },
                                                          "end": {
                                                            "row": 472,
                                                            "column": 27
                                                          },
                                                          "text": "'"
                                                        },
                                                        {
                                                          "type": "string_content",
                                                          "start": {
                                                            "row": 472,
                                                            "column": 27
                                                          },
                                                          "end": {
                                                            "row": 472,
                                                            "column": 38
                                                          },
                                                          "text": "brute_force"
                                                        },
                                                        {
                                                          "type": "string_end",
                                                          "start": {
                                                            "row": 472,
                                                            "column": 38
                                                          },
                                                          "end": {
                                                            "row": 472,
                                                            "column": 39
                                                          },
                                                          "text": "'"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "else_clause",
                              "start": {
                                "row": 474,
                                "column": 8
                              },
                              "end": {
                                "row": 475,
                                "column": 28
                              },
                              "text": "else:\n            _method = method",
                              "children": [
                                {
                                  "type": "else",
                                  "start": {
                                    "row": 474,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 474,
                                    "column": 12
                                  },
                                  "text": "else"
                                },
                                {
                                  "type": ":",
                                  "start": {
                                    "row": 474,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 474,
                                    "column": 13
                                  },
                                  "text": ":"
                                },
                                {
                                  "type": "block",
                                  "start": {
                                    "row": 475,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 475,
                                    "column": 28
                                  },
                                  "text": "_method = method",
                                  "children": [
                                    {
                                      "type": "expression_statement",
                                      "start": {
                                        "row": 475,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 475,
                                        "column": 28
                                      },
                                      "text": "_method = method",
                                      "children": [
                                        {
                                          "type": "assignment",
                                          "start": {
                                            "row": 475,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 475,
                                            "column": 28
                                          },
                                          "text": "_method = method",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 475,
                                                "column": 12
                                              },
                                              "end": {
                                                "row": 475,
                                                "column": 19
                                              },
                                              "text": "_method"
                                            },
                                            {
                                              "type": "=",
                                              "start": {
                                                "row": 475,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 475,
                                                "column": 21
                                              },
                                              "text": "="
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 475,
                                                "column": 22
                                              },
                                              "end": {
                                                "row": 475,
                                                "column": 28
                                              },
                                              "text": "method"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 478,
                "column": 4
              },
              "end": {
                "row": 478,
                "column": 47
              },
              "text": "## Pick the right model name for the method"
            },
            {
              "type": "if_statement",
              "start": {
                "row": 479,
                "column": 4
              },
              "end": {
                "row": 490,
                "column": 37
              },
              "text": "if _method == 'ball_tree':\n        model_name = 'nearest_neighbors_ball_tree'\n\n    elif _method == 'brute_force':\n        model_name = 'nearest_neighbors_brute_force'\n\n    elif _method == 'lsh':\n        model_name = 'nearest_neighbors_lsh'\n\n    else:\n        raise ValueError(\"Method must be 'auto', 'ball_tree', 'brute_force', \" +\n                         \"or 'lsh'.\")",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 479,
                    "column": 4
                  },
                  "end": {
                    "row": 479,
                    "column": 6
                  },
                  "text": "if"
                },
                {
                  "type": "comparison_operator",
                  "start": {
                    "row": 479,
                    "column": 7
                  },
                  "end": {
                    "row": 479,
                    "column": 29
                  },
                  "text": "_method == 'ball_tree'",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 479,
                        "column": 7
                      },
                      "end": {
                        "row": 479,
                        "column": 14
                      },
                      "text": "_method"
                    },
                    {
                      "type": "==",
                      "start": {
                        "row": 479,
                        "column": 15
                      },
                      "end": {
                        "row": 479,
                        "column": 17
                      },
                      "text": "=="
                    },
                    {
                      "type": "string",
                      "start": {
                        "row": 479,
                        "column": 18
                      },
                      "end": {
                        "row": 479,
                        "column": 29
                      },
                      "text": "'ball_tree'",
                      "children": [
                        {
                          "type": "string_start",
                          "start": {
                            "row": 479,
                            "column": 18
                          },
                          "end": {
                            "row": 479,
                            "column": 19
                          },
                          "text": "'"
                        },
                        {
                          "type": "string_content",
                          "start": {
                            "row": 479,
                            "column": 19
                          },
                          "end": {
                            "row": 479,
                            "column": 28
                          },
                          "text": "ball_tree"
                        },
                        {
                          "type": "string_end",
                          "start": {
                            "row": 479,
                            "column": 28
                          },
                          "end": {
                            "row": 479,
                            "column": 29
                          },
                          "text": "'"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 479,
                    "column": 29
                  },
                  "end": {
                    "row": 479,
                    "column": 30
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 480,
                    "column": 8
                  },
                  "end": {
                    "row": 480,
                    "column": 50
                  },
                  "text": "model_name = 'nearest_neighbors_ball_tree'",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 480,
                        "column": 8
                      },
                      "end": {
                        "row": 480,
                        "column": 50
                      },
                      "text": "model_name = 'nearest_neighbors_ball_tree'",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 480,
                            "column": 8
                          },
                          "end": {
                            "row": 480,
                            "column": 50
                          },
                          "text": "model_name = 'nearest_neighbors_ball_tree'",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 480,
                                "column": 8
                              },
                              "end": {
                                "row": 480,
                                "column": 18
                              },
                              "text": "model_name"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 480,
                                "column": 19
                              },
                              "end": {
                                "row": 480,
                                "column": 20
                              },
                              "text": "="
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 480,
                                "column": 21
                              },
                              "end": {
                                "row": 480,
                                "column": 50
                              },
                              "text": "'nearest_neighbors_ball_tree'",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 480,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 480,
                                    "column": 22
                                  },
                                  "text": "'"
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 480,
                                    "column": 22
                                  },
                                  "end": {
                                    "row": 480,
                                    "column": 49
                                  },
                                  "text": "nearest_neighbors_ball_tree"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 480,
                                    "column": 49
                                  },
                                  "end": {
                                    "row": 480,
                                    "column": 50
                                  },
                                  "text": "'"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "elif_clause",
                  "start": {
                    "row": 482,
                    "column": 4
                  },
                  "end": {
                    "row": 483,
                    "column": 52
                  },
                  "text": "elif _method == 'brute_force':\n        model_name = 'nearest_neighbors_brute_force'",
                  "children": [
                    {
                      "type": "elif",
                      "start": {
                        "row": 482,
                        "column": 4
                      },
                      "end": {
                        "row": 482,
                        "column": 8
                      },
                      "text": "elif"
                    },
                    {
                      "type": "comparison_operator",
                      "start": {
                        "row": 482,
                        "column": 9
                      },
                      "end": {
                        "row": 482,
                        "column": 33
                      },
                      "text": "_method == 'brute_force'",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 482,
                            "column": 9
                          },
                          "end": {
                            "row": 482,
                            "column": 16
                          },
                          "text": "_method"
                        },
                        {
                          "type": "==",
                          "start": {
                            "row": 482,
                            "column": 17
                          },
                          "end": {
                            "row": 482,
                            "column": 19
                          },
                          "text": "=="
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 482,
                            "column": 20
                          },
                          "end": {
                            "row": 482,
                            "column": 33
                          },
                          "text": "'brute_force'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 482,
                                "column": 20
                              },
                              "end": {
                                "row": 482,
                                "column": 21
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 482,
                                "column": 21
                              },
                              "end": {
                                "row": 482,
                                "column": 32
                              },
                              "text": "brute_force"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 482,
                                "column": 32
                              },
                              "end": {
                                "row": 482,
                                "column": 33
                              },
                              "text": "'"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 482,
                        "column": 33
                      },
                      "end": {
                        "row": 482,
                        "column": 34
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 483,
                        "column": 8
                      },
                      "end": {
                        "row": 483,
                        "column": 52
                      },
                      "text": "model_name = 'nearest_neighbors_brute_force'",
                      "children": [
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 483,
                            "column": 8
                          },
                          "end": {
                            "row": 483,
                            "column": 52
                          },
                          "text": "model_name = 'nearest_neighbors_brute_force'",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 483,
                                "column": 8
                              },
                              "end": {
                                "row": 483,
                                "column": 52
                              },
                              "text": "model_name = 'nearest_neighbors_brute_force'",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 483,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 483,
                                    "column": 18
                                  },
                                  "text": "model_name"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 483,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 483,
                                    "column": 20
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 483,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 483,
                                    "column": 52
                                  },
                                  "text": "'nearest_neighbors_brute_force'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 483,
                                        "column": 21
                                      },
                                      "end": {
                                        "row": 483,
                                        "column": 22
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 483,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 483,
                                        "column": 51
                                      },
                                      "text": "nearest_neighbors_brute_force"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 483,
                                        "column": 51
                                      },
                                      "end": {
                                        "row": 483,
                                        "column": 52
                                      },
                                      "text": "'"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "elif_clause",
                  "start": {
                    "row": 485,
                    "column": 4
                  },
                  "end": {
                    "row": 486,
                    "column": 44
                  },
                  "text": "elif _method == 'lsh':\n        model_name = 'nearest_neighbors_lsh'",
                  "children": [
                    {
                      "type": "elif",
                      "start": {
                        "row": 485,
                        "column": 4
                      },
                      "end": {
                        "row": 485,
                        "column": 8
                      },
                      "text": "elif"
                    },
                    {
                      "type": "comparison_operator",
                      "start": {
                        "row": 485,
                        "column": 9
                      },
                      "end": {
                        "row": 485,
                        "column": 25
                      },
                      "text": "_method == 'lsh'",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 485,
                            "column": 9
                          },
                          "end": {
                            "row": 485,
                            "column": 16
                          },
                          "text": "_method"
                        },
                        {
                          "type": "==",
                          "start": {
                            "row": 485,
                            "column": 17
                          },
                          "end": {
                            "row": 485,
                            "column": 19
                          },
                          "text": "=="
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 485,
                            "column": 20
                          },
                          "end": {
                            "row": 485,
                            "column": 25
                          },
                          "text": "'lsh'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 485,
                                "column": 20
                              },
                              "end": {
                                "row": 485,
                                "column": 21
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 485,
                                "column": 21
                              },
                              "end": {
                                "row": 485,
                                "column": 24
                              },
                              "text": "lsh"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 485,
                                "column": 24
                              },
                              "end": {
                                "row": 485,
                                "column": 25
                              },
                              "text": "'"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 485,
                        "column": 25
                      },
                      "end": {
                        "row": 485,
                        "column": 26
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 486,
                        "column": 8
                      },
                      "end": {
                        "row": 486,
                        "column": 44
                      },
                      "text": "model_name = 'nearest_neighbors_lsh'",
                      "children": [
                        {
                          "type": "expression_statement",
                          "start": {
                            "row": 486,
                            "column": 8
                          },
                          "end": {
                            "row": 486,
                            "column": 44
                          },
                          "text": "model_name = 'nearest_neighbors_lsh'",
                          "children": [
                            {
                              "type": "assignment",
                              "start": {
                                "row": 486,
                                "column": 8
                              },
                              "end": {
                                "row": 486,
                                "column": 44
                              },
                              "text": "model_name = 'nearest_neighbors_lsh'",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 486,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 486,
                                    "column": 18
                                  },
                                  "text": "model_name"
                                },
                                {
                                  "type": "=",
                                  "start": {
                                    "row": 486,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 486,
                                    "column": 20
                                  },
                                  "text": "="
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 486,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 486,
                                    "column": 44
                                  },
                                  "text": "'nearest_neighbors_lsh'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 486,
                                        "column": 21
                                      },
                                      "end": {
                                        "row": 486,
                                        "column": 22
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 486,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 486,
                                        "column": 43
                                      },
                                      "text": "nearest_neighbors_lsh"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 486,
                                        "column": 43
                                      },
                                      "end": {
                                        "row": 486,
                                        "column": 44
                                      },
                                      "text": "'"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start": {
                    "row": 488,
                    "column": 4
                  },
                  "end": {
                    "row": 490,
                    "column": 37
                  },
                  "text": "else:\n        raise ValueError(\"Method must be 'auto', 'ball_tree', 'brute_force', \" +\n                         \"or 'lsh'.\")",
                  "children": [
                    {
                      "type": "else",
                      "start": {
                        "row": 488,
                        "column": 4
                      },
                      "end": {
                        "row": 488,
                        "column": 8
                      },
                      "text": "else"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 488,
                        "column": 8
                      },
                      "end": {
                        "row": 488,
                        "column": 9
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 489,
                        "column": 8
                      },
                      "end": {
                        "row": 490,
                        "column": 37
                      },
                      "text": "raise ValueError(\"Method must be 'auto', 'ball_tree', 'brute_force', \" +\n                         \"or 'lsh'.\")",
                      "children": [
                        {
                          "type": "raise_statement",
                          "start": {
                            "row": 489,
                            "column": 8
                          },
                          "end": {
                            "row": 490,
                            "column": 37
                          },
                          "text": "raise ValueError(\"Method must be 'auto', 'ball_tree', 'brute_force', \" +\n                         \"or 'lsh'.\")",
                          "children": [
                            {
                              "type": "raise",
                              "start": {
                                "row": 489,
                                "column": 8
                              },
                              "end": {
                                "row": 489,
                                "column": 13
                              },
                              "text": "raise"
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 489,
                                "column": 14
                              },
                              "end": {
                                "row": 490,
                                "column": 37
                              },
                              "text": "ValueError(\"Method must be 'auto', 'ball_tree', 'brute_force', \" +\n                         \"or 'lsh'.\")",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 489,
                                    "column": 14
                                  },
                                  "end": {
                                    "row": 489,
                                    "column": 24
                                  },
                                  "text": "ValueError"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 489,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 490,
                                    "column": 37
                                  },
                                  "text": "(\"Method must be 'auto', 'ball_tree', 'brute_force', \" +\n                         \"or 'lsh'.\")",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 489,
                                        "column": 24
                                      },
                                      "end": {
                                        "row": 489,
                                        "column": 25
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "binary_operator",
                                      "start": {
                                        "row": 489,
                                        "column": 25
                                      },
                                      "end": {
                                        "row": 490,
                                        "column": 36
                                      },
                                      "text": "\"Method must be 'auto', 'ball_tree', 'brute_force', \" +\n                         \"or 'lsh'.\"",
                                      "children": [
                                        {
                                          "type": "string",
                                          "start": {
                                            "row": 489,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 489,
                                            "column": 78
                                          },
                                          "text": "\"Method must be 'auto', 'ball_tree', 'brute_force', \"",
                                          "children": [
                                            {
                                              "type": "string_start",
                                              "start": {
                                                "row": 489,
                                                "column": 25
                                              },
                                              "end": {
                                                "row": 489,
                                                "column": 26
                                              },
                                              "text": "\""
                                            },
                                            {
                                              "type": "string_content",
                                              "start": {
                                                "row": 489,
                                                "column": 26
                                              },
                                              "end": {
                                                "row": 489,
                                                "column": 77
                                              },
                                              "text": "Method must be 'auto', 'ball_tree', 'brute_force', "
                                            },
                                            {
                                              "type": "string_end",
                                              "start": {
                                                "row": 489,
                                                "column": 77
                                              },
                                              "end": {
                                                "row": 489,
                                                "column": 78
                                              },
                                              "text": "\""
                                            }
                                          ]
                                        },
                                        {
                                          "type": "+",
                                          "start": {
                                            "row": 489,
                                            "column": 79
                                          },
                                          "end": {
                                            "row": 489,
                                            "column": 80
                                          },
                                          "text": "+"
                                        },
                                        {
                                          "type": "string",
                                          "start": {
                                            "row": 490,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 490,
                                            "column": 36
                                          },
                                          "text": "\"or 'lsh'.\"",
                                          "children": [
                                            {
                                              "type": "string_start",
                                              "start": {
                                                "row": 490,
                                                "column": 25
                                              },
                                              "end": {
                                                "row": 490,
                                                "column": 26
                                              },
                                              "text": "\""
                                            },
                                            {
                                              "type": "string_content",
                                              "start": {
                                                "row": 490,
                                                "column": 26
                                              },
                                              "end": {
                                                "row": 490,
                                                "column": 35
                                              },
                                              "text": "or 'lsh'."
                                            },
                                            {
                                              "type": "string_end",
                                              "start": {
                                                "row": 490,
                                                "column": 35
                                              },
                                              "end": {
                                                "row": 490,
                                                "column": 36
                                              },
                                              "text": "\""
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 490,
                                        "column": 36
                                      },
                                      "end": {
                                        "row": 490,
                                        "column": 37
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 493,
                "column": 4
              },
              "end": {
                "row": 493,
                "column": 32
              },
              "text": "## Package the model options"
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 494,
                "column": 4
              },
              "end": {
                "row": 494,
                "column": 13
              },
              "text": "opts = {}",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 494,
                    "column": 4
                  },
                  "end": {
                    "row": 494,
                    "column": 13
                  },
                  "text": "opts = {}",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 494,
                        "column": 4
                      },
                      "end": {
                        "row": 494,
                        "column": 8
                      },
                      "text": "opts"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 494,
                        "column": 9
                      },
                      "end": {
                        "row": 494,
                        "column": 10
                      },
                      "text": "="
                    },
                    {
                      "type": "dictionary",
                      "start": {
                        "row": 494,
                        "column": 11
                      },
                      "end": {
                        "row": 494,
                        "column": 13
                      },
                      "text": "{}",
                      "children": [
                        {
                          "type": "{",
                          "start": {
                            "row": 494,
                            "column": 11
                          },
                          "end": {
                            "row": 494,
                            "column": 12
                          },
                          "text": "{"
                        },
                        {
                          "type": "}",
                          "start": {
                            "row": 494,
                            "column": 12
                          },
                          "end": {
                            "row": 494,
                            "column": 13
                          },
                          "text": "}"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 495,
                "column": 4
              },
              "end": {
                "row": 495,
                "column": 32
              },
              "text": "opts.update(_method_options)",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 495,
                    "column": 4
                  },
                  "end": {
                    "row": 495,
                    "column": 32
                  },
                  "text": "opts.update(_method_options)",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 495,
                        "column": 4
                      },
                      "end": {
                        "row": 495,
                        "column": 15
                      },
                      "text": "opts.update",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 495,
                            "column": 4
                          },
                          "end": {
                            "row": 495,
                            "column": 8
                          },
                          "text": "opts"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 495,
                            "column": 8
                          },
                          "end": {
                            "row": 495,
                            "column": 9
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 495,
                            "column": 9
                          },
                          "end": {
                            "row": 495,
                            "column": 15
                          },
                          "text": "update"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 495,
                        "column": 15
                      },
                      "end": {
                        "row": 495,
                        "column": 32
                      },
                      "text": "(_method_options)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 495,
                            "column": 15
                          },
                          "end": {
                            "row": 495,
                            "column": 16
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 495,
                            "column": 16
                          },
                          "end": {
                            "row": 495,
                            "column": 31
                          },
                          "text": "_method_options"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 495,
                            "column": 31
                          },
                          "end": {
                            "row": 495,
                            "column": 32
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 496,
                "column": 4
              },
              "end": {
                "row": 501,
                "column": 38
              },
              "text": "opts.update(\n        {'model_name': model_name,\n        'ref_labels': ref_labels,\n        'label': label,\n        'sf_features': sf_clean,\n        'composite_params': distance})",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 496,
                    "column": 4
                  },
                  "end": {
                    "row": 501,
                    "column": 38
                  },
                  "text": "opts.update(\n        {'model_name': model_name,\n        'ref_labels': ref_labels,\n        'label': label,\n        'sf_features': sf_clean,\n        'composite_params': distance})",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 496,
                        "column": 4
                      },
                      "end": {
                        "row": 496,
                        "column": 15
                      },
                      "text": "opts.update",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 496,
                            "column": 4
                          },
                          "end": {
                            "row": 496,
                            "column": 8
                          },
                          "text": "opts"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 496,
                            "column": 8
                          },
                          "end": {
                            "row": 496,
                            "column": 9
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 496,
                            "column": 9
                          },
                          "end": {
                            "row": 496,
                            "column": 15
                          },
                          "text": "update"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 496,
                        "column": 15
                      },
                      "end": {
                        "row": 501,
                        "column": 38
                      },
                      "text": "(\n        {'model_name': model_name,\n        'ref_labels': ref_labels,\n        'label': label,\n        'sf_features': sf_clean,\n        'composite_params': distance})",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 496,
                            "column": 15
                          },
                          "end": {
                            "row": 496,
                            "column": 16
                          },
                          "text": "("
                        },
                        {
                          "type": "dictionary",
                          "start": {
                            "row": 497,
                            "column": 8
                          },
                          "end": {
                            "row": 501,
                            "column": 37
                          },
                          "text": "{'model_name': model_name,\n        'ref_labels': ref_labels,\n        'label': label,\n        'sf_features': sf_clean,\n        'composite_params': distance}",
                          "children": [
                            {
                              "type": "{",
                              "start": {
                                "row": 497,
                                "column": 8
                              },
                              "end": {
                                "row": 497,
                                "column": 9
                              },
                              "text": "{"
                            },
                            {
                              "type": "pair",
                              "start": {
                                "row": 497,
                                "column": 9
                              },
                              "end": {
                                "row": 497,
                                "column": 33
                              },
                              "text": "'model_name': model_name",
                              "children": [
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 497,
                                    "column": 9
                                  },
                                  "end": {
                                    "row": 497,
                                    "column": 21
                                  },
                                  "text": "'model_name'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 497,
                                        "column": 9
                                      },
                                      "end": {
                                        "row": 497,
                                        "column": 10
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 497,
                                        "column": 10
                                      },
                                      "end": {
                                        "row": 497,
                                        "column": 20
                                      },
                                      "text": "model_name"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 497,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 497,
                                        "column": 21
                                      },
                                      "text": "'"
                                    }
                                  ]
                                },
                                {
                                  "type": ":",
                                  "start": {
                                    "row": 497,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 497,
                                    "column": 22
                                  },
                                  "text": ":"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 497,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 497,
                                    "column": 33
                                  },
                                  "text": "model_name"
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 497,
                                "column": 33
                              },
                              "end": {
                                "row": 497,
                                "column": 34
                              },
                              "text": ","
                            },
                            {
                              "type": "pair",
                              "start": {
                                "row": 498,
                                "column": 8
                              },
                              "end": {
                                "row": 498,
                                "column": 32
                              },
                              "text": "'ref_labels': ref_labels",
                              "children": [
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 498,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 498,
                                    "column": 20
                                  },
                                  "text": "'ref_labels'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 498,
                                        "column": 8
                                      },
                                      "end": {
                                        "row": 498,
                                        "column": 9
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 498,
                                        "column": 9
                                      },
                                      "end": {
                                        "row": 498,
                                        "column": 19
                                      },
                                      "text": "ref_labels"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 498,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 498,
                                        "column": 20
                                      },
                                      "text": "'"
                                    }
                                  ]
                                },
                                {
                                  "type": ":",
                                  "start": {
                                    "row": 498,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 498,
                                    "column": 21
                                  },
                                  "text": ":"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 498,
                                    "column": 22
                                  },
                                  "end": {
                                    "row": 498,
                                    "column": 32
                                  },
                                  "text": "ref_labels"
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 498,
                                "column": 32
                              },
                              "end": {
                                "row": 498,
                                "column": 33
                              },
                              "text": ","
                            },
                            {
                              "type": "pair",
                              "start": {
                                "row": 499,
                                "column": 8
                              },
                              "end": {
                                "row": 499,
                                "column": 22
                              },
                              "text": "'label': label",
                              "children": [
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 499,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 499,
                                    "column": 15
                                  },
                                  "text": "'label'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 499,
                                        "column": 8
                                      },
                                      "end": {
                                        "row": 499,
                                        "column": 9
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 499,
                                        "column": 9
                                      },
                                      "end": {
                                        "row": 499,
                                        "column": 14
                                      },
                                      "text": "label"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 499,
                                        "column": 14
                                      },
                                      "end": {
                                        "row": 499,
                                        "column": 15
                                      },
                                      "text": "'"
                                    }
                                  ]
                                },
                                {
                                  "type": ":",
                                  "start": {
                                    "row": 499,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 499,
                                    "column": 16
                                  },
                                  "text": ":"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 499,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 499,
                                    "column": 22
                                  },
                                  "text": "label"
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 499,
                                "column": 22
                              },
                              "end": {
                                "row": 499,
                                "column": 23
                              },
                              "text": ","
                            },
                            {
                              "type": "pair",
                              "start": {
                                "row": 500,
                                "column": 8
                              },
                              "end": {
                                "row": 500,
                                "column": 31
                              },
                              "text": "'sf_features': sf_clean",
                              "children": [
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 500,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 500,
                                    "column": 21
                                  },
                                  "text": "'sf_features'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 500,
                                        "column": 8
                                      },
                                      "end": {
                                        "row": 500,
                                        "column": 9
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 500,
                                        "column": 9
                                      },
                                      "end": {
                                        "row": 500,
                                        "column": 20
                                      },
                                      "text": "sf_features"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 500,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 500,
                                        "column": 21
                                      },
                                      "text": "'"
                                    }
                                  ]
                                },
                                {
                                  "type": ":",
                                  "start": {
                                    "row": 500,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 500,
                                    "column": 22
                                  },
                                  "text": ":"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 500,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 500,
                                    "column": 31
                                  },
                                  "text": "sf_clean"
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 500,
                                "column": 31
                              },
                              "end": {
                                "row": 500,
                                "column": 32
                              },
                              "text": ","
                            },
                            {
                              "type": "pair",
                              "start": {
                                "row": 501,
                                "column": 8
                              },
                              "end": {
                                "row": 501,
                                "column": 36
                              },
                              "text": "'composite_params': distance",
                              "children": [
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 501,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 501,
                                    "column": 26
                                  },
                                  "text": "'composite_params'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 501,
                                        "column": 8
                                      },
                                      "end": {
                                        "row": 501,
                                        "column": 9
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 501,
                                        "column": 9
                                      },
                                      "end": {
                                        "row": 501,
                                        "column": 25
                                      },
                                      "text": "composite_params"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 501,
                                        "column": 25
                                      },
                                      "end": {
                                        "row": 501,
                                        "column": 26
                                      },
                                      "text": "'"
                                    }
                                  ]
                                },
                                {
                                  "type": ":",
                                  "start": {
                                    "row": 501,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 501,
                                    "column": 27
                                  },
                                  "text": ":"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 501,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 501,
                                    "column": 36
                                  },
                                  "text": "distance"
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start": {
                                "row": 501,
                                "column": 36
                              },
                              "end": {
                                "row": 501,
                                "column": 37
                              },
                              "text": "}"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 501,
                            "column": 37
                          },
                          "end": {
                            "row": 501,
                            "column": 38
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 503,
                "column": 4
              },
              "end": {
                "row": 503,
                "column": 44
              },
              "text": "## Construct the nearest neighbors model"
            },
            {
              "type": "with_statement",
              "start": {
                "row": 504,
                "column": 4
              },
              "end": {
                "row": 505,
                "column": 70
              },
              "text": "with QuietProgress(verbose):\n        result = _turicreate.extensions._nearest_neighbors.train(opts)",
              "children": [
                {
                  "type": "with",
                  "start": {
                    "row": 504,
                    "column": 4
                  },
                  "end": {
                    "row": 504,
                    "column": 8
                  },
                  "text": "with"
                },
                {
                  "type": "with_clause",
                  "start": {
                    "row": 504,
                    "column": 9
                  },
                  "end": {
                    "row": 504,
                    "column": 31
                  },
                  "text": "QuietProgress(verbose)",
                  "children": [
                    {
                      "type": "with_item",
                      "start": {
                        "row": 504,
                        "column": 9
                      },
                      "end": {
                        "row": 504,
                        "column": 31
                      },
                      "text": "QuietProgress(verbose)",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 504,
                            "column": 9
                          },
                          "end": {
                            "row": 504,
                            "column": 31
                          },
                          "text": "QuietProgress(verbose)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 504,
                                "column": 9
                              },
                              "end": {
                                "row": 504,
                                "column": 22
                              },
                              "text": "QuietProgress"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 504,
                                "column": 22
                              },
                              "end": {
                                "row": 504,
                                "column": 31
                              },
                              "text": "(verbose)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 504,
                                    "column": 22
                                  },
                                  "end": {
                                    "row": 504,
                                    "column": 23
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 504,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 504,
                                    "column": 30
                                  },
                                  "text": "verbose"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 504,
                                    "column": 30
                                  },
                                  "end": {
                                    "row": 504,
                                    "column": 31
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 504,
                    "column": 31
                  },
                  "end": {
                    "row": 504,
                    "column": 32
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 505,
                    "column": 8
                  },
                  "end": {
                    "row": 505,
                    "column": 70
                  },
                  "text": "result = _turicreate.extensions._nearest_neighbors.train(opts)",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 505,
                        "column": 8
                      },
                      "end": {
                        "row": 505,
                        "column": 70
                      },
                      "text": "result = _turicreate.extensions._nearest_neighbors.train(opts)",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 505,
                            "column": 8
                          },
                          "end": {
                            "row": 505,
                            "column": 70
                          },
                          "text": "result = _turicreate.extensions._nearest_neighbors.train(opts)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 505,
                                "column": 8
                              },
                              "end": {
                                "row": 505,
                                "column": 14
                              },
                              "text": "result"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 505,
                                "column": 15
                              },
                              "end": {
                                "row": 505,
                                "column": 16
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 505,
                                "column": 17
                              },
                              "end": {
                                "row": 505,
                                "column": 70
                              },
                              "text": "_turicreate.extensions._nearest_neighbors.train(opts)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 505,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 505,
                                    "column": 64
                                  },
                                  "text": "_turicreate.extensions._nearest_neighbors.train",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 505,
                                        "column": 17
                                      },
                                      "end": {
                                        "row": 505,
                                        "column": 58
                                      },
                                      "text": "_turicreate.extensions._nearest_neighbors",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "start": {
                                            "row": 505,
                                            "column": 17
                                          },
                                          "end": {
                                            "row": 505,
                                            "column": 39
                                          },
                                          "text": "_turicreate.extensions",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 505,
                                                "column": 17
                                              },
                                              "end": {
                                                "row": 505,
                                                "column": 28
                                              },
                                              "text": "_turicreate"
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 505,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 505,
                                                "column": 29
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 505,
                                                "column": 29
                                              },
                                              "end": {
                                                "row": 505,
                                                "column": 39
                                              },
                                              "text": "extensions"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 505,
                                            "column": 39
                                          },
                                          "end": {
                                            "row": 505,
                                            "column": 40
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 505,
                                            "column": 40
                                          },
                                          "end": {
                                            "row": 505,
                                            "column": 58
                                          },
                                          "text": "_nearest_neighbors"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 505,
                                        "column": 58
                                      },
                                      "end": {
                                        "row": 505,
                                        "column": 59
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 505,
                                        "column": 59
                                      },
                                      "end": {
                                        "row": 505,
                                        "column": 64
                                      },
                                      "text": "train"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 505,
                                    "column": 64
                                  },
                                  "end": {
                                    "row": 505,
                                    "column": 70
                                  },
                                  "text": "(opts)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 505,
                                        "column": 64
                                      },
                                      "end": {
                                        "row": 505,
                                        "column": 65
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 505,
                                        "column": 65
                                      },
                                      "end": {
                                        "row": 505,
                                        "column": 69
                                      },
                                      "text": "opts"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 505,
                                        "column": 69
                                      },
                                      "end": {
                                        "row": 505,
                                        "column": 70
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 507,
                "column": 4
              },
              "end": {
                "row": 507,
                "column": 33
              },
              "text": "model_proxy = result['model']",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 507,
                    "column": 4
                  },
                  "end": {
                    "row": 507,
                    "column": 33
                  },
                  "text": "model_proxy = result['model']",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 507,
                        "column": 4
                      },
                      "end": {
                        "row": 507,
                        "column": 15
                      },
                      "text": "model_proxy"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 507,
                        "column": 16
                      },
                      "end": {
                        "row": 507,
                        "column": 17
                      },
                      "text": "="
                    },
                    {
                      "type": "subscript",
                      "start": {
                        "row": 507,
                        "column": 18
                      },
                      "end": {
                        "row": 507,
                        "column": 33
                      },
                      "text": "result['model']",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 507,
                            "column": 18
                          },
                          "end": {
                            "row": 507,
                            "column": 24
                          },
                          "text": "result"
                        },
                        {
                          "type": "[",
                          "start": {
                            "row": 507,
                            "column": 24
                          },
                          "end": {
                            "row": 507,
                            "column": 25
                          },
                          "text": "["
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 507,
                            "column": 25
                          },
                          "end": {
                            "row": 507,
                            "column": 32
                          },
                          "text": "'model'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 507,
                                "column": 25
                              },
                              "end": {
                                "row": 507,
                                "column": 26
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 507,
                                "column": 26
                              },
                              "end": {
                                "row": 507,
                                "column": 31
                              },
                              "text": "model"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 507,
                                "column": 31
                              },
                              "end": {
                                "row": 507,
                                "column": 32
                              },
                              "text": "'"
                            }
                          ]
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 507,
                            "column": 32
                          },
                          "end": {
                            "row": 507,
                            "column": 33
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 508,
                "column": 4
              },
              "end": {
                "row": 508,
                "column": 46
              },
              "text": "model = NearestNeighborsModel(model_proxy)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 508,
                    "column": 4
                  },
                  "end": {
                    "row": 508,
                    "column": 46
                  },
                  "text": "model = NearestNeighborsModel(model_proxy)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 508,
                        "column": 4
                      },
                      "end": {
                        "row": 508,
                        "column": 9
                      },
                      "text": "model"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 508,
                        "column": 10
                      },
                      "end": {
                        "row": 508,
                        "column": 11
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 508,
                        "column": 12
                      },
                      "end": {
                        "row": 508,
                        "column": 46
                      },
                      "text": "NearestNeighborsModel(model_proxy)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 508,
                            "column": 12
                          },
                          "end": {
                            "row": 508,
                            "column": 33
                          },
                          "text": "NearestNeighborsModel"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 508,
                            "column": 33
                          },
                          "end": {
                            "row": 508,
                            "column": 46
                          },
                          "text": "(model_proxy)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 508,
                                "column": 33
                              },
                              "end": {
                                "row": 508,
                                "column": 34
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 508,
                                "column": 34
                              },
                              "end": {
                                "row": 508,
                                "column": 45
                              },
                              "text": "model_proxy"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 508,
                                "column": 45
                              },
                              "end": {
                                "row": 508,
                                "column": 46
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 510,
                "column": 4
              },
              "end": {
                "row": 510,
                "column": 16
              },
              "text": "return model",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 510,
                    "column": 4
                  },
                  "end": {
                    "row": 510,
                    "column": 10
                  },
                  "text": "return"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 510,
                    "column": 11
                  },
                  "end": {
                    "row": 510,
                    "column": 16
                  },
                  "text": "model"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}