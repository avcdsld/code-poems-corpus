{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 26,
    "column": 19
  },
  "text": "def foreachBatch(self, func):\n        \"\"\"\n        Sets the output of the streaming query to be processed using the provided\n        function. This is supported only the in the micro-batch execution modes (that is, when the\n        trigger is not continuous). In every micro-batch, the provided function will be called in\n        every micro-batch with (i) the output rows as a DataFrame and (ii) the batch identifier.\n        The batchId can be used deduplicate and transactionally write the output\n        (that is, the provided Dataset) to external systems. The output DataFrame is guaranteed\n        to exactly same for the same batchId (assuming all operations are deterministic in the\n        query).\n\n        .. note:: Evolving.\n\n        >>> def func(batch_df, batch_id):\n        ...     batch_df.collect()\n        ...\n        >>> writer = sdf.writeStream.foreach(func)\n        \"\"\"\n\n        from pyspark.java_gateway import ensure_callback_server_started\n        gw = self._spark._sc._gateway\n        java_import(gw.jvm, \"org.apache.spark.sql.execution.streaming.sources.*\")\n\n        wrapped_func = ForeachBatchFunction(self._spark, func)\n        gw.jvm.PythonForeachBatchHelper.callForeachBatch(self._jwrite, wrapped_func)\n        ensure_callback_server_started(gw)\n        return self",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 26,
        "column": 19
      },
      "text": "def foreachBatch(self, func):\n        \"\"\"\n        Sets the output of the streaming query to be processed using the provided\n        function. This is supported only the in the micro-batch execution modes (that is, when the\n        trigger is not continuous). In every micro-batch, the provided function will be called in\n        every micro-batch with (i) the output rows as a DataFrame and (ii) the batch identifier.\n        The batchId can be used deduplicate and transactionally write the output\n        (that is, the provided Dataset) to external systems. The output DataFrame is guaranteed\n        to exactly same for the same batchId (assuming all operations are deterministic in the\n        query).\n\n        .. note:: Evolving.\n\n        >>> def func(batch_df, batch_id):\n        ...     batch_df.collect()\n        ...\n        >>> writer = sdf.writeStream.foreach(func)\n        \"\"\"\n\n        from pyspark.java_gateway import ensure_callback_server_started\n        gw = self._spark._sc._gateway\n        java_import(gw.jvm, \"org.apache.spark.sql.execution.streaming.sources.*\")\n\n        wrapped_func = ForeachBatchFunction(self._spark, func)\n        gw.jvm.PythonForeachBatchHelper.callForeachBatch(self._jwrite, wrapped_func)\n        ensure_callback_server_started(gw)\n        return self",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 16
          },
          "text": "foreachBatch"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 16
          },
          "end": {
            "row": 0,
            "column": 28
          },
          "text": "(self, func)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 17
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 17
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 21
              },
              "end": {
                "row": 0,
                "column": 22
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 23
              },
              "end": {
                "row": 0,
                "column": 27
              },
              "text": "func"
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 27
              },
              "end": {
                "row": 0,
                "column": 28
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 28
          },
          "end": {
            "row": 0,
            "column": 29
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 26,
            "column": 19
          },
          "text": "\"\"\"\n        Sets the output of the streaming query to be processed using the provided\n        function. This is supported only the in the micro-batch execution modes (that is, when the\n        trigger is not continuous). In every micro-batch, the provided function will be called in\n        every micro-batch with (i) the output rows as a DataFrame and (ii) the batch identifier.\n        The batchId can be used deduplicate and transactionally write the output\n        (that is, the provided Dataset) to external systems. The output DataFrame is guaranteed\n        to exactly same for the same batchId (assuming all operations are deterministic in the\n        query).\n\n        .. note:: Evolving.\n\n        >>> def func(batch_df, batch_id):\n        ...     batch_df.collect()\n        ...\n        >>> writer = sdf.writeStream.foreach(func)\n        \"\"\"\n\n        from pyspark.java_gateway import ensure_callback_server_started\n        gw = self._spark._sc._gateway\n        java_import(gw.jvm, \"org.apache.spark.sql.execution.streaming.sources.*\")\n\n        wrapped_func = ForeachBatchFunction(self._spark, func)\n        gw.jvm.PythonForeachBatchHelper.callForeachBatch(self._jwrite, wrapped_func)\n        ensure_callback_server_started(gw)\n        return self",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 17,
                "column": 11
              },
              "text": "\"\"\"\n        Sets the output of the streaming query to be processed using the provided\n        function. This is supported only the in the micro-batch execution modes (that is, when the\n        trigger is not continuous). In every micro-batch, the provided function will be called in\n        every micro-batch with (i) the output rows as a DataFrame and (ii) the batch identifier.\n        The batchId can be used deduplicate and transactionally write the output\n        (that is, the provided Dataset) to external systems. The output DataFrame is guaranteed\n        to exactly same for the same batchId (assuming all operations are deterministic in the\n        query).\n\n        .. note:: Evolving.\n\n        >>> def func(batch_df, batch_id):\n        ...     batch_df.collect()\n        ...\n        >>> writer = sdf.writeStream.foreach(func)\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 17,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Sets the output of the streaming query to be processed using the provided\n        function. This is supported only the in the micro-batch execution modes (that is, when the\n        trigger is not continuous). In every micro-batch, the provided function will be called in\n        every micro-batch with (i) the output rows as a DataFrame and (ii) the batch identifier.\n        The batchId can be used deduplicate and transactionally write the output\n        (that is, the provided Dataset) to external systems. The output DataFrame is guaranteed\n        to exactly same for the same batchId (assuming all operations are deterministic in the\n        query).\n\n        .. note:: Evolving.\n\n        >>> def func(batch_df, batch_id):\n        ...     batch_df.collect()\n        ...\n        >>> writer = sdf.writeStream.foreach(func)\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 17,
                        "column": 8
                      },
                      "text": "\n        Sets the output of the streaming query to be processed using the provided\n        function. This is supported only the in the micro-batch execution modes (that is, when the\n        trigger is not continuous). In every micro-batch, the provided function will be called in\n        every micro-batch with (i) the output rows as a DataFrame and (ii) the batch identifier.\n        The batchId can be used deduplicate and transactionally write the output\n        (that is, the provided Dataset) to external systems. The output DataFrame is guaranteed\n        to exactly same for the same batchId (assuming all operations are deterministic in the\n        query).\n\n        .. note:: Evolving.\n\n        >>> def func(batch_df, batch_id):\n        ...     batch_df.collect()\n        ...\n        >>> writer = sdf.writeStream.foreach(func)\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 17,
                        "column": 8
                      },
                      "end": {
                        "row": 17,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "import_from_statement",
              "start": {
                "row": 19,
                "column": 8
              },
              "end": {
                "row": 19,
                "column": 71
              },
              "text": "from pyspark.java_gateway import ensure_callback_server_started",
              "children": [
                {
                  "type": "from",
                  "start": {
                    "row": 19,
                    "column": 8
                  },
                  "end": {
                    "row": 19,
                    "column": 12
                  },
                  "text": "from"
                },
                {
                  "type": "dotted_name",
                  "start": {
                    "row": 19,
                    "column": 13
                  },
                  "end": {
                    "row": 19,
                    "column": 33
                  },
                  "text": "pyspark.java_gateway",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 19,
                        "column": 13
                      },
                      "end": {
                        "row": 19,
                        "column": 20
                      },
                      "text": "pyspark"
                    },
                    {
                      "type": ".",
                      "start": {
                        "row": 19,
                        "column": 20
                      },
                      "end": {
                        "row": 19,
                        "column": 21
                      },
                      "text": "."
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 19,
                        "column": 21
                      },
                      "end": {
                        "row": 19,
                        "column": 33
                      },
                      "text": "java_gateway"
                    }
                  ]
                },
                {
                  "type": "import",
                  "start": {
                    "row": 19,
                    "column": 34
                  },
                  "end": {
                    "row": 19,
                    "column": 40
                  },
                  "text": "import"
                },
                {
                  "type": "dotted_name",
                  "start": {
                    "row": 19,
                    "column": 41
                  },
                  "end": {
                    "row": 19,
                    "column": 71
                  },
                  "text": "ensure_callback_server_started",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 19,
                        "column": 41
                      },
                      "end": {
                        "row": 19,
                        "column": 71
                      },
                      "text": "ensure_callback_server_started"
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 20,
                "column": 8
              },
              "end": {
                "row": 20,
                "column": 37
              },
              "text": "gw = self._spark._sc._gateway",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 20,
                    "column": 8
                  },
                  "end": {
                    "row": 20,
                    "column": 37
                  },
                  "text": "gw = self._spark._sc._gateway",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 20,
                        "column": 8
                      },
                      "end": {
                        "row": 20,
                        "column": 10
                      },
                      "text": "gw"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 20,
                        "column": 11
                      },
                      "end": {
                        "row": 20,
                        "column": 12
                      },
                      "text": "="
                    },
                    {
                      "type": "attribute",
                      "start": {
                        "row": 20,
                        "column": 13
                      },
                      "end": {
                        "row": 20,
                        "column": 37
                      },
                      "text": "self._spark._sc._gateway",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 20,
                            "column": 13
                          },
                          "end": {
                            "row": 20,
                            "column": 28
                          },
                          "text": "self._spark._sc",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 20,
                                "column": 13
                              },
                              "end": {
                                "row": 20,
                                "column": 24
                              },
                              "text": "self._spark",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 20,
                                    "column": 13
                                  },
                                  "end": {
                                    "row": 20,
                                    "column": 17
                                  },
                                  "text": "self"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 20,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 20,
                                    "column": 18
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 20,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 20,
                                    "column": 24
                                  },
                                  "text": "_spark"
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 20,
                                "column": 24
                              },
                              "end": {
                                "row": 20,
                                "column": 25
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 20,
                                "column": 25
                              },
                              "end": {
                                "row": 20,
                                "column": 28
                              },
                              "text": "_sc"
                            }
                          ]
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 20,
                            "column": 28
                          },
                          "end": {
                            "row": 20,
                            "column": 29
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 20,
                            "column": 29
                          },
                          "end": {
                            "row": 20,
                            "column": 37
                          },
                          "text": "_gateway"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 21,
                "column": 8
              },
              "end": {
                "row": 21,
                "column": 81
              },
              "text": "java_import(gw.jvm, \"org.apache.spark.sql.execution.streaming.sources.*\")",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 21,
                    "column": 8
                  },
                  "end": {
                    "row": 21,
                    "column": 81
                  },
                  "text": "java_import(gw.jvm, \"org.apache.spark.sql.execution.streaming.sources.*\")",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 21,
                        "column": 8
                      },
                      "end": {
                        "row": 21,
                        "column": 19
                      },
                      "text": "java_import"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 21,
                        "column": 19
                      },
                      "end": {
                        "row": 21,
                        "column": 81
                      },
                      "text": "(gw.jvm, \"org.apache.spark.sql.execution.streaming.sources.*\")",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 21,
                            "column": 19
                          },
                          "end": {
                            "row": 21,
                            "column": 20
                          },
                          "text": "("
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 21,
                            "column": 20
                          },
                          "end": {
                            "row": 21,
                            "column": 26
                          },
                          "text": "gw.jvm",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 21,
                                "column": 20
                              },
                              "end": {
                                "row": 21,
                                "column": 22
                              },
                              "text": "gw"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 21,
                                "column": 22
                              },
                              "end": {
                                "row": 21,
                                "column": 23
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 21,
                                "column": 23
                              },
                              "end": {
                                "row": 21,
                                "column": 26
                              },
                              "text": "jvm"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 21,
                            "column": 26
                          },
                          "end": {
                            "row": 21,
                            "column": 27
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 21,
                            "column": 28
                          },
                          "end": {
                            "row": 21,
                            "column": 80
                          },
                          "text": "\"org.apache.spark.sql.execution.streaming.sources.*\"",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 21,
                                "column": 28
                              },
                              "end": {
                                "row": 21,
                                "column": 29
                              },
                              "text": "\""
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 21,
                                "column": 29
                              },
                              "end": {
                                "row": 21,
                                "column": 79
                              },
                              "text": "org.apache.spark.sql.execution.streaming.sources.*"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 21,
                                "column": 79
                              },
                              "end": {
                                "row": 21,
                                "column": 80
                              },
                              "text": "\""
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 21,
                            "column": 80
                          },
                          "end": {
                            "row": 21,
                            "column": 81
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 23,
                "column": 8
              },
              "end": {
                "row": 23,
                "column": 62
              },
              "text": "wrapped_func = ForeachBatchFunction(self._spark, func)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 23,
                    "column": 8
                  },
                  "end": {
                    "row": 23,
                    "column": 62
                  },
                  "text": "wrapped_func = ForeachBatchFunction(self._spark, func)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 23,
                        "column": 8
                      },
                      "end": {
                        "row": 23,
                        "column": 20
                      },
                      "text": "wrapped_func"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 23,
                        "column": 21
                      },
                      "end": {
                        "row": 23,
                        "column": 22
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 23,
                        "column": 23
                      },
                      "end": {
                        "row": 23,
                        "column": 62
                      },
                      "text": "ForeachBatchFunction(self._spark, func)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 23,
                            "column": 23
                          },
                          "end": {
                            "row": 23,
                            "column": 43
                          },
                          "text": "ForeachBatchFunction"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 23,
                            "column": 43
                          },
                          "end": {
                            "row": 23,
                            "column": 62
                          },
                          "text": "(self._spark, func)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 23,
                                "column": 43
                              },
                              "end": {
                                "row": 23,
                                "column": 44
                              },
                              "text": "("
                            },
                            {
                              "type": "attribute",
                              "start": {
                                "row": 23,
                                "column": 44
                              },
                              "end": {
                                "row": 23,
                                "column": 55
                              },
                              "text": "self._spark",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 23,
                                    "column": 44
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 48
                                  },
                                  "text": "self"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 23,
                                    "column": 48
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 49
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 23,
                                    "column": 49
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 55
                                  },
                                  "text": "_spark"
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 23,
                                "column": 55
                              },
                              "end": {
                                "row": 23,
                                "column": 56
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 57
                              },
                              "end": {
                                "row": 23,
                                "column": 61
                              },
                              "text": "func"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 23,
                                "column": 61
                              },
                              "end": {
                                "row": 23,
                                "column": 62
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 24,
                "column": 8
              },
              "end": {
                "row": 24,
                "column": 84
              },
              "text": "gw.jvm.PythonForeachBatchHelper.callForeachBatch(self._jwrite, wrapped_func)",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 24,
                    "column": 8
                  },
                  "end": {
                    "row": 24,
                    "column": 84
                  },
                  "text": "gw.jvm.PythonForeachBatchHelper.callForeachBatch(self._jwrite, wrapped_func)",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 24,
                        "column": 8
                      },
                      "end": {
                        "row": 24,
                        "column": 56
                      },
                      "text": "gw.jvm.PythonForeachBatchHelper.callForeachBatch",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 24,
                            "column": 8
                          },
                          "end": {
                            "row": 24,
                            "column": 39
                          },
                          "text": "gw.jvm.PythonForeachBatchHelper",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 24,
                                "column": 8
                              },
                              "end": {
                                "row": 24,
                                "column": 14
                              },
                              "text": "gw.jvm",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 24,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 24,
                                    "column": 10
                                  },
                                  "text": "gw"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 24,
                                    "column": 10
                                  },
                                  "end": {
                                    "row": 24,
                                    "column": 11
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 24,
                                    "column": 11
                                  },
                                  "end": {
                                    "row": 24,
                                    "column": 14
                                  },
                                  "text": "jvm"
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 24,
                                "column": 14
                              },
                              "end": {
                                "row": 24,
                                "column": 15
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 24,
                                "column": 15
                              },
                              "end": {
                                "row": 24,
                                "column": 39
                              },
                              "text": "PythonForeachBatchHelper"
                            }
                          ]
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 24,
                            "column": 39
                          },
                          "end": {
                            "row": 24,
                            "column": 40
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 24,
                            "column": 40
                          },
                          "end": {
                            "row": 24,
                            "column": 56
                          },
                          "text": "callForeachBatch"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 24,
                        "column": 56
                      },
                      "end": {
                        "row": 24,
                        "column": 84
                      },
                      "text": "(self._jwrite, wrapped_func)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 24,
                            "column": 56
                          },
                          "end": {
                            "row": 24,
                            "column": 57
                          },
                          "text": "("
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 24,
                            "column": 57
                          },
                          "end": {
                            "row": 24,
                            "column": 69
                          },
                          "text": "self._jwrite",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 24,
                                "column": 57
                              },
                              "end": {
                                "row": 24,
                                "column": 61
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 24,
                                "column": 61
                              },
                              "end": {
                                "row": 24,
                                "column": 62
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 24,
                                "column": 62
                              },
                              "end": {
                                "row": 24,
                                "column": 69
                              },
                              "text": "_jwrite"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 24,
                            "column": 69
                          },
                          "end": {
                            "row": 24,
                            "column": 70
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 24,
                            "column": 71
                          },
                          "end": {
                            "row": 24,
                            "column": 83
                          },
                          "text": "wrapped_func"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 24,
                            "column": 83
                          },
                          "end": {
                            "row": 24,
                            "column": 84
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 25,
                "column": 8
              },
              "end": {
                "row": 25,
                "column": 42
              },
              "text": "ensure_callback_server_started(gw)",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 25,
                    "column": 8
                  },
                  "end": {
                    "row": 25,
                    "column": 42
                  },
                  "text": "ensure_callback_server_started(gw)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 25,
                        "column": 8
                      },
                      "end": {
                        "row": 25,
                        "column": 38
                      },
                      "text": "ensure_callback_server_started"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 25,
                        "column": 38
                      },
                      "end": {
                        "row": 25,
                        "column": 42
                      },
                      "text": "(gw)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 25,
                            "column": 38
                          },
                          "end": {
                            "row": 25,
                            "column": 39
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 39
                          },
                          "end": {
                            "row": 25,
                            "column": 41
                          },
                          "text": "gw"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 25,
                            "column": 41
                          },
                          "end": {
                            "row": 25,
                            "column": 42
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 26,
                "column": 8
              },
              "end": {
                "row": 26,
                "column": 19
              },
              "text": "return self",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 26,
                    "column": 8
                  },
                  "end": {
                    "row": 26,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 26,
                    "column": 15
                  },
                  "end": {
                    "row": 26,
                    "column": 19
                  },
                  "text": "self"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}