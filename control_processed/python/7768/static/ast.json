{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 53,
    "column": 13
  },
  "text": "def minimum(lhs, rhs):\n    \"\"\"Returns element-wise minimum of the input arrays with broadcasting.\n\n    Equivalent to ``mx.nd.broadcast_minimum(lhs, rhs)``.\n\n    .. note::\n\n       If the corresponding dimensions of two arrays have the same size or one of them has size 1,\n       then the arrays are broadcastable to a common shape.\n\n    Parameters\n    ----------\n    lhs : scalar or mxnet.ndarray.array\n        First array to be compared.\n    rhs : scalar or mxnet.ndarray.array\n         Second array to be compared. If ``lhs.shape != rhs.shape``, they must be\n        broadcastable to a common shape.\n\n    Returns\n    -------\n    NDArray\n        The element-wise minimum of the input arrays.\n\n    Examples\n    --------\n    >>> x = mx.nd.ones((2,3))\n    >>> y = mx.nd.arange(2).reshape((2,1))\n    >>> z = mx.nd.arange(2).reshape((1,2))\n    >>> x.asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> y.asnumpy()\n    array([[ 0.],\n           [ 1.]], dtype=float32)\n    >>> z.asnumpy()\n    array([[ 0.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, 2).asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, y).asnumpy()\n    array([[ 0.,  0.,  0.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(z, y).asnumpy()\n    array([[ 0.,  0.],\n           [ 0.,  1.]], dtype=float32)\n    \"\"\"\n    # pylint: disable= no-member, protected-access\n    return _ufunc_helper(\n        lhs,\n        rhs,\n        op.broadcast_minimum,\n        lambda x, y: x if x < y else y,\n        _internal._minimum_scalar,\n        None)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 53,
        "column": 13
      },
      "text": "def minimum(lhs, rhs):\n    \"\"\"Returns element-wise minimum of the input arrays with broadcasting.\n\n    Equivalent to ``mx.nd.broadcast_minimum(lhs, rhs)``.\n\n    .. note::\n\n       If the corresponding dimensions of two arrays have the same size or one of them has size 1,\n       then the arrays are broadcastable to a common shape.\n\n    Parameters\n    ----------\n    lhs : scalar or mxnet.ndarray.array\n        First array to be compared.\n    rhs : scalar or mxnet.ndarray.array\n         Second array to be compared. If ``lhs.shape != rhs.shape``, they must be\n        broadcastable to a common shape.\n\n    Returns\n    -------\n    NDArray\n        The element-wise minimum of the input arrays.\n\n    Examples\n    --------\n    >>> x = mx.nd.ones((2,3))\n    >>> y = mx.nd.arange(2).reshape((2,1))\n    >>> z = mx.nd.arange(2).reshape((1,2))\n    >>> x.asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> y.asnumpy()\n    array([[ 0.],\n           [ 1.]], dtype=float32)\n    >>> z.asnumpy()\n    array([[ 0.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, 2).asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, y).asnumpy()\n    array([[ 0.,  0.,  0.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(z, y).asnumpy()\n    array([[ 0.,  0.],\n           [ 0.,  1.]], dtype=float32)\n    \"\"\"\n    # pylint: disable= no-member, protected-access\n    return _ufunc_helper(\n        lhs,\n        rhs,\n        op.broadcast_minimum,\n        lambda x, y: x if x < y else y,\n        _internal._minimum_scalar,\n        None)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 11
          },
          "text": "minimum"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 11
          },
          "end": {
            "row": 0,
            "column": 21
          },
          "text": "(lhs, rhs)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 11
              },
              "end": {
                "row": 0,
                "column": 12
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 12
              },
              "end": {
                "row": 0,
                "column": 15
              },
              "text": "lhs"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 15
              },
              "end": {
                "row": 0,
                "column": 16
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 17
              },
              "end": {
                "row": 0,
                "column": 20
              },
              "text": "rhs"
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 21
          },
          "end": {
            "row": 0,
            "column": 22
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 4
          },
          "end": {
            "row": 53,
            "column": 13
          },
          "text": "\"\"\"Returns element-wise minimum of the input arrays with broadcasting.\n\n    Equivalent to ``mx.nd.broadcast_minimum(lhs, rhs)``.\n\n    .. note::\n\n       If the corresponding dimensions of two arrays have the same size or one of them has size 1,\n       then the arrays are broadcastable to a common shape.\n\n    Parameters\n    ----------\n    lhs : scalar or mxnet.ndarray.array\n        First array to be compared.\n    rhs : scalar or mxnet.ndarray.array\n         Second array to be compared. If ``lhs.shape != rhs.shape``, they must be\n        broadcastable to a common shape.\n\n    Returns\n    -------\n    NDArray\n        The element-wise minimum of the input arrays.\n\n    Examples\n    --------\n    >>> x = mx.nd.ones((2,3))\n    >>> y = mx.nd.arange(2).reshape((2,1))\n    >>> z = mx.nd.arange(2).reshape((1,2))\n    >>> x.asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> y.asnumpy()\n    array([[ 0.],\n           [ 1.]], dtype=float32)\n    >>> z.asnumpy()\n    array([[ 0.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, 2).asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, y).asnumpy()\n    array([[ 0.,  0.,  0.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(z, y).asnumpy()\n    array([[ 0.,  0.],\n           [ 0.,  1.]], dtype=float32)\n    \"\"\"\n    # pylint: disable= no-member, protected-access\n    return _ufunc_helper(\n        lhs,\n        rhs,\n        op.broadcast_minimum,\n        lambda x, y: x if x < y else y,\n        _internal._minimum_scalar,\n        None)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 4
              },
              "end": {
                "row": 45,
                "column": 7
              },
              "text": "\"\"\"Returns element-wise minimum of the input arrays with broadcasting.\n\n    Equivalent to ``mx.nd.broadcast_minimum(lhs, rhs)``.\n\n    .. note::\n\n       If the corresponding dimensions of two arrays have the same size or one of them has size 1,\n       then the arrays are broadcastable to a common shape.\n\n    Parameters\n    ----------\n    lhs : scalar or mxnet.ndarray.array\n        First array to be compared.\n    rhs : scalar or mxnet.ndarray.array\n         Second array to be compared. If ``lhs.shape != rhs.shape``, they must be\n        broadcastable to a common shape.\n\n    Returns\n    -------\n    NDArray\n        The element-wise minimum of the input arrays.\n\n    Examples\n    --------\n    >>> x = mx.nd.ones((2,3))\n    >>> y = mx.nd.arange(2).reshape((2,1))\n    >>> z = mx.nd.arange(2).reshape((1,2))\n    >>> x.asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> y.asnumpy()\n    array([[ 0.],\n           [ 1.]], dtype=float32)\n    >>> z.asnumpy()\n    array([[ 0.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, 2).asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, y).asnumpy()\n    array([[ 0.,  0.,  0.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(z, y).asnumpy()\n    array([[ 0.,  0.],\n           [ 0.,  1.]], dtype=float32)\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 4
                  },
                  "end": {
                    "row": 45,
                    "column": 7
                  },
                  "text": "\"\"\"Returns element-wise minimum of the input arrays with broadcasting.\n\n    Equivalent to ``mx.nd.broadcast_minimum(lhs, rhs)``.\n\n    .. note::\n\n       If the corresponding dimensions of two arrays have the same size or one of them has size 1,\n       then the arrays are broadcastable to a common shape.\n\n    Parameters\n    ----------\n    lhs : scalar or mxnet.ndarray.array\n        First array to be compared.\n    rhs : scalar or mxnet.ndarray.array\n         Second array to be compared. If ``lhs.shape != rhs.shape``, they must be\n        broadcastable to a common shape.\n\n    Returns\n    -------\n    NDArray\n        The element-wise minimum of the input arrays.\n\n    Examples\n    --------\n    >>> x = mx.nd.ones((2,3))\n    >>> y = mx.nd.arange(2).reshape((2,1))\n    >>> z = mx.nd.arange(2).reshape((1,2))\n    >>> x.asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> y.asnumpy()\n    array([[ 0.],\n           [ 1.]], dtype=float32)\n    >>> z.asnumpy()\n    array([[ 0.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, 2).asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, y).asnumpy()\n    array([[ 0.,  0.,  0.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(z, y).asnumpy()\n    array([[ 0.,  0.],\n           [ 0.,  1.]], dtype=float32)\n    \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 4
                      },
                      "end": {
                        "row": 1,
                        "column": 7
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 7
                      },
                      "end": {
                        "row": 45,
                        "column": 4
                      },
                      "text": "Returns element-wise minimum of the input arrays with broadcasting.\n\n    Equivalent to ``mx.nd.broadcast_minimum(lhs, rhs)``.\n\n    .. note::\n\n       If the corresponding dimensions of two arrays have the same size or one of them has size 1,\n       then the arrays are broadcastable to a common shape.\n\n    Parameters\n    ----------\n    lhs : scalar or mxnet.ndarray.array\n        First array to be compared.\n    rhs : scalar or mxnet.ndarray.array\n         Second array to be compared. If ``lhs.shape != rhs.shape``, they must be\n        broadcastable to a common shape.\n\n    Returns\n    -------\n    NDArray\n        The element-wise minimum of the input arrays.\n\n    Examples\n    --------\n    >>> x = mx.nd.ones((2,3))\n    >>> y = mx.nd.arange(2).reshape((2,1))\n    >>> z = mx.nd.arange(2).reshape((1,2))\n    >>> x.asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> y.asnumpy()\n    array([[ 0.],\n           [ 1.]], dtype=float32)\n    >>> z.asnumpy()\n    array([[ 0.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, 2).asnumpy()\n    array([[ 1.,  1.,  1.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(x, y).asnumpy()\n    array([[ 0.,  0.,  0.],\n           [ 1.,  1.,  1.]], dtype=float32)\n    >>> mx.nd.minimum(z, y).asnumpy()\n    array([[ 0.,  0.],\n           [ 0.,  1.]], dtype=float32)\n    "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 45,
                        "column": 4
                      },
                      "end": {
                        "row": 45,
                        "column": 7
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 46,
                "column": 4
              },
              "end": {
                "row": 46,
                "column": 50
              },
              "text": "# pylint: disable= no-member, protected-access"
            },
            {
              "type": "return_statement",
              "start": {
                "row": 47,
                "column": 4
              },
              "end": {
                "row": 53,
                "column": 13
              },
              "text": "return _ufunc_helper(\n        lhs,\n        rhs,\n        op.broadcast_minimum,\n        lambda x, y: x if x < y else y,\n        _internal._minimum_scalar,\n        None)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 47,
                    "column": 4
                  },
                  "end": {
                    "row": 47,
                    "column": 10
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 47,
                    "column": 11
                  },
                  "end": {
                    "row": 53,
                    "column": 13
                  },
                  "text": "_ufunc_helper(\n        lhs,\n        rhs,\n        op.broadcast_minimum,\n        lambda x, y: x if x < y else y,\n        _internal._minimum_scalar,\n        None)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 47,
                        "column": 11
                      },
                      "end": {
                        "row": 47,
                        "column": 24
                      },
                      "text": "_ufunc_helper"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 47,
                        "column": 24
                      },
                      "end": {
                        "row": 53,
                        "column": 13
                      },
                      "text": "(\n        lhs,\n        rhs,\n        op.broadcast_minimum,\n        lambda x, y: x if x < y else y,\n        _internal._minimum_scalar,\n        None)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 47,
                            "column": 24
                          },
                          "end": {
                            "row": 47,
                            "column": 25
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 48,
                            "column": 8
                          },
                          "end": {
                            "row": 48,
                            "column": 11
                          },
                          "text": "lhs"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 48,
                            "column": 11
                          },
                          "end": {
                            "row": 48,
                            "column": 12
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 49,
                            "column": 8
                          },
                          "end": {
                            "row": 49,
                            "column": 11
                          },
                          "text": "rhs"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 49,
                            "column": 11
                          },
                          "end": {
                            "row": 49,
                            "column": 12
                          },
                          "text": ","
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 50,
                            "column": 8
                          },
                          "end": {
                            "row": 50,
                            "column": 28
                          },
                          "text": "op.broadcast_minimum",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 50,
                                "column": 8
                              },
                              "end": {
                                "row": 50,
                                "column": 10
                              },
                              "text": "op"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 50,
                                "column": 10
                              },
                              "end": {
                                "row": 50,
                                "column": 11
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 50,
                                "column": 11
                              },
                              "end": {
                                "row": 50,
                                "column": 28
                              },
                              "text": "broadcast_minimum"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 50,
                            "column": 28
                          },
                          "end": {
                            "row": 50,
                            "column": 29
                          },
                          "text": ","
                        },
                        {
                          "type": "lambda",
                          "start": {
                            "row": 51,
                            "column": 8
                          },
                          "end": {
                            "row": 51,
                            "column": 38
                          },
                          "text": "lambda x, y: x if x < y else y",
                          "children": [
                            {
                              "type": "lambda",
                              "start": {
                                "row": 51,
                                "column": 8
                              },
                              "end": {
                                "row": 51,
                                "column": 14
                              },
                              "text": "lambda"
                            },
                            {
                              "type": "lambda_parameters",
                              "start": {
                                "row": 51,
                                "column": 15
                              },
                              "end": {
                                "row": 51,
                                "column": 19
                              },
                              "text": "x, y",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 51,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 16
                                  },
                                  "text": "x"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 51,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 17
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 51,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 19
                                  },
                                  "text": "y"
                                }
                              ]
                            },
                            {
                              "type": ":",
                              "start": {
                                "row": 51,
                                "column": 19
                              },
                              "end": {
                                "row": 51,
                                "column": 20
                              },
                              "text": ":"
                            },
                            {
                              "type": "conditional_expression",
                              "start": {
                                "row": 51,
                                "column": 21
                              },
                              "end": {
                                "row": 51,
                                "column": 38
                              },
                              "text": "x if x < y else y",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 51,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 22
                                  },
                                  "text": "x"
                                },
                                {
                                  "type": "if",
                                  "start": {
                                    "row": 51,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 25
                                  },
                                  "text": "if"
                                },
                                {
                                  "type": "comparison_operator",
                                  "start": {
                                    "row": 51,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 31
                                  },
                                  "text": "x < y",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 51,
                                        "column": 26
                                      },
                                      "end": {
                                        "row": 51,
                                        "column": 27
                                      },
                                      "text": "x"
                                    },
                                    {
                                      "type": "<",
                                      "start": {
                                        "row": 51,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 51,
                                        "column": 29
                                      },
                                      "text": "<"
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 51,
                                        "column": 30
                                      },
                                      "end": {
                                        "row": 51,
                                        "column": 31
                                      },
                                      "text": "y"
                                    }
                                  ]
                                },
                                {
                                  "type": "else",
                                  "start": {
                                    "row": 51,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 36
                                  },
                                  "text": "else"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 51,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 51,
                                    "column": 38
                                  },
                                  "text": "y"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 51,
                            "column": 38
                          },
                          "end": {
                            "row": 51,
                            "column": 39
                          },
                          "text": ","
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 52,
                            "column": 8
                          },
                          "end": {
                            "row": 52,
                            "column": 33
                          },
                          "text": "_internal._minimum_scalar",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 52,
                                "column": 8
                              },
                              "end": {
                                "row": 52,
                                "column": 17
                              },
                              "text": "_internal"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 52,
                                "column": 17
                              },
                              "end": {
                                "row": 52,
                                "column": 18
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 52,
                                "column": 18
                              },
                              "end": {
                                "row": 52,
                                "column": 33
                              },
                              "text": "_minimum_scalar"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 52,
                            "column": 33
                          },
                          "end": {
                            "row": 52,
                            "column": 34
                          },
                          "text": ","
                        },
                        {
                          "type": "none",
                          "start": {
                            "row": 53,
                            "column": 8
                          },
                          "end": {
                            "row": 53,
                            "column": 12
                          },
                          "text": "None"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 53,
                            "column": 12
                          },
                          "end": {
                            "row": 53,
                            "column": 13
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}