{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 63,
    "column": 97
  },
  "text": "def predict_topk(self, dataset, output_type=\"probability\", k=3, batch_size=64):\n        \"\"\"\n        Return top-k predictions for the ``dataset``, using the trained model.\n        Predictions are returned as an SFrame with three columns: `id`,\n        `class`, and `probability`, `margin`,  or `rank`, depending on the ``output_type``\n        parameter. Input dataset size must be the same as for training of the model.\n\n        Parameters\n        ----------\n        dataset : SFrame | SArray | turicreate.Image\n            Images to be classified.\n            If dataset is an SFrame, it must include columns with the same\n            names as the features used for model training, but does not require\n            a target column. Additional columns are ignored.\n\n        output_type : {'probability', 'rank', 'margin'}, optional\n            Choose the return type of the prediction:\n\n            - `probability`: Probability associated with each label in the prediction.\n            - `rank`       : Rank associated with each label in the prediction.\n            - `margin`     : Margin associated with each label in the prediction.\n\n        k : int, optional\n            Number of classes to return for each input example.\n\n        Returns\n        -------\n        out : SFrame\n            An SFrame with model predictions.\n\n        See Also\n        --------\n        predict, classify, evaluate\n\n        Examples\n        --------\n        >>> pred = m.predict_topk(validation_data, k=3)\n        >>> pred\n        +----+-------+-------------------+\n        | id | class |   probability     |\n        +----+-------+-------------------+\n        | 0  |   4   |   0.995623886585  |\n        | 0  |   9   |  0.0038311756216  |\n        | 0  |   7   | 0.000301006948575 |\n        | 1  |   1   |   0.928708016872  |\n        | 1  |   3   |  0.0440889261663  |\n        | 1  |   2   |  0.0176190119237  |\n        | 2  |   3   |   0.996967732906  |\n        | 2  |   2   |  0.00151345680933 |\n        | 2  |   7   | 0.000637513934635 |\n        | 3  |   1   |   0.998070061207  |\n        | .. |  ...  |        ...        |\n        +----+-------+-------------------+\n        [35688 rows x 3 columns]\n        \"\"\"\n        if not isinstance(dataset, (_tc.SFrame, _tc.SArray, _tc.Image)):\n            raise TypeError('dataset must be either an SFrame, SArray or turicreate.Image')\n        if(batch_size < 1):\n            raise ValueError(\"'batch_size' must be greater than or equal to 1\")\n\n        dataset, _ = self._canonize_input(dataset)\n\n        extracted_features = self._extract_features(dataset)\n        return self.classifier.predict_topk(extracted_features, output_type = output_type, k = k)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 63,
        "column": 97
      },
      "text": "def predict_topk(self, dataset, output_type=\"probability\", k=3, batch_size=64):\n        \"\"\"\n        Return top-k predictions for the ``dataset``, using the trained model.\n        Predictions are returned as an SFrame with three columns: `id`,\n        `class`, and `probability`, `margin`,  or `rank`, depending on the ``output_type``\n        parameter. Input dataset size must be the same as for training of the model.\n\n        Parameters\n        ----------\n        dataset : SFrame | SArray | turicreate.Image\n            Images to be classified.\n            If dataset is an SFrame, it must include columns with the same\n            names as the features used for model training, but does not require\n            a target column. Additional columns are ignored.\n\n        output_type : {'probability', 'rank', 'margin'}, optional\n            Choose the return type of the prediction:\n\n            - `probability`: Probability associated with each label in the prediction.\n            - `rank`       : Rank associated with each label in the prediction.\n            - `margin`     : Margin associated with each label in the prediction.\n\n        k : int, optional\n            Number of classes to return for each input example.\n\n        Returns\n        -------\n        out : SFrame\n            An SFrame with model predictions.\n\n        See Also\n        --------\n        predict, classify, evaluate\n\n        Examples\n        --------\n        >>> pred = m.predict_topk(validation_data, k=3)\n        >>> pred\n        +----+-------+-------------------+\n        | id | class |   probability     |\n        +----+-------+-------------------+\n        | 0  |   4   |   0.995623886585  |\n        | 0  |   9   |  0.0038311756216  |\n        | 0  |   7   | 0.000301006948575 |\n        | 1  |   1   |   0.928708016872  |\n        | 1  |   3   |  0.0440889261663  |\n        | 1  |   2   |  0.0176190119237  |\n        | 2  |   3   |   0.996967732906  |\n        | 2  |   2   |  0.00151345680933 |\n        | 2  |   7   | 0.000637513934635 |\n        | 3  |   1   |   0.998070061207  |\n        | .. |  ...  |        ...        |\n        +----+-------+-------------------+\n        [35688 rows x 3 columns]\n        \"\"\"\n        if not isinstance(dataset, (_tc.SFrame, _tc.SArray, _tc.Image)):\n            raise TypeError('dataset must be either an SFrame, SArray or turicreate.Image')\n        if(batch_size < 1):\n            raise ValueError(\"'batch_size' must be greater than or equal to 1\")\n\n        dataset, _ = self._canonize_input(dataset)\n\n        extracted_features = self._extract_features(dataset)\n        return self.classifier.predict_topk(extracted_features, output_type = output_type, k = k)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 16
          },
          "text": "predict_topk"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 16
          },
          "end": {
            "row": 0,
            "column": 78
          },
          "text": "(self, dataset, output_type=\"probability\", k=3, batch_size=64)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 17
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 17
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 21
              },
              "end": {
                "row": 0,
                "column": 22
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 23
              },
              "end": {
                "row": 0,
                "column": 30
              },
              "text": "dataset"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 30
              },
              "end": {
                "row": 0,
                "column": 31
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 32
              },
              "end": {
                "row": 0,
                "column": 57
              },
              "text": "output_type=\"probability\"",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 32
                  },
                  "end": {
                    "row": 0,
                    "column": 43
                  },
                  "text": "output_type"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 43
                  },
                  "end": {
                    "row": 0,
                    "column": 44
                  },
                  "text": "="
                },
                {
                  "type": "string",
                  "start": {
                    "row": 0,
                    "column": 44
                  },
                  "end": {
                    "row": 0,
                    "column": 57
                  },
                  "text": "\"probability\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 0,
                        "column": 44
                      },
                      "end": {
                        "row": 0,
                        "column": 45
                      },
                      "text": "\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 0,
                        "column": 45
                      },
                      "end": {
                        "row": 0,
                        "column": 56
                      },
                      "text": "probability"
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 0,
                        "column": 56
                      },
                      "end": {
                        "row": 0,
                        "column": 57
                      },
                      "text": "\""
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 57
              },
              "end": {
                "row": 0,
                "column": 58
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 59
              },
              "end": {
                "row": 0,
                "column": 62
              },
              "text": "k=3",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 59
                  },
                  "end": {
                    "row": 0,
                    "column": 60
                  },
                  "text": "k"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 60
                  },
                  "end": {
                    "row": 0,
                    "column": 61
                  },
                  "text": "="
                },
                {
                  "type": "integer",
                  "start": {
                    "row": 0,
                    "column": 61
                  },
                  "end": {
                    "row": 0,
                    "column": 62
                  },
                  "text": "3"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 62
              },
              "end": {
                "row": 0,
                "column": 63
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 64
              },
              "end": {
                "row": 0,
                "column": 77
              },
              "text": "batch_size=64",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 64
                  },
                  "end": {
                    "row": 0,
                    "column": 74
                  },
                  "text": "batch_size"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 74
                  },
                  "end": {
                    "row": 0,
                    "column": 75
                  },
                  "text": "="
                },
                {
                  "type": "integer",
                  "start": {
                    "row": 0,
                    "column": 75
                  },
                  "end": {
                    "row": 0,
                    "column": 77
                  },
                  "text": "64"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 77
              },
              "end": {
                "row": 0,
                "column": 78
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 78
          },
          "end": {
            "row": 0,
            "column": 79
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 63,
            "column": 97
          },
          "text": "\"\"\"\n        Return top-k predictions for the ``dataset``, using the trained model.\n        Predictions are returned as an SFrame with three columns: `id`,\n        `class`, and `probability`, `margin`,  or `rank`, depending on the ``output_type``\n        parameter. Input dataset size must be the same as for training of the model.\n\n        Parameters\n        ----------\n        dataset : SFrame | SArray | turicreate.Image\n            Images to be classified.\n            If dataset is an SFrame, it must include columns with the same\n            names as the features used for model training, but does not require\n            a target column. Additional columns are ignored.\n\n        output_type : {'probability', 'rank', 'margin'}, optional\n            Choose the return type of the prediction:\n\n            - `probability`: Probability associated with each label in the prediction.\n            - `rank`       : Rank associated with each label in the prediction.\n            - `margin`     : Margin associated with each label in the prediction.\n\n        k : int, optional\n            Number of classes to return for each input example.\n\n        Returns\n        -------\n        out : SFrame\n            An SFrame with model predictions.\n\n        See Also\n        --------\n        predict, classify, evaluate\n\n        Examples\n        --------\n        >>> pred = m.predict_topk(validation_data, k=3)\n        >>> pred\n        +----+-------+-------------------+\n        | id | class |   probability     |\n        +----+-------+-------------------+\n        | 0  |   4   |   0.995623886585  |\n        | 0  |   9   |  0.0038311756216  |\n        | 0  |   7   | 0.000301006948575 |\n        | 1  |   1   |   0.928708016872  |\n        | 1  |   3   |  0.0440889261663  |\n        | 1  |   2   |  0.0176190119237  |\n        | 2  |   3   |   0.996967732906  |\n        | 2  |   2   |  0.00151345680933 |\n        | 2  |   7   | 0.000637513934635 |\n        | 3  |   1   |   0.998070061207  |\n        | .. |  ...  |        ...        |\n        +----+-------+-------------------+\n        [35688 rows x 3 columns]\n        \"\"\"\n        if not isinstance(dataset, (_tc.SFrame, _tc.SArray, _tc.Image)):\n            raise TypeError('dataset must be either an SFrame, SArray or turicreate.Image')\n        if(batch_size < 1):\n            raise ValueError(\"'batch_size' must be greater than or equal to 1\")\n\n        dataset, _ = self._canonize_input(dataset)\n\n        extracted_features = self._extract_features(dataset)\n        return self.classifier.predict_topk(extracted_features, output_type = output_type, k = k)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 54,
                "column": 11
              },
              "text": "\"\"\"\n        Return top-k predictions for the ``dataset``, using the trained model.\n        Predictions are returned as an SFrame with three columns: `id`,\n        `class`, and `probability`, `margin`,  or `rank`, depending on the ``output_type``\n        parameter. Input dataset size must be the same as for training of the model.\n\n        Parameters\n        ----------\n        dataset : SFrame | SArray | turicreate.Image\n            Images to be classified.\n            If dataset is an SFrame, it must include columns with the same\n            names as the features used for model training, but does not require\n            a target column. Additional columns are ignored.\n\n        output_type : {'probability', 'rank', 'margin'}, optional\n            Choose the return type of the prediction:\n\n            - `probability`: Probability associated with each label in the prediction.\n            - `rank`       : Rank associated with each label in the prediction.\n            - `margin`     : Margin associated with each label in the prediction.\n\n        k : int, optional\n            Number of classes to return for each input example.\n\n        Returns\n        -------\n        out : SFrame\n            An SFrame with model predictions.\n\n        See Also\n        --------\n        predict, classify, evaluate\n\n        Examples\n        --------\n        >>> pred = m.predict_topk(validation_data, k=3)\n        >>> pred\n        +----+-------+-------------------+\n        | id | class |   probability     |\n        +----+-------+-------------------+\n        | 0  |   4   |   0.995623886585  |\n        | 0  |   9   |  0.0038311756216  |\n        | 0  |   7   | 0.000301006948575 |\n        | 1  |   1   |   0.928708016872  |\n        | 1  |   3   |  0.0440889261663  |\n        | 1  |   2   |  0.0176190119237  |\n        | 2  |   3   |   0.996967732906  |\n        | 2  |   2   |  0.00151345680933 |\n        | 2  |   7   | 0.000637513934635 |\n        | 3  |   1   |   0.998070061207  |\n        | .. |  ...  |        ...        |\n        +----+-------+-------------------+\n        [35688 rows x 3 columns]\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 54,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Return top-k predictions for the ``dataset``, using the trained model.\n        Predictions are returned as an SFrame with three columns: `id`,\n        `class`, and `probability`, `margin`,  or `rank`, depending on the ``output_type``\n        parameter. Input dataset size must be the same as for training of the model.\n\n        Parameters\n        ----------\n        dataset : SFrame | SArray | turicreate.Image\n            Images to be classified.\n            If dataset is an SFrame, it must include columns with the same\n            names as the features used for model training, but does not require\n            a target column. Additional columns are ignored.\n\n        output_type : {'probability', 'rank', 'margin'}, optional\n            Choose the return type of the prediction:\n\n            - `probability`: Probability associated with each label in the prediction.\n            - `rank`       : Rank associated with each label in the prediction.\n            - `margin`     : Margin associated with each label in the prediction.\n\n        k : int, optional\n            Number of classes to return for each input example.\n\n        Returns\n        -------\n        out : SFrame\n            An SFrame with model predictions.\n\n        See Also\n        --------\n        predict, classify, evaluate\n\n        Examples\n        --------\n        >>> pred = m.predict_topk(validation_data, k=3)\n        >>> pred\n        +----+-------+-------------------+\n        | id | class |   probability     |\n        +----+-------+-------------------+\n        | 0  |   4   |   0.995623886585  |\n        | 0  |   9   |  0.0038311756216  |\n        | 0  |   7   | 0.000301006948575 |\n        | 1  |   1   |   0.928708016872  |\n        | 1  |   3   |  0.0440889261663  |\n        | 1  |   2   |  0.0176190119237  |\n        | 2  |   3   |   0.996967732906  |\n        | 2  |   2   |  0.00151345680933 |\n        | 2  |   7   | 0.000637513934635 |\n        | 3  |   1   |   0.998070061207  |\n        | .. |  ...  |        ...        |\n        +----+-------+-------------------+\n        [35688 rows x 3 columns]\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 54,
                        "column": 8
                      },
                      "text": "\n        Return top-k predictions for the ``dataset``, using the trained model.\n        Predictions are returned as an SFrame with three columns: `id`,\n        `class`, and `probability`, `margin`,  or `rank`, depending on the ``output_type``\n        parameter. Input dataset size must be the same as for training of the model.\n\n        Parameters\n        ----------\n        dataset : SFrame | SArray | turicreate.Image\n            Images to be classified.\n            If dataset is an SFrame, it must include columns with the same\n            names as the features used for model training, but does not require\n            a target column. Additional columns are ignored.\n\n        output_type : {'probability', 'rank', 'margin'}, optional\n            Choose the return type of the prediction:\n\n            - `probability`: Probability associated with each label in the prediction.\n            - `rank`       : Rank associated with each label in the prediction.\n            - `margin`     : Margin associated with each label in the prediction.\n\n        k : int, optional\n            Number of classes to return for each input example.\n\n        Returns\n        -------\n        out : SFrame\n            An SFrame with model predictions.\n\n        See Also\n        --------\n        predict, classify, evaluate\n\n        Examples\n        --------\n        >>> pred = m.predict_topk(validation_data, k=3)\n        >>> pred\n        +----+-------+-------------------+\n        | id | class |   probability     |\n        +----+-------+-------------------+\n        | 0  |   4   |   0.995623886585  |\n        | 0  |   9   |  0.0038311756216  |\n        | 0  |   7   | 0.000301006948575 |\n        | 1  |   1   |   0.928708016872  |\n        | 1  |   3   |  0.0440889261663  |\n        | 1  |   2   |  0.0176190119237  |\n        | 2  |   3   |   0.996967732906  |\n        | 2  |   2   |  0.00151345680933 |\n        | 2  |   7   | 0.000637513934635 |\n        | 3  |   1   |   0.998070061207  |\n        | .. |  ...  |        ...        |\n        +----+-------+-------------------+\n        [35688 rows x 3 columns]\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 54,
                        "column": 8
                      },
                      "end": {
                        "row": 54,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 55,
                "column": 8
              },
              "end": {
                "row": 56,
                "column": 91
              },
              "text": "if not isinstance(dataset, (_tc.SFrame, _tc.SArray, _tc.Image)):\n            raise TypeError('dataset must be either an SFrame, SArray or turicreate.Image')",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 55,
                    "column": 8
                  },
                  "end": {
                    "row": 55,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "not_operator",
                  "start": {
                    "row": 55,
                    "column": 11
                  },
                  "end": {
                    "row": 55,
                    "column": 71
                  },
                  "text": "not isinstance(dataset, (_tc.SFrame, _tc.SArray, _tc.Image))",
                  "children": [
                    {
                      "type": "not",
                      "start": {
                        "row": 55,
                        "column": 11
                      },
                      "end": {
                        "row": 55,
                        "column": 14
                      },
                      "text": "not"
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 55,
                        "column": 15
                      },
                      "end": {
                        "row": 55,
                        "column": 71
                      },
                      "text": "isinstance(dataset, (_tc.SFrame, _tc.SArray, _tc.Image))",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 55,
                            "column": 15
                          },
                          "end": {
                            "row": 55,
                            "column": 25
                          },
                          "text": "isinstance"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 55,
                            "column": 25
                          },
                          "end": {
                            "row": 55,
                            "column": 71
                          },
                          "text": "(dataset, (_tc.SFrame, _tc.SArray, _tc.Image))",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 55,
                                "column": 25
                              },
                              "end": {
                                "row": 55,
                                "column": 26
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 55,
                                "column": 26
                              },
                              "end": {
                                "row": 55,
                                "column": 33
                              },
                              "text": "dataset"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 55,
                                "column": 33
                              },
                              "end": {
                                "row": 55,
                                "column": 34
                              },
                              "text": ","
                            },
                            {
                              "type": "tuple",
                              "start": {
                                "row": 55,
                                "column": 35
                              },
                              "end": {
                                "row": 55,
                                "column": 70
                              },
                              "text": "(_tc.SFrame, _tc.SArray, _tc.Image)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 55,
                                    "column": 35
                                  },
                                  "end": {
                                    "row": 55,
                                    "column": 36
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 55,
                                    "column": 36
                                  },
                                  "end": {
                                    "row": 55,
                                    "column": 46
                                  },
                                  "text": "_tc.SFrame",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 55,
                                        "column": 36
                                      },
                                      "end": {
                                        "row": 55,
                                        "column": 39
                                      },
                                      "text": "_tc"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 55,
                                        "column": 39
                                      },
                                      "end": {
                                        "row": 55,
                                        "column": 40
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 55,
                                        "column": 40
                                      },
                                      "end": {
                                        "row": 55,
                                        "column": 46
                                      },
                                      "text": "SFrame"
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 55,
                                    "column": 46
                                  },
                                  "end": {
                                    "row": 55,
                                    "column": 47
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 55,
                                    "column": 48
                                  },
                                  "end": {
                                    "row": 55,
                                    "column": 58
                                  },
                                  "text": "_tc.SArray",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 55,
                                        "column": 48
                                      },
                                      "end": {
                                        "row": 55,
                                        "column": 51
                                      },
                                      "text": "_tc"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 55,
                                        "column": 51
                                      },
                                      "end": {
                                        "row": 55,
                                        "column": 52
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 55,
                                        "column": 52
                                      },
                                      "end": {
                                        "row": 55,
                                        "column": 58
                                      },
                                      "text": "SArray"
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 55,
                                    "column": 58
                                  },
                                  "end": {
                                    "row": 55,
                                    "column": 59
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 55,
                                    "column": 60
                                  },
                                  "end": {
                                    "row": 55,
                                    "column": 69
                                  },
                                  "text": "_tc.Image",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 55,
                                        "column": 60
                                      },
                                      "end": {
                                        "row": 55,
                                        "column": 63
                                      },
                                      "text": "_tc"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 55,
                                        "column": 63
                                      },
                                      "end": {
                                        "row": 55,
                                        "column": 64
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 55,
                                        "column": 64
                                      },
                                      "end": {
                                        "row": 55,
                                        "column": 69
                                      },
                                      "text": "Image"
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 55,
                                    "column": 69
                                  },
                                  "end": {
                                    "row": 55,
                                    "column": 70
                                  },
                                  "text": ")"
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 55,
                                "column": 70
                              },
                              "end": {
                                "row": 55,
                                "column": 71
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 55,
                    "column": 71
                  },
                  "end": {
                    "row": 55,
                    "column": 72
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 56,
                    "column": 12
                  },
                  "end": {
                    "row": 56,
                    "column": 91
                  },
                  "text": "raise TypeError('dataset must be either an SFrame, SArray or turicreate.Image')",
                  "children": [
                    {
                      "type": "raise_statement",
                      "start": {
                        "row": 56,
                        "column": 12
                      },
                      "end": {
                        "row": 56,
                        "column": 91
                      },
                      "text": "raise TypeError('dataset must be either an SFrame, SArray or turicreate.Image')",
                      "children": [
                        {
                          "type": "raise",
                          "start": {
                            "row": 56,
                            "column": 12
                          },
                          "end": {
                            "row": 56,
                            "column": 17
                          },
                          "text": "raise"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 56,
                            "column": 18
                          },
                          "end": {
                            "row": 56,
                            "column": 91
                          },
                          "text": "TypeError('dataset must be either an SFrame, SArray or turicreate.Image')",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 56,
                                "column": 18
                              },
                              "end": {
                                "row": 56,
                                "column": 27
                              },
                              "text": "TypeError"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 56,
                                "column": 27
                              },
                              "end": {
                                "row": 56,
                                "column": 91
                              },
                              "text": "('dataset must be either an SFrame, SArray or turicreate.Image')",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 56,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 56,
                                    "column": 28
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 56,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 56,
                                    "column": 90
                                  },
                                  "text": "'dataset must be either an SFrame, SArray or turicreate.Image'",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 56,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 56,
                                        "column": 29
                                      },
                                      "text": "'"
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 56,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 56,
                                        "column": 89
                                      },
                                      "text": "dataset must be either an SFrame, SArray or turicreate.Image"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 56,
                                        "column": 89
                                      },
                                      "end": {
                                        "row": 56,
                                        "column": 90
                                      },
                                      "text": "'"
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 56,
                                    "column": 90
                                  },
                                  "end": {
                                    "row": 56,
                                    "column": 91
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 57,
                "column": 8
              },
              "end": {
                "row": 58,
                "column": 79
              },
              "text": "if(batch_size < 1):\n            raise ValueError(\"'batch_size' must be greater than or equal to 1\")",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 57,
                    "column": 8
                  },
                  "end": {
                    "row": 57,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "parenthesized_expression",
                  "start": {
                    "row": 57,
                    "column": 10
                  },
                  "end": {
                    "row": 57,
                    "column": 26
                  },
                  "text": "(batch_size < 1)",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 57,
                        "column": 10
                      },
                      "end": {
                        "row": 57,
                        "column": 11
                      },
                      "text": "("
                    },
                    {
                      "type": "comparison_operator",
                      "start": {
                        "row": 57,
                        "column": 11
                      },
                      "end": {
                        "row": 57,
                        "column": 25
                      },
                      "text": "batch_size < 1",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 57,
                            "column": 11
                          },
                          "end": {
                            "row": 57,
                            "column": 21
                          },
                          "text": "batch_size"
                        },
                        {
                          "type": "<",
                          "start": {
                            "row": 57,
                            "column": 22
                          },
                          "end": {
                            "row": 57,
                            "column": 23
                          },
                          "text": "<"
                        },
                        {
                          "type": "integer",
                          "start": {
                            "row": 57,
                            "column": 24
                          },
                          "end": {
                            "row": 57,
                            "column": 25
                          },
                          "text": "1"
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 57,
                        "column": 25
                      },
                      "end": {
                        "row": 57,
                        "column": 26
                      },
                      "text": ")"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 57,
                    "column": 26
                  },
                  "end": {
                    "row": 57,
                    "column": 27
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 58,
                    "column": 12
                  },
                  "end": {
                    "row": 58,
                    "column": 79
                  },
                  "text": "raise ValueError(\"'batch_size' must be greater than or equal to 1\")",
                  "children": [
                    {
                      "type": "raise_statement",
                      "start": {
                        "row": 58,
                        "column": 12
                      },
                      "end": {
                        "row": 58,
                        "column": 79
                      },
                      "text": "raise ValueError(\"'batch_size' must be greater than or equal to 1\")",
                      "children": [
                        {
                          "type": "raise",
                          "start": {
                            "row": 58,
                            "column": 12
                          },
                          "end": {
                            "row": 58,
                            "column": 17
                          },
                          "text": "raise"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 58,
                            "column": 18
                          },
                          "end": {
                            "row": 58,
                            "column": 79
                          },
                          "text": "ValueError(\"'batch_size' must be greater than or equal to 1\")",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 58,
                                "column": 18
                              },
                              "end": {
                                "row": 58,
                                "column": 28
                              },
                              "text": "ValueError"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 58,
                                "column": 28
                              },
                              "end": {
                                "row": 58,
                                "column": 79
                              },
                              "text": "(\"'batch_size' must be greater than or equal to 1\")",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 58,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 29
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 58,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 78
                                  },
                                  "text": "\"'batch_size' must be greater than or equal to 1\"",
                                  "children": [
                                    {
                                      "type": "string_start",
                                      "start": {
                                        "row": 58,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 58,
                                        "column": 30
                                      },
                                      "text": "\""
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 58,
                                        "column": 30
                                      },
                                      "end": {
                                        "row": 58,
                                        "column": 77
                                      },
                                      "text": "'batch_size' must be greater than or equal to 1"
                                    },
                                    {
                                      "type": "string_end",
                                      "start": {
                                        "row": 58,
                                        "column": 77
                                      },
                                      "end": {
                                        "row": 58,
                                        "column": 78
                                      },
                                      "text": "\""
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 58,
                                    "column": 78
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 79
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 60,
                "column": 8
              },
              "end": {
                "row": 60,
                "column": 50
              },
              "text": "dataset, _ = self._canonize_input(dataset)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 60,
                    "column": 8
                  },
                  "end": {
                    "row": 60,
                    "column": 50
                  },
                  "text": "dataset, _ = self._canonize_input(dataset)",
                  "children": [
                    {
                      "type": "pattern_list",
                      "start": {
                        "row": 60,
                        "column": 8
                      },
                      "end": {
                        "row": 60,
                        "column": 18
                      },
                      "text": "dataset, _",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 60,
                            "column": 8
                          },
                          "end": {
                            "row": 60,
                            "column": 15
                          },
                          "text": "dataset"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 60,
                            "column": 15
                          },
                          "end": {
                            "row": 60,
                            "column": 16
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 60,
                            "column": 17
                          },
                          "end": {
                            "row": 60,
                            "column": 18
                          },
                          "text": "_"
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 60,
                        "column": 19
                      },
                      "end": {
                        "row": 60,
                        "column": 20
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 60,
                        "column": 21
                      },
                      "end": {
                        "row": 60,
                        "column": 50
                      },
                      "text": "self._canonize_input(dataset)",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 60,
                            "column": 21
                          },
                          "end": {
                            "row": 60,
                            "column": 41
                          },
                          "text": "self._canonize_input",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 60,
                                "column": 21
                              },
                              "end": {
                                "row": 60,
                                "column": 25
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 60,
                                "column": 25
                              },
                              "end": {
                                "row": 60,
                                "column": 26
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 60,
                                "column": 26
                              },
                              "end": {
                                "row": 60,
                                "column": 41
                              },
                              "text": "_canonize_input"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 60,
                            "column": 41
                          },
                          "end": {
                            "row": 60,
                            "column": 50
                          },
                          "text": "(dataset)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 60,
                                "column": 41
                              },
                              "end": {
                                "row": 60,
                                "column": 42
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 60,
                                "column": 42
                              },
                              "end": {
                                "row": 60,
                                "column": 49
                              },
                              "text": "dataset"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 60,
                                "column": 49
                              },
                              "end": {
                                "row": 60,
                                "column": 50
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 62,
                "column": 8
              },
              "end": {
                "row": 62,
                "column": 60
              },
              "text": "extracted_features = self._extract_features(dataset)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 62,
                    "column": 8
                  },
                  "end": {
                    "row": 62,
                    "column": 60
                  },
                  "text": "extracted_features = self._extract_features(dataset)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 62,
                        "column": 8
                      },
                      "end": {
                        "row": 62,
                        "column": 26
                      },
                      "text": "extracted_features"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 62,
                        "column": 27
                      },
                      "end": {
                        "row": 62,
                        "column": 28
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 62,
                        "column": 29
                      },
                      "end": {
                        "row": 62,
                        "column": 60
                      },
                      "text": "self._extract_features(dataset)",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 62,
                            "column": 29
                          },
                          "end": {
                            "row": 62,
                            "column": 51
                          },
                          "text": "self._extract_features",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 62,
                                "column": 29
                              },
                              "end": {
                                "row": 62,
                                "column": 33
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 62,
                                "column": 33
                              },
                              "end": {
                                "row": 62,
                                "column": 34
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 62,
                                "column": 34
                              },
                              "end": {
                                "row": 62,
                                "column": 51
                              },
                              "text": "_extract_features"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 62,
                            "column": 51
                          },
                          "end": {
                            "row": 62,
                            "column": 60
                          },
                          "text": "(dataset)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 62,
                                "column": 51
                              },
                              "end": {
                                "row": 62,
                                "column": 52
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 62,
                                "column": 52
                              },
                              "end": {
                                "row": 62,
                                "column": 59
                              },
                              "text": "dataset"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 62,
                                "column": 59
                              },
                              "end": {
                                "row": 62,
                                "column": 60
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 63,
                "column": 8
              },
              "end": {
                "row": 63,
                "column": 97
              },
              "text": "return self.classifier.predict_topk(extracted_features, output_type = output_type, k = k)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 63,
                    "column": 8
                  },
                  "end": {
                    "row": 63,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 63,
                    "column": 15
                  },
                  "end": {
                    "row": 63,
                    "column": 97
                  },
                  "text": "self.classifier.predict_topk(extracted_features, output_type = output_type, k = k)",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 63,
                        "column": 15
                      },
                      "end": {
                        "row": 63,
                        "column": 43
                      },
                      "text": "self.classifier.predict_topk",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 63,
                            "column": 15
                          },
                          "end": {
                            "row": 63,
                            "column": 30
                          },
                          "text": "self.classifier",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 63,
                                "column": 15
                              },
                              "end": {
                                "row": 63,
                                "column": 19
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 63,
                                "column": 19
                              },
                              "end": {
                                "row": 63,
                                "column": 20
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 63,
                                "column": 20
                              },
                              "end": {
                                "row": 63,
                                "column": 30
                              },
                              "text": "classifier"
                            }
                          ]
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 63,
                            "column": 30
                          },
                          "end": {
                            "row": 63,
                            "column": 31
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 63,
                            "column": 31
                          },
                          "end": {
                            "row": 63,
                            "column": 43
                          },
                          "text": "predict_topk"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 63,
                        "column": 43
                      },
                      "end": {
                        "row": 63,
                        "column": 97
                      },
                      "text": "(extracted_features, output_type = output_type, k = k)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 63,
                            "column": 43
                          },
                          "end": {
                            "row": 63,
                            "column": 44
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 63,
                            "column": 44
                          },
                          "end": {
                            "row": 63,
                            "column": 62
                          },
                          "text": "extracted_features"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 63,
                            "column": 62
                          },
                          "end": {
                            "row": 63,
                            "column": 63
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 63,
                            "column": 64
                          },
                          "end": {
                            "row": 63,
                            "column": 89
                          },
                          "text": "output_type = output_type",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 63,
                                "column": 64
                              },
                              "end": {
                                "row": 63,
                                "column": 75
                              },
                              "text": "output_type"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 63,
                                "column": 76
                              },
                              "end": {
                                "row": 63,
                                "column": 77
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 63,
                                "column": 78
                              },
                              "end": {
                                "row": 63,
                                "column": 89
                              },
                              "text": "output_type"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 63,
                            "column": 89
                          },
                          "end": {
                            "row": 63,
                            "column": 90
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 63,
                            "column": 91
                          },
                          "end": {
                            "row": 63,
                            "column": 96
                          },
                          "text": "k = k",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 63,
                                "column": 91
                              },
                              "end": {
                                "row": 63,
                                "column": 92
                              },
                              "text": "k"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 63,
                                "column": 93
                              },
                              "end": {
                                "row": 63,
                                "column": 94
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 63,
                                "column": 95
                              },
                              "end": {
                                "row": 63,
                                "column": 96
                              },
                              "text": "k"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 63,
                            "column": 96
                          },
                          "end": {
                            "row": 63,
                            "column": 97
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}