{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 78,
    "column": 17
  },
  "text": "def _validate_compute_chunk_params(self,\n                                       graph,\n                                       dates,\n                                       sids,\n                                       initial_workspace):\n        \"\"\"\n        Verify that the values passed to compute_chunk are well-formed.\n        \"\"\"\n        root = self._root_mask_term\n        clsname = type(self).__name__\n\n        # Writing this out explicitly so this errors in testing if we change\n        # the name without updating this line.\n        compute_chunk_name = self.compute_chunk.__name__\n        if root not in initial_workspace:\n            raise AssertionError(\n                \"root_mask values not supplied to {cls}.{method}\".format(\n                    cls=clsname,\n                    method=compute_chunk_name,\n                )\n            )\n\n        shape = initial_workspace[root].shape\n        implied_shape = len(dates), len(sids)\n        if shape != implied_shape:\n            raise AssertionError(\n                \"root_mask shape is {shape}, but received dates/assets \"\n                \"imply that shape should be {implied}\".format(\n                    shape=shape,\n                    implied=implied_shape,\n                )\n            )\n\n        for term in initial_workspace:\n            if self._is_special_root_term(term):\n                continue\n\n            if term.domain is GENERIC:\n                # XXX: We really shouldn't allow **any** generic terms to be\n                # populated in the initial workspace. A generic term, by\n                # definition, can't correspond to concrete data until it's\n                # paired with a domain, and populate_initial_workspace isn't\n                # given the domain of execution, so it can't possibly know what\n                # data to use when populating a generic term.\n                #\n                # In our current implementation, however, we don't have a good\n                # way to represent specializations of ComputableTerms that take\n                # only generic inputs, so there's no good way for the initial\n                # workspace to provide data for such terms except by populating\n                # the generic ComputableTerm.\n                #\n                # The right fix for the above is to implement \"full\n                # specialization\", i.e., implementing ``specialize`` uniformly\n                # across all terms, not just LoadableTerms. Having full\n                # specialization will also remove the need for all of the\n                # remaining ``maybe_specialize`` calls floating around in this\n                # file.\n                #\n                # In the meantime, disallowing ComputableTerms in the initial\n                # workspace would break almost every test in\n                # `test_filter`/`test_factor`/`test_classifier`, and fixing\n                # them would require updating all those tests to compute with\n                # more specialized terms. Once we have full specialization, we\n                # can fix all the tests without a large volume of edits by\n                # simply specializing their workspaces, so for now I'm leaving\n                # this in place as a somewhat sharp edge.\n                if isinstance(term, LoadableTerm):\n                    raise ValueError(\n                        \"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)\n                    )\n\n            elif term.domain != graph.domain:\n                raise ValueError(\n                    \"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format(\n                        term, term.domain, graph.domain,\n                    )\n                )",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 78,
        "column": 17
      },
      "text": "def _validate_compute_chunk_params(self,\n                                       graph,\n                                       dates,\n                                       sids,\n                                       initial_workspace):\n        \"\"\"\n        Verify that the values passed to compute_chunk are well-formed.\n        \"\"\"\n        root = self._root_mask_term\n        clsname = type(self).__name__\n\n        # Writing this out explicitly so this errors in testing if we change\n        # the name without updating this line.\n        compute_chunk_name = self.compute_chunk.__name__\n        if root not in initial_workspace:\n            raise AssertionError(\n                \"root_mask values not supplied to {cls}.{method}\".format(\n                    cls=clsname,\n                    method=compute_chunk_name,\n                )\n            )\n\n        shape = initial_workspace[root].shape\n        implied_shape = len(dates), len(sids)\n        if shape != implied_shape:\n            raise AssertionError(\n                \"root_mask shape is {shape}, but received dates/assets \"\n                \"imply that shape should be {implied}\".format(\n                    shape=shape,\n                    implied=implied_shape,\n                )\n            )\n\n        for term in initial_workspace:\n            if self._is_special_root_term(term):\n                continue\n\n            if term.domain is GENERIC:\n                # XXX: We really shouldn't allow **any** generic terms to be\n                # populated in the initial workspace. A generic term, by\n                # definition, can't correspond to concrete data until it's\n                # paired with a domain, and populate_initial_workspace isn't\n                # given the domain of execution, so it can't possibly know what\n                # data to use when populating a generic term.\n                #\n                # In our current implementation, however, we don't have a good\n                # way to represent specializations of ComputableTerms that take\n                # only generic inputs, so there's no good way for the initial\n                # workspace to provide data for such terms except by populating\n                # the generic ComputableTerm.\n                #\n                # The right fix for the above is to implement \"full\n                # specialization\", i.e., implementing ``specialize`` uniformly\n                # across all terms, not just LoadableTerms. Having full\n                # specialization will also remove the need for all of the\n                # remaining ``maybe_specialize`` calls floating around in this\n                # file.\n                #\n                # In the meantime, disallowing ComputableTerms in the initial\n                # workspace would break almost every test in\n                # `test_filter`/`test_factor`/`test_classifier`, and fixing\n                # them would require updating all those tests to compute with\n                # more specialized terms. Once we have full specialization, we\n                # can fix all the tests without a large volume of edits by\n                # simply specializing their workspaces, so for now I'm leaving\n                # this in place as a somewhat sharp edge.\n                if isinstance(term, LoadableTerm):\n                    raise ValueError(\n                        \"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)\n                    )\n\n            elif term.domain != graph.domain:\n                raise ValueError(\n                    \"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format(\n                        term, term.domain, graph.domain,\n                    )\n                )",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 34
          },
          "text": "_validate_compute_chunk_params"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 34
          },
          "end": {
            "row": 4,
            "column": 57
          },
          "text": "(self,\n                                       graph,\n                                       dates,\n                                       sids,\n                                       initial_workspace)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 34
              },
              "end": {
                "row": 0,
                "column": 35
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 35
              },
              "end": {
                "row": 0,
                "column": 39
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 39
              },
              "end": {
                "row": 0,
                "column": 40
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 1,
                "column": 39
              },
              "end": {
                "row": 1,
                "column": 44
              },
              "text": "graph"
            },
            {
              "type": ",",
              "start": {
                "row": 1,
                "column": 44
              },
              "end": {
                "row": 1,
                "column": 45
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 2,
                "column": 39
              },
              "end": {
                "row": 2,
                "column": 44
              },
              "text": "dates"
            },
            {
              "type": ",",
              "start": {
                "row": 2,
                "column": 44
              },
              "end": {
                "row": 2,
                "column": 45
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 3,
                "column": 39
              },
              "end": {
                "row": 3,
                "column": 43
              },
              "text": "sids"
            },
            {
              "type": ",",
              "start": {
                "row": 3,
                "column": 43
              },
              "end": {
                "row": 3,
                "column": 44
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 4,
                "column": 39
              },
              "end": {
                "row": 4,
                "column": 56
              },
              "text": "initial_workspace"
            },
            {
              "type": ")",
              "start": {
                "row": 4,
                "column": 56
              },
              "end": {
                "row": 4,
                "column": 57
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 4,
            "column": 57
          },
          "end": {
            "row": 4,
            "column": 58
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 5,
            "column": 8
          },
          "end": {
            "row": 78,
            "column": 17
          },
          "text": "\"\"\"\n        Verify that the values passed to compute_chunk are well-formed.\n        \"\"\"\n        root = self._root_mask_term\n        clsname = type(self).__name__\n\n        # Writing this out explicitly so this errors in testing if we change\n        # the name without updating this line.\n        compute_chunk_name = self.compute_chunk.__name__\n        if root not in initial_workspace:\n            raise AssertionError(\n                \"root_mask values not supplied to {cls}.{method}\".format(\n                    cls=clsname,\n                    method=compute_chunk_name,\n                )\n            )\n\n        shape = initial_workspace[root].shape\n        implied_shape = len(dates), len(sids)\n        if shape != implied_shape:\n            raise AssertionError(\n                \"root_mask shape is {shape}, but received dates/assets \"\n                \"imply that shape should be {implied}\".format(\n                    shape=shape,\n                    implied=implied_shape,\n                )\n            )\n\n        for term in initial_workspace:\n            if self._is_special_root_term(term):\n                continue\n\n            if term.domain is GENERIC:\n                # XXX: We really shouldn't allow **any** generic terms to be\n                # populated in the initial workspace. A generic term, by\n                # definition, can't correspond to concrete data until it's\n                # paired with a domain, and populate_initial_workspace isn't\n                # given the domain of execution, so it can't possibly know what\n                # data to use when populating a generic term.\n                #\n                # In our current implementation, however, we don't have a good\n                # way to represent specializations of ComputableTerms that take\n                # only generic inputs, so there's no good way for the initial\n                # workspace to provide data for such terms except by populating\n                # the generic ComputableTerm.\n                #\n                # The right fix for the above is to implement \"full\n                # specialization\", i.e., implementing ``specialize`` uniformly\n                # across all terms, not just LoadableTerms. Having full\n                # specialization will also remove the need for all of the\n                # remaining ``maybe_specialize`` calls floating around in this\n                # file.\n                #\n                # In the meantime, disallowing ComputableTerms in the initial\n                # workspace would break almost every test in\n                # `test_filter`/`test_factor`/`test_classifier`, and fixing\n                # them would require updating all those tests to compute with\n                # more specialized terms. Once we have full specialization, we\n                # can fix all the tests without a large volume of edits by\n                # simply specializing their workspaces, so for now I'm leaving\n                # this in place as a somewhat sharp edge.\n                if isinstance(term, LoadableTerm):\n                    raise ValueError(\n                        \"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)\n                    )\n\n            elif term.domain != graph.domain:\n                raise ValueError(\n                    \"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format(\n                        term, term.domain, graph.domain,\n                    )\n                )",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 5,
                "column": 8
              },
              "end": {
                "row": 7,
                "column": 11
              },
              "text": "\"\"\"\n        Verify that the values passed to compute_chunk are well-formed.\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 5,
                    "column": 8
                  },
                  "end": {
                    "row": 7,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Verify that the values passed to compute_chunk are well-formed.\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 5,
                        "column": 8
                      },
                      "end": {
                        "row": 5,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 5,
                        "column": 11
                      },
                      "end": {
                        "row": 7,
                        "column": 8
                      },
                      "text": "\n        Verify that the values passed to compute_chunk are well-formed.\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 7,
                        "column": 8
                      },
                      "end": {
                        "row": 7,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 8,
                "column": 8
              },
              "end": {
                "row": 8,
                "column": 35
              },
              "text": "root = self._root_mask_term",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 8,
                    "column": 8
                  },
                  "end": {
                    "row": 8,
                    "column": 35
                  },
                  "text": "root = self._root_mask_term",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 8,
                        "column": 8
                      },
                      "end": {
                        "row": 8,
                        "column": 12
                      },
                      "text": "root"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 8,
                        "column": 13
                      },
                      "end": {
                        "row": 8,
                        "column": 14
                      },
                      "text": "="
                    },
                    {
                      "type": "attribute",
                      "start": {
                        "row": 8,
                        "column": 15
                      },
                      "end": {
                        "row": 8,
                        "column": 35
                      },
                      "text": "self._root_mask_term",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 8,
                            "column": 15
                          },
                          "end": {
                            "row": 8,
                            "column": 19
                          },
                          "text": "self"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 8,
                            "column": 19
                          },
                          "end": {
                            "row": 8,
                            "column": 20
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 8,
                            "column": 20
                          },
                          "end": {
                            "row": 8,
                            "column": 35
                          },
                          "text": "_root_mask_term"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 9,
                "column": 8
              },
              "end": {
                "row": 9,
                "column": 37
              },
              "text": "clsname = type(self).__name__",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 9,
                    "column": 8
                  },
                  "end": {
                    "row": 9,
                    "column": 37
                  },
                  "text": "clsname = type(self).__name__",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 9,
                        "column": 8
                      },
                      "end": {
                        "row": 9,
                        "column": 15
                      },
                      "text": "clsname"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 9,
                        "column": 16
                      },
                      "end": {
                        "row": 9,
                        "column": 17
                      },
                      "text": "="
                    },
                    {
                      "type": "attribute",
                      "start": {
                        "row": 9,
                        "column": 18
                      },
                      "end": {
                        "row": 9,
                        "column": 37
                      },
                      "text": "type(self).__name__",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 9,
                            "column": 18
                          },
                          "end": {
                            "row": 9,
                            "column": 28
                          },
                          "text": "type(self)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 9,
                                "column": 18
                              },
                              "end": {
                                "row": 9,
                                "column": 22
                              },
                              "text": "type"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 9,
                                "column": 22
                              },
                              "end": {
                                "row": 9,
                                "column": 28
                              },
                              "text": "(self)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 9,
                                    "column": 22
                                  },
                                  "end": {
                                    "row": 9,
                                    "column": 23
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 9,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 9,
                                    "column": 27
                                  },
                                  "text": "self"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 9,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 9,
                                    "column": 28
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 9,
                            "column": 28
                          },
                          "end": {
                            "row": 9,
                            "column": 29
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 9,
                            "column": 29
                          },
                          "end": {
                            "row": 9,
                            "column": 37
                          },
                          "text": "__name__"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 11,
                "column": 8
              },
              "end": {
                "row": 11,
                "column": 76
              },
              "text": "# Writing this out explicitly so this errors in testing if we change"
            },
            {
              "type": "comment",
              "start": {
                "row": 12,
                "column": 8
              },
              "end": {
                "row": 12,
                "column": 46
              },
              "text": "# the name without updating this line."
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 13,
                "column": 8
              },
              "end": {
                "row": 13,
                "column": 56
              },
              "text": "compute_chunk_name = self.compute_chunk.__name__",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 13,
                    "column": 8
                  },
                  "end": {
                    "row": 13,
                    "column": 56
                  },
                  "text": "compute_chunk_name = self.compute_chunk.__name__",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 13,
                        "column": 8
                      },
                      "end": {
                        "row": 13,
                        "column": 26
                      },
                      "text": "compute_chunk_name"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 13,
                        "column": 27
                      },
                      "end": {
                        "row": 13,
                        "column": 28
                      },
                      "text": "="
                    },
                    {
                      "type": "attribute",
                      "start": {
                        "row": 13,
                        "column": 29
                      },
                      "end": {
                        "row": 13,
                        "column": 56
                      },
                      "text": "self.compute_chunk.__name__",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 13,
                            "column": 29
                          },
                          "end": {
                            "row": 13,
                            "column": 47
                          },
                          "text": "self.compute_chunk",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 13,
                                "column": 29
                              },
                              "end": {
                                "row": 13,
                                "column": 33
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 13,
                                "column": 33
                              },
                              "end": {
                                "row": 13,
                                "column": 34
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 13,
                                "column": 34
                              },
                              "end": {
                                "row": 13,
                                "column": 47
                              },
                              "text": "compute_chunk"
                            }
                          ]
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 13,
                            "column": 47
                          },
                          "end": {
                            "row": 13,
                            "column": 48
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 13,
                            "column": 48
                          },
                          "end": {
                            "row": 13,
                            "column": 56
                          },
                          "text": "__name__"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 14,
                "column": 8
              },
              "end": {
                "row": 20,
                "column": 13
              },
              "text": "if root not in initial_workspace:\n            raise AssertionError(\n                \"root_mask values not supplied to {cls}.{method}\".format(\n                    cls=clsname,\n                    method=compute_chunk_name,\n                )\n            )",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 14,
                    "column": 8
                  },
                  "end": {
                    "row": 14,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "comparison_operator",
                  "start": {
                    "row": 14,
                    "column": 11
                  },
                  "end": {
                    "row": 14,
                    "column": 40
                  },
                  "text": "root not in initial_workspace",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 14,
                        "column": 11
                      },
                      "end": {
                        "row": 14,
                        "column": 15
                      },
                      "text": "root"
                    },
                    {
                      "type": "not in",
                      "start": {
                        "row": 14,
                        "column": 16
                      },
                      "end": {
                        "row": 14,
                        "column": 19
                      },
                      "text": "not"
                    },
                    {
                      "type": "not in",
                      "start": {
                        "row": 14,
                        "column": 20
                      },
                      "end": {
                        "row": 14,
                        "column": 22
                      },
                      "text": "in"
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 14,
                        "column": 23
                      },
                      "end": {
                        "row": 14,
                        "column": 40
                      },
                      "text": "initial_workspace"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 14,
                    "column": 40
                  },
                  "end": {
                    "row": 14,
                    "column": 41
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 15,
                    "column": 12
                  },
                  "end": {
                    "row": 20,
                    "column": 13
                  },
                  "text": "raise AssertionError(\n                \"root_mask values not supplied to {cls}.{method}\".format(\n                    cls=clsname,\n                    method=compute_chunk_name,\n                )\n            )",
                  "children": [
                    {
                      "type": "raise_statement",
                      "start": {
                        "row": 15,
                        "column": 12
                      },
                      "end": {
                        "row": 20,
                        "column": 13
                      },
                      "text": "raise AssertionError(\n                \"root_mask values not supplied to {cls}.{method}\".format(\n                    cls=clsname,\n                    method=compute_chunk_name,\n                )\n            )",
                      "children": [
                        {
                          "type": "raise",
                          "start": {
                            "row": 15,
                            "column": 12
                          },
                          "end": {
                            "row": 15,
                            "column": 17
                          },
                          "text": "raise"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 15,
                            "column": 18
                          },
                          "end": {
                            "row": 20,
                            "column": 13
                          },
                          "text": "AssertionError(\n                \"root_mask values not supplied to {cls}.{method}\".format(\n                    cls=clsname,\n                    method=compute_chunk_name,\n                )\n            )",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 15,
                                "column": 18
                              },
                              "end": {
                                "row": 15,
                                "column": 32
                              },
                              "text": "AssertionError"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 15,
                                "column": 32
                              },
                              "end": {
                                "row": 20,
                                "column": 13
                              },
                              "text": "(\n                \"root_mask values not supplied to {cls}.{method}\".format(\n                    cls=clsname,\n                    method=compute_chunk_name,\n                )\n            )",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 15,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 15,
                                    "column": 33
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 16,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 19,
                                    "column": 17
                                  },
                                  "text": "\"root_mask values not supplied to {cls}.{method}\".format(\n                    cls=clsname,\n                    method=compute_chunk_name,\n                )",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 16,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 16,
                                        "column": 72
                                      },
                                      "text": "\"root_mask values not supplied to {cls}.{method}\".format",
                                      "children": [
                                        {
                                          "type": "string",
                                          "start": {
                                            "row": 16,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 16,
                                            "column": 65
                                          },
                                          "text": "\"root_mask values not supplied to {cls}.{method}\"",
                                          "children": [
                                            {
                                              "type": "string_start",
                                              "start": {
                                                "row": 16,
                                                "column": 16
                                              },
                                              "end": {
                                                "row": 16,
                                                "column": 17
                                              },
                                              "text": "\""
                                            },
                                            {
                                              "type": "string_content",
                                              "start": {
                                                "row": 16,
                                                "column": 17
                                              },
                                              "end": {
                                                "row": 16,
                                                "column": 64
                                              },
                                              "text": "root_mask values not supplied to {cls}.{method}"
                                            },
                                            {
                                              "type": "string_end",
                                              "start": {
                                                "row": 16,
                                                "column": 64
                                              },
                                              "end": {
                                                "row": 16,
                                                "column": 65
                                              },
                                              "text": "\""
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 16,
                                            "column": 65
                                          },
                                          "end": {
                                            "row": 16,
                                            "column": 66
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 16,
                                            "column": 66
                                          },
                                          "end": {
                                            "row": 16,
                                            "column": 72
                                          },
                                          "text": "format"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 16,
                                        "column": 72
                                      },
                                      "end": {
                                        "row": 19,
                                        "column": 17
                                      },
                                      "text": "(\n                    cls=clsname,\n                    method=compute_chunk_name,\n                )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 16,
                                            "column": 72
                                          },
                                          "end": {
                                            "row": 16,
                                            "column": 73
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "start": {
                                            "row": 17,
                                            "column": 20
                                          },
                                          "end": {
                                            "row": 17,
                                            "column": 31
                                          },
                                          "text": "cls=clsname",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 17,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 17,
                                                "column": 23
                                              },
                                              "text": "cls"
                                            },
                                            {
                                              "type": "=",
                                              "start": {
                                                "row": 17,
                                                "column": 23
                                              },
                                              "end": {
                                                "row": 17,
                                                "column": 24
                                              },
                                              "text": "="
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 17,
                                                "column": 24
                                              },
                                              "end": {
                                                "row": 17,
                                                "column": 31
                                              },
                                              "text": "clsname"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 17,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 17,
                                            "column": 32
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "start": {
                                            "row": 18,
                                            "column": 20
                                          },
                                          "end": {
                                            "row": 18,
                                            "column": 45
                                          },
                                          "text": "method=compute_chunk_name",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 18,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 18,
                                                "column": 26
                                              },
                                              "text": "method"
                                            },
                                            {
                                              "type": "=",
                                              "start": {
                                                "row": 18,
                                                "column": 26
                                              },
                                              "end": {
                                                "row": 18,
                                                "column": 27
                                              },
                                              "text": "="
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 18,
                                                "column": 27
                                              },
                                              "end": {
                                                "row": 18,
                                                "column": 45
                                              },
                                              "text": "compute_chunk_name"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 18,
                                            "column": 45
                                          },
                                          "end": {
                                            "row": 18,
                                            "column": 46
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 19,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 19,
                                            "column": 17
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 20,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 20,
                                    "column": 13
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 22,
                "column": 8
              },
              "end": {
                "row": 22,
                "column": 45
              },
              "text": "shape = initial_workspace[root].shape",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 22,
                    "column": 8
                  },
                  "end": {
                    "row": 22,
                    "column": 45
                  },
                  "text": "shape = initial_workspace[root].shape",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 22,
                        "column": 8
                      },
                      "end": {
                        "row": 22,
                        "column": 13
                      },
                      "text": "shape"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 22,
                        "column": 14
                      },
                      "end": {
                        "row": 22,
                        "column": 15
                      },
                      "text": "="
                    },
                    {
                      "type": "attribute",
                      "start": {
                        "row": 22,
                        "column": 16
                      },
                      "end": {
                        "row": 22,
                        "column": 45
                      },
                      "text": "initial_workspace[root].shape",
                      "children": [
                        {
                          "type": "subscript",
                          "start": {
                            "row": 22,
                            "column": 16
                          },
                          "end": {
                            "row": 22,
                            "column": 39
                          },
                          "text": "initial_workspace[root]",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 22,
                                "column": 16
                              },
                              "end": {
                                "row": 22,
                                "column": 33
                              },
                              "text": "initial_workspace"
                            },
                            {
                              "type": "[",
                              "start": {
                                "row": 22,
                                "column": 33
                              },
                              "end": {
                                "row": 22,
                                "column": 34
                              },
                              "text": "["
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 22,
                                "column": 34
                              },
                              "end": {
                                "row": 22,
                                "column": 38
                              },
                              "text": "root"
                            },
                            {
                              "type": "]",
                              "start": {
                                "row": 22,
                                "column": 38
                              },
                              "end": {
                                "row": 22,
                                "column": 39
                              },
                              "text": "]"
                            }
                          ]
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 22,
                            "column": 39
                          },
                          "end": {
                            "row": 22,
                            "column": 40
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 22,
                            "column": 40
                          },
                          "end": {
                            "row": 22,
                            "column": 45
                          },
                          "text": "shape"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 23,
                "column": 8
              },
              "end": {
                "row": 23,
                "column": 45
              },
              "text": "implied_shape = len(dates), len(sids)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 23,
                    "column": 8
                  },
                  "end": {
                    "row": 23,
                    "column": 45
                  },
                  "text": "implied_shape = len(dates), len(sids)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 23,
                        "column": 8
                      },
                      "end": {
                        "row": 23,
                        "column": 21
                      },
                      "text": "implied_shape"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 23,
                        "column": 22
                      },
                      "end": {
                        "row": 23,
                        "column": 23
                      },
                      "text": "="
                    },
                    {
                      "type": "expression_list",
                      "start": {
                        "row": 23,
                        "column": 24
                      },
                      "end": {
                        "row": 23,
                        "column": 45
                      },
                      "text": "len(dates), len(sids)",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 23,
                            "column": 24
                          },
                          "end": {
                            "row": 23,
                            "column": 34
                          },
                          "text": "len(dates)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 24
                              },
                              "end": {
                                "row": 23,
                                "column": 27
                              },
                              "text": "len"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 23,
                                "column": 27
                              },
                              "end": {
                                "row": 23,
                                "column": 34
                              },
                              "text": "(dates)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 23,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 28
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 23,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 33
                                  },
                                  "text": "dates"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 23,
                                    "column": 33
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 34
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 23,
                            "column": 34
                          },
                          "end": {
                            "row": 23,
                            "column": 35
                          },
                          "text": ","
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 23,
                            "column": 36
                          },
                          "end": {
                            "row": 23,
                            "column": 45
                          },
                          "text": "len(sids)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 36
                              },
                              "end": {
                                "row": 23,
                                "column": 39
                              },
                              "text": "len"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 23,
                                "column": 39
                              },
                              "end": {
                                "row": 23,
                                "column": 45
                              },
                              "text": "(sids)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 23,
                                    "column": 39
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 40
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 23,
                                    "column": 40
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 44
                                  },
                                  "text": "sids"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 23,
                                    "column": 44
                                  },
                                  "end": {
                                    "row": 23,
                                    "column": 45
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 24,
                "column": 8
              },
              "end": {
                "row": 31,
                "column": 13
              },
              "text": "if shape != implied_shape:\n            raise AssertionError(\n                \"root_mask shape is {shape}, but received dates/assets \"\n                \"imply that shape should be {implied}\".format(\n                    shape=shape,\n                    implied=implied_shape,\n                )\n            )",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 24,
                    "column": 8
                  },
                  "end": {
                    "row": 24,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "comparison_operator",
                  "start": {
                    "row": 24,
                    "column": 11
                  },
                  "end": {
                    "row": 24,
                    "column": 33
                  },
                  "text": "shape != implied_shape",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 24,
                        "column": 11
                      },
                      "end": {
                        "row": 24,
                        "column": 16
                      },
                      "text": "shape"
                    },
                    {
                      "type": "!=",
                      "start": {
                        "row": 24,
                        "column": 17
                      },
                      "end": {
                        "row": 24,
                        "column": 19
                      },
                      "text": "!="
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 24,
                        "column": 20
                      },
                      "end": {
                        "row": 24,
                        "column": 33
                      },
                      "text": "implied_shape"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 24,
                    "column": 33
                  },
                  "end": {
                    "row": 24,
                    "column": 34
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 25,
                    "column": 12
                  },
                  "end": {
                    "row": 31,
                    "column": 13
                  },
                  "text": "raise AssertionError(\n                \"root_mask shape is {shape}, but received dates/assets \"\n                \"imply that shape should be {implied}\".format(\n                    shape=shape,\n                    implied=implied_shape,\n                )\n            )",
                  "children": [
                    {
                      "type": "raise_statement",
                      "start": {
                        "row": 25,
                        "column": 12
                      },
                      "end": {
                        "row": 31,
                        "column": 13
                      },
                      "text": "raise AssertionError(\n                \"root_mask shape is {shape}, but received dates/assets \"\n                \"imply that shape should be {implied}\".format(\n                    shape=shape,\n                    implied=implied_shape,\n                )\n            )",
                      "children": [
                        {
                          "type": "raise",
                          "start": {
                            "row": 25,
                            "column": 12
                          },
                          "end": {
                            "row": 25,
                            "column": 17
                          },
                          "text": "raise"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 25,
                            "column": 18
                          },
                          "end": {
                            "row": 31,
                            "column": 13
                          },
                          "text": "AssertionError(\n                \"root_mask shape is {shape}, but received dates/assets \"\n                \"imply that shape should be {implied}\".format(\n                    shape=shape,\n                    implied=implied_shape,\n                )\n            )",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 25,
                                "column": 18
                              },
                              "end": {
                                "row": 25,
                                "column": 32
                              },
                              "text": "AssertionError"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 25,
                                "column": 32
                              },
                              "end": {
                                "row": 31,
                                "column": 13
                              },
                              "text": "(\n                \"root_mask shape is {shape}, but received dates/assets \"\n                \"imply that shape should be {implied}\".format(\n                    shape=shape,\n                    implied=implied_shape,\n                )\n            )",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 25,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 33
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 26,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 30,
                                    "column": 17
                                  },
                                  "text": "\"root_mask shape is {shape}, but received dates/assets \"\n                \"imply that shape should be {implied}\".format(\n                    shape=shape,\n                    implied=implied_shape,\n                )",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 26,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 27,
                                        "column": 61
                                      },
                                      "text": "\"root_mask shape is {shape}, but received dates/assets \"\n                \"imply that shape should be {implied}\".format",
                                      "children": [
                                        {
                                          "type": "concatenated_string",
                                          "start": {
                                            "row": 26,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 27,
                                            "column": 54
                                          },
                                          "text": "\"root_mask shape is {shape}, but received dates/assets \"\n                \"imply that shape should be {implied}\"",
                                          "children": [
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 26,
                                                "column": 16
                                              },
                                              "end": {
                                                "row": 26,
                                                "column": 72
                                              },
                                              "text": "\"root_mask shape is {shape}, but received dates/assets \"",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 26,
                                                    "column": 16
                                                  },
                                                  "end": {
                                                    "row": 26,
                                                    "column": 17
                                                  },
                                                  "text": "\""
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 26,
                                                    "column": 17
                                                  },
                                                  "end": {
                                                    "row": 26,
                                                    "column": 71
                                                  },
                                                  "text": "root_mask shape is {shape}, but received dates/assets "
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 26,
                                                    "column": 71
                                                  },
                                                  "end": {
                                                    "row": 26,
                                                    "column": 72
                                                  },
                                                  "text": "\""
                                                }
                                              ]
                                            },
                                            {
                                              "type": "string",
                                              "start": {
                                                "row": 27,
                                                "column": 16
                                              },
                                              "end": {
                                                "row": 27,
                                                "column": 54
                                              },
                                              "text": "\"imply that shape should be {implied}\"",
                                              "children": [
                                                {
                                                  "type": "string_start",
                                                  "start": {
                                                    "row": 27,
                                                    "column": 16
                                                  },
                                                  "end": {
                                                    "row": 27,
                                                    "column": 17
                                                  },
                                                  "text": "\""
                                                },
                                                {
                                                  "type": "string_content",
                                                  "start": {
                                                    "row": 27,
                                                    "column": 17
                                                  },
                                                  "end": {
                                                    "row": 27,
                                                    "column": 53
                                                  },
                                                  "text": "imply that shape should be {implied}"
                                                },
                                                {
                                                  "type": "string_end",
                                                  "start": {
                                                    "row": 27,
                                                    "column": 53
                                                  },
                                                  "end": {
                                                    "row": 27,
                                                    "column": 54
                                                  },
                                                  "text": "\""
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 27,
                                            "column": 54
                                          },
                                          "end": {
                                            "row": 27,
                                            "column": 55
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 27,
                                            "column": 55
                                          },
                                          "end": {
                                            "row": 27,
                                            "column": 61
                                          },
                                          "text": "format"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 27,
                                        "column": 61
                                      },
                                      "end": {
                                        "row": 30,
                                        "column": 17
                                      },
                                      "text": "(\n                    shape=shape,\n                    implied=implied_shape,\n                )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 27,
                                            "column": 61
                                          },
                                          "end": {
                                            "row": 27,
                                            "column": 62
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "start": {
                                            "row": 28,
                                            "column": 20
                                          },
                                          "end": {
                                            "row": 28,
                                            "column": 31
                                          },
                                          "text": "shape=shape",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 28,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 28,
                                                "column": 25
                                              },
                                              "text": "shape"
                                            },
                                            {
                                              "type": "=",
                                              "start": {
                                                "row": 28,
                                                "column": 25
                                              },
                                              "end": {
                                                "row": 28,
                                                "column": 26
                                              },
                                              "text": "="
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 28,
                                                "column": 26
                                              },
                                              "end": {
                                                "row": 28,
                                                "column": 31
                                              },
                                              "text": "shape"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 28,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 28,
                                            "column": 32
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": "keyword_argument",
                                          "start": {
                                            "row": 29,
                                            "column": 20
                                          },
                                          "end": {
                                            "row": 29,
                                            "column": 41
                                          },
                                          "text": "implied=implied_shape",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 29,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 29,
                                                "column": 27
                                              },
                                              "text": "implied"
                                            },
                                            {
                                              "type": "=",
                                              "start": {
                                                "row": 29,
                                                "column": 27
                                              },
                                              "end": {
                                                "row": 29,
                                                "column": 28
                                              },
                                              "text": "="
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 29,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 29,
                                                "column": 41
                                              },
                                              "text": "implied_shape"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 29,
                                            "column": 41
                                          },
                                          "end": {
                                            "row": 29,
                                            "column": 42
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 30,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 30,
                                            "column": 17
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 31,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 13
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "for_statement",
              "start": {
                "row": 33,
                "column": 8
              },
              "end": {
                "row": 78,
                "column": 17
              },
              "text": "for term in initial_workspace:\n            if self._is_special_root_term(term):\n                continue\n\n            if term.domain is GENERIC:\n                # XXX: We really shouldn't allow **any** generic terms to be\n                # populated in the initial workspace. A generic term, by\n                # definition, can't correspond to concrete data until it's\n                # paired with a domain, and populate_initial_workspace isn't\n                # given the domain of execution, so it can't possibly know what\n                # data to use when populating a generic term.\n                #\n                # In our current implementation, however, we don't have a good\n                # way to represent specializations of ComputableTerms that take\n                # only generic inputs, so there's no good way for the initial\n                # workspace to provide data for such terms except by populating\n                # the generic ComputableTerm.\n                #\n                # The right fix for the above is to implement \"full\n                # specialization\", i.e., implementing ``specialize`` uniformly\n                # across all terms, not just LoadableTerms. Having full\n                # specialization will also remove the need for all of the\n                # remaining ``maybe_specialize`` calls floating around in this\n                # file.\n                #\n                # In the meantime, disallowing ComputableTerms in the initial\n                # workspace would break almost every test in\n                # `test_filter`/`test_factor`/`test_classifier`, and fixing\n                # them would require updating all those tests to compute with\n                # more specialized terms. Once we have full specialization, we\n                # can fix all the tests without a large volume of edits by\n                # simply specializing their workspaces, so for now I'm leaving\n                # this in place as a somewhat sharp edge.\n                if isinstance(term, LoadableTerm):\n                    raise ValueError(\n                        \"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)\n                    )\n\n            elif term.domain != graph.domain:\n                raise ValueError(\n                    \"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format(\n                        term, term.domain, graph.domain,\n                    )\n                )",
              "children": [
                {
                  "type": "for",
                  "start": {
                    "row": 33,
                    "column": 8
                  },
                  "end": {
                    "row": 33,
                    "column": 11
                  },
                  "text": "for"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 33,
                    "column": 12
                  },
                  "end": {
                    "row": 33,
                    "column": 16
                  },
                  "text": "term"
                },
                {
                  "type": "in",
                  "start": {
                    "row": 33,
                    "column": 17
                  },
                  "end": {
                    "row": 33,
                    "column": 19
                  },
                  "text": "in"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 33,
                    "column": 20
                  },
                  "end": {
                    "row": 33,
                    "column": 37
                  },
                  "text": "initial_workspace"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 33,
                    "column": 37
                  },
                  "end": {
                    "row": 33,
                    "column": 38
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 34,
                    "column": 12
                  },
                  "end": {
                    "row": 78,
                    "column": 17
                  },
                  "text": "if self._is_special_root_term(term):\n                continue\n\n            if term.domain is GENERIC:\n                # XXX: We really shouldn't allow **any** generic terms to be\n                # populated in the initial workspace. A generic term, by\n                # definition, can't correspond to concrete data until it's\n                # paired with a domain, and populate_initial_workspace isn't\n                # given the domain of execution, so it can't possibly know what\n                # data to use when populating a generic term.\n                #\n                # In our current implementation, however, we don't have a good\n                # way to represent specializations of ComputableTerms that take\n                # only generic inputs, so there's no good way for the initial\n                # workspace to provide data for such terms except by populating\n                # the generic ComputableTerm.\n                #\n                # The right fix for the above is to implement \"full\n                # specialization\", i.e., implementing ``specialize`` uniformly\n                # across all terms, not just LoadableTerms. Having full\n                # specialization will also remove the need for all of the\n                # remaining ``maybe_specialize`` calls floating around in this\n                # file.\n                #\n                # In the meantime, disallowing ComputableTerms in the initial\n                # workspace would break almost every test in\n                # `test_filter`/`test_factor`/`test_classifier`, and fixing\n                # them would require updating all those tests to compute with\n                # more specialized terms. Once we have full specialization, we\n                # can fix all the tests without a large volume of edits by\n                # simply specializing their workspaces, so for now I'm leaving\n                # this in place as a somewhat sharp edge.\n                if isinstance(term, LoadableTerm):\n                    raise ValueError(\n                        \"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)\n                    )\n\n            elif term.domain != graph.domain:\n                raise ValueError(\n                    \"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format(\n                        term, term.domain, graph.domain,\n                    )\n                )",
                  "children": [
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 34,
                        "column": 12
                      },
                      "end": {
                        "row": 35,
                        "column": 24
                      },
                      "text": "if self._is_special_root_term(term):\n                continue",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 34,
                            "column": 12
                          },
                          "end": {
                            "row": 34,
                            "column": 14
                          },
                          "text": "if"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 34,
                            "column": 15
                          },
                          "end": {
                            "row": 34,
                            "column": 47
                          },
                          "text": "self._is_special_root_term(term)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 34,
                                "column": 15
                              },
                              "end": {
                                "row": 34,
                                "column": 41
                              },
                              "text": "self._is_special_root_term",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 34,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 34,
                                    "column": 19
                                  },
                                  "text": "self"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 34,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 34,
                                    "column": 20
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 34,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 34,
                                    "column": 41
                                  },
                                  "text": "_is_special_root_term"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 34,
                                "column": 41
                              },
                              "end": {
                                "row": 34,
                                "column": 47
                              },
                              "text": "(term)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 34,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 34,
                                    "column": 42
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 34,
                                    "column": 42
                                  },
                                  "end": {
                                    "row": 34,
                                    "column": 46
                                  },
                                  "text": "term"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 34,
                                    "column": 46
                                  },
                                  "end": {
                                    "row": 34,
                                    "column": 47
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 34,
                            "column": 47
                          },
                          "end": {
                            "row": 34,
                            "column": 48
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 35,
                            "column": 16
                          },
                          "end": {
                            "row": 35,
                            "column": 24
                          },
                          "text": "continue",
                          "children": [
                            {
                              "type": "continue_statement",
                              "start": {
                                "row": 35,
                                "column": 16
                              },
                              "end": {
                                "row": 35,
                                "column": 24
                              },
                              "text": "continue",
                              "children": [
                                {
                                  "type": "continue",
                                  "start": {
                                    "row": 35,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 35,
                                    "column": 24
                                  },
                                  "text": "continue"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 37,
                        "column": 12
                      },
                      "end": {
                        "row": 78,
                        "column": 17
                      },
                      "text": "if term.domain is GENERIC:\n                # XXX: We really shouldn't allow **any** generic terms to be\n                # populated in the initial workspace. A generic term, by\n                # definition, can't correspond to concrete data until it's\n                # paired with a domain, and populate_initial_workspace isn't\n                # given the domain of execution, so it can't possibly know what\n                # data to use when populating a generic term.\n                #\n                # In our current implementation, however, we don't have a good\n                # way to represent specializations of ComputableTerms that take\n                # only generic inputs, so there's no good way for the initial\n                # workspace to provide data for such terms except by populating\n                # the generic ComputableTerm.\n                #\n                # The right fix for the above is to implement \"full\n                # specialization\", i.e., implementing ``specialize`` uniformly\n                # across all terms, not just LoadableTerms. Having full\n                # specialization will also remove the need for all of the\n                # remaining ``maybe_specialize`` calls floating around in this\n                # file.\n                #\n                # In the meantime, disallowing ComputableTerms in the initial\n                # workspace would break almost every test in\n                # `test_filter`/`test_factor`/`test_classifier`, and fixing\n                # them would require updating all those tests to compute with\n                # more specialized terms. Once we have full specialization, we\n                # can fix all the tests without a large volume of edits by\n                # simply specializing their workspaces, so for now I'm leaving\n                # this in place as a somewhat sharp edge.\n                if isinstance(term, LoadableTerm):\n                    raise ValueError(\n                        \"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)\n                    )\n\n            elif term.domain != graph.domain:\n                raise ValueError(\n                    \"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format(\n                        term, term.domain, graph.domain,\n                    )\n                )",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 37,
                            "column": 12
                          },
                          "end": {
                            "row": 37,
                            "column": 14
                          },
                          "text": "if"
                        },
                        {
                          "type": "comparison_operator",
                          "start": {
                            "row": 37,
                            "column": 15
                          },
                          "end": {
                            "row": 37,
                            "column": 37
                          },
                          "text": "term.domain is GENERIC",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 37,
                                "column": 15
                              },
                              "end": {
                                "row": 37,
                                "column": 26
                              },
                              "text": "term.domain",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 37,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 19
                                  },
                                  "text": "term"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 37,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 20
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 37,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 26
                                  },
                                  "text": "domain"
                                }
                              ]
                            },
                            {
                              "type": "is",
                              "start": {
                                "row": 37,
                                "column": 27
                              },
                              "end": {
                                "row": 37,
                                "column": 29
                              },
                              "text": "is"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 37,
                                "column": 30
                              },
                              "end": {
                                "row": 37,
                                "column": 37
                              },
                              "text": "GENERIC"
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 37,
                            "column": 37
                          },
                          "end": {
                            "row": 37,
                            "column": 38
                          },
                          "text": ":"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 38,
                            "column": 16
                          },
                          "end": {
                            "row": 38,
                            "column": 76
                          },
                          "text": "# XXX: We really shouldn't allow **any** generic terms to be"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 39,
                            "column": 16
                          },
                          "end": {
                            "row": 39,
                            "column": 72
                          },
                          "text": "# populated in the initial workspace. A generic term, by"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 40,
                            "column": 16
                          },
                          "end": {
                            "row": 40,
                            "column": 74
                          },
                          "text": "# definition, can't correspond to concrete data until it's"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 41,
                            "column": 16
                          },
                          "end": {
                            "row": 41,
                            "column": 76
                          },
                          "text": "# paired with a domain, and populate_initial_workspace isn't"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 42,
                            "column": 16
                          },
                          "end": {
                            "row": 42,
                            "column": 79
                          },
                          "text": "# given the domain of execution, so it can't possibly know what"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 43,
                            "column": 16
                          },
                          "end": {
                            "row": 43,
                            "column": 61
                          },
                          "text": "# data to use when populating a generic term."
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 44,
                            "column": 16
                          },
                          "end": {
                            "row": 44,
                            "column": 17
                          },
                          "text": "#"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 45,
                            "column": 16
                          },
                          "end": {
                            "row": 45,
                            "column": 78
                          },
                          "text": "# In our current implementation, however, we don't have a good"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 46,
                            "column": 16
                          },
                          "end": {
                            "row": 46,
                            "column": 79
                          },
                          "text": "# way to represent specializations of ComputableTerms that take"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 47,
                            "column": 16
                          },
                          "end": {
                            "row": 47,
                            "column": 77
                          },
                          "text": "# only generic inputs, so there's no good way for the initial"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 48,
                            "column": 16
                          },
                          "end": {
                            "row": 48,
                            "column": 79
                          },
                          "text": "# workspace to provide data for such terms except by populating"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 49,
                            "column": 16
                          },
                          "end": {
                            "row": 49,
                            "column": 45
                          },
                          "text": "# the generic ComputableTerm."
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 50,
                            "column": 16
                          },
                          "end": {
                            "row": 50,
                            "column": 17
                          },
                          "text": "#"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 51,
                            "column": 16
                          },
                          "end": {
                            "row": 51,
                            "column": 67
                          },
                          "text": "# The right fix for the above is to implement \"full"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 52,
                            "column": 16
                          },
                          "end": {
                            "row": 52,
                            "column": 78
                          },
                          "text": "# specialization\", i.e., implementing ``specialize`` uniformly"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 53,
                            "column": 16
                          },
                          "end": {
                            "row": 53,
                            "column": 71
                          },
                          "text": "# across all terms, not just LoadableTerms. Having full"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 54,
                            "column": 16
                          },
                          "end": {
                            "row": 54,
                            "column": 73
                          },
                          "text": "# specialization will also remove the need for all of the"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 55,
                            "column": 16
                          },
                          "end": {
                            "row": 55,
                            "column": 78
                          },
                          "text": "# remaining ``maybe_specialize`` calls floating around in this"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 56,
                            "column": 16
                          },
                          "end": {
                            "row": 56,
                            "column": 23
                          },
                          "text": "# file."
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 57,
                            "column": 16
                          },
                          "end": {
                            "row": 57,
                            "column": 17
                          },
                          "text": "#"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 58,
                            "column": 16
                          },
                          "end": {
                            "row": 58,
                            "column": 77
                          },
                          "text": "# In the meantime, disallowing ComputableTerms in the initial"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 59,
                            "column": 16
                          },
                          "end": {
                            "row": 59,
                            "column": 60
                          },
                          "text": "# workspace would break almost every test in"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 60,
                            "column": 16
                          },
                          "end": {
                            "row": 60,
                            "column": 75
                          },
                          "text": "# `test_filter`/`test_factor`/`test_classifier`, and fixing"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 61,
                            "column": 16
                          },
                          "end": {
                            "row": 61,
                            "column": 77
                          },
                          "text": "# them would require updating all those tests to compute with"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 62,
                            "column": 16
                          },
                          "end": {
                            "row": 62,
                            "column": 78
                          },
                          "text": "# more specialized terms. Once we have full specialization, we"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 63,
                            "column": 16
                          },
                          "end": {
                            "row": 63,
                            "column": 74
                          },
                          "text": "# can fix all the tests without a large volume of edits by"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 64,
                            "column": 16
                          },
                          "end": {
                            "row": 64,
                            "column": 78
                          },
                          "text": "# simply specializing their workspaces, so for now I'm leaving"
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 65,
                            "column": 16
                          },
                          "end": {
                            "row": 65,
                            "column": 57
                          },
                          "text": "# this in place as a somewhat sharp edge."
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 66,
                            "column": 16
                          },
                          "end": {
                            "row": 70,
                            "column": 21
                          },
                          "text": "if isinstance(term, LoadableTerm):\n                    raise ValueError(\n                        \"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)\n                    )",
                          "children": [
                            {
                              "type": "if_statement",
                              "start": {
                                "row": 66,
                                "column": 16
                              },
                              "end": {
                                "row": 70,
                                "column": 21
                              },
                              "text": "if isinstance(term, LoadableTerm):\n                    raise ValueError(\n                        \"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)\n                    )",
                              "children": [
                                {
                                  "type": "if",
                                  "start": {
                                    "row": 66,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 66,
                                    "column": 18
                                  },
                                  "text": "if"
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 66,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 66,
                                    "column": 49
                                  },
                                  "text": "isinstance(term, LoadableTerm)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 66,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 66,
                                        "column": 29
                                      },
                                      "text": "isinstance"
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 66,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 66,
                                        "column": 49
                                      },
                                      "text": "(term, LoadableTerm)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 66,
                                            "column": 29
                                          },
                                          "end": {
                                            "row": 66,
                                            "column": 30
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 66,
                                            "column": 30
                                          },
                                          "end": {
                                            "row": 66,
                                            "column": 34
                                          },
                                          "text": "term"
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 66,
                                            "column": 34
                                          },
                                          "end": {
                                            "row": 66,
                                            "column": 35
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 66,
                                            "column": 36
                                          },
                                          "end": {
                                            "row": 66,
                                            "column": 48
                                          },
                                          "text": "LoadableTerm"
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 66,
                                            "column": 48
                                          },
                                          "end": {
                                            "row": 66,
                                            "column": 49
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ":",
                                  "start": {
                                    "row": 66,
                                    "column": 49
                                  },
                                  "end": {
                                    "row": 66,
                                    "column": 50
                                  },
                                  "text": ":"
                                },
                                {
                                  "type": "block",
                                  "start": {
                                    "row": 67,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 70,
                                    "column": 21
                                  },
                                  "text": "raise ValueError(\n                        \"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)\n                    )",
                                  "children": [
                                    {
                                      "type": "raise_statement",
                                      "start": {
                                        "row": 67,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 70,
                                        "column": 21
                                      },
                                      "text": "raise ValueError(\n                        \"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)\n                    )",
                                      "children": [
                                        {
                                          "type": "raise",
                                          "start": {
                                            "row": 67,
                                            "column": 20
                                          },
                                          "end": {
                                            "row": 67,
                                            "column": 25
                                          },
                                          "text": "raise"
                                        },
                                        {
                                          "type": "call",
                                          "start": {
                                            "row": 67,
                                            "column": 26
                                          },
                                          "end": {
                                            "row": 70,
                                            "column": 21
                                          },
                                          "text": "ValueError(\n                        \"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)\n                    )",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 67,
                                                "column": 26
                                              },
                                              "end": {
                                                "row": 67,
                                                "column": 36
                                              },
                                              "text": "ValueError"
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 67,
                                                "column": 36
                                              },
                                              "end": {
                                                "row": 70,
                                                "column": 21
                                              },
                                              "text": "(\n                        \"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)\n                    )",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 67,
                                                    "column": 36
                                                  },
                                                  "end": {
                                                    "row": 67,
                                                    "column": 37
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": "call",
                                                  "start": {
                                                    "row": 68,
                                                    "column": 24
                                                  },
                                                  "end": {
                                                    "row": 69,
                                                    "column": 70
                                                  },
                                                  "text": "\"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format(term)",
                                                  "children": [
                                                    {
                                                      "type": "attribute",
                                                      "start": {
                                                        "row": 68,
                                                        "column": 24
                                                      },
                                                      "end": {
                                                        "row": 69,
                                                        "column": 64
                                                      },
                                                      "text": "\"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\".format",
                                                      "children": [
                                                        {
                                                          "type": "concatenated_string",
                                                          "start": {
                                                            "row": 68,
                                                            "column": 24
                                                          },
                                                          "end": {
                                                            "row": 69,
                                                            "column": 57
                                                          },
                                                          "text": "\"Loadable workspace terms must be specialized to a \"\n                        \"domain, but got generic term {}\"",
                                                          "children": [
                                                            {
                                                              "type": "string",
                                                              "start": {
                                                                "row": 68,
                                                                "column": 24
                                                              },
                                                              "end": {
                                                                "row": 68,
                                                                "column": 76
                                                              },
                                                              "text": "\"Loadable workspace terms must be specialized to a \"",
                                                              "children": [
                                                                {
                                                                  "type": "string_start",
                                                                  "start": {
                                                                    "row": 68,
                                                                    "column": 24
                                                                  },
                                                                  "end": {
                                                                    "row": 68,
                                                                    "column": 25
                                                                  },
                                                                  "text": "\""
                                                                },
                                                                {
                                                                  "type": "string_content",
                                                                  "start": {
                                                                    "row": 68,
                                                                    "column": 25
                                                                  },
                                                                  "end": {
                                                                    "row": 68,
                                                                    "column": 75
                                                                  },
                                                                  "text": "Loadable workspace terms must be specialized to a "
                                                                },
                                                                {
                                                                  "type": "string_end",
                                                                  "start": {
                                                                    "row": 68,
                                                                    "column": 75
                                                                  },
                                                                  "end": {
                                                                    "row": 68,
                                                                    "column": 76
                                                                  },
                                                                  "text": "\""
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "string",
                                                              "start": {
                                                                "row": 69,
                                                                "column": 24
                                                              },
                                                              "end": {
                                                                "row": 69,
                                                                "column": 57
                                                              },
                                                              "text": "\"domain, but got generic term {}\"",
                                                              "children": [
                                                                {
                                                                  "type": "string_start",
                                                                  "start": {
                                                                    "row": 69,
                                                                    "column": 24
                                                                  },
                                                                  "end": {
                                                                    "row": 69,
                                                                    "column": 25
                                                                  },
                                                                  "text": "\""
                                                                },
                                                                {
                                                                  "type": "string_content",
                                                                  "start": {
                                                                    "row": 69,
                                                                    "column": 25
                                                                  },
                                                                  "end": {
                                                                    "row": 69,
                                                                    "column": 56
                                                                  },
                                                                  "text": "domain, but got generic term {}"
                                                                },
                                                                {
                                                                  "type": "string_end",
                                                                  "start": {
                                                                    "row": 69,
                                                                    "column": 56
                                                                  },
                                                                  "end": {
                                                                    "row": 69,
                                                                    "column": 57
                                                                  },
                                                                  "text": "\""
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": ".",
                                                          "start": {
                                                            "row": 69,
                                                            "column": 57
                                                          },
                                                          "end": {
                                                            "row": 69,
                                                            "column": 58
                                                          },
                                                          "text": "."
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 69,
                                                            "column": 58
                                                          },
                                                          "end": {
                                                            "row": 69,
                                                            "column": 64
                                                          },
                                                          "text": "format"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "start": {
                                                        "row": 69,
                                                        "column": 64
                                                      },
                                                      "end": {
                                                        "row": 69,
                                                        "column": 70
                                                      },
                                                      "text": "(term)",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "start": {
                                                            "row": 69,
                                                            "column": 64
                                                          },
                                                          "end": {
                                                            "row": 69,
                                                            "column": 65
                                                          },
                                                          "text": "("
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 69,
                                                            "column": 65
                                                          },
                                                          "end": {
                                                            "row": 69,
                                                            "column": 69
                                                          },
                                                          "text": "term"
                                                        },
                                                        {
                                                          "type": ")",
                                                          "start": {
                                                            "row": 69,
                                                            "column": 69
                                                          },
                                                          "end": {
                                                            "row": 69,
                                                            "column": 70
                                                          },
                                                          "text": ")"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 70,
                                                    "column": 20
                                                  },
                                                  "end": {
                                                    "row": 70,
                                                    "column": 21
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "elif_clause",
                          "start": {
                            "row": 72,
                            "column": 12
                          },
                          "end": {
                            "row": 78,
                            "column": 17
                          },
                          "text": "elif term.domain != graph.domain:\n                raise ValueError(\n                    \"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format(\n                        term, term.domain, graph.domain,\n                    )\n                )",
                          "children": [
                            {
                              "type": "elif",
                              "start": {
                                "row": 72,
                                "column": 12
                              },
                              "end": {
                                "row": 72,
                                "column": 16
                              },
                              "text": "elif"
                            },
                            {
                              "type": "comparison_operator",
                              "start": {
                                "row": 72,
                                "column": 17
                              },
                              "end": {
                                "row": 72,
                                "column": 44
                              },
                              "text": "term.domain != graph.domain",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 72,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 72,
                                    "column": 28
                                  },
                                  "text": "term.domain",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 72,
                                        "column": 17
                                      },
                                      "end": {
                                        "row": 72,
                                        "column": 21
                                      },
                                      "text": "term"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 72,
                                        "column": 21
                                      },
                                      "end": {
                                        "row": 72,
                                        "column": 22
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 72,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 72,
                                        "column": 28
                                      },
                                      "text": "domain"
                                    }
                                  ]
                                },
                                {
                                  "type": "!=",
                                  "start": {
                                    "row": 72,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 72,
                                    "column": 31
                                  },
                                  "text": "!="
                                },
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 72,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 72,
                                    "column": 44
                                  },
                                  "text": "graph.domain",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 72,
                                        "column": 32
                                      },
                                      "end": {
                                        "row": 72,
                                        "column": 37
                                      },
                                      "text": "graph"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 72,
                                        "column": 37
                                      },
                                      "end": {
                                        "row": 72,
                                        "column": 38
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 72,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 72,
                                        "column": 44
                                      },
                                      "text": "domain"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ":",
                              "start": {
                                "row": 72,
                                "column": 44
                              },
                              "end": {
                                "row": 72,
                                "column": 45
                              },
                              "text": ":"
                            },
                            {
                              "type": "block",
                              "start": {
                                "row": 73,
                                "column": 16
                              },
                              "end": {
                                "row": 78,
                                "column": 17
                              },
                              "text": "raise ValueError(\n                    \"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format(\n                        term, term.domain, graph.domain,\n                    )\n                )",
                              "children": [
                                {
                                  "type": "raise_statement",
                                  "start": {
                                    "row": 73,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 78,
                                    "column": 17
                                  },
                                  "text": "raise ValueError(\n                    \"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format(\n                        term, term.domain, graph.domain,\n                    )\n                )",
                                  "children": [
                                    {
                                      "type": "raise",
                                      "start": {
                                        "row": 73,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 73,
                                        "column": 21
                                      },
                                      "text": "raise"
                                    },
                                    {
                                      "type": "call",
                                      "start": {
                                        "row": 73,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 78,
                                        "column": 17
                                      },
                                      "text": "ValueError(\n                    \"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format(\n                        term, term.domain, graph.domain,\n                    )\n                )",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 73,
                                            "column": 22
                                          },
                                          "end": {
                                            "row": 73,
                                            "column": 32
                                          },
                                          "text": "ValueError"
                                        },
                                        {
                                          "type": "argument_list",
                                          "start": {
                                            "row": 73,
                                            "column": 32
                                          },
                                          "end": {
                                            "row": 78,
                                            "column": 17
                                          },
                                          "text": "(\n                    \"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format(\n                        term, term.domain, graph.domain,\n                    )\n                )",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start": {
                                                "row": 73,
                                                "column": 32
                                              },
                                              "end": {
                                                "row": 73,
                                                "column": 33
                                              },
                                              "text": "("
                                            },
                                            {
                                              "type": "call",
                                              "start": {
                                                "row": 74,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 77,
                                                "column": 21
                                              },
                                              "text": "\"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format(\n                        term, term.domain, graph.domain,\n                    )",
                                              "children": [
                                                {
                                                  "type": "attribute",
                                                  "start": {
                                                    "row": 74,
                                                    "column": 20
                                                  },
                                                  "end": {
                                                    "row": 75,
                                                    "column": 62
                                                  },
                                                  "text": "\"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\".format",
                                                  "children": [
                                                    {
                                                      "type": "concatenated_string",
                                                      "start": {
                                                        "row": 74,
                                                        "column": 20
                                                      },
                                                      "end": {
                                                        "row": 75,
                                                        "column": 55
                                                      },
                                                      "text": "\"Initial workspace term {} has domain {}. \"\n                    \"Does not match pipeline domain {}\"",
                                                      "children": [
                                                        {
                                                          "type": "string",
                                                          "start": {
                                                            "row": 74,
                                                            "column": 20
                                                          },
                                                          "end": {
                                                            "row": 74,
                                                            "column": 63
                                                          },
                                                          "text": "\"Initial workspace term {} has domain {}. \"",
                                                          "children": [
                                                            {
                                                              "type": "string_start",
                                                              "start": {
                                                                "row": 74,
                                                                "column": 20
                                                              },
                                                              "end": {
                                                                "row": 74,
                                                                "column": 21
                                                              },
                                                              "text": "\""
                                                            },
                                                            {
                                                              "type": "string_content",
                                                              "start": {
                                                                "row": 74,
                                                                "column": 21
                                                              },
                                                              "end": {
                                                                "row": 74,
                                                                "column": 62
                                                              },
                                                              "text": "Initial workspace term {} has domain {}. "
                                                            },
                                                            {
                                                              "type": "string_end",
                                                              "start": {
                                                                "row": 74,
                                                                "column": 62
                                                              },
                                                              "end": {
                                                                "row": 74,
                                                                "column": 63
                                                              },
                                                              "text": "\""
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "string",
                                                          "start": {
                                                            "row": 75,
                                                            "column": 20
                                                          },
                                                          "end": {
                                                            "row": 75,
                                                            "column": 55
                                                          },
                                                          "text": "\"Does not match pipeline domain {}\"",
                                                          "children": [
                                                            {
                                                              "type": "string_start",
                                                              "start": {
                                                                "row": 75,
                                                                "column": 20
                                                              },
                                                              "end": {
                                                                "row": 75,
                                                                "column": 21
                                                              },
                                                              "text": "\""
                                                            },
                                                            {
                                                              "type": "string_content",
                                                              "start": {
                                                                "row": 75,
                                                                "column": 21
                                                              },
                                                              "end": {
                                                                "row": 75,
                                                                "column": 54
                                                              },
                                                              "text": "Does not match pipeline domain {}"
                                                            },
                                                            {
                                                              "type": "string_end",
                                                              "start": {
                                                                "row": 75,
                                                                "column": 54
                                                              },
                                                              "end": {
                                                                "row": 75,
                                                                "column": 55
                                                              },
                                                              "text": "\""
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ".",
                                                      "start": {
                                                        "row": 75,
                                                        "column": 55
                                                      },
                                                      "end": {
                                                        "row": 75,
                                                        "column": 56
                                                      },
                                                      "text": "."
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 75,
                                                        "column": 56
                                                      },
                                                      "end": {
                                                        "row": 75,
                                                        "column": 62
                                                      },
                                                      "text": "format"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "start": {
                                                    "row": 75,
                                                    "column": 62
                                                  },
                                                  "end": {
                                                    "row": 77,
                                                    "column": 21
                                                  },
                                                  "text": "(\n                        term, term.domain, graph.domain,\n                    )",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "start": {
                                                        "row": 75,
                                                        "column": 62
                                                      },
                                                      "end": {
                                                        "row": 75,
                                                        "column": 63
                                                      },
                                                      "text": "("
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 76,
                                                        "column": 24
                                                      },
                                                      "end": {
                                                        "row": 76,
                                                        "column": 28
                                                      },
                                                      "text": "term"
                                                    },
                                                    {
                                                      "type": ",",
                                                      "start": {
                                                        "row": 76,
                                                        "column": 28
                                                      },
                                                      "end": {
                                                        "row": 76,
                                                        "column": 29
                                                      },
                                                      "text": ","
                                                    },
                                                    {
                                                      "type": "attribute",
                                                      "start": {
                                                        "row": 76,
                                                        "column": 30
                                                      },
                                                      "end": {
                                                        "row": 76,
                                                        "column": 41
                                                      },
                                                      "text": "term.domain",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 76,
                                                            "column": 30
                                                          },
                                                          "end": {
                                                            "row": 76,
                                                            "column": 34
                                                          },
                                                          "text": "term"
                                                        },
                                                        {
                                                          "type": ".",
                                                          "start": {
                                                            "row": 76,
                                                            "column": 34
                                                          },
                                                          "end": {
                                                            "row": 76,
                                                            "column": 35
                                                          },
                                                          "text": "."
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 76,
                                                            "column": 35
                                                          },
                                                          "end": {
                                                            "row": 76,
                                                            "column": 41
                                                          },
                                                          "text": "domain"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "start": {
                                                        "row": 76,
                                                        "column": 41
                                                      },
                                                      "end": {
                                                        "row": 76,
                                                        "column": 42
                                                      },
                                                      "text": ","
                                                    },
                                                    {
                                                      "type": "attribute",
                                                      "start": {
                                                        "row": 76,
                                                        "column": 43
                                                      },
                                                      "end": {
                                                        "row": 76,
                                                        "column": 55
                                                      },
                                                      "text": "graph.domain",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 76,
                                                            "column": 43
                                                          },
                                                          "end": {
                                                            "row": 76,
                                                            "column": 48
                                                          },
                                                          "text": "graph"
                                                        },
                                                        {
                                                          "type": ".",
                                                          "start": {
                                                            "row": 76,
                                                            "column": 48
                                                          },
                                                          "end": {
                                                            "row": 76,
                                                            "column": 49
                                                          },
                                                          "text": "."
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 76,
                                                            "column": 49
                                                          },
                                                          "end": {
                                                            "row": 76,
                                                            "column": 55
                                                          },
                                                          "text": "domain"
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "start": {
                                                        "row": 76,
                                                        "column": 55
                                                      },
                                                      "end": {
                                                        "row": 76,
                                                        "column": 56
                                                      },
                                                      "text": ","
                                                    },
                                                    {
                                                      "type": ")",
                                                      "start": {
                                                        "row": 77,
                                                        "column": 20
                                                      },
                                                      "end": {
                                                        "row": 77,
                                                        "column": 21
                                                      },
                                                      "text": ")"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "start": {
                                                "row": 78,
                                                "column": 16
                                              },
                                              "end": {
                                                "row": 78,
                                                "column": 17
                                              },
                                              "text": ")"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}