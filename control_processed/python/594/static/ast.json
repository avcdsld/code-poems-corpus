{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 26,
    "column": 49
  },
  "text": "def poissonVectorRDD(sc, mean, numRows, numCols, numPartitions=None, seed=None):\n        \"\"\"\n        Generates an RDD comprised of vectors containing i.i.d. samples drawn\n        from the Poisson distribution with the input mean.\n\n        :param sc: SparkContext used to create the RDD.\n        :param mean: Mean, or lambda, for the Poisson distribution.\n        :param numRows: Number of Vectors in the RDD.\n        :param numCols: Number of elements in each Vector.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`)\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of Vector with vectors containing i.i.d. samples ~ Pois(mean).\n\n        >>> import numpy as np\n        >>> mean = 100.0\n        >>> rdd = RandomRDDs.poissonVectorRDD(sc, mean, 100, 100, seed=1)\n        >>> mat = np.mat(rdd.collect())\n        >>> mat.shape\n        (100, 100)\n        >>> abs(mat.mean() - mean) < 0.5\n        True\n        >>> from math import sqrt\n        >>> abs(mat.std() - sqrt(mean)) < 0.5\n        True\n        \"\"\"\n        return callMLlibFunc(\"poissonVectorRDD\", sc._jsc, float(mean), numRows, numCols,\n                             numPartitions, seed)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 26,
        "column": 49
      },
      "text": "def poissonVectorRDD(sc, mean, numRows, numCols, numPartitions=None, seed=None):\n        \"\"\"\n        Generates an RDD comprised of vectors containing i.i.d. samples drawn\n        from the Poisson distribution with the input mean.\n\n        :param sc: SparkContext used to create the RDD.\n        :param mean: Mean, or lambda, for the Poisson distribution.\n        :param numRows: Number of Vectors in the RDD.\n        :param numCols: Number of elements in each Vector.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`)\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of Vector with vectors containing i.i.d. samples ~ Pois(mean).\n\n        >>> import numpy as np\n        >>> mean = 100.0\n        >>> rdd = RandomRDDs.poissonVectorRDD(sc, mean, 100, 100, seed=1)\n        >>> mat = np.mat(rdd.collect())\n        >>> mat.shape\n        (100, 100)\n        >>> abs(mat.mean() - mean) < 0.5\n        True\n        >>> from math import sqrt\n        >>> abs(mat.std() - sqrt(mean)) < 0.5\n        True\n        \"\"\"\n        return callMLlibFunc(\"poissonVectorRDD\", sc._jsc, float(mean), numRows, numCols,\n                             numPartitions, seed)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 20
          },
          "text": "poissonVectorRDD"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 20
          },
          "end": {
            "row": 0,
            "column": 79
          },
          "text": "(sc, mean, numRows, numCols, numPartitions=None, seed=None)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 21
              },
              "end": {
                "row": 0,
                "column": 23
              },
              "text": "sc"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 23
              },
              "end": {
                "row": 0,
                "column": 24
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 25
              },
              "end": {
                "row": 0,
                "column": 29
              },
              "text": "mean"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 29
              },
              "end": {
                "row": 0,
                "column": 30
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 31
              },
              "end": {
                "row": 0,
                "column": 38
              },
              "text": "numRows"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 38
              },
              "end": {
                "row": 0,
                "column": 39
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 40
              },
              "end": {
                "row": 0,
                "column": 47
              },
              "text": "numCols"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 47
              },
              "end": {
                "row": 0,
                "column": 48
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 49
              },
              "end": {
                "row": 0,
                "column": 67
              },
              "text": "numPartitions=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 49
                  },
                  "end": {
                    "row": 0,
                    "column": 62
                  },
                  "text": "numPartitions"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 62
                  },
                  "end": {
                    "row": 0,
                    "column": 63
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 63
                  },
                  "end": {
                    "row": 0,
                    "column": 67
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 67
              },
              "end": {
                "row": 0,
                "column": 68
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 69
              },
              "end": {
                "row": 0,
                "column": 78
              },
              "text": "seed=None",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 69
                  },
                  "end": {
                    "row": 0,
                    "column": 73
                  },
                  "text": "seed"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 73
                  },
                  "end": {
                    "row": 0,
                    "column": 74
                  },
                  "text": "="
                },
                {
                  "type": "none",
                  "start": {
                    "row": 0,
                    "column": 74
                  },
                  "end": {
                    "row": 0,
                    "column": 78
                  },
                  "text": "None"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 78
              },
              "end": {
                "row": 0,
                "column": 79
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 79
          },
          "end": {
            "row": 0,
            "column": 80
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 26,
            "column": 49
          },
          "text": "\"\"\"\n        Generates an RDD comprised of vectors containing i.i.d. samples drawn\n        from the Poisson distribution with the input mean.\n\n        :param sc: SparkContext used to create the RDD.\n        :param mean: Mean, or lambda, for the Poisson distribution.\n        :param numRows: Number of Vectors in the RDD.\n        :param numCols: Number of elements in each Vector.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`)\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of Vector with vectors containing i.i.d. samples ~ Pois(mean).\n\n        >>> import numpy as np\n        >>> mean = 100.0\n        >>> rdd = RandomRDDs.poissonVectorRDD(sc, mean, 100, 100, seed=1)\n        >>> mat = np.mat(rdd.collect())\n        >>> mat.shape\n        (100, 100)\n        >>> abs(mat.mean() - mean) < 0.5\n        True\n        >>> from math import sqrt\n        >>> abs(mat.std() - sqrt(mean)) < 0.5\n        True\n        \"\"\"\n        return callMLlibFunc(\"poissonVectorRDD\", sc._jsc, float(mean), numRows, numCols,\n                             numPartitions, seed)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 24,
                "column": 11
              },
              "text": "\"\"\"\n        Generates an RDD comprised of vectors containing i.i.d. samples drawn\n        from the Poisson distribution with the input mean.\n\n        :param sc: SparkContext used to create the RDD.\n        :param mean: Mean, or lambda, for the Poisson distribution.\n        :param numRows: Number of Vectors in the RDD.\n        :param numCols: Number of elements in each Vector.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`)\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of Vector with vectors containing i.i.d. samples ~ Pois(mean).\n\n        >>> import numpy as np\n        >>> mean = 100.0\n        >>> rdd = RandomRDDs.poissonVectorRDD(sc, mean, 100, 100, seed=1)\n        >>> mat = np.mat(rdd.collect())\n        >>> mat.shape\n        (100, 100)\n        >>> abs(mat.mean() - mean) < 0.5\n        True\n        >>> from math import sqrt\n        >>> abs(mat.std() - sqrt(mean)) < 0.5\n        True\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 24,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Generates an RDD comprised of vectors containing i.i.d. samples drawn\n        from the Poisson distribution with the input mean.\n\n        :param sc: SparkContext used to create the RDD.\n        :param mean: Mean, or lambda, for the Poisson distribution.\n        :param numRows: Number of Vectors in the RDD.\n        :param numCols: Number of elements in each Vector.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`)\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of Vector with vectors containing i.i.d. samples ~ Pois(mean).\n\n        >>> import numpy as np\n        >>> mean = 100.0\n        >>> rdd = RandomRDDs.poissonVectorRDD(sc, mean, 100, 100, seed=1)\n        >>> mat = np.mat(rdd.collect())\n        >>> mat.shape\n        (100, 100)\n        >>> abs(mat.mean() - mean) < 0.5\n        True\n        >>> from math import sqrt\n        >>> abs(mat.std() - sqrt(mean)) < 0.5\n        True\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 24,
                        "column": 8
                      },
                      "text": "\n        Generates an RDD comprised of vectors containing i.i.d. samples drawn\n        from the Poisson distribution with the input mean.\n\n        :param sc: SparkContext used to create the RDD.\n        :param mean: Mean, or lambda, for the Poisson distribution.\n        :param numRows: Number of Vectors in the RDD.\n        :param numCols: Number of elements in each Vector.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`)\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of Vector with vectors containing i.i.d. samples ~ Pois(mean).\n\n        >>> import numpy as np\n        >>> mean = 100.0\n        >>> rdd = RandomRDDs.poissonVectorRDD(sc, mean, 100, 100, seed=1)\n        >>> mat = np.mat(rdd.collect())\n        >>> mat.shape\n        (100, 100)\n        >>> abs(mat.mean() - mean) < 0.5\n        True\n        >>> from math import sqrt\n        >>> abs(mat.std() - sqrt(mean)) < 0.5\n        True\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 24,
                        "column": 8
                      },
                      "end": {
                        "row": 24,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 25,
                "column": 8
              },
              "end": {
                "row": 26,
                "column": 49
              },
              "text": "return callMLlibFunc(\"poissonVectorRDD\", sc._jsc, float(mean), numRows, numCols,\n                             numPartitions, seed)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 25,
                    "column": 8
                  },
                  "end": {
                    "row": 25,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 25,
                    "column": 15
                  },
                  "end": {
                    "row": 26,
                    "column": 49
                  },
                  "text": "callMLlibFunc(\"poissonVectorRDD\", sc._jsc, float(mean), numRows, numCols,\n                             numPartitions, seed)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 25,
                        "column": 15
                      },
                      "end": {
                        "row": 25,
                        "column": 28
                      },
                      "text": "callMLlibFunc"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 25,
                        "column": 28
                      },
                      "end": {
                        "row": 26,
                        "column": 49
                      },
                      "text": "(\"poissonVectorRDD\", sc._jsc, float(mean), numRows, numCols,\n                             numPartitions, seed)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 25,
                            "column": 28
                          },
                          "end": {
                            "row": 25,
                            "column": 29
                          },
                          "text": "("
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 25,
                            "column": 29
                          },
                          "end": {
                            "row": 25,
                            "column": 47
                          },
                          "text": "\"poissonVectorRDD\"",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 25,
                                "column": 29
                              },
                              "end": {
                                "row": 25,
                                "column": 30
                              },
                              "text": "\""
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 25,
                                "column": 30
                              },
                              "end": {
                                "row": 25,
                                "column": 46
                              },
                              "text": "poissonVectorRDD"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 25,
                                "column": 46
                              },
                              "end": {
                                "row": 25,
                                "column": 47
                              },
                              "text": "\""
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 25,
                            "column": 47
                          },
                          "end": {
                            "row": 25,
                            "column": 48
                          },
                          "text": ","
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 25,
                            "column": 49
                          },
                          "end": {
                            "row": 25,
                            "column": 56
                          },
                          "text": "sc._jsc",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 25,
                                "column": 49
                              },
                              "end": {
                                "row": 25,
                                "column": 51
                              },
                              "text": "sc"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 25,
                                "column": 51
                              },
                              "end": {
                                "row": 25,
                                "column": 52
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 25,
                                "column": 52
                              },
                              "end": {
                                "row": 25,
                                "column": 56
                              },
                              "text": "_jsc"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 25,
                            "column": 56
                          },
                          "end": {
                            "row": 25,
                            "column": 57
                          },
                          "text": ","
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 25,
                            "column": 58
                          },
                          "end": {
                            "row": 25,
                            "column": 69
                          },
                          "text": "float(mean)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 25,
                                "column": 58
                              },
                              "end": {
                                "row": 25,
                                "column": 63
                              },
                              "text": "float"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 25,
                                "column": 63
                              },
                              "end": {
                                "row": 25,
                                "column": 69
                              },
                              "text": "(mean)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 25,
                                    "column": 63
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 64
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 25,
                                    "column": 64
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 68
                                  },
                                  "text": "mean"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 25,
                                    "column": 68
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 69
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 25,
                            "column": 69
                          },
                          "end": {
                            "row": 25,
                            "column": 70
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 71
                          },
                          "end": {
                            "row": 25,
                            "column": 78
                          },
                          "text": "numRows"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 25,
                            "column": 78
                          },
                          "end": {
                            "row": 25,
                            "column": 79
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 80
                          },
                          "end": {
                            "row": 25,
                            "column": 87
                          },
                          "text": "numCols"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 25,
                            "column": 87
                          },
                          "end": {
                            "row": 25,
                            "column": 88
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 26,
                            "column": 29
                          },
                          "end": {
                            "row": 26,
                            "column": 42
                          },
                          "text": "numPartitions"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 26,
                            "column": 42
                          },
                          "end": {
                            "row": 26,
                            "column": 43
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 26,
                            "column": 44
                          },
                          "end": {
                            "row": 26,
                            "column": 48
                          },
                          "text": "seed"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 26,
                            "column": 48
                          },
                          "end": {
                            "row": 26,
                            "column": 49
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}