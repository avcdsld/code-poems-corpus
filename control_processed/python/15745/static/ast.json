{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 31,
    "column": 56
  },
  "text": "def MethodCalled(self, mock_method):\n    \"\"\"Remove a method call from the group.\n\n    If the method is not in the set, an UnexpectedMethodCallError will be\n    raised.\n\n    Args:\n      mock_method: a mock method that should be equal to a method in the group.\n\n    Returns:\n      The mock method from the group\n\n    Raises:\n      UnexpectedMethodCallError if the mock_method was not in the group.\n    \"\"\"\n\n    # Check to see if this method exists, and if so add it to the set of\n    # called methods.\n\n    for method in self._methods:\n      if method == mock_method:\n        self._methods_called.add(mock_method)\n        # Always put this group back on top of the queue, because we don't know\n        # when we are done.\n        mock_method._call_queue.appendleft(self)\n        return self, method\n\n    if self.IsSatisfied():\n      next_method = mock_method._PopNextMethod();\n      return next_method, None\n    else:\n      raise UnexpectedMethodCallError(mock_method, self)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 31,
        "column": 56
      },
      "text": "def MethodCalled(self, mock_method):\n    \"\"\"Remove a method call from the group.\n\n    If the method is not in the set, an UnexpectedMethodCallError will be\n    raised.\n\n    Args:\n      mock_method: a mock method that should be equal to a method in the group.\n\n    Returns:\n      The mock method from the group\n\n    Raises:\n      UnexpectedMethodCallError if the mock_method was not in the group.\n    \"\"\"\n\n    # Check to see if this method exists, and if so add it to the set of\n    # called methods.\n\n    for method in self._methods:\n      if method == mock_method:\n        self._methods_called.add(mock_method)\n        # Always put this group back on top of the queue, because we don't know\n        # when we are done.\n        mock_method._call_queue.appendleft(self)\n        return self, method\n\n    if self.IsSatisfied():\n      next_method = mock_method._PopNextMethod();\n      return next_method, None\n    else:\n      raise UnexpectedMethodCallError(mock_method, self)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 16
          },
          "text": "MethodCalled"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 16
          },
          "end": {
            "row": 0,
            "column": 35
          },
          "text": "(self, mock_method)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 17
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 17
              },
              "end": {
                "row": 0,
                "column": 21
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 21
              },
              "end": {
                "row": 0,
                "column": 22
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 23
              },
              "end": {
                "row": 0,
                "column": 34
              },
              "text": "mock_method"
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 34
              },
              "end": {
                "row": 0,
                "column": 35
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 35
          },
          "end": {
            "row": 0,
            "column": 36
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 4
          },
          "end": {
            "row": 31,
            "column": 56
          },
          "text": "\"\"\"Remove a method call from the group.\n\n    If the method is not in the set, an UnexpectedMethodCallError will be\n    raised.\n\n    Args:\n      mock_method: a mock method that should be equal to a method in the group.\n\n    Returns:\n      The mock method from the group\n\n    Raises:\n      UnexpectedMethodCallError if the mock_method was not in the group.\n    \"\"\"\n\n    # Check to see if this method exists, and if so add it to the set of\n    # called methods.\n\n    for method in self._methods:\n      if method == mock_method:\n        self._methods_called.add(mock_method)\n        # Always put this group back on top of the queue, because we don't know\n        # when we are done.\n        mock_method._call_queue.appendleft(self)\n        return self, method\n\n    if self.IsSatisfied():\n      next_method = mock_method._PopNextMethod();\n      return next_method, None\n    else:\n      raise UnexpectedMethodCallError(mock_method, self)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 4
              },
              "end": {
                "row": 14,
                "column": 7
              },
              "text": "\"\"\"Remove a method call from the group.\n\n    If the method is not in the set, an UnexpectedMethodCallError will be\n    raised.\n\n    Args:\n      mock_method: a mock method that should be equal to a method in the group.\n\n    Returns:\n      The mock method from the group\n\n    Raises:\n      UnexpectedMethodCallError if the mock_method was not in the group.\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 4
                  },
                  "end": {
                    "row": 14,
                    "column": 7
                  },
                  "text": "\"\"\"Remove a method call from the group.\n\n    If the method is not in the set, an UnexpectedMethodCallError will be\n    raised.\n\n    Args:\n      mock_method: a mock method that should be equal to a method in the group.\n\n    Returns:\n      The mock method from the group\n\n    Raises:\n      UnexpectedMethodCallError if the mock_method was not in the group.\n    \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 4
                      },
                      "end": {
                        "row": 1,
                        "column": 7
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 7
                      },
                      "end": {
                        "row": 14,
                        "column": 4
                      },
                      "text": "Remove a method call from the group.\n\n    If the method is not in the set, an UnexpectedMethodCallError will be\n    raised.\n\n    Args:\n      mock_method: a mock method that should be equal to a method in the group.\n\n    Returns:\n      The mock method from the group\n\n    Raises:\n      UnexpectedMethodCallError if the mock_method was not in the group.\n    "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 14,
                        "column": 4
                      },
                      "end": {
                        "row": 14,
                        "column": 7
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 16,
                "column": 4
              },
              "end": {
                "row": 16,
                "column": 72
              },
              "text": "# Check to see if this method exists, and if so add it to the set of"
            },
            {
              "type": "comment",
              "start": {
                "row": 17,
                "column": 4
              },
              "end": {
                "row": 17,
                "column": 21
              },
              "text": "# called methods."
            },
            {
              "type": "for_statement",
              "start": {
                "row": 19,
                "column": 4
              },
              "end": {
                "row": 25,
                "column": 27
              },
              "text": "for method in self._methods:\n      if method == mock_method:\n        self._methods_called.add(mock_method)\n        # Always put this group back on top of the queue, because we don't know\n        # when we are done.\n        mock_method._call_queue.appendleft(self)\n        return self, method",
              "children": [
                {
                  "type": "for",
                  "start": {
                    "row": 19,
                    "column": 4
                  },
                  "end": {
                    "row": 19,
                    "column": 7
                  },
                  "text": "for"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 19,
                    "column": 8
                  },
                  "end": {
                    "row": 19,
                    "column": 14
                  },
                  "text": "method"
                },
                {
                  "type": "in",
                  "start": {
                    "row": 19,
                    "column": 15
                  },
                  "end": {
                    "row": 19,
                    "column": 17
                  },
                  "text": "in"
                },
                {
                  "type": "attribute",
                  "start": {
                    "row": 19,
                    "column": 18
                  },
                  "end": {
                    "row": 19,
                    "column": 31
                  },
                  "text": "self._methods",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 19,
                        "column": 18
                      },
                      "end": {
                        "row": 19,
                        "column": 22
                      },
                      "text": "self"
                    },
                    {
                      "type": ".",
                      "start": {
                        "row": 19,
                        "column": 22
                      },
                      "end": {
                        "row": 19,
                        "column": 23
                      },
                      "text": "."
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 19,
                        "column": 23
                      },
                      "end": {
                        "row": 19,
                        "column": 31
                      },
                      "text": "_methods"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 19,
                    "column": 31
                  },
                  "end": {
                    "row": 19,
                    "column": 32
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 20,
                    "column": 6
                  },
                  "end": {
                    "row": 25,
                    "column": 27
                  },
                  "text": "if method == mock_method:\n        self._methods_called.add(mock_method)\n        # Always put this group back on top of the queue, because we don't know\n        # when we are done.\n        mock_method._call_queue.appendleft(self)\n        return self, method",
                  "children": [
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 20,
                        "column": 6
                      },
                      "end": {
                        "row": 25,
                        "column": 27
                      },
                      "text": "if method == mock_method:\n        self._methods_called.add(mock_method)\n        # Always put this group back on top of the queue, because we don't know\n        # when we are done.\n        mock_method._call_queue.appendleft(self)\n        return self, method",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 20,
                            "column": 6
                          },
                          "end": {
                            "row": 20,
                            "column": 8
                          },
                          "text": "if"
                        },
                        {
                          "type": "comparison_operator",
                          "start": {
                            "row": 20,
                            "column": 9
                          },
                          "end": {
                            "row": 20,
                            "column": 30
                          },
                          "text": "method == mock_method",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 20,
                                "column": 9
                              },
                              "end": {
                                "row": 20,
                                "column": 15
                              },
                              "text": "method"
                            },
                            {
                              "type": "==",
                              "start": {
                                "row": 20,
                                "column": 16
                              },
                              "end": {
                                "row": 20,
                                "column": 18
                              },
                              "text": "=="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 20,
                                "column": 19
                              },
                              "end": {
                                "row": 20,
                                "column": 30
                              },
                              "text": "mock_method"
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 20,
                            "column": 30
                          },
                          "end": {
                            "row": 20,
                            "column": 31
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 21,
                            "column": 8
                          },
                          "end": {
                            "row": 25,
                            "column": 27
                          },
                          "text": "self._methods_called.add(mock_method)\n        # Always put this group back on top of the queue, because we don't know\n        # when we are done.\n        mock_method._call_queue.appendleft(self)\n        return self, method",
                          "children": [
                            {
                              "type": "expression_statement",
                              "start": {
                                "row": 21,
                                "column": 8
                              },
                              "end": {
                                "row": 21,
                                "column": 45
                              },
                              "text": "self._methods_called.add(mock_method)",
                              "children": [
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 21,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 21,
                                    "column": 45
                                  },
                                  "text": "self._methods_called.add(mock_method)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 21,
                                        "column": 8
                                      },
                                      "end": {
                                        "row": 21,
                                        "column": 32
                                      },
                                      "text": "self._methods_called.add",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "start": {
                                            "row": 21,
                                            "column": 8
                                          },
                                          "end": {
                                            "row": 21,
                                            "column": 28
                                          },
                                          "text": "self._methods_called",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 21,
                                                "column": 8
                                              },
                                              "end": {
                                                "row": 21,
                                                "column": 12
                                              },
                                              "text": "self"
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 21,
                                                "column": 12
                                              },
                                              "end": {
                                                "row": 21,
                                                "column": 13
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 21,
                                                "column": 13
                                              },
                                              "end": {
                                                "row": 21,
                                                "column": 28
                                              },
                                              "text": "_methods_called"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 21,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 21,
                                            "column": 29
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 21,
                                            "column": 29
                                          },
                                          "end": {
                                            "row": 21,
                                            "column": 32
                                          },
                                          "text": "add"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 21,
                                        "column": 32
                                      },
                                      "end": {
                                        "row": 21,
                                        "column": 45
                                      },
                                      "text": "(mock_method)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 21,
                                            "column": 32
                                          },
                                          "end": {
                                            "row": 21,
                                            "column": 33
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 21,
                                            "column": 33
                                          },
                                          "end": {
                                            "row": 21,
                                            "column": 44
                                          },
                                          "text": "mock_method"
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 21,
                                            "column": 44
                                          },
                                          "end": {
                                            "row": 21,
                                            "column": 45
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "comment",
                              "start": {
                                "row": 22,
                                "column": 8
                              },
                              "end": {
                                "row": 22,
                                "column": 79
                              },
                              "text": "# Always put this group back on top of the queue, because we don't know"
                            },
                            {
                              "type": "comment",
                              "start": {
                                "row": 23,
                                "column": 8
                              },
                              "end": {
                                "row": 23,
                                "column": 27
                              },
                              "text": "# when we are done."
                            },
                            {
                              "type": "expression_statement",
                              "start": {
                                "row": 24,
                                "column": 8
                              },
                              "end": {
                                "row": 24,
                                "column": 48
                              },
                              "text": "mock_method._call_queue.appendleft(self)",
                              "children": [
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 24,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 24,
                                    "column": 48
                                  },
                                  "text": "mock_method._call_queue.appendleft(self)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 24,
                                        "column": 8
                                      },
                                      "end": {
                                        "row": 24,
                                        "column": 42
                                      },
                                      "text": "mock_method._call_queue.appendleft",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "start": {
                                            "row": 24,
                                            "column": 8
                                          },
                                          "end": {
                                            "row": 24,
                                            "column": 31
                                          },
                                          "text": "mock_method._call_queue",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 24,
                                                "column": 8
                                              },
                                              "end": {
                                                "row": 24,
                                                "column": 19
                                              },
                                              "text": "mock_method"
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 24,
                                                "column": 19
                                              },
                                              "end": {
                                                "row": 24,
                                                "column": 20
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 24,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 24,
                                                "column": 31
                                              },
                                              "text": "_call_queue"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 24,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 24,
                                            "column": 32
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 24,
                                            "column": 32
                                          },
                                          "end": {
                                            "row": 24,
                                            "column": 42
                                          },
                                          "text": "appendleft"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 24,
                                        "column": 42
                                      },
                                      "end": {
                                        "row": 24,
                                        "column": 48
                                      },
                                      "text": "(self)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 24,
                                            "column": 42
                                          },
                                          "end": {
                                            "row": 24,
                                            "column": 43
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 24,
                                            "column": 43
                                          },
                                          "end": {
                                            "row": 24,
                                            "column": 47
                                          },
                                          "text": "self"
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 24,
                                            "column": 47
                                          },
                                          "end": {
                                            "row": 24,
                                            "column": 48
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "return_statement",
                              "start": {
                                "row": 25,
                                "column": 8
                              },
                              "end": {
                                "row": 25,
                                "column": 27
                              },
                              "text": "return self, method",
                              "children": [
                                {
                                  "type": "return",
                                  "start": {
                                    "row": 25,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 14
                                  },
                                  "text": "return"
                                },
                                {
                                  "type": "expression_list",
                                  "start": {
                                    "row": 25,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 27
                                  },
                                  "text": "self, method",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 25,
                                        "column": 15
                                      },
                                      "end": {
                                        "row": 25,
                                        "column": 19
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 25,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 25,
                                        "column": 20
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 25,
                                        "column": 21
                                      },
                                      "end": {
                                        "row": 25,
                                        "column": 27
                                      },
                                      "text": "method"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 27,
                "column": 4
              },
              "end": {
                "row": 31,
                "column": 56
              },
              "text": "if self.IsSatisfied():\n      next_method = mock_method._PopNextMethod();\n      return next_method, None\n    else:\n      raise UnexpectedMethodCallError(mock_method, self)",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 27,
                    "column": 4
                  },
                  "end": {
                    "row": 27,
                    "column": 6
                  },
                  "text": "if"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 27,
                    "column": 7
                  },
                  "end": {
                    "row": 27,
                    "column": 25
                  },
                  "text": "self.IsSatisfied()",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 27,
                        "column": 7
                      },
                      "end": {
                        "row": 27,
                        "column": 23
                      },
                      "text": "self.IsSatisfied",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 27,
                            "column": 7
                          },
                          "end": {
                            "row": 27,
                            "column": 11
                          },
                          "text": "self"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 27,
                            "column": 11
                          },
                          "end": {
                            "row": 27,
                            "column": 12
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 27,
                            "column": 12
                          },
                          "end": {
                            "row": 27,
                            "column": 23
                          },
                          "text": "IsSatisfied"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 27,
                        "column": 23
                      },
                      "end": {
                        "row": 27,
                        "column": 25
                      },
                      "text": "()",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 27,
                            "column": 23
                          },
                          "end": {
                            "row": 27,
                            "column": 24
                          },
                          "text": "("
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 27,
                            "column": 24
                          },
                          "end": {
                            "row": 27,
                            "column": 25
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 27,
                    "column": 25
                  },
                  "end": {
                    "row": 27,
                    "column": 26
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 28,
                    "column": 6
                  },
                  "end": {
                    "row": 29,
                    "column": 30
                  },
                  "text": "next_method = mock_method._PopNextMethod();\n      return next_method, None",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 28,
                        "column": 6
                      },
                      "end": {
                        "row": 28,
                        "column": 48
                      },
                      "text": "next_method = mock_method._PopNextMethod()",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 28,
                            "column": 6
                          },
                          "end": {
                            "row": 28,
                            "column": 48
                          },
                          "text": "next_method = mock_method._PopNextMethod()",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 28,
                                "column": 6
                              },
                              "end": {
                                "row": 28,
                                "column": 17
                              },
                              "text": "next_method"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 28,
                                "column": 18
                              },
                              "end": {
                                "row": 28,
                                "column": 19
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 28,
                                "column": 20
                              },
                              "end": {
                                "row": 28,
                                "column": 48
                              },
                              "text": "mock_method._PopNextMethod()",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 28,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 28,
                                    "column": 46
                                  },
                                  "text": "mock_method._PopNextMethod",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 28,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 28,
                                        "column": 31
                                      },
                                      "text": "mock_method"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 28,
                                        "column": 31
                                      },
                                      "end": {
                                        "row": 28,
                                        "column": 32
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 28,
                                        "column": 32
                                      },
                                      "end": {
                                        "row": 28,
                                        "column": 46
                                      },
                                      "text": "_PopNextMethod"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 28,
                                    "column": 46
                                  },
                                  "end": {
                                    "row": 28,
                                    "column": 48
                                  },
                                  "text": "()",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 28,
                                        "column": 46
                                      },
                                      "end": {
                                        "row": 28,
                                        "column": 47
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 28,
                                        "column": 47
                                      },
                                      "end": {
                                        "row": 28,
                                        "column": 48
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ";",
                      "start": {
                        "row": 28,
                        "column": 48
                      },
                      "end": {
                        "row": 28,
                        "column": 49
                      },
                      "text": ";"
                    },
                    {
                      "type": "return_statement",
                      "start": {
                        "row": 29,
                        "column": 6
                      },
                      "end": {
                        "row": 29,
                        "column": 30
                      },
                      "text": "return next_method, None",
                      "children": [
                        {
                          "type": "return",
                          "start": {
                            "row": 29,
                            "column": 6
                          },
                          "end": {
                            "row": 29,
                            "column": 12
                          },
                          "text": "return"
                        },
                        {
                          "type": "expression_list",
                          "start": {
                            "row": 29,
                            "column": 13
                          },
                          "end": {
                            "row": 29,
                            "column": 30
                          },
                          "text": "next_method, None",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 29,
                                "column": 13
                              },
                              "end": {
                                "row": 29,
                                "column": 24
                              },
                              "text": "next_method"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 29,
                                "column": 24
                              },
                              "end": {
                                "row": 29,
                                "column": 25
                              },
                              "text": ","
                            },
                            {
                              "type": "none",
                              "start": {
                                "row": 29,
                                "column": 26
                              },
                              "end": {
                                "row": 29,
                                "column": 30
                              },
                              "text": "None"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start": {
                    "row": 30,
                    "column": 4
                  },
                  "end": {
                    "row": 31,
                    "column": 56
                  },
                  "text": "else:\n      raise UnexpectedMethodCallError(mock_method, self)",
                  "children": [
                    {
                      "type": "else",
                      "start": {
                        "row": 30,
                        "column": 4
                      },
                      "end": {
                        "row": 30,
                        "column": 8
                      },
                      "text": "else"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 30,
                        "column": 8
                      },
                      "end": {
                        "row": 30,
                        "column": 9
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 31,
                        "column": 6
                      },
                      "end": {
                        "row": 31,
                        "column": 56
                      },
                      "text": "raise UnexpectedMethodCallError(mock_method, self)",
                      "children": [
                        {
                          "type": "raise_statement",
                          "start": {
                            "row": 31,
                            "column": 6
                          },
                          "end": {
                            "row": 31,
                            "column": 56
                          },
                          "text": "raise UnexpectedMethodCallError(mock_method, self)",
                          "children": [
                            {
                              "type": "raise",
                              "start": {
                                "row": 31,
                                "column": 6
                              },
                              "end": {
                                "row": 31,
                                "column": 11
                              },
                              "text": "raise"
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 31,
                                "column": 12
                              },
                              "end": {
                                "row": 31,
                                "column": 56
                              },
                              "text": "UnexpectedMethodCallError(mock_method, self)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 31,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 37
                                  },
                                  "text": "UnexpectedMethodCallError"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 31,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 56
                                  },
                                  "text": "(mock_method, self)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 31,
                                        "column": 37
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 38
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 31,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 49
                                      },
                                      "text": "mock_method"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 31,
                                        "column": 49
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 50
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 31,
                                        "column": 51
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 55
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 31,
                                        "column": 55
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 56
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}