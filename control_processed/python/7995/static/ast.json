{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 39,
    "column": 38
  },
  "text": "def debug_str(self):\n        \"\"\"Get a debug string about internal execution plan.\n\n        Returns\n        -------\n        debug_str : string\n            Debug string of the executor.\n\n        Examples\n        --------\n        >>> a = mx.sym.Variable('a')\n        >>> b = mx.sym.sin(a)\n        >>> c = 2 * a + b\n        >>> texec = c.bind(mx.cpu(), {'a': mx.nd.array([1,2]), 'b':mx.nd.array([2,3])})\n        >>> print(texec.debug_str())\n        Symbol Outputs:\n\t            output[0]=_plus0(0)\n        Variable:a\n        --------------------\n        Op:_mul_scalar, Name=_mulscalar0\n        Inputs:\n\t        arg[0]=a(0) version=0\n        Attrs:\n\t        scalar=2\n        --------------------\n        Op:sin, Name=sin0\n        Inputs:\n\t        arg[0]=a(0) version=0\n        --------------------\n        Op:elemwise_add, Name=_plus0\n        Inputs:\n\t        arg[0]=_mulscalar0(0)\n\t        arg[1]=sin0(0)\n        Total 0 MB allocated\n        Total 11 TempSpace resource requested\n        \"\"\"\n        debug_str = ctypes.c_char_p()\n        check_call(_LIB.MXExecutorPrint(\n            self.handle, ctypes.byref(debug_str)))\n        return py_str(debug_str.value)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 39,
        "column": 38
      },
      "text": "def debug_str(self):\n        \"\"\"Get a debug string about internal execution plan.\n\n        Returns\n        -------\n        debug_str : string\n            Debug string of the executor.\n\n        Examples\n        --------\n        >>> a = mx.sym.Variable('a')\n        >>> b = mx.sym.sin(a)\n        >>> c = 2 * a + b\n        >>> texec = c.bind(mx.cpu(), {'a': mx.nd.array([1,2]), 'b':mx.nd.array([2,3])})\n        >>> print(texec.debug_str())\n        Symbol Outputs:\n\t            output[0]=_plus0(0)\n        Variable:a\n        --------------------\n        Op:_mul_scalar, Name=_mulscalar0\n        Inputs:\n\t        arg[0]=a(0) version=0\n        Attrs:\n\t        scalar=2\n        --------------------\n        Op:sin, Name=sin0\n        Inputs:\n\t        arg[0]=a(0) version=0\n        --------------------\n        Op:elemwise_add, Name=_plus0\n        Inputs:\n\t        arg[0]=_mulscalar0(0)\n\t        arg[1]=sin0(0)\n        Total 0 MB allocated\n        Total 11 TempSpace resource requested\n        \"\"\"\n        debug_str = ctypes.c_char_p()\n        check_call(_LIB.MXExecutorPrint(\n            self.handle, ctypes.byref(debug_str)))\n        return py_str(debug_str.value)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 13
          },
          "text": "debug_str"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 13
          },
          "end": {
            "row": 0,
            "column": 19
          },
          "text": "(self)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 13
              },
              "end": {
                "row": 0,
                "column": 14
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 14
              },
              "end": {
                "row": 0,
                "column": 18
              },
              "text": "self"
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 18
              },
              "end": {
                "row": 0,
                "column": 19
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 19
          },
          "end": {
            "row": 0,
            "column": 20
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 39,
            "column": 38
          },
          "text": "\"\"\"Get a debug string about internal execution plan.\n\n        Returns\n        -------\n        debug_str : string\n            Debug string of the executor.\n\n        Examples\n        --------\n        >>> a = mx.sym.Variable('a')\n        >>> b = mx.sym.sin(a)\n        >>> c = 2 * a + b\n        >>> texec = c.bind(mx.cpu(), {'a': mx.nd.array([1,2]), 'b':mx.nd.array([2,3])})\n        >>> print(texec.debug_str())\n        Symbol Outputs:\n\t            output[0]=_plus0(0)\n        Variable:a\n        --------------------\n        Op:_mul_scalar, Name=_mulscalar0\n        Inputs:\n\t        arg[0]=a(0) version=0\n        Attrs:\n\t        scalar=2\n        --------------------\n        Op:sin, Name=sin0\n        Inputs:\n\t        arg[0]=a(0) version=0\n        --------------------\n        Op:elemwise_add, Name=_plus0\n        Inputs:\n\t        arg[0]=_mulscalar0(0)\n\t        arg[1]=sin0(0)\n        Total 0 MB allocated\n        Total 11 TempSpace resource requested\n        \"\"\"\n        debug_str = ctypes.c_char_p()\n        check_call(_LIB.MXExecutorPrint(\n            self.handle, ctypes.byref(debug_str)))\n        return py_str(debug_str.value)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 35,
                "column": 11
              },
              "text": "\"\"\"Get a debug string about internal execution plan.\n\n        Returns\n        -------\n        debug_str : string\n            Debug string of the executor.\n\n        Examples\n        --------\n        >>> a = mx.sym.Variable('a')\n        >>> b = mx.sym.sin(a)\n        >>> c = 2 * a + b\n        >>> texec = c.bind(mx.cpu(), {'a': mx.nd.array([1,2]), 'b':mx.nd.array([2,3])})\n        >>> print(texec.debug_str())\n        Symbol Outputs:\n\t            output[0]=_plus0(0)\n        Variable:a\n        --------------------\n        Op:_mul_scalar, Name=_mulscalar0\n        Inputs:\n\t        arg[0]=a(0) version=0\n        Attrs:\n\t        scalar=2\n        --------------------\n        Op:sin, Name=sin0\n        Inputs:\n\t        arg[0]=a(0) version=0\n        --------------------\n        Op:elemwise_add, Name=_plus0\n        Inputs:\n\t        arg[0]=_mulscalar0(0)\n\t        arg[1]=sin0(0)\n        Total 0 MB allocated\n        Total 11 TempSpace resource requested\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 35,
                    "column": 11
                  },
                  "text": "\"\"\"Get a debug string about internal execution plan.\n\n        Returns\n        -------\n        debug_str : string\n            Debug string of the executor.\n\n        Examples\n        --------\n        >>> a = mx.sym.Variable('a')\n        >>> b = mx.sym.sin(a)\n        >>> c = 2 * a + b\n        >>> texec = c.bind(mx.cpu(), {'a': mx.nd.array([1,2]), 'b':mx.nd.array([2,3])})\n        >>> print(texec.debug_str())\n        Symbol Outputs:\n\t            output[0]=_plus0(0)\n        Variable:a\n        --------------------\n        Op:_mul_scalar, Name=_mulscalar0\n        Inputs:\n\t        arg[0]=a(0) version=0\n        Attrs:\n\t        scalar=2\n        --------------------\n        Op:sin, Name=sin0\n        Inputs:\n\t        arg[0]=a(0) version=0\n        --------------------\n        Op:elemwise_add, Name=_plus0\n        Inputs:\n\t        arg[0]=_mulscalar0(0)\n\t        arg[1]=sin0(0)\n        Total 0 MB allocated\n        Total 11 TempSpace resource requested\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 35,
                        "column": 8
                      },
                      "text": "Get a debug string about internal execution plan.\n\n        Returns\n        -------\n        debug_str : string\n            Debug string of the executor.\n\n        Examples\n        --------\n        >>> a = mx.sym.Variable('a')\n        >>> b = mx.sym.sin(a)\n        >>> c = 2 * a + b\n        >>> texec = c.bind(mx.cpu(), {'a': mx.nd.array([1,2]), 'b':mx.nd.array([2,3])})\n        >>> print(texec.debug_str())\n        Symbol Outputs:\n\t            output[0]=_plus0(0)\n        Variable:a\n        --------------------\n        Op:_mul_scalar, Name=_mulscalar0\n        Inputs:\n\t        arg[0]=a(0) version=0\n        Attrs:\n\t        scalar=2\n        --------------------\n        Op:sin, Name=sin0\n        Inputs:\n\t        arg[0]=a(0) version=0\n        --------------------\n        Op:elemwise_add, Name=_plus0\n        Inputs:\n\t        arg[0]=_mulscalar0(0)\n\t        arg[1]=sin0(0)\n        Total 0 MB allocated\n        Total 11 TempSpace resource requested\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 35,
                        "column": 8
                      },
                      "end": {
                        "row": 35,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 36,
                "column": 8
              },
              "end": {
                "row": 36,
                "column": 37
              },
              "text": "debug_str = ctypes.c_char_p()",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 36,
                    "column": 8
                  },
                  "end": {
                    "row": 36,
                    "column": 37
                  },
                  "text": "debug_str = ctypes.c_char_p()",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 36,
                        "column": 8
                      },
                      "end": {
                        "row": 36,
                        "column": 17
                      },
                      "text": "debug_str"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 36,
                        "column": 18
                      },
                      "end": {
                        "row": 36,
                        "column": 19
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 36,
                        "column": 20
                      },
                      "end": {
                        "row": 36,
                        "column": 37
                      },
                      "text": "ctypes.c_char_p()",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 36,
                            "column": 20
                          },
                          "end": {
                            "row": 36,
                            "column": 35
                          },
                          "text": "ctypes.c_char_p",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 36,
                                "column": 20
                              },
                              "end": {
                                "row": 36,
                                "column": 26
                              },
                              "text": "ctypes"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 36,
                                "column": 26
                              },
                              "end": {
                                "row": 36,
                                "column": 27
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 36,
                                "column": 27
                              },
                              "end": {
                                "row": 36,
                                "column": 35
                              },
                              "text": "c_char_p"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 36,
                            "column": 35
                          },
                          "end": {
                            "row": 36,
                            "column": 37
                          },
                          "text": "()",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 36,
                                "column": 35
                              },
                              "end": {
                                "row": 36,
                                "column": 36
                              },
                              "text": "("
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 36,
                                "column": 36
                              },
                              "end": {
                                "row": 36,
                                "column": 37
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 37,
                "column": 8
              },
              "end": {
                "row": 38,
                "column": 50
              },
              "text": "check_call(_LIB.MXExecutorPrint(\n            self.handle, ctypes.byref(debug_str)))",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 37,
                    "column": 8
                  },
                  "end": {
                    "row": 38,
                    "column": 50
                  },
                  "text": "check_call(_LIB.MXExecutorPrint(\n            self.handle, ctypes.byref(debug_str)))",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 37,
                        "column": 8
                      },
                      "end": {
                        "row": 37,
                        "column": 18
                      },
                      "text": "check_call"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 37,
                        "column": 18
                      },
                      "end": {
                        "row": 38,
                        "column": 50
                      },
                      "text": "(_LIB.MXExecutorPrint(\n            self.handle, ctypes.byref(debug_str)))",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 37,
                            "column": 18
                          },
                          "end": {
                            "row": 37,
                            "column": 19
                          },
                          "text": "("
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 37,
                            "column": 19
                          },
                          "end": {
                            "row": 38,
                            "column": 49
                          },
                          "text": "_LIB.MXExecutorPrint(\n            self.handle, ctypes.byref(debug_str))",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 37,
                                "column": 19
                              },
                              "end": {
                                "row": 37,
                                "column": 39
                              },
                              "text": "_LIB.MXExecutorPrint",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 37,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 23
                                  },
                                  "text": "_LIB"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 37,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 24
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 37,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 39
                                  },
                                  "text": "MXExecutorPrint"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 37,
                                "column": 39
                              },
                              "end": {
                                "row": 38,
                                "column": 49
                              },
                              "text": "(\n            self.handle, ctypes.byref(debug_str))",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 37,
                                    "column": 39
                                  },
                                  "end": {
                                    "row": 37,
                                    "column": 40
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 38,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 38,
                                    "column": 23
                                  },
                                  "text": "self.handle",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 38,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 38,
                                        "column": 16
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 38,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 38,
                                        "column": 17
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 38,
                                        "column": 17
                                      },
                                      "end": {
                                        "row": 38,
                                        "column": 23
                                      },
                                      "text": "handle"
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 38,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 38,
                                    "column": 24
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 38,
                                    "column": 25
                                  },
                                  "end": {
                                    "row": 38,
                                    "column": 48
                                  },
                                  "text": "ctypes.byref(debug_str)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 38,
                                        "column": 25
                                      },
                                      "end": {
                                        "row": 38,
                                        "column": 37
                                      },
                                      "text": "ctypes.byref",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 38,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 38,
                                            "column": 31
                                          },
                                          "text": "ctypes"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 38,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 38,
                                            "column": 32
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 38,
                                            "column": 32
                                          },
                                          "end": {
                                            "row": 38,
                                            "column": 37
                                          },
                                          "text": "byref"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 38,
                                        "column": 37
                                      },
                                      "end": {
                                        "row": 38,
                                        "column": 48
                                      },
                                      "text": "(debug_str)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 38,
                                            "column": 37
                                          },
                                          "end": {
                                            "row": 38,
                                            "column": 38
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 38,
                                            "column": 38
                                          },
                                          "end": {
                                            "row": 38,
                                            "column": 47
                                          },
                                          "text": "debug_str"
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 38,
                                            "column": 47
                                          },
                                          "end": {
                                            "row": 38,
                                            "column": 48
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 38,
                                    "column": 48
                                  },
                                  "end": {
                                    "row": 38,
                                    "column": 49
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 38,
                            "column": 49
                          },
                          "end": {
                            "row": 38,
                            "column": 50
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 39,
                "column": 8
              },
              "end": {
                "row": 39,
                "column": 38
              },
              "text": "return py_str(debug_str.value)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 39,
                    "column": 8
                  },
                  "end": {
                    "row": 39,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 39,
                    "column": 15
                  },
                  "end": {
                    "row": 39,
                    "column": 38
                  },
                  "text": "py_str(debug_str.value)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 39,
                        "column": 15
                      },
                      "end": {
                        "row": 39,
                        "column": 21
                      },
                      "text": "py_str"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 39,
                        "column": 21
                      },
                      "end": {
                        "row": 39,
                        "column": 38
                      },
                      "text": "(debug_str.value)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 39,
                            "column": 21
                          },
                          "end": {
                            "row": 39,
                            "column": 22
                          },
                          "text": "("
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 39,
                            "column": 22
                          },
                          "end": {
                            "row": 39,
                            "column": 37
                          },
                          "text": "debug_str.value",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 39,
                                "column": 22
                              },
                              "end": {
                                "row": 39,
                                "column": 31
                              },
                              "text": "debug_str"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 39,
                                "column": 31
                              },
                              "end": {
                                "row": 39,
                                "column": 32
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 39,
                                "column": 32
                              },
                              "end": {
                                "row": 39,
                                "column": 37
                              },
                              "text": "value"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 39,
                            "column": 37
                          },
                          "end": {
                            "row": 39,
                            "column": 38
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}