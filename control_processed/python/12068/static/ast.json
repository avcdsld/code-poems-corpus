{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 26,
    "column": 30
  },
  "text": "async def process_commands(self, message):\n        \"\"\"|coro|\n\n        This function processes the commands that have been registered\n        to the bot and other groups. Without this coroutine, none of the\n        commands will be triggered.\n\n        By default, this coroutine is called inside the :func:`.on_message`\n        event. If you choose to override the :func:`.on_message` event, then\n        you should invoke this coroutine as well.\n\n        This is built using other low level tools, and is equivalent to a\n        call to :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`.\n\n        This also checks if the message's author is a bot and doesn't\n        call :meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so.\n\n        Parameters\n        -----------\n        message: :class:`discord.Message`\n            The message to process commands for.\n        \"\"\"\n        if message.author.bot:\n            return\n\n        ctx = await self.get_context(message)\n        await self.invoke(ctx)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 26,
        "column": 30
      },
      "text": "async def process_commands(self, message):\n        \"\"\"|coro|\n\n        This function processes the commands that have been registered\n        to the bot and other groups. Without this coroutine, none of the\n        commands will be triggered.\n\n        By default, this coroutine is called inside the :func:`.on_message`\n        event. If you choose to override the :func:`.on_message` event, then\n        you should invoke this coroutine as well.\n\n        This is built using other low level tools, and is equivalent to a\n        call to :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`.\n\n        This also checks if the message's author is a bot and doesn't\n        call :meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so.\n\n        Parameters\n        -----------\n        message: :class:`discord.Message`\n            The message to process commands for.\n        \"\"\"\n        if message.author.bot:\n            return\n\n        ctx = await self.get_context(message)\n        await self.invoke(ctx)",
      "children": [
        {
          "type": "async",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 5
          },
          "text": "async"
        },
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 6
          },
          "end": {
            "row": 0,
            "column": 9
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 10
          },
          "end": {
            "row": 0,
            "column": 26
          },
          "text": "process_commands"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 26
          },
          "end": {
            "row": 0,
            "column": 41
          },
          "text": "(self, message)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 26
              },
              "end": {
                "row": 0,
                "column": 27
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 27
              },
              "end": {
                "row": 0,
                "column": 31
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 31
              },
              "end": {
                "row": 0,
                "column": 32
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 33
              },
              "end": {
                "row": 0,
                "column": 40
              },
              "text": "message"
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 40
              },
              "end": {
                "row": 0,
                "column": 41
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 41
          },
          "end": {
            "row": 0,
            "column": 42
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 26,
            "column": 30
          },
          "text": "\"\"\"|coro|\n\n        This function processes the commands that have been registered\n        to the bot and other groups. Without this coroutine, none of the\n        commands will be triggered.\n\n        By default, this coroutine is called inside the :func:`.on_message`\n        event. If you choose to override the :func:`.on_message` event, then\n        you should invoke this coroutine as well.\n\n        This is built using other low level tools, and is equivalent to a\n        call to :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`.\n\n        This also checks if the message's author is a bot and doesn't\n        call :meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so.\n\n        Parameters\n        -----------\n        message: :class:`discord.Message`\n            The message to process commands for.\n        \"\"\"\n        if message.author.bot:\n            return\n\n        ctx = await self.get_context(message)\n        await self.invoke(ctx)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 21,
                "column": 11
              },
              "text": "\"\"\"|coro|\n\n        This function processes the commands that have been registered\n        to the bot and other groups. Without this coroutine, none of the\n        commands will be triggered.\n\n        By default, this coroutine is called inside the :func:`.on_message`\n        event. If you choose to override the :func:`.on_message` event, then\n        you should invoke this coroutine as well.\n\n        This is built using other low level tools, and is equivalent to a\n        call to :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`.\n\n        This also checks if the message's author is a bot and doesn't\n        call :meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so.\n\n        Parameters\n        -----------\n        message: :class:`discord.Message`\n            The message to process commands for.\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 21,
                    "column": 11
                  },
                  "text": "\"\"\"|coro|\n\n        This function processes the commands that have been registered\n        to the bot and other groups. Without this coroutine, none of the\n        commands will be triggered.\n\n        By default, this coroutine is called inside the :func:`.on_message`\n        event. If you choose to override the :func:`.on_message` event, then\n        you should invoke this coroutine as well.\n\n        This is built using other low level tools, and is equivalent to a\n        call to :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`.\n\n        This also checks if the message's author is a bot and doesn't\n        call :meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so.\n\n        Parameters\n        -----------\n        message: :class:`discord.Message`\n            The message to process commands for.\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 21,
                        "column": 8
                      },
                      "text": "|coro|\n\n        This function processes the commands that have been registered\n        to the bot and other groups. Without this coroutine, none of the\n        commands will be triggered.\n\n        By default, this coroutine is called inside the :func:`.on_message`\n        event. If you choose to override the :func:`.on_message` event, then\n        you should invoke this coroutine as well.\n\n        This is built using other low level tools, and is equivalent to a\n        call to :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`.\n\n        This also checks if the message's author is a bot and doesn't\n        call :meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so.\n\n        Parameters\n        -----------\n        message: :class:`discord.Message`\n            The message to process commands for.\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 21,
                        "column": 8
                      },
                      "end": {
                        "row": 21,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 22,
                "column": 8
              },
              "end": {
                "row": 23,
                "column": 18
              },
              "text": "if message.author.bot:\n            return",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 22,
                    "column": 8
                  },
                  "end": {
                    "row": 22,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "attribute",
                  "start": {
                    "row": 22,
                    "column": 11
                  },
                  "end": {
                    "row": 22,
                    "column": 29
                  },
                  "text": "message.author.bot",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 22,
                        "column": 11
                      },
                      "end": {
                        "row": 22,
                        "column": 25
                      },
                      "text": "message.author",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 22,
                            "column": 11
                          },
                          "end": {
                            "row": 22,
                            "column": 18
                          },
                          "text": "message"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 22,
                            "column": 18
                          },
                          "end": {
                            "row": 22,
                            "column": 19
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 22,
                            "column": 19
                          },
                          "end": {
                            "row": 22,
                            "column": 25
                          },
                          "text": "author"
                        }
                      ]
                    },
                    {
                      "type": ".",
                      "start": {
                        "row": 22,
                        "column": 25
                      },
                      "end": {
                        "row": 22,
                        "column": 26
                      },
                      "text": "."
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 22,
                        "column": 26
                      },
                      "end": {
                        "row": 22,
                        "column": 29
                      },
                      "text": "bot"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 22,
                    "column": 29
                  },
                  "end": {
                    "row": 22,
                    "column": 30
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 23,
                    "column": 12
                  },
                  "end": {
                    "row": 23,
                    "column": 18
                  },
                  "text": "return",
                  "children": [
                    {
                      "type": "return_statement",
                      "start": {
                        "row": 23,
                        "column": 12
                      },
                      "end": {
                        "row": 23,
                        "column": 18
                      },
                      "text": "return",
                      "children": [
                        {
                          "type": "return",
                          "start": {
                            "row": 23,
                            "column": 12
                          },
                          "end": {
                            "row": 23,
                            "column": 18
                          },
                          "text": "return"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 25,
                "column": 8
              },
              "end": {
                "row": 25,
                "column": 45
              },
              "text": "ctx = await self.get_context(message)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 25,
                    "column": 8
                  },
                  "end": {
                    "row": 25,
                    "column": 45
                  },
                  "text": "ctx = await self.get_context(message)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 25,
                        "column": 8
                      },
                      "end": {
                        "row": 25,
                        "column": 11
                      },
                      "text": "ctx"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 25,
                        "column": 12
                      },
                      "end": {
                        "row": 25,
                        "column": 13
                      },
                      "text": "="
                    },
                    {
                      "type": "await",
                      "start": {
                        "row": 25,
                        "column": 14
                      },
                      "end": {
                        "row": 25,
                        "column": 45
                      },
                      "text": "await self.get_context(message)",
                      "children": [
                        {
                          "type": "await",
                          "start": {
                            "row": 25,
                            "column": 14
                          },
                          "end": {
                            "row": 25,
                            "column": 19
                          },
                          "text": "await"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 25,
                            "column": 20
                          },
                          "end": {
                            "row": 25,
                            "column": 45
                          },
                          "text": "self.get_context(message)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 25,
                                "column": 20
                              },
                              "end": {
                                "row": 25,
                                "column": 36
                              },
                              "text": "self.get_context",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 25,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 24
                                  },
                                  "text": "self"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 25,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 25
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 25,
                                    "column": 25
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 36
                                  },
                                  "text": "get_context"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 25,
                                "column": 36
                              },
                              "end": {
                                "row": 25,
                                "column": 45
                              },
                              "text": "(message)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 25,
                                    "column": 36
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 37
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 25,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 44
                                  },
                                  "text": "message"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 25,
                                    "column": 44
                                  },
                                  "end": {
                                    "row": 25,
                                    "column": 45
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 26,
                "column": 8
              },
              "end": {
                "row": 26,
                "column": 30
              },
              "text": "await self.invoke(ctx)",
              "children": [
                {
                  "type": "await",
                  "start": {
                    "row": 26,
                    "column": 8
                  },
                  "end": {
                    "row": 26,
                    "column": 30
                  },
                  "text": "await self.invoke(ctx)",
                  "children": [
                    {
                      "type": "await",
                      "start": {
                        "row": 26,
                        "column": 8
                      },
                      "end": {
                        "row": 26,
                        "column": 13
                      },
                      "text": "await"
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 26,
                        "column": 14
                      },
                      "end": {
                        "row": 26,
                        "column": 30
                      },
                      "text": "self.invoke(ctx)",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 26,
                            "column": 14
                          },
                          "end": {
                            "row": 26,
                            "column": 25
                          },
                          "text": "self.invoke",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 26,
                                "column": 14
                              },
                              "end": {
                                "row": 26,
                                "column": 18
                              },
                              "text": "self"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 26,
                                "column": 18
                              },
                              "end": {
                                "row": 26,
                                "column": 19
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 26,
                                "column": 19
                              },
                              "end": {
                                "row": 26,
                                "column": 25
                              },
                              "text": "invoke"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 26,
                            "column": 25
                          },
                          "end": {
                            "row": 26,
                            "column": 30
                          },
                          "text": "(ctx)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 26,
                                "column": 25
                              },
                              "end": {
                                "row": 26,
                                "column": 26
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 26,
                                "column": 26
                              },
                              "end": {
                                "row": 26,
                                "column": 29
                              },
                              "text": "ctx"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 26,
                                "column": 29
                              },
                              "end": {
                                "row": 26,
                                "column": 30
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}