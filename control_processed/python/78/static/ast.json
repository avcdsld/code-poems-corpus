{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 32,
    "column": 42
  },
  "text": "def fold(self, zeroValue, op):\n        \"\"\"\n        Aggregate the elements of each partition, and then the results for all\n        the partitions, using a given associative function and a neutral \"zero value.\"\n\n        The function C{op(t1, t2)} is allowed to modify C{t1} and return it\n        as its result value to avoid object allocation; however, it should not\n        modify C{t2}.\n\n        This behaves somewhat differently from fold operations implemented\n        for non-distributed collections in functional languages like Scala.\n        This fold operation may be applied to partitions individually, and then\n        fold those results into the final result, rather than apply the fold\n        to each element sequentially in some defined ordering. For functions\n        that are not commutative, the result may differ from that of a fold\n        applied to a non-distributed collection.\n\n        >>> from operator import add\n        >>> sc.parallelize([1, 2, 3, 4, 5]).fold(0, add)\n        15\n        \"\"\"\n        op = fail_on_stopiteration(op)\n\n        def func(iterator):\n            acc = zeroValue\n            for obj in iterator:\n                acc = op(acc, obj)\n            yield acc\n        # collecting result of mapPartitions here ensures that the copy of\n        # zeroValue provided to each partition is unique from the one provided\n        # to the final reduce call\n        vals = self.mapPartitions(func).collect()\n        return reduce(op, vals, zeroValue)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 32,
        "column": 42
      },
      "text": "def fold(self, zeroValue, op):\n        \"\"\"\n        Aggregate the elements of each partition, and then the results for all\n        the partitions, using a given associative function and a neutral \"zero value.\"\n\n        The function C{op(t1, t2)} is allowed to modify C{t1} and return it\n        as its result value to avoid object allocation; however, it should not\n        modify C{t2}.\n\n        This behaves somewhat differently from fold operations implemented\n        for non-distributed collections in functional languages like Scala.\n        This fold operation may be applied to partitions individually, and then\n        fold those results into the final result, rather than apply the fold\n        to each element sequentially in some defined ordering. For functions\n        that are not commutative, the result may differ from that of a fold\n        applied to a non-distributed collection.\n\n        >>> from operator import add\n        >>> sc.parallelize([1, 2, 3, 4, 5]).fold(0, add)\n        15\n        \"\"\"\n        op = fail_on_stopiteration(op)\n\n        def func(iterator):\n            acc = zeroValue\n            for obj in iterator:\n                acc = op(acc, obj)\n            yield acc\n        # collecting result of mapPartitions here ensures that the copy of\n        # zeroValue provided to each partition is unique from the one provided\n        # to the final reduce call\n        vals = self.mapPartitions(func).collect()\n        return reduce(op, vals, zeroValue)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 8
          },
          "text": "fold"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 8
          },
          "end": {
            "row": 0,
            "column": 29
          },
          "text": "(self, zeroValue, op)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 8
              },
              "end": {
                "row": 0,
                "column": 9
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 9
              },
              "end": {
                "row": 0,
                "column": 13
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 13
              },
              "end": {
                "row": 0,
                "column": 14
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 15
              },
              "end": {
                "row": 0,
                "column": 24
              },
              "text": "zeroValue"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 24
              },
              "end": {
                "row": 0,
                "column": 25
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 26
              },
              "end": {
                "row": 0,
                "column": 28
              },
              "text": "op"
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 28
              },
              "end": {
                "row": 0,
                "column": 29
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 29
          },
          "end": {
            "row": 0,
            "column": 30
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 32,
            "column": 42
          },
          "text": "\"\"\"\n        Aggregate the elements of each partition, and then the results for all\n        the partitions, using a given associative function and a neutral \"zero value.\"\n\n        The function C{op(t1, t2)} is allowed to modify C{t1} and return it\n        as its result value to avoid object allocation; however, it should not\n        modify C{t2}.\n\n        This behaves somewhat differently from fold operations implemented\n        for non-distributed collections in functional languages like Scala.\n        This fold operation may be applied to partitions individually, and then\n        fold those results into the final result, rather than apply the fold\n        to each element sequentially in some defined ordering. For functions\n        that are not commutative, the result may differ from that of a fold\n        applied to a non-distributed collection.\n\n        >>> from operator import add\n        >>> sc.parallelize([1, 2, 3, 4, 5]).fold(0, add)\n        15\n        \"\"\"\n        op = fail_on_stopiteration(op)\n\n        def func(iterator):\n            acc = zeroValue\n            for obj in iterator:\n                acc = op(acc, obj)\n            yield acc\n        # collecting result of mapPartitions here ensures that the copy of\n        # zeroValue provided to each partition is unique from the one provided\n        # to the final reduce call\n        vals = self.mapPartitions(func).collect()\n        return reduce(op, vals, zeroValue)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 20,
                "column": 11
              },
              "text": "\"\"\"\n        Aggregate the elements of each partition, and then the results for all\n        the partitions, using a given associative function and a neutral \"zero value.\"\n\n        The function C{op(t1, t2)} is allowed to modify C{t1} and return it\n        as its result value to avoid object allocation; however, it should not\n        modify C{t2}.\n\n        This behaves somewhat differently from fold operations implemented\n        for non-distributed collections in functional languages like Scala.\n        This fold operation may be applied to partitions individually, and then\n        fold those results into the final result, rather than apply the fold\n        to each element sequentially in some defined ordering. For functions\n        that are not commutative, the result may differ from that of a fold\n        applied to a non-distributed collection.\n\n        >>> from operator import add\n        >>> sc.parallelize([1, 2, 3, 4, 5]).fold(0, add)\n        15\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 20,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Aggregate the elements of each partition, and then the results for all\n        the partitions, using a given associative function and a neutral \"zero value.\"\n\n        The function C{op(t1, t2)} is allowed to modify C{t1} and return it\n        as its result value to avoid object allocation; however, it should not\n        modify C{t2}.\n\n        This behaves somewhat differently from fold operations implemented\n        for non-distributed collections in functional languages like Scala.\n        This fold operation may be applied to partitions individually, and then\n        fold those results into the final result, rather than apply the fold\n        to each element sequentially in some defined ordering. For functions\n        that are not commutative, the result may differ from that of a fold\n        applied to a non-distributed collection.\n\n        >>> from operator import add\n        >>> sc.parallelize([1, 2, 3, 4, 5]).fold(0, add)\n        15\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 20,
                        "column": 8
                      },
                      "text": "\n        Aggregate the elements of each partition, and then the results for all\n        the partitions, using a given associative function and a neutral \"zero value.\"\n\n        The function C{op(t1, t2)} is allowed to modify C{t1} and return it\n        as its result value to avoid object allocation; however, it should not\n        modify C{t2}.\n\n        This behaves somewhat differently from fold operations implemented\n        for non-distributed collections in functional languages like Scala.\n        This fold operation may be applied to partitions individually, and then\n        fold those results into the final result, rather than apply the fold\n        to each element sequentially in some defined ordering. For functions\n        that are not commutative, the result may differ from that of a fold\n        applied to a non-distributed collection.\n\n        >>> from operator import add\n        >>> sc.parallelize([1, 2, 3, 4, 5]).fold(0, add)\n        15\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 20,
                        "column": 8
                      },
                      "end": {
                        "row": 20,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 21,
                "column": 8
              },
              "end": {
                "row": 21,
                "column": 38
              },
              "text": "op = fail_on_stopiteration(op)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 21,
                    "column": 8
                  },
                  "end": {
                    "row": 21,
                    "column": 38
                  },
                  "text": "op = fail_on_stopiteration(op)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 21,
                        "column": 8
                      },
                      "end": {
                        "row": 21,
                        "column": 10
                      },
                      "text": "op"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 21,
                        "column": 11
                      },
                      "end": {
                        "row": 21,
                        "column": 12
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 21,
                        "column": 13
                      },
                      "end": {
                        "row": 21,
                        "column": 38
                      },
                      "text": "fail_on_stopiteration(op)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 21,
                            "column": 13
                          },
                          "end": {
                            "row": 21,
                            "column": 34
                          },
                          "text": "fail_on_stopiteration"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 21,
                            "column": 34
                          },
                          "end": {
                            "row": 21,
                            "column": 38
                          },
                          "text": "(op)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 21,
                                "column": 34
                              },
                              "end": {
                                "row": 21,
                                "column": 35
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 21,
                                "column": 35
                              },
                              "end": {
                                "row": 21,
                                "column": 37
                              },
                              "text": "op"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 21,
                                "column": 37
                              },
                              "end": {
                                "row": 21,
                                "column": 38
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "function_definition",
              "start": {
                "row": 23,
                "column": 8
              },
              "end": {
                "row": 27,
                "column": 21
              },
              "text": "def func(iterator):\n            acc = zeroValue\n            for obj in iterator:\n                acc = op(acc, obj)\n            yield acc",
              "children": [
                {
                  "type": "def",
                  "start": {
                    "row": 23,
                    "column": 8
                  },
                  "end": {
                    "row": 23,
                    "column": 11
                  },
                  "text": "def"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 23,
                    "column": 12
                  },
                  "end": {
                    "row": 23,
                    "column": 16
                  },
                  "text": "func"
                },
                {
                  "type": "parameters",
                  "start": {
                    "row": 23,
                    "column": 16
                  },
                  "end": {
                    "row": 23,
                    "column": 26
                  },
                  "text": "(iterator)",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 23,
                        "column": 16
                      },
                      "end": {
                        "row": 23,
                        "column": 17
                      },
                      "text": "("
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 23,
                        "column": 17
                      },
                      "end": {
                        "row": 23,
                        "column": 25
                      },
                      "text": "iterator"
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 23,
                        "column": 25
                      },
                      "end": {
                        "row": 23,
                        "column": 26
                      },
                      "text": ")"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 23,
                    "column": 26
                  },
                  "end": {
                    "row": 23,
                    "column": 27
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 24,
                    "column": 12
                  },
                  "end": {
                    "row": 27,
                    "column": 21
                  },
                  "text": "acc = zeroValue\n            for obj in iterator:\n                acc = op(acc, obj)\n            yield acc",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 24,
                        "column": 12
                      },
                      "end": {
                        "row": 24,
                        "column": 27
                      },
                      "text": "acc = zeroValue",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 24,
                            "column": 12
                          },
                          "end": {
                            "row": 24,
                            "column": 27
                          },
                          "text": "acc = zeroValue",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 24,
                                "column": 12
                              },
                              "end": {
                                "row": 24,
                                "column": 15
                              },
                              "text": "acc"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 24,
                                "column": 16
                              },
                              "end": {
                                "row": 24,
                                "column": 17
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 24,
                                "column": 18
                              },
                              "end": {
                                "row": 24,
                                "column": 27
                              },
                              "text": "zeroValue"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "for_statement",
                      "start": {
                        "row": 25,
                        "column": 12
                      },
                      "end": {
                        "row": 26,
                        "column": 34
                      },
                      "text": "for obj in iterator:\n                acc = op(acc, obj)",
                      "children": [
                        {
                          "type": "for",
                          "start": {
                            "row": 25,
                            "column": 12
                          },
                          "end": {
                            "row": 25,
                            "column": 15
                          },
                          "text": "for"
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 16
                          },
                          "end": {
                            "row": 25,
                            "column": 19
                          },
                          "text": "obj"
                        },
                        {
                          "type": "in",
                          "start": {
                            "row": 25,
                            "column": 20
                          },
                          "end": {
                            "row": 25,
                            "column": 22
                          },
                          "text": "in"
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 25,
                            "column": 23
                          },
                          "end": {
                            "row": 25,
                            "column": 31
                          },
                          "text": "iterator"
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 25,
                            "column": 31
                          },
                          "end": {
                            "row": 25,
                            "column": 32
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 26,
                            "column": 16
                          },
                          "end": {
                            "row": 26,
                            "column": 34
                          },
                          "text": "acc = op(acc, obj)",
                          "children": [
                            {
                              "type": "expression_statement",
                              "start": {
                                "row": 26,
                                "column": 16
                              },
                              "end": {
                                "row": 26,
                                "column": 34
                              },
                              "text": "acc = op(acc, obj)",
                              "children": [
                                {
                                  "type": "assignment",
                                  "start": {
                                    "row": 26,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 26,
                                    "column": 34
                                  },
                                  "text": "acc = op(acc, obj)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 26,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 26,
                                        "column": 19
                                      },
                                      "text": "acc"
                                    },
                                    {
                                      "type": "=",
                                      "start": {
                                        "row": 26,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 26,
                                        "column": 21
                                      },
                                      "text": "="
                                    },
                                    {
                                      "type": "call",
                                      "start": {
                                        "row": 26,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 26,
                                        "column": 34
                                      },
                                      "text": "op(acc, obj)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 26,
                                            "column": 22
                                          },
                                          "end": {
                                            "row": 26,
                                            "column": 24
                                          },
                                          "text": "op"
                                        },
                                        {
                                          "type": "argument_list",
                                          "start": {
                                            "row": 26,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 26,
                                            "column": 34
                                          },
                                          "text": "(acc, obj)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start": {
                                                "row": 26,
                                                "column": 24
                                              },
                                              "end": {
                                                "row": 26,
                                                "column": 25
                                              },
                                              "text": "("
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 26,
                                                "column": 25
                                              },
                                              "end": {
                                                "row": 26,
                                                "column": 28
                                              },
                                              "text": "acc"
                                            },
                                            {
                                              "type": ",",
                                              "start": {
                                                "row": 26,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 26,
                                                "column": 29
                                              },
                                              "text": ","
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 26,
                                                "column": 30
                                              },
                                              "end": {
                                                "row": 26,
                                                "column": 33
                                              },
                                              "text": "obj"
                                            },
                                            {
                                              "type": ")",
                                              "start": {
                                                "row": 26,
                                                "column": 33
                                              },
                                              "end": {
                                                "row": 26,
                                                "column": 34
                                              },
                                              "text": ")"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 27,
                        "column": 12
                      },
                      "end": {
                        "row": 27,
                        "column": 21
                      },
                      "text": "yield acc",
                      "children": [
                        {
                          "type": "yield",
                          "start": {
                            "row": 27,
                            "column": 12
                          },
                          "end": {
                            "row": 27,
                            "column": 21
                          },
                          "text": "yield acc",
                          "children": [
                            {
                              "type": "yield",
                              "start": {
                                "row": 27,
                                "column": 12
                              },
                              "end": {
                                "row": 27,
                                "column": 17
                              },
                              "text": "yield"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 27,
                                "column": 18
                              },
                              "end": {
                                "row": 27,
                                "column": 21
                              },
                              "text": "acc"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 28,
                "column": 8
              },
              "end": {
                "row": 28,
                "column": 74
              },
              "text": "# collecting result of mapPartitions here ensures that the copy of"
            },
            {
              "type": "comment",
              "start": {
                "row": 29,
                "column": 8
              },
              "end": {
                "row": 29,
                "column": 78
              },
              "text": "# zeroValue provided to each partition is unique from the one provided"
            },
            {
              "type": "comment",
              "start": {
                "row": 30,
                "column": 8
              },
              "end": {
                "row": 30,
                "column": 34
              },
              "text": "# to the final reduce call"
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 31,
                "column": 8
              },
              "end": {
                "row": 31,
                "column": 49
              },
              "text": "vals = self.mapPartitions(func).collect()",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 31,
                    "column": 8
                  },
                  "end": {
                    "row": 31,
                    "column": 49
                  },
                  "text": "vals = self.mapPartitions(func).collect()",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 31,
                        "column": 8
                      },
                      "end": {
                        "row": 31,
                        "column": 12
                      },
                      "text": "vals"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 31,
                        "column": 13
                      },
                      "end": {
                        "row": 31,
                        "column": 14
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 31,
                        "column": 15
                      },
                      "end": {
                        "row": 31,
                        "column": 49
                      },
                      "text": "self.mapPartitions(func).collect()",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 31,
                            "column": 15
                          },
                          "end": {
                            "row": 31,
                            "column": 47
                          },
                          "text": "self.mapPartitions(func).collect",
                          "children": [
                            {
                              "type": "call",
                              "start": {
                                "row": 31,
                                "column": 15
                              },
                              "end": {
                                "row": 31,
                                "column": 39
                              },
                              "text": "self.mapPartitions(func)",
                              "children": [
                                {
                                  "type": "attribute",
                                  "start": {
                                    "row": 31,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 33
                                  },
                                  "text": "self.mapPartitions",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 31,
                                        "column": 15
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 19
                                      },
                                      "text": "self"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 31,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 20
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 31,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 33
                                      },
                                      "text": "mapPartitions"
                                    }
                                  ]
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 31,
                                    "column": 33
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 39
                                  },
                                  "text": "(func)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 31,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 34
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 31,
                                        "column": 34
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 38
                                      },
                                      "text": "func"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 31,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 39
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 31,
                                "column": 39
                              },
                              "end": {
                                "row": 31,
                                "column": 40
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 31,
                                "column": 40
                              },
                              "end": {
                                "row": 31,
                                "column": 47
                              },
                              "text": "collect"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 31,
                            "column": 47
                          },
                          "end": {
                            "row": 31,
                            "column": 49
                          },
                          "text": "()",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 31,
                                "column": 47
                              },
                              "end": {
                                "row": 31,
                                "column": 48
                              },
                              "text": "("
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 31,
                                "column": 48
                              },
                              "end": {
                                "row": 31,
                                "column": 49
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 32,
                "column": 8
              },
              "end": {
                "row": 32,
                "column": 42
              },
              "text": "return reduce(op, vals, zeroValue)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 32,
                    "column": 8
                  },
                  "end": {
                    "row": 32,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 32,
                    "column": 15
                  },
                  "end": {
                    "row": 32,
                    "column": 42
                  },
                  "text": "reduce(op, vals, zeroValue)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 32,
                        "column": 15
                      },
                      "end": {
                        "row": 32,
                        "column": 21
                      },
                      "text": "reduce"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 32,
                        "column": 21
                      },
                      "end": {
                        "row": 32,
                        "column": 42
                      },
                      "text": "(op, vals, zeroValue)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 32,
                            "column": 21
                          },
                          "end": {
                            "row": 32,
                            "column": 22
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 32,
                            "column": 22
                          },
                          "end": {
                            "row": 32,
                            "column": 24
                          },
                          "text": "op"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 32,
                            "column": 24
                          },
                          "end": {
                            "row": 32,
                            "column": 25
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 32,
                            "column": 26
                          },
                          "end": {
                            "row": 32,
                            "column": 30
                          },
                          "text": "vals"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 32,
                            "column": 30
                          },
                          "end": {
                            "row": 32,
                            "column": 31
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 32,
                            "column": 32
                          },
                          "end": {
                            "row": 32,
                            "column": 41
                          },
                          "text": "zeroValue"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 32,
                            "column": 41
                          },
                          "end": {
                            "row": 32,
                            "column": 42
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}