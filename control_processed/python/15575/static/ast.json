{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 61,
    "column": 90
  },
  "text": "def predict(self, dataset, output_type='class', missing_value_action='auto'):\n        \"\"\"\n        A flexible and advanced prediction API.\n\n        The target column is provided during\n        :func:`~turicreate.decision_tree.create`. If the target column is in the\n        `dataset` it will be ignored.\n\n        Parameters\n        ----------\n        dataset : SFrame\n          A dataset that has the same columns that were used during training.\n          If the target column exists in ``dataset`` it will be ignored\n          while making predictions.\n\n        output_type : {'probability', 'margin', 'class', 'probability_vector'}, optional.\n            Form of the predictions which are one of:\n\n            - 'probability': Prediction probability associated with the True\n               class (not applicable for multi-class classification)\n            - 'margin': Margin associated with the prediction (not applicable\n              for multi-class classification)\n            - 'probability_vector': Prediction probability associated with each\n              class as a vector. The probability of the first class (sorted\n              alphanumerically by name of the class in the training set) is in\n              position 0 of the vector, the second in position 1 and so on.\n            - 'class': Class prediction. For multi-class classification, this\n               returns the class with maximum probability.\n\n        missing_value_action : str, optional\n            Action to perform when missing values are encountered. Can be\n            one of:\n\n            - 'auto': By default the model will treat missing value as is.\n            - 'impute': Proceed with evaluation by filling in the missing\n              values with the mean of the training data. Missing\n              values are also imputed if an entire column of data is\n              missing during evaluation.\n            - 'error': Do not proceed with evaluation and terminate with\n              an error message.\n\n\n        Returns\n        -------\n        out : SArray\n           Predicted target value for each example (i.e. row) in the dataset.\n\n        See Also\n        ----------\n        create, evaluate, classify\n\n        Examples\n        --------\n        >>> m.predict(testdata)\n        >>> m.predict(testdata, output_type='probability')\n        >>> m.predict(testdata, output_type='margin')\n        \"\"\"\n        _check_categorical_option_type('output_type', output_type,\n                ['class', 'margin', 'probability', 'probability_vector'])\n        return super(_Classifier, self).predict(dataset,\n                                                output_type=output_type,\n                                                missing_value_action=missing_value_action)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 61,
        "column": 90
      },
      "text": "def predict(self, dataset, output_type='class', missing_value_action='auto'):\n        \"\"\"\n        A flexible and advanced prediction API.\n\n        The target column is provided during\n        :func:`~turicreate.decision_tree.create`. If the target column is in the\n        `dataset` it will be ignored.\n\n        Parameters\n        ----------\n        dataset : SFrame\n          A dataset that has the same columns that were used during training.\n          If the target column exists in ``dataset`` it will be ignored\n          while making predictions.\n\n        output_type : {'probability', 'margin', 'class', 'probability_vector'}, optional.\n            Form of the predictions which are one of:\n\n            - 'probability': Prediction probability associated with the True\n               class (not applicable for multi-class classification)\n            - 'margin': Margin associated with the prediction (not applicable\n              for multi-class classification)\n            - 'probability_vector': Prediction probability associated with each\n              class as a vector. The probability of the first class (sorted\n              alphanumerically by name of the class in the training set) is in\n              position 0 of the vector, the second in position 1 and so on.\n            - 'class': Class prediction. For multi-class classification, this\n               returns the class with maximum probability.\n\n        missing_value_action : str, optional\n            Action to perform when missing values are encountered. Can be\n            one of:\n\n            - 'auto': By default the model will treat missing value as is.\n            - 'impute': Proceed with evaluation by filling in the missing\n              values with the mean of the training data. Missing\n              values are also imputed if an entire column of data is\n              missing during evaluation.\n            - 'error': Do not proceed with evaluation and terminate with\n              an error message.\n\n\n        Returns\n        -------\n        out : SArray\n           Predicted target value for each example (i.e. row) in the dataset.\n\n        See Also\n        ----------\n        create, evaluate, classify\n\n        Examples\n        --------\n        >>> m.predict(testdata)\n        >>> m.predict(testdata, output_type='probability')\n        >>> m.predict(testdata, output_type='margin')\n        \"\"\"\n        _check_categorical_option_type('output_type', output_type,\n                ['class', 'margin', 'probability', 'probability_vector'])\n        return super(_Classifier, self).predict(dataset,\n                                                output_type=output_type,\n                                                missing_value_action=missing_value_action)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 11
          },
          "text": "predict"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 11
          },
          "end": {
            "row": 0,
            "column": 76
          },
          "text": "(self, dataset, output_type='class', missing_value_action='auto')",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 11
              },
              "end": {
                "row": 0,
                "column": 12
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 12
              },
              "end": {
                "row": 0,
                "column": 16
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 17
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 18
              },
              "end": {
                "row": 0,
                "column": 25
              },
              "text": "dataset"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 25
              },
              "end": {
                "row": 0,
                "column": 26
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 27
              },
              "end": {
                "row": 0,
                "column": 46
              },
              "text": "output_type='class'",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 27
                  },
                  "end": {
                    "row": 0,
                    "column": 38
                  },
                  "text": "output_type"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 38
                  },
                  "end": {
                    "row": 0,
                    "column": 39
                  },
                  "text": "="
                },
                {
                  "type": "string",
                  "start": {
                    "row": 0,
                    "column": 39
                  },
                  "end": {
                    "row": 0,
                    "column": 46
                  },
                  "text": "'class'",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 0,
                        "column": 39
                      },
                      "end": {
                        "row": 0,
                        "column": 40
                      },
                      "text": "'"
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 0,
                        "column": 40
                      },
                      "end": {
                        "row": 0,
                        "column": 45
                      },
                      "text": "class"
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 0,
                        "column": 45
                      },
                      "end": {
                        "row": 0,
                        "column": 46
                      },
                      "text": "'"
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 46
              },
              "end": {
                "row": 0,
                "column": 47
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 0,
                "column": 48
              },
              "end": {
                "row": 0,
                "column": 75
              },
              "text": "missing_value_action='auto'",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 48
                  },
                  "end": {
                    "row": 0,
                    "column": 68
                  },
                  "text": "missing_value_action"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 68
                  },
                  "end": {
                    "row": 0,
                    "column": 69
                  },
                  "text": "="
                },
                {
                  "type": "string",
                  "start": {
                    "row": 0,
                    "column": 69
                  },
                  "end": {
                    "row": 0,
                    "column": 75
                  },
                  "text": "'auto'",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 0,
                        "column": 69
                      },
                      "end": {
                        "row": 0,
                        "column": 70
                      },
                      "text": "'"
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 0,
                        "column": 70
                      },
                      "end": {
                        "row": 0,
                        "column": 74
                      },
                      "text": "auto"
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 0,
                        "column": 74
                      },
                      "end": {
                        "row": 0,
                        "column": 75
                      },
                      "text": "'"
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 75
              },
              "end": {
                "row": 0,
                "column": 76
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 76
          },
          "end": {
            "row": 0,
            "column": 77
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 61,
            "column": 90
          },
          "text": "\"\"\"\n        A flexible and advanced prediction API.\n\n        The target column is provided during\n        :func:`~turicreate.decision_tree.create`. If the target column is in the\n        `dataset` it will be ignored.\n\n        Parameters\n        ----------\n        dataset : SFrame\n          A dataset that has the same columns that were used during training.\n          If the target column exists in ``dataset`` it will be ignored\n          while making predictions.\n\n        output_type : {'probability', 'margin', 'class', 'probability_vector'}, optional.\n            Form of the predictions which are one of:\n\n            - 'probability': Prediction probability associated with the True\n               class (not applicable for multi-class classification)\n            - 'margin': Margin associated with the prediction (not applicable\n              for multi-class classification)\n            - 'probability_vector': Prediction probability associated with each\n              class as a vector. The probability of the first class (sorted\n              alphanumerically by name of the class in the training set) is in\n              position 0 of the vector, the second in position 1 and so on.\n            - 'class': Class prediction. For multi-class classification, this\n               returns the class with maximum probability.\n\n        missing_value_action : str, optional\n            Action to perform when missing values are encountered. Can be\n            one of:\n\n            - 'auto': By default the model will treat missing value as is.\n            - 'impute': Proceed with evaluation by filling in the missing\n              values with the mean of the training data. Missing\n              values are also imputed if an entire column of data is\n              missing during evaluation.\n            - 'error': Do not proceed with evaluation and terminate with\n              an error message.\n\n\n        Returns\n        -------\n        out : SArray\n           Predicted target value for each example (i.e. row) in the dataset.\n\n        See Also\n        ----------\n        create, evaluate, classify\n\n        Examples\n        --------\n        >>> m.predict(testdata)\n        >>> m.predict(testdata, output_type='probability')\n        >>> m.predict(testdata, output_type='margin')\n        \"\"\"\n        _check_categorical_option_type('output_type', output_type,\n                ['class', 'margin', 'probability', 'probability_vector'])\n        return super(_Classifier, self).predict(dataset,\n                                                output_type=output_type,\n                                                missing_value_action=missing_value_action)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 56,
                "column": 11
              },
              "text": "\"\"\"\n        A flexible and advanced prediction API.\n\n        The target column is provided during\n        :func:`~turicreate.decision_tree.create`. If the target column is in the\n        `dataset` it will be ignored.\n\n        Parameters\n        ----------\n        dataset : SFrame\n          A dataset that has the same columns that were used during training.\n          If the target column exists in ``dataset`` it will be ignored\n          while making predictions.\n\n        output_type : {'probability', 'margin', 'class', 'probability_vector'}, optional.\n            Form of the predictions which are one of:\n\n            - 'probability': Prediction probability associated with the True\n               class (not applicable for multi-class classification)\n            - 'margin': Margin associated with the prediction (not applicable\n              for multi-class classification)\n            - 'probability_vector': Prediction probability associated with each\n              class as a vector. The probability of the first class (sorted\n              alphanumerically by name of the class in the training set) is in\n              position 0 of the vector, the second in position 1 and so on.\n            - 'class': Class prediction. For multi-class classification, this\n               returns the class with maximum probability.\n\n        missing_value_action : str, optional\n            Action to perform when missing values are encountered. Can be\n            one of:\n\n            - 'auto': By default the model will treat missing value as is.\n            - 'impute': Proceed with evaluation by filling in the missing\n              values with the mean of the training data. Missing\n              values are also imputed if an entire column of data is\n              missing during evaluation.\n            - 'error': Do not proceed with evaluation and terminate with\n              an error message.\n\n\n        Returns\n        -------\n        out : SArray\n           Predicted target value for each example (i.e. row) in the dataset.\n\n        See Also\n        ----------\n        create, evaluate, classify\n\n        Examples\n        --------\n        >>> m.predict(testdata)\n        >>> m.predict(testdata, output_type='probability')\n        >>> m.predict(testdata, output_type='margin')\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 56,
                    "column": 11
                  },
                  "text": "\"\"\"\n        A flexible and advanced prediction API.\n\n        The target column is provided during\n        :func:`~turicreate.decision_tree.create`. If the target column is in the\n        `dataset` it will be ignored.\n\n        Parameters\n        ----------\n        dataset : SFrame\n          A dataset that has the same columns that were used during training.\n          If the target column exists in ``dataset`` it will be ignored\n          while making predictions.\n\n        output_type : {'probability', 'margin', 'class', 'probability_vector'}, optional.\n            Form of the predictions which are one of:\n\n            - 'probability': Prediction probability associated with the True\n               class (not applicable for multi-class classification)\n            - 'margin': Margin associated with the prediction (not applicable\n              for multi-class classification)\n            - 'probability_vector': Prediction probability associated with each\n              class as a vector. The probability of the first class (sorted\n              alphanumerically by name of the class in the training set) is in\n              position 0 of the vector, the second in position 1 and so on.\n            - 'class': Class prediction. For multi-class classification, this\n               returns the class with maximum probability.\n\n        missing_value_action : str, optional\n            Action to perform when missing values are encountered. Can be\n            one of:\n\n            - 'auto': By default the model will treat missing value as is.\n            - 'impute': Proceed with evaluation by filling in the missing\n              values with the mean of the training data. Missing\n              values are also imputed if an entire column of data is\n              missing during evaluation.\n            - 'error': Do not proceed with evaluation and terminate with\n              an error message.\n\n\n        Returns\n        -------\n        out : SArray\n           Predicted target value for each example (i.e. row) in the dataset.\n\n        See Also\n        ----------\n        create, evaluate, classify\n\n        Examples\n        --------\n        >>> m.predict(testdata)\n        >>> m.predict(testdata, output_type='probability')\n        >>> m.predict(testdata, output_type='margin')\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 56,
                        "column": 8
                      },
                      "text": "\n        A flexible and advanced prediction API.\n\n        The target column is provided during\n        :func:`~turicreate.decision_tree.create`. If the target column is in the\n        `dataset` it will be ignored.\n\n        Parameters\n        ----------\n        dataset : SFrame\n          A dataset that has the same columns that were used during training.\n          If the target column exists in ``dataset`` it will be ignored\n          while making predictions.\n\n        output_type : {'probability', 'margin', 'class', 'probability_vector'}, optional.\n            Form of the predictions which are one of:\n\n            - 'probability': Prediction probability associated with the True\n               class (not applicable for multi-class classification)\n            - 'margin': Margin associated with the prediction (not applicable\n              for multi-class classification)\n            - 'probability_vector': Prediction probability associated with each\n              class as a vector. The probability of the first class (sorted\n              alphanumerically by name of the class in the training set) is in\n              position 0 of the vector, the second in position 1 and so on.\n            - 'class': Class prediction. For multi-class classification, this\n               returns the class with maximum probability.\n\n        missing_value_action : str, optional\n            Action to perform when missing values are encountered. Can be\n            one of:\n\n            - 'auto': By default the model will treat missing value as is.\n            - 'impute': Proceed with evaluation by filling in the missing\n              values with the mean of the training data. Missing\n              values are also imputed if an entire column of data is\n              missing during evaluation.\n            - 'error': Do not proceed with evaluation and terminate with\n              an error message.\n\n\n        Returns\n        -------\n        out : SArray\n           Predicted target value for each example (i.e. row) in the dataset.\n\n        See Also\n        ----------\n        create, evaluate, classify\n\n        Examples\n        --------\n        >>> m.predict(testdata)\n        >>> m.predict(testdata, output_type='probability')\n        >>> m.predict(testdata, output_type='margin')\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 56,
                        "column": 8
                      },
                      "end": {
                        "row": 56,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 57,
                "column": 8
              },
              "end": {
                "row": 58,
                "column": 73
              },
              "text": "_check_categorical_option_type('output_type', output_type,\n                ['class', 'margin', 'probability', 'probability_vector'])",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 57,
                    "column": 8
                  },
                  "end": {
                    "row": 58,
                    "column": 73
                  },
                  "text": "_check_categorical_option_type('output_type', output_type,\n                ['class', 'margin', 'probability', 'probability_vector'])",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 57,
                        "column": 8
                      },
                      "end": {
                        "row": 57,
                        "column": 38
                      },
                      "text": "_check_categorical_option_type"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 57,
                        "column": 38
                      },
                      "end": {
                        "row": 58,
                        "column": 73
                      },
                      "text": "('output_type', output_type,\n                ['class', 'margin', 'probability', 'probability_vector'])",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 57,
                            "column": 38
                          },
                          "end": {
                            "row": 57,
                            "column": 39
                          },
                          "text": "("
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 57,
                            "column": 39
                          },
                          "end": {
                            "row": 57,
                            "column": 52
                          },
                          "text": "'output_type'",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 57,
                                "column": 39
                              },
                              "end": {
                                "row": 57,
                                "column": 40
                              },
                              "text": "'"
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 57,
                                "column": 40
                              },
                              "end": {
                                "row": 57,
                                "column": 51
                              },
                              "text": "output_type"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 57,
                                "column": 51
                              },
                              "end": {
                                "row": 57,
                                "column": 52
                              },
                              "text": "'"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 57,
                            "column": 52
                          },
                          "end": {
                            "row": 57,
                            "column": 53
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 57,
                            "column": 54
                          },
                          "end": {
                            "row": 57,
                            "column": 65
                          },
                          "text": "output_type"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 57,
                            "column": 65
                          },
                          "end": {
                            "row": 57,
                            "column": 66
                          },
                          "text": ","
                        },
                        {
                          "type": "list",
                          "start": {
                            "row": 58,
                            "column": 16
                          },
                          "end": {
                            "row": 58,
                            "column": 72
                          },
                          "text": "['class', 'margin', 'probability', 'probability_vector']",
                          "children": [
                            {
                              "type": "[",
                              "start": {
                                "row": 58,
                                "column": 16
                              },
                              "end": {
                                "row": 58,
                                "column": 17
                              },
                              "text": "["
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 58,
                                "column": 17
                              },
                              "end": {
                                "row": 58,
                                "column": 24
                              },
                              "text": "'class'",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 58,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 18
                                  },
                                  "text": "'"
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 58,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 23
                                  },
                                  "text": "class"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 58,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 24
                                  },
                                  "text": "'"
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 58,
                                "column": 24
                              },
                              "end": {
                                "row": 58,
                                "column": 25
                              },
                              "text": ","
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 58,
                                "column": 26
                              },
                              "end": {
                                "row": 58,
                                "column": 34
                              },
                              "text": "'margin'",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 58,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 27
                                  },
                                  "text": "'"
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 58,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 33
                                  },
                                  "text": "margin"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 58,
                                    "column": 33
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 34
                                  },
                                  "text": "'"
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 58,
                                "column": 34
                              },
                              "end": {
                                "row": 58,
                                "column": 35
                              },
                              "text": ","
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 58,
                                "column": 36
                              },
                              "end": {
                                "row": 58,
                                "column": 49
                              },
                              "text": "'probability'",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 58,
                                    "column": 36
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 37
                                  },
                                  "text": "'"
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 58,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 48
                                  },
                                  "text": "probability"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 58,
                                    "column": 48
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 49
                                  },
                                  "text": "'"
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 58,
                                "column": 49
                              },
                              "end": {
                                "row": 58,
                                "column": 50
                              },
                              "text": ","
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 58,
                                "column": 51
                              },
                              "end": {
                                "row": 58,
                                "column": 71
                              },
                              "text": "'probability_vector'",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 58,
                                    "column": 51
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 52
                                  },
                                  "text": "'"
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 58,
                                    "column": 52
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 70
                                  },
                                  "text": "probability_vector"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 58,
                                    "column": 70
                                  },
                                  "end": {
                                    "row": 58,
                                    "column": 71
                                  },
                                  "text": "'"
                                }
                              ]
                            },
                            {
                              "type": "]",
                              "start": {
                                "row": 58,
                                "column": 71
                              },
                              "end": {
                                "row": 58,
                                "column": 72
                              },
                              "text": "]"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 58,
                            "column": 72
                          },
                          "end": {
                            "row": 58,
                            "column": 73
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 59,
                "column": 8
              },
              "end": {
                "row": 61,
                "column": 90
              },
              "text": "return super(_Classifier, self).predict(dataset,\n                                                output_type=output_type,\n                                                missing_value_action=missing_value_action)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 59,
                    "column": 8
                  },
                  "end": {
                    "row": 59,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 59,
                    "column": 15
                  },
                  "end": {
                    "row": 61,
                    "column": 90
                  },
                  "text": "super(_Classifier, self).predict(dataset,\n                                                output_type=output_type,\n                                                missing_value_action=missing_value_action)",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 59,
                        "column": 15
                      },
                      "end": {
                        "row": 59,
                        "column": 47
                      },
                      "text": "super(_Classifier, self).predict",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 59,
                            "column": 15
                          },
                          "end": {
                            "row": 59,
                            "column": 39
                          },
                          "text": "super(_Classifier, self)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 59,
                                "column": 15
                              },
                              "end": {
                                "row": 59,
                                "column": 20
                              },
                              "text": "super"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 59,
                                "column": 20
                              },
                              "end": {
                                "row": 59,
                                "column": 39
                              },
                              "text": "(_Classifier, self)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 59,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 21
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 59,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 32
                                  },
                                  "text": "_Classifier"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 59,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 33
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 59,
                                    "column": 34
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 38
                                  },
                                  "text": "self"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 59,
                                    "column": 38
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 39
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 59,
                            "column": 39
                          },
                          "end": {
                            "row": 59,
                            "column": 40
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 59,
                            "column": 40
                          },
                          "end": {
                            "row": 59,
                            "column": 47
                          },
                          "text": "predict"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 59,
                        "column": 47
                      },
                      "end": {
                        "row": 61,
                        "column": 90
                      },
                      "text": "(dataset,\n                                                output_type=output_type,\n                                                missing_value_action=missing_value_action)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 59,
                            "column": 47
                          },
                          "end": {
                            "row": 59,
                            "column": 48
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 59,
                            "column": 48
                          },
                          "end": {
                            "row": 59,
                            "column": 55
                          },
                          "text": "dataset"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 59,
                            "column": 55
                          },
                          "end": {
                            "row": 59,
                            "column": 56
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 60,
                            "column": 48
                          },
                          "end": {
                            "row": 60,
                            "column": 71
                          },
                          "text": "output_type=output_type",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 60,
                                "column": 48
                              },
                              "end": {
                                "row": 60,
                                "column": 59
                              },
                              "text": "output_type"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 60,
                                "column": 59
                              },
                              "end": {
                                "row": 60,
                                "column": 60
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 60,
                                "column": 60
                              },
                              "end": {
                                "row": 60,
                                "column": 71
                              },
                              "text": "output_type"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 60,
                            "column": 71
                          },
                          "end": {
                            "row": 60,
                            "column": 72
                          },
                          "text": ","
                        },
                        {
                          "type": "keyword_argument",
                          "start": {
                            "row": 61,
                            "column": 48
                          },
                          "end": {
                            "row": 61,
                            "column": 89
                          },
                          "text": "missing_value_action=missing_value_action",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 61,
                                "column": 48
                              },
                              "end": {
                                "row": 61,
                                "column": 68
                              },
                              "text": "missing_value_action"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 61,
                                "column": 68
                              },
                              "end": {
                                "row": 61,
                                "column": 69
                              },
                              "text": "="
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 61,
                                "column": 69
                              },
                              "end": {
                                "row": 61,
                                "column": 89
                              },
                              "text": "missing_value_action"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 61,
                            "column": 89
                          },
                          "end": {
                            "row": 61,
                            "column": 90
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}