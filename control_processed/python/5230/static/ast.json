{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 36,
    "column": 47
  },
  "text": "def add_timing_signal_1d(x,\n                         min_timescale=1.0,\n                         max_timescale=1.0e4,\n                         start_index=0):\n  \"\"\"Adds a bunch of sinusoids of different frequencies to a Tensor.\n\n  Each channel of the input Tensor is incremented by a sinusoid of a different\n  frequency and phase.\n\n  This allows attention to learn to use absolute and relative positions.\n  Timing signals should be added to some precursors of both the query and the\n  memory inputs to attention.\n\n  The use of relative position is possible because sin(x+y) and cos(x+y) can be\n  expressed in terms of y, sin(x) and cos(x).\n\n  In particular, we use a geometric sequence of timescales starting with\n  min_timescale and ending with max_timescale.  The number of different\n  timescales is equal to channels / 2. For each timescale, we\n  generate the two sinusoidal signals sin(timestep/timescale) and\n  cos(timestep/timescale).  All of these sinusoids are concatenated in\n  the channels dimension.\n\n  Args:\n    x: a Tensor with shape [batch, length, channels]\n    min_timescale: a float\n    max_timescale: a float\n    start_index: index of first position\n\n  Returns:\n    a Tensor the same shape as x.\n  \"\"\"\n  length = common_layers.shape_list(x)[1]\n  channels = common_layers.shape_list(x)[2]\n  signal = get_timing_signal_1d(length, channels, min_timescale, max_timescale,\n                                start_index)\n  return x + common_layers.cast_like(signal, x)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 36,
        "column": 47
      },
      "text": "def add_timing_signal_1d(x,\n                         min_timescale=1.0,\n                         max_timescale=1.0e4,\n                         start_index=0):\n  \"\"\"Adds a bunch of sinusoids of different frequencies to a Tensor.\n\n  Each channel of the input Tensor is incremented by a sinusoid of a different\n  frequency and phase.\n\n  This allows attention to learn to use absolute and relative positions.\n  Timing signals should be added to some precursors of both the query and the\n  memory inputs to attention.\n\n  The use of relative position is possible because sin(x+y) and cos(x+y) can be\n  expressed in terms of y, sin(x) and cos(x).\n\n  In particular, we use a geometric sequence of timescales starting with\n  min_timescale and ending with max_timescale.  The number of different\n  timescales is equal to channels / 2. For each timescale, we\n  generate the two sinusoidal signals sin(timestep/timescale) and\n  cos(timestep/timescale).  All of these sinusoids are concatenated in\n  the channels dimension.\n\n  Args:\n    x: a Tensor with shape [batch, length, channels]\n    min_timescale: a float\n    max_timescale: a float\n    start_index: index of first position\n\n  Returns:\n    a Tensor the same shape as x.\n  \"\"\"\n  length = common_layers.shape_list(x)[1]\n  channels = common_layers.shape_list(x)[2]\n  signal = get_timing_signal_1d(length, channels, min_timescale, max_timescale,\n                                start_index)\n  return x + common_layers.cast_like(signal, x)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 24
          },
          "text": "add_timing_signal_1d"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 24
          },
          "end": {
            "row": 3,
            "column": 39
          },
          "text": "(x,\n                         min_timescale=1.0,\n                         max_timescale=1.0e4,\n                         start_index=0)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 24
              },
              "end": {
                "row": 0,
                "column": 25
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 25
              },
              "end": {
                "row": 0,
                "column": 26
              },
              "text": "x"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 26
              },
              "end": {
                "row": 0,
                "column": 27
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 1,
                "column": 25
              },
              "end": {
                "row": 1,
                "column": 42
              },
              "text": "min_timescale=1.0",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 1,
                    "column": 25
                  },
                  "end": {
                    "row": 1,
                    "column": 38
                  },
                  "text": "min_timescale"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 1,
                    "column": 38
                  },
                  "end": {
                    "row": 1,
                    "column": 39
                  },
                  "text": "="
                },
                {
                  "type": "float",
                  "start": {
                    "row": 1,
                    "column": 39
                  },
                  "end": {
                    "row": 1,
                    "column": 42
                  },
                  "text": "1.0"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 1,
                "column": 42
              },
              "end": {
                "row": 1,
                "column": 43
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 2,
                "column": 25
              },
              "end": {
                "row": 2,
                "column": 44
              },
              "text": "max_timescale=1.0e4",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 2,
                    "column": 25
                  },
                  "end": {
                    "row": 2,
                    "column": 38
                  },
                  "text": "max_timescale"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 2,
                    "column": 38
                  },
                  "end": {
                    "row": 2,
                    "column": 39
                  },
                  "text": "="
                },
                {
                  "type": "float",
                  "start": {
                    "row": 2,
                    "column": 39
                  },
                  "end": {
                    "row": 2,
                    "column": 44
                  },
                  "text": "1.0e4"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 2,
                "column": 44
              },
              "end": {
                "row": 2,
                "column": 45
              },
              "text": ","
            },
            {
              "type": "default_parameter",
              "start": {
                "row": 3,
                "column": 25
              },
              "end": {
                "row": 3,
                "column": 38
              },
              "text": "start_index=0",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 3,
                    "column": 25
                  },
                  "end": {
                    "row": 3,
                    "column": 36
                  },
                  "text": "start_index"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 3,
                    "column": 36
                  },
                  "end": {
                    "row": 3,
                    "column": 37
                  },
                  "text": "="
                },
                {
                  "type": "integer",
                  "start": {
                    "row": 3,
                    "column": 37
                  },
                  "end": {
                    "row": 3,
                    "column": 38
                  },
                  "text": "0"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 3,
                "column": 38
              },
              "end": {
                "row": 3,
                "column": 39
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 3,
            "column": 39
          },
          "end": {
            "row": 3,
            "column": 40
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 4,
            "column": 2
          },
          "end": {
            "row": 36,
            "column": 47
          },
          "text": "\"\"\"Adds a bunch of sinusoids of different frequencies to a Tensor.\n\n  Each channel of the input Tensor is incremented by a sinusoid of a different\n  frequency and phase.\n\n  This allows attention to learn to use absolute and relative positions.\n  Timing signals should be added to some precursors of both the query and the\n  memory inputs to attention.\n\n  The use of relative position is possible because sin(x+y) and cos(x+y) can be\n  expressed in terms of y, sin(x) and cos(x).\n\n  In particular, we use a geometric sequence of timescales starting with\n  min_timescale and ending with max_timescale.  The number of different\n  timescales is equal to channels / 2. For each timescale, we\n  generate the two sinusoidal signals sin(timestep/timescale) and\n  cos(timestep/timescale).  All of these sinusoids are concatenated in\n  the channels dimension.\n\n  Args:\n    x: a Tensor with shape [batch, length, channels]\n    min_timescale: a float\n    max_timescale: a float\n    start_index: index of first position\n\n  Returns:\n    a Tensor the same shape as x.\n  \"\"\"\n  length = common_layers.shape_list(x)[1]\n  channels = common_layers.shape_list(x)[2]\n  signal = get_timing_signal_1d(length, channels, min_timescale, max_timescale,\n                                start_index)\n  return x + common_layers.cast_like(signal, x)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 4,
                "column": 2
              },
              "end": {
                "row": 31,
                "column": 5
              },
              "text": "\"\"\"Adds a bunch of sinusoids of different frequencies to a Tensor.\n\n  Each channel of the input Tensor is incremented by a sinusoid of a different\n  frequency and phase.\n\n  This allows attention to learn to use absolute and relative positions.\n  Timing signals should be added to some precursors of both the query and the\n  memory inputs to attention.\n\n  The use of relative position is possible because sin(x+y) and cos(x+y) can be\n  expressed in terms of y, sin(x) and cos(x).\n\n  In particular, we use a geometric sequence of timescales starting with\n  min_timescale and ending with max_timescale.  The number of different\n  timescales is equal to channels / 2. For each timescale, we\n  generate the two sinusoidal signals sin(timestep/timescale) and\n  cos(timestep/timescale).  All of these sinusoids are concatenated in\n  the channels dimension.\n\n  Args:\n    x: a Tensor with shape [batch, length, channels]\n    min_timescale: a float\n    max_timescale: a float\n    start_index: index of first position\n\n  Returns:\n    a Tensor the same shape as x.\n  \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 4,
                    "column": 2
                  },
                  "end": {
                    "row": 31,
                    "column": 5
                  },
                  "text": "\"\"\"Adds a bunch of sinusoids of different frequencies to a Tensor.\n\n  Each channel of the input Tensor is incremented by a sinusoid of a different\n  frequency and phase.\n\n  This allows attention to learn to use absolute and relative positions.\n  Timing signals should be added to some precursors of both the query and the\n  memory inputs to attention.\n\n  The use of relative position is possible because sin(x+y) and cos(x+y) can be\n  expressed in terms of y, sin(x) and cos(x).\n\n  In particular, we use a geometric sequence of timescales starting with\n  min_timescale and ending with max_timescale.  The number of different\n  timescales is equal to channels / 2. For each timescale, we\n  generate the two sinusoidal signals sin(timestep/timescale) and\n  cos(timestep/timescale).  All of these sinusoids are concatenated in\n  the channels dimension.\n\n  Args:\n    x: a Tensor with shape [batch, length, channels]\n    min_timescale: a float\n    max_timescale: a float\n    start_index: index of first position\n\n  Returns:\n    a Tensor the same shape as x.\n  \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 4,
                        "column": 2
                      },
                      "end": {
                        "row": 4,
                        "column": 5
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 4,
                        "column": 5
                      },
                      "end": {
                        "row": 31,
                        "column": 2
                      },
                      "text": "Adds a bunch of sinusoids of different frequencies to a Tensor.\n\n  Each channel of the input Tensor is incremented by a sinusoid of a different\n  frequency and phase.\n\n  This allows attention to learn to use absolute and relative positions.\n  Timing signals should be added to some precursors of both the query and the\n  memory inputs to attention.\n\n  The use of relative position is possible because sin(x+y) and cos(x+y) can be\n  expressed in terms of y, sin(x) and cos(x).\n\n  In particular, we use a geometric sequence of timescales starting with\n  min_timescale and ending with max_timescale.  The number of different\n  timescales is equal to channels / 2. For each timescale, we\n  generate the two sinusoidal signals sin(timestep/timescale) and\n  cos(timestep/timescale).  All of these sinusoids are concatenated in\n  the channels dimension.\n\n  Args:\n    x: a Tensor with shape [batch, length, channels]\n    min_timescale: a float\n    max_timescale: a float\n    start_index: index of first position\n\n  Returns:\n    a Tensor the same shape as x.\n  "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 31,
                        "column": 2
                      },
                      "end": {
                        "row": 31,
                        "column": 5
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 32,
                "column": 2
              },
              "end": {
                "row": 32,
                "column": 41
              },
              "text": "length = common_layers.shape_list(x)[1]",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 32,
                    "column": 2
                  },
                  "end": {
                    "row": 32,
                    "column": 41
                  },
                  "text": "length = common_layers.shape_list(x)[1]",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 32,
                        "column": 2
                      },
                      "end": {
                        "row": 32,
                        "column": 8
                      },
                      "text": "length"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 32,
                        "column": 9
                      },
                      "end": {
                        "row": 32,
                        "column": 10
                      },
                      "text": "="
                    },
                    {
                      "type": "subscript",
                      "start": {
                        "row": 32,
                        "column": 11
                      },
                      "end": {
                        "row": 32,
                        "column": 41
                      },
                      "text": "common_layers.shape_list(x)[1]",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 32,
                            "column": 11
                          },
                          "end": {
                            "row": 32,
                            "column": 38
                          },
                          "text": "common_layers.shape_list(x)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 32,
                                "column": 11
                              },
                              "end": {
                                "row": 32,
                                "column": 35
                              },
                              "text": "common_layers.shape_list",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 32,
                                    "column": 11
                                  },
                                  "end": {
                                    "row": 32,
                                    "column": 24
                                  },
                                  "text": "common_layers"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 32,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 32,
                                    "column": 25
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 32,
                                    "column": 25
                                  },
                                  "end": {
                                    "row": 32,
                                    "column": 35
                                  },
                                  "text": "shape_list"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 32,
                                "column": 35
                              },
                              "end": {
                                "row": 32,
                                "column": 38
                              },
                              "text": "(x)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 32,
                                    "column": 35
                                  },
                                  "end": {
                                    "row": 32,
                                    "column": 36
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 32,
                                    "column": 36
                                  },
                                  "end": {
                                    "row": 32,
                                    "column": 37
                                  },
                                  "text": "x"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 32,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 32,
                                    "column": 38
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "[",
                          "start": {
                            "row": 32,
                            "column": 38
                          },
                          "end": {
                            "row": 32,
                            "column": 39
                          },
                          "text": "["
                        },
                        {
                          "type": "integer",
                          "start": {
                            "row": 32,
                            "column": 39
                          },
                          "end": {
                            "row": 32,
                            "column": 40
                          },
                          "text": "1"
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 32,
                            "column": 40
                          },
                          "end": {
                            "row": 32,
                            "column": 41
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 33,
                "column": 2
              },
              "end": {
                "row": 33,
                "column": 43
              },
              "text": "channels = common_layers.shape_list(x)[2]",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 33,
                    "column": 2
                  },
                  "end": {
                    "row": 33,
                    "column": 43
                  },
                  "text": "channels = common_layers.shape_list(x)[2]",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 33,
                        "column": 2
                      },
                      "end": {
                        "row": 33,
                        "column": 10
                      },
                      "text": "channels"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 33,
                        "column": 11
                      },
                      "end": {
                        "row": 33,
                        "column": 12
                      },
                      "text": "="
                    },
                    {
                      "type": "subscript",
                      "start": {
                        "row": 33,
                        "column": 13
                      },
                      "end": {
                        "row": 33,
                        "column": 43
                      },
                      "text": "common_layers.shape_list(x)[2]",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 33,
                            "column": 13
                          },
                          "end": {
                            "row": 33,
                            "column": 40
                          },
                          "text": "common_layers.shape_list(x)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 33,
                                "column": 13
                              },
                              "end": {
                                "row": 33,
                                "column": 37
                              },
                              "text": "common_layers.shape_list",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 33,
                                    "column": 13
                                  },
                                  "end": {
                                    "row": 33,
                                    "column": 26
                                  },
                                  "text": "common_layers"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 33,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 33,
                                    "column": 27
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 33,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 33,
                                    "column": 37
                                  },
                                  "text": "shape_list"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 33,
                                "column": 37
                              },
                              "end": {
                                "row": 33,
                                "column": 40
                              },
                              "text": "(x)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 33,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 33,
                                    "column": 38
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 33,
                                    "column": 38
                                  },
                                  "end": {
                                    "row": 33,
                                    "column": 39
                                  },
                                  "text": "x"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 33,
                                    "column": 39
                                  },
                                  "end": {
                                    "row": 33,
                                    "column": 40
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "[",
                          "start": {
                            "row": 33,
                            "column": 40
                          },
                          "end": {
                            "row": 33,
                            "column": 41
                          },
                          "text": "["
                        },
                        {
                          "type": "integer",
                          "start": {
                            "row": 33,
                            "column": 41
                          },
                          "end": {
                            "row": 33,
                            "column": 42
                          },
                          "text": "2"
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 33,
                            "column": 42
                          },
                          "end": {
                            "row": 33,
                            "column": 43
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 34,
                "column": 2
              },
              "end": {
                "row": 35,
                "column": 44
              },
              "text": "signal = get_timing_signal_1d(length, channels, min_timescale, max_timescale,\n                                start_index)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 34,
                    "column": 2
                  },
                  "end": {
                    "row": 35,
                    "column": 44
                  },
                  "text": "signal = get_timing_signal_1d(length, channels, min_timescale, max_timescale,\n                                start_index)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 34,
                        "column": 2
                      },
                      "end": {
                        "row": 34,
                        "column": 8
                      },
                      "text": "signal"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 34,
                        "column": 9
                      },
                      "end": {
                        "row": 34,
                        "column": 10
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 34,
                        "column": 11
                      },
                      "end": {
                        "row": 35,
                        "column": 44
                      },
                      "text": "get_timing_signal_1d(length, channels, min_timescale, max_timescale,\n                                start_index)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 34,
                            "column": 11
                          },
                          "end": {
                            "row": 34,
                            "column": 31
                          },
                          "text": "get_timing_signal_1d"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 34,
                            "column": 31
                          },
                          "end": {
                            "row": 35,
                            "column": 44
                          },
                          "text": "(length, channels, min_timescale, max_timescale,\n                                start_index)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 34,
                                "column": 31
                              },
                              "end": {
                                "row": 34,
                                "column": 32
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 34,
                                "column": 32
                              },
                              "end": {
                                "row": 34,
                                "column": 38
                              },
                              "text": "length"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 34,
                                "column": 38
                              },
                              "end": {
                                "row": 34,
                                "column": 39
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 34,
                                "column": 40
                              },
                              "end": {
                                "row": 34,
                                "column": 48
                              },
                              "text": "channels"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 34,
                                "column": 48
                              },
                              "end": {
                                "row": 34,
                                "column": 49
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 34,
                                "column": 50
                              },
                              "end": {
                                "row": 34,
                                "column": 63
                              },
                              "text": "min_timescale"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 34,
                                "column": 63
                              },
                              "end": {
                                "row": 34,
                                "column": 64
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 34,
                                "column": 65
                              },
                              "end": {
                                "row": 34,
                                "column": 78
                              },
                              "text": "max_timescale"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 34,
                                "column": 78
                              },
                              "end": {
                                "row": 34,
                                "column": 79
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 35,
                                "column": 32
                              },
                              "end": {
                                "row": 35,
                                "column": 43
                              },
                              "text": "start_index"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 35,
                                "column": 43
                              },
                              "end": {
                                "row": 35,
                                "column": 44
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 36,
                "column": 2
              },
              "end": {
                "row": 36,
                "column": 47
              },
              "text": "return x + common_layers.cast_like(signal, x)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 36,
                    "column": 2
                  },
                  "end": {
                    "row": 36,
                    "column": 8
                  },
                  "text": "return"
                },
                {
                  "type": "binary_operator",
                  "start": {
                    "row": 36,
                    "column": 9
                  },
                  "end": {
                    "row": 36,
                    "column": 47
                  },
                  "text": "x + common_layers.cast_like(signal, x)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 36,
                        "column": 9
                      },
                      "end": {
                        "row": 36,
                        "column": 10
                      },
                      "text": "x"
                    },
                    {
                      "type": "+",
                      "start": {
                        "row": 36,
                        "column": 11
                      },
                      "end": {
                        "row": 36,
                        "column": 12
                      },
                      "text": "+"
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 36,
                        "column": 13
                      },
                      "end": {
                        "row": 36,
                        "column": 47
                      },
                      "text": "common_layers.cast_like(signal, x)",
                      "children": [
                        {
                          "type": "attribute",
                          "start": {
                            "row": 36,
                            "column": 13
                          },
                          "end": {
                            "row": 36,
                            "column": 36
                          },
                          "text": "common_layers.cast_like",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 36,
                                "column": 13
                              },
                              "end": {
                                "row": 36,
                                "column": 26
                              },
                              "text": "common_layers"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 36,
                                "column": 26
                              },
                              "end": {
                                "row": 36,
                                "column": 27
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 36,
                                "column": 27
                              },
                              "end": {
                                "row": 36,
                                "column": 36
                              },
                              "text": "cast_like"
                            }
                          ]
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 36,
                            "column": 36
                          },
                          "end": {
                            "row": 36,
                            "column": 47
                          },
                          "text": "(signal, x)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 36,
                                "column": 36
                              },
                              "end": {
                                "row": 36,
                                "column": 37
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 36,
                                "column": 37
                              },
                              "end": {
                                "row": 36,
                                "column": 43
                              },
                              "text": "signal"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 36,
                                "column": 43
                              },
                              "end": {
                                "row": 36,
                                "column": 44
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 36,
                                "column": 45
                              },
                              "end": {
                                "row": 36,
                                "column": 46
                              },
                              "text": "x"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 36,
                                "column": 46
                              },
                              "end": {
                                "row": 36,
                                "column": 47
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}