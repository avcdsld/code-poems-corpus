{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 94,
    "column": 28
  },
  "text": "def foreach(body, data, init_states):\n    \"\"\"Run a for loop with user-defined computation over NDArrays on dimension 0.\n\n    This operator simulates a for loop and body has the computation for an iteration\n    of the for loop. It runs the computation in body on each slice from the input\n    NDArrays.\n\n    body takes two arguments as input and outputs a tuple of two elements,\n    as illustrated below::\n\n        out, states = body(data1, states)\n\n    data1 can be either an NDArray or a list of NDArrays. If data is an NDArray,\n    data1 is an NDArray. Otherwise, data1 is a list of NDArrays and has the same\n    size as data. states is a list of NDArrays and have the same size as init_states.\n    Similarly, out can be either an NDArray or a list of NDArrays, which are concatenated\n    as the first output of foreach; states from the last execution of body\n    are the second output of foreach.\n\n    The computation done by this operator is equivalent to the pseudo code below\n    when the input data is NDArray::\n\n        states = init_states\n        outs = []\n        for i in data.shape[0]:\n            s = data[i]\n            out, states = body(s, states)\n            outs.append(out)\n        outs = stack(*outs)\n\n\n    Parameters\n    ----------\n    body : a Python function.\n        Define computation in an iteration.\n    data: an NDArray or a list of NDArrays.\n        The input data.\n    init_states: an NDArray or nested lists of NDArrays.\n        The initial values of the loop states.\n    name: string.\n        The name of the operator.\n\n    Returns\n    -------\n    outputs: an NDArray or nested lists of NDArrays.\n        The output data concatenated from the output of all iterations.\n    states: an NDArray or nested lists of NDArrays.\n        The loop states in the last iteration.\n\n    Examples\n    --------\n    >>> step = lambda data, states: (data + states[0], [states[0] * 2])\n    >>> data = mx.nd.random.uniform(shape=(2, 10))\n    >>> states = [mx.nd.random.uniform(shape=(10))]\n    >>> outs, states = mx.nd.contrib.foreach(step, data, states)\n    \"\"\"\n\n    def check_input(inputs, in_type, msg):\n        is_NDArray_or_list = True\n        if isinstance(inputs, list):\n            for i in inputs:\n                if not isinstance(i, in_type):\n                    is_NDArray_or_list = False\n                    break\n        else:\n            is_NDArray_or_list = isinstance(inputs, in_type)\n        assert is_NDArray_or_list, msg\n\n    flatten, _ = _flatten(data, \"foreach input\")\n    check_input(flatten, ndarray.NDArray,\n                \"data should be an NDArray or a nested list of NDArrays\")\n    flatten, _ = _flatten(init_states, \"foreach states\")\n    check_input(flatten, ndarray.NDArray,\n                \"init_states should be an NDArray or a nested list of NDArrays\")\n\n    not_data_list = isinstance(data, ndarray.NDArray)\n    num_iters = data.shape[0] if not_data_list else data[0].shape[0]\n    states = init_states\n    outputs = []\n    for i in range(num_iters):\n        if not_data_list:\n            eles = data[i]\n        else:\n            eles = [d[i] for d in data]\n        outs, states = body(eles, states)\n        outs, out_fmt = _flatten(outs, \"foreach output\")\n        outputs.append(outs)\n    outputs = zip(*outputs)\n    tmp_outputs = []\n    for out in outputs:\n        tmp_outputs.append(ndarray.op.stack(*out))\n    outputs = tmp_outputs\n    outputs, _ = _regroup(outputs, out_fmt)\n\n    return (outputs, states)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 94,
        "column": 28
      },
      "text": "def foreach(body, data, init_states):\n    \"\"\"Run a for loop with user-defined computation over NDArrays on dimension 0.\n\n    This operator simulates a for loop and body has the computation for an iteration\n    of the for loop. It runs the computation in body on each slice from the input\n    NDArrays.\n\n    body takes two arguments as input and outputs a tuple of two elements,\n    as illustrated below::\n\n        out, states = body(data1, states)\n\n    data1 can be either an NDArray or a list of NDArrays. If data is an NDArray,\n    data1 is an NDArray. Otherwise, data1 is a list of NDArrays and has the same\n    size as data. states is a list of NDArrays and have the same size as init_states.\n    Similarly, out can be either an NDArray or a list of NDArrays, which are concatenated\n    as the first output of foreach; states from the last execution of body\n    are the second output of foreach.\n\n    The computation done by this operator is equivalent to the pseudo code below\n    when the input data is NDArray::\n\n        states = init_states\n        outs = []\n        for i in data.shape[0]:\n            s = data[i]\n            out, states = body(s, states)\n            outs.append(out)\n        outs = stack(*outs)\n\n\n    Parameters\n    ----------\n    body : a Python function.\n        Define computation in an iteration.\n    data: an NDArray or a list of NDArrays.\n        The input data.\n    init_states: an NDArray or nested lists of NDArrays.\n        The initial values of the loop states.\n    name: string.\n        The name of the operator.\n\n    Returns\n    -------\n    outputs: an NDArray or nested lists of NDArrays.\n        The output data concatenated from the output of all iterations.\n    states: an NDArray or nested lists of NDArrays.\n        The loop states in the last iteration.\n\n    Examples\n    --------\n    >>> step = lambda data, states: (data + states[0], [states[0] * 2])\n    >>> data = mx.nd.random.uniform(shape=(2, 10))\n    >>> states = [mx.nd.random.uniform(shape=(10))]\n    >>> outs, states = mx.nd.contrib.foreach(step, data, states)\n    \"\"\"\n\n    def check_input(inputs, in_type, msg):\n        is_NDArray_or_list = True\n        if isinstance(inputs, list):\n            for i in inputs:\n                if not isinstance(i, in_type):\n                    is_NDArray_or_list = False\n                    break\n        else:\n            is_NDArray_or_list = isinstance(inputs, in_type)\n        assert is_NDArray_or_list, msg\n\n    flatten, _ = _flatten(data, \"foreach input\")\n    check_input(flatten, ndarray.NDArray,\n                \"data should be an NDArray or a nested list of NDArrays\")\n    flatten, _ = _flatten(init_states, \"foreach states\")\n    check_input(flatten, ndarray.NDArray,\n                \"init_states should be an NDArray or a nested list of NDArrays\")\n\n    not_data_list = isinstance(data, ndarray.NDArray)\n    num_iters = data.shape[0] if not_data_list else data[0].shape[0]\n    states = init_states\n    outputs = []\n    for i in range(num_iters):\n        if not_data_list:\n            eles = data[i]\n        else:\n            eles = [d[i] for d in data]\n        outs, states = body(eles, states)\n        outs, out_fmt = _flatten(outs, \"foreach output\")\n        outputs.append(outs)\n    outputs = zip(*outputs)\n    tmp_outputs = []\n    for out in outputs:\n        tmp_outputs.append(ndarray.op.stack(*out))\n    outputs = tmp_outputs\n    outputs, _ = _regroup(outputs, out_fmt)\n\n    return (outputs, states)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 11
          },
          "text": "foreach"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 11
          },
          "end": {
            "row": 0,
            "column": 36
          },
          "text": "(body, data, init_states)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 11
              },
              "end": {
                "row": 0,
                "column": 12
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 12
              },
              "end": {
                "row": 0,
                "column": 16
              },
              "text": "body"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 16
              },
              "end": {
                "row": 0,
                "column": 17
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 18
              },
              "end": {
                "row": 0,
                "column": 22
              },
              "text": "data"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 22
              },
              "end": {
                "row": 0,
                "column": 23
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 24
              },
              "end": {
                "row": 0,
                "column": 35
              },
              "text": "init_states"
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 35
              },
              "end": {
                "row": 0,
                "column": 36
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 36
          },
          "end": {
            "row": 0,
            "column": 37
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 4
          },
          "end": {
            "row": 94,
            "column": 28
          },
          "text": "\"\"\"Run a for loop with user-defined computation over NDArrays on dimension 0.\n\n    This operator simulates a for loop and body has the computation for an iteration\n    of the for loop. It runs the computation in body on each slice from the input\n    NDArrays.\n\n    body takes two arguments as input and outputs a tuple of two elements,\n    as illustrated below::\n\n        out, states = body(data1, states)\n\n    data1 can be either an NDArray or a list of NDArrays. If data is an NDArray,\n    data1 is an NDArray. Otherwise, data1 is a list of NDArrays and has the same\n    size as data. states is a list of NDArrays and have the same size as init_states.\n    Similarly, out can be either an NDArray or a list of NDArrays, which are concatenated\n    as the first output of foreach; states from the last execution of body\n    are the second output of foreach.\n\n    The computation done by this operator is equivalent to the pseudo code below\n    when the input data is NDArray::\n\n        states = init_states\n        outs = []\n        for i in data.shape[0]:\n            s = data[i]\n            out, states = body(s, states)\n            outs.append(out)\n        outs = stack(*outs)\n\n\n    Parameters\n    ----------\n    body : a Python function.\n        Define computation in an iteration.\n    data: an NDArray or a list of NDArrays.\n        The input data.\n    init_states: an NDArray or nested lists of NDArrays.\n        The initial values of the loop states.\n    name: string.\n        The name of the operator.\n\n    Returns\n    -------\n    outputs: an NDArray or nested lists of NDArrays.\n        The output data concatenated from the output of all iterations.\n    states: an NDArray or nested lists of NDArrays.\n        The loop states in the last iteration.\n\n    Examples\n    --------\n    >>> step = lambda data, states: (data + states[0], [states[0] * 2])\n    >>> data = mx.nd.random.uniform(shape=(2, 10))\n    >>> states = [mx.nd.random.uniform(shape=(10))]\n    >>> outs, states = mx.nd.contrib.foreach(step, data, states)\n    \"\"\"\n\n    def check_input(inputs, in_type, msg):\n        is_NDArray_or_list = True\n        if isinstance(inputs, list):\n            for i in inputs:\n                if not isinstance(i, in_type):\n                    is_NDArray_or_list = False\n                    break\n        else:\n            is_NDArray_or_list = isinstance(inputs, in_type)\n        assert is_NDArray_or_list, msg\n\n    flatten, _ = _flatten(data, \"foreach input\")\n    check_input(flatten, ndarray.NDArray,\n                \"data should be an NDArray or a nested list of NDArrays\")\n    flatten, _ = _flatten(init_states, \"foreach states\")\n    check_input(flatten, ndarray.NDArray,\n                \"init_states should be an NDArray or a nested list of NDArrays\")\n\n    not_data_list = isinstance(data, ndarray.NDArray)\n    num_iters = data.shape[0] if not_data_list else data[0].shape[0]\n    states = init_states\n    outputs = []\n    for i in range(num_iters):\n        if not_data_list:\n            eles = data[i]\n        else:\n            eles = [d[i] for d in data]\n        outs, states = body(eles, states)\n        outs, out_fmt = _flatten(outs, \"foreach output\")\n        outputs.append(outs)\n    outputs = zip(*outputs)\n    tmp_outputs = []\n    for out in outputs:\n        tmp_outputs.append(ndarray.op.stack(*out))\n    outputs = tmp_outputs\n    outputs, _ = _regroup(outputs, out_fmt)\n\n    return (outputs, states)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 4
              },
              "end": {
                "row": 55,
                "column": 7
              },
              "text": "\"\"\"Run a for loop with user-defined computation over NDArrays on dimension 0.\n\n    This operator simulates a for loop and body has the computation for an iteration\n    of the for loop. It runs the computation in body on each slice from the input\n    NDArrays.\n\n    body takes two arguments as input and outputs a tuple of two elements,\n    as illustrated below::\n\n        out, states = body(data1, states)\n\n    data1 can be either an NDArray or a list of NDArrays. If data is an NDArray,\n    data1 is an NDArray. Otherwise, data1 is a list of NDArrays and has the same\n    size as data. states is a list of NDArrays and have the same size as init_states.\n    Similarly, out can be either an NDArray or a list of NDArrays, which are concatenated\n    as the first output of foreach; states from the last execution of body\n    are the second output of foreach.\n\n    The computation done by this operator is equivalent to the pseudo code below\n    when the input data is NDArray::\n\n        states = init_states\n        outs = []\n        for i in data.shape[0]:\n            s = data[i]\n            out, states = body(s, states)\n            outs.append(out)\n        outs = stack(*outs)\n\n\n    Parameters\n    ----------\n    body : a Python function.\n        Define computation in an iteration.\n    data: an NDArray or a list of NDArrays.\n        The input data.\n    init_states: an NDArray or nested lists of NDArrays.\n        The initial values of the loop states.\n    name: string.\n        The name of the operator.\n\n    Returns\n    -------\n    outputs: an NDArray or nested lists of NDArrays.\n        The output data concatenated from the output of all iterations.\n    states: an NDArray or nested lists of NDArrays.\n        The loop states in the last iteration.\n\n    Examples\n    --------\n    >>> step = lambda data, states: (data + states[0], [states[0] * 2])\n    >>> data = mx.nd.random.uniform(shape=(2, 10))\n    >>> states = [mx.nd.random.uniform(shape=(10))]\n    >>> outs, states = mx.nd.contrib.foreach(step, data, states)\n    \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 4
                  },
                  "end": {
                    "row": 55,
                    "column": 7
                  },
                  "text": "\"\"\"Run a for loop with user-defined computation over NDArrays on dimension 0.\n\n    This operator simulates a for loop and body has the computation for an iteration\n    of the for loop. It runs the computation in body on each slice from the input\n    NDArrays.\n\n    body takes two arguments as input and outputs a tuple of two elements,\n    as illustrated below::\n\n        out, states = body(data1, states)\n\n    data1 can be either an NDArray or a list of NDArrays. If data is an NDArray,\n    data1 is an NDArray. Otherwise, data1 is a list of NDArrays and has the same\n    size as data. states is a list of NDArrays and have the same size as init_states.\n    Similarly, out can be either an NDArray or a list of NDArrays, which are concatenated\n    as the first output of foreach; states from the last execution of body\n    are the second output of foreach.\n\n    The computation done by this operator is equivalent to the pseudo code below\n    when the input data is NDArray::\n\n        states = init_states\n        outs = []\n        for i in data.shape[0]:\n            s = data[i]\n            out, states = body(s, states)\n            outs.append(out)\n        outs = stack(*outs)\n\n\n    Parameters\n    ----------\n    body : a Python function.\n        Define computation in an iteration.\n    data: an NDArray or a list of NDArrays.\n        The input data.\n    init_states: an NDArray or nested lists of NDArrays.\n        The initial values of the loop states.\n    name: string.\n        The name of the operator.\n\n    Returns\n    -------\n    outputs: an NDArray or nested lists of NDArrays.\n        The output data concatenated from the output of all iterations.\n    states: an NDArray or nested lists of NDArrays.\n        The loop states in the last iteration.\n\n    Examples\n    --------\n    >>> step = lambda data, states: (data + states[0], [states[0] * 2])\n    >>> data = mx.nd.random.uniform(shape=(2, 10))\n    >>> states = [mx.nd.random.uniform(shape=(10))]\n    >>> outs, states = mx.nd.contrib.foreach(step, data, states)\n    \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 4
                      },
                      "end": {
                        "row": 1,
                        "column": 7
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 7
                      },
                      "end": {
                        "row": 55,
                        "column": 4
                      },
                      "text": "Run a for loop with user-defined computation over NDArrays on dimension 0.\n\n    This operator simulates a for loop and body has the computation for an iteration\n    of the for loop. It runs the computation in body on each slice from the input\n    NDArrays.\n\n    body takes two arguments as input and outputs a tuple of two elements,\n    as illustrated below::\n\n        out, states = body(data1, states)\n\n    data1 can be either an NDArray or a list of NDArrays. If data is an NDArray,\n    data1 is an NDArray. Otherwise, data1 is a list of NDArrays and has the same\n    size as data. states is a list of NDArrays and have the same size as init_states.\n    Similarly, out can be either an NDArray or a list of NDArrays, which are concatenated\n    as the first output of foreach; states from the last execution of body\n    are the second output of foreach.\n\n    The computation done by this operator is equivalent to the pseudo code below\n    when the input data is NDArray::\n\n        states = init_states\n        outs = []\n        for i in data.shape[0]:\n            s = data[i]\n            out, states = body(s, states)\n            outs.append(out)\n        outs = stack(*outs)\n\n\n    Parameters\n    ----------\n    body : a Python function.\n        Define computation in an iteration.\n    data: an NDArray or a list of NDArrays.\n        The input data.\n    init_states: an NDArray or nested lists of NDArrays.\n        The initial values of the loop states.\n    name: string.\n        The name of the operator.\n\n    Returns\n    -------\n    outputs: an NDArray or nested lists of NDArrays.\n        The output data concatenated from the output of all iterations.\n    states: an NDArray or nested lists of NDArrays.\n        The loop states in the last iteration.\n\n    Examples\n    --------\n    >>> step = lambda data, states: (data + states[0], [states[0] * 2])\n    >>> data = mx.nd.random.uniform(shape=(2, 10))\n    >>> states = [mx.nd.random.uniform(shape=(10))]\n    >>> outs, states = mx.nd.contrib.foreach(step, data, states)\n    "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 55,
                        "column": 4
                      },
                      "end": {
                        "row": 55,
                        "column": 7
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "function_definition",
              "start": {
                "row": 57,
                "column": 4
              },
              "end": {
                "row": 66,
                "column": 38
              },
              "text": "def check_input(inputs, in_type, msg):\n        is_NDArray_or_list = True\n        if isinstance(inputs, list):\n            for i in inputs:\n                if not isinstance(i, in_type):\n                    is_NDArray_or_list = False\n                    break\n        else:\n            is_NDArray_or_list = isinstance(inputs, in_type)\n        assert is_NDArray_or_list, msg",
              "children": [
                {
                  "type": "def",
                  "start": {
                    "row": 57,
                    "column": 4
                  },
                  "end": {
                    "row": 57,
                    "column": 7
                  },
                  "text": "def"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 57,
                    "column": 8
                  },
                  "end": {
                    "row": 57,
                    "column": 19
                  },
                  "text": "check_input"
                },
                {
                  "type": "parameters",
                  "start": {
                    "row": 57,
                    "column": 19
                  },
                  "end": {
                    "row": 57,
                    "column": 41
                  },
                  "text": "(inputs, in_type, msg)",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 57,
                        "column": 19
                      },
                      "end": {
                        "row": 57,
                        "column": 20
                      },
                      "text": "("
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 57,
                        "column": 20
                      },
                      "end": {
                        "row": 57,
                        "column": 26
                      },
                      "text": "inputs"
                    },
                    {
                      "type": ",",
                      "start": {
                        "row": 57,
                        "column": 26
                      },
                      "end": {
                        "row": 57,
                        "column": 27
                      },
                      "text": ","
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 57,
                        "column": 28
                      },
                      "end": {
                        "row": 57,
                        "column": 35
                      },
                      "text": "in_type"
                    },
                    {
                      "type": ",",
                      "start": {
                        "row": 57,
                        "column": 35
                      },
                      "end": {
                        "row": 57,
                        "column": 36
                      },
                      "text": ","
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 57,
                        "column": 37
                      },
                      "end": {
                        "row": 57,
                        "column": 40
                      },
                      "text": "msg"
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 57,
                        "column": 40
                      },
                      "end": {
                        "row": 57,
                        "column": 41
                      },
                      "text": ")"
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 57,
                    "column": 41
                  },
                  "end": {
                    "row": 57,
                    "column": 42
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 58,
                    "column": 8
                  },
                  "end": {
                    "row": 66,
                    "column": 38
                  },
                  "text": "is_NDArray_or_list = True\n        if isinstance(inputs, list):\n            for i in inputs:\n                if not isinstance(i, in_type):\n                    is_NDArray_or_list = False\n                    break\n        else:\n            is_NDArray_or_list = isinstance(inputs, in_type)\n        assert is_NDArray_or_list, msg",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 58,
                        "column": 8
                      },
                      "end": {
                        "row": 58,
                        "column": 33
                      },
                      "text": "is_NDArray_or_list = True",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 58,
                            "column": 8
                          },
                          "end": {
                            "row": 58,
                            "column": 33
                          },
                          "text": "is_NDArray_or_list = True",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 58,
                                "column": 8
                              },
                              "end": {
                                "row": 58,
                                "column": 26
                              },
                              "text": "is_NDArray_or_list"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 58,
                                "column": 27
                              },
                              "end": {
                                "row": 58,
                                "column": 28
                              },
                              "text": "="
                            },
                            {
                              "type": "true",
                              "start": {
                                "row": 58,
                                "column": 29
                              },
                              "end": {
                                "row": 58,
                                "column": 33
                              },
                              "text": "True"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 59,
                        "column": 8
                      },
                      "end": {
                        "row": 65,
                        "column": 60
                      },
                      "text": "if isinstance(inputs, list):\n            for i in inputs:\n                if not isinstance(i, in_type):\n                    is_NDArray_or_list = False\n                    break\n        else:\n            is_NDArray_or_list = isinstance(inputs, in_type)",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 59,
                            "column": 8
                          },
                          "end": {
                            "row": 59,
                            "column": 10
                          },
                          "text": "if"
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 59,
                            "column": 11
                          },
                          "end": {
                            "row": 59,
                            "column": 35
                          },
                          "text": "isinstance(inputs, list)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 59,
                                "column": 11
                              },
                              "end": {
                                "row": 59,
                                "column": 21
                              },
                              "text": "isinstance"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 59,
                                "column": 21
                              },
                              "end": {
                                "row": 59,
                                "column": 35
                              },
                              "text": "(inputs, list)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 59,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 22
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 59,
                                    "column": 22
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 28
                                  },
                                  "text": "inputs"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 59,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 29
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 59,
                                    "column": 30
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 34
                                  },
                                  "text": "list"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 59,
                                    "column": 34
                                  },
                                  "end": {
                                    "row": 59,
                                    "column": 35
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 59,
                            "column": 35
                          },
                          "end": {
                            "row": 59,
                            "column": 36
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 60,
                            "column": 12
                          },
                          "end": {
                            "row": 63,
                            "column": 25
                          },
                          "text": "for i in inputs:\n                if not isinstance(i, in_type):\n                    is_NDArray_or_list = False\n                    break",
                          "children": [
                            {
                              "type": "for_statement",
                              "start": {
                                "row": 60,
                                "column": 12
                              },
                              "end": {
                                "row": 63,
                                "column": 25
                              },
                              "text": "for i in inputs:\n                if not isinstance(i, in_type):\n                    is_NDArray_or_list = False\n                    break",
                              "children": [
                                {
                                  "type": "for",
                                  "start": {
                                    "row": 60,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 60,
                                    "column": 15
                                  },
                                  "text": "for"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 60,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 60,
                                    "column": 17
                                  },
                                  "text": "i"
                                },
                                {
                                  "type": "in",
                                  "start": {
                                    "row": 60,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 60,
                                    "column": 20
                                  },
                                  "text": "in"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 60,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 60,
                                    "column": 27
                                  },
                                  "text": "inputs"
                                },
                                {
                                  "type": ":",
                                  "start": {
                                    "row": 60,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 60,
                                    "column": 28
                                  },
                                  "text": ":"
                                },
                                {
                                  "type": "block",
                                  "start": {
                                    "row": 61,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 63,
                                    "column": 25
                                  },
                                  "text": "if not isinstance(i, in_type):\n                    is_NDArray_or_list = False\n                    break",
                                  "children": [
                                    {
                                      "type": "if_statement",
                                      "start": {
                                        "row": 61,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 63,
                                        "column": 25
                                      },
                                      "text": "if not isinstance(i, in_type):\n                    is_NDArray_or_list = False\n                    break",
                                      "children": [
                                        {
                                          "type": "if",
                                          "start": {
                                            "row": 61,
                                            "column": 16
                                          },
                                          "end": {
                                            "row": 61,
                                            "column": 18
                                          },
                                          "text": "if"
                                        },
                                        {
                                          "type": "not_operator",
                                          "start": {
                                            "row": 61,
                                            "column": 19
                                          },
                                          "end": {
                                            "row": 61,
                                            "column": 45
                                          },
                                          "text": "not isinstance(i, in_type)",
                                          "children": [
                                            {
                                              "type": "not",
                                              "start": {
                                                "row": 61,
                                                "column": 19
                                              },
                                              "end": {
                                                "row": 61,
                                                "column": 22
                                              },
                                              "text": "not"
                                            },
                                            {
                                              "type": "call",
                                              "start": {
                                                "row": 61,
                                                "column": 23
                                              },
                                              "end": {
                                                "row": 61,
                                                "column": 45
                                              },
                                              "text": "isinstance(i, in_type)",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 61,
                                                    "column": 23
                                                  },
                                                  "end": {
                                                    "row": 61,
                                                    "column": 33
                                                  },
                                                  "text": "isinstance"
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "start": {
                                                    "row": 61,
                                                    "column": 33
                                                  },
                                                  "end": {
                                                    "row": 61,
                                                    "column": 45
                                                  },
                                                  "text": "(i, in_type)",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "start": {
                                                        "row": 61,
                                                        "column": 33
                                                      },
                                                      "end": {
                                                        "row": 61,
                                                        "column": 34
                                                      },
                                                      "text": "("
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 61,
                                                        "column": 34
                                                      },
                                                      "end": {
                                                        "row": 61,
                                                        "column": 35
                                                      },
                                                      "text": "i"
                                                    },
                                                    {
                                                      "type": ",",
                                                      "start": {
                                                        "row": 61,
                                                        "column": 35
                                                      },
                                                      "end": {
                                                        "row": 61,
                                                        "column": 36
                                                      },
                                                      "text": ","
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 61,
                                                        "column": 37
                                                      },
                                                      "end": {
                                                        "row": 61,
                                                        "column": 44
                                                      },
                                                      "text": "in_type"
                                                    },
                                                    {
                                                      "type": ")",
                                                      "start": {
                                                        "row": 61,
                                                        "column": 44
                                                      },
                                                      "end": {
                                                        "row": 61,
                                                        "column": 45
                                                      },
                                                      "text": ")"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ":",
                                          "start": {
                                            "row": 61,
                                            "column": 45
                                          },
                                          "end": {
                                            "row": 61,
                                            "column": 46
                                          },
                                          "text": ":"
                                        },
                                        {
                                          "type": "block",
                                          "start": {
                                            "row": 62,
                                            "column": 20
                                          },
                                          "end": {
                                            "row": 63,
                                            "column": 25
                                          },
                                          "text": "is_NDArray_or_list = False\n                    break",
                                          "children": [
                                            {
                                              "type": "expression_statement",
                                              "start": {
                                                "row": 62,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 62,
                                                "column": 46
                                              },
                                              "text": "is_NDArray_or_list = False",
                                              "children": [
                                                {
                                                  "type": "assignment",
                                                  "start": {
                                                    "row": 62,
                                                    "column": 20
                                                  },
                                                  "end": {
                                                    "row": 62,
                                                    "column": 46
                                                  },
                                                  "text": "is_NDArray_or_list = False",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 62,
                                                        "column": 20
                                                      },
                                                      "end": {
                                                        "row": 62,
                                                        "column": 38
                                                      },
                                                      "text": "is_NDArray_or_list"
                                                    },
                                                    {
                                                      "type": "=",
                                                      "start": {
                                                        "row": 62,
                                                        "column": 39
                                                      },
                                                      "end": {
                                                        "row": 62,
                                                        "column": 40
                                                      },
                                                      "text": "="
                                                    },
                                                    {
                                                      "type": "false",
                                                      "start": {
                                                        "row": 62,
                                                        "column": 41
                                                      },
                                                      "end": {
                                                        "row": 62,
                                                        "column": 46
                                                      },
                                                      "text": "False"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "break_statement",
                                              "start": {
                                                "row": 63,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 63,
                                                "column": 25
                                              },
                                              "text": "break",
                                              "children": [
                                                {
                                                  "type": "break",
                                                  "start": {
                                                    "row": 63,
                                                    "column": 20
                                                  },
                                                  "end": {
                                                    "row": 63,
                                                    "column": 25
                                                  },
                                                  "text": "break"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "else_clause",
                          "start": {
                            "row": 64,
                            "column": 8
                          },
                          "end": {
                            "row": 65,
                            "column": 60
                          },
                          "text": "else:\n            is_NDArray_or_list = isinstance(inputs, in_type)",
                          "children": [
                            {
                              "type": "else",
                              "start": {
                                "row": 64,
                                "column": 8
                              },
                              "end": {
                                "row": 64,
                                "column": 12
                              },
                              "text": "else"
                            },
                            {
                              "type": ":",
                              "start": {
                                "row": 64,
                                "column": 12
                              },
                              "end": {
                                "row": 64,
                                "column": 13
                              },
                              "text": ":"
                            },
                            {
                              "type": "block",
                              "start": {
                                "row": 65,
                                "column": 12
                              },
                              "end": {
                                "row": 65,
                                "column": 60
                              },
                              "text": "is_NDArray_or_list = isinstance(inputs, in_type)",
                              "children": [
                                {
                                  "type": "expression_statement",
                                  "start": {
                                    "row": 65,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 65,
                                    "column": 60
                                  },
                                  "text": "is_NDArray_or_list = isinstance(inputs, in_type)",
                                  "children": [
                                    {
                                      "type": "assignment",
                                      "start": {
                                        "row": 65,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 65,
                                        "column": 60
                                      },
                                      "text": "is_NDArray_or_list = isinstance(inputs, in_type)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 65,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 65,
                                            "column": 30
                                          },
                                          "text": "is_NDArray_or_list"
                                        },
                                        {
                                          "type": "=",
                                          "start": {
                                            "row": 65,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 65,
                                            "column": 32
                                          },
                                          "text": "="
                                        },
                                        {
                                          "type": "call",
                                          "start": {
                                            "row": 65,
                                            "column": 33
                                          },
                                          "end": {
                                            "row": 65,
                                            "column": 60
                                          },
                                          "text": "isinstance(inputs, in_type)",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 65,
                                                "column": 33
                                              },
                                              "end": {
                                                "row": 65,
                                                "column": 43
                                              },
                                              "text": "isinstance"
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 65,
                                                "column": 43
                                              },
                                              "end": {
                                                "row": 65,
                                                "column": 60
                                              },
                                              "text": "(inputs, in_type)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 65,
                                                    "column": 43
                                                  },
                                                  "end": {
                                                    "row": 65,
                                                    "column": 44
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 65,
                                                    "column": 44
                                                  },
                                                  "end": {
                                                    "row": 65,
                                                    "column": 50
                                                  },
                                                  "text": "inputs"
                                                },
                                                {
                                                  "type": ",",
                                                  "start": {
                                                    "row": 65,
                                                    "column": 50
                                                  },
                                                  "end": {
                                                    "row": 65,
                                                    "column": 51
                                                  },
                                                  "text": ","
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 65,
                                                    "column": 52
                                                  },
                                                  "end": {
                                                    "row": 65,
                                                    "column": 59
                                                  },
                                                  "text": "in_type"
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 65,
                                                    "column": 59
                                                  },
                                                  "end": {
                                                    "row": 65,
                                                    "column": 60
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "assert_statement",
                      "start": {
                        "row": 66,
                        "column": 8
                      },
                      "end": {
                        "row": 66,
                        "column": 38
                      },
                      "text": "assert is_NDArray_or_list, msg",
                      "children": [
                        {
                          "type": "assert",
                          "start": {
                            "row": 66,
                            "column": 8
                          },
                          "end": {
                            "row": 66,
                            "column": 14
                          },
                          "text": "assert"
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 66,
                            "column": 15
                          },
                          "end": {
                            "row": 66,
                            "column": 33
                          },
                          "text": "is_NDArray_or_list"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 66,
                            "column": 33
                          },
                          "end": {
                            "row": 66,
                            "column": 34
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 66,
                            "column": 35
                          },
                          "end": {
                            "row": 66,
                            "column": 38
                          },
                          "text": "msg"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 68,
                "column": 4
              },
              "end": {
                "row": 68,
                "column": 48
              },
              "text": "flatten, _ = _flatten(data, \"foreach input\")",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 68,
                    "column": 4
                  },
                  "end": {
                    "row": 68,
                    "column": 48
                  },
                  "text": "flatten, _ = _flatten(data, \"foreach input\")",
                  "children": [
                    {
                      "type": "pattern_list",
                      "start": {
                        "row": 68,
                        "column": 4
                      },
                      "end": {
                        "row": 68,
                        "column": 14
                      },
                      "text": "flatten, _",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 68,
                            "column": 4
                          },
                          "end": {
                            "row": 68,
                            "column": 11
                          },
                          "text": "flatten"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 68,
                            "column": 11
                          },
                          "end": {
                            "row": 68,
                            "column": 12
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 68,
                            "column": 13
                          },
                          "end": {
                            "row": 68,
                            "column": 14
                          },
                          "text": "_"
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 68,
                        "column": 15
                      },
                      "end": {
                        "row": 68,
                        "column": 16
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 68,
                        "column": 17
                      },
                      "end": {
                        "row": 68,
                        "column": 48
                      },
                      "text": "_flatten(data, \"foreach input\")",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 68,
                            "column": 17
                          },
                          "end": {
                            "row": 68,
                            "column": 25
                          },
                          "text": "_flatten"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 68,
                            "column": 25
                          },
                          "end": {
                            "row": 68,
                            "column": 48
                          },
                          "text": "(data, \"foreach input\")",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 68,
                                "column": 25
                              },
                              "end": {
                                "row": 68,
                                "column": 26
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 68,
                                "column": 26
                              },
                              "end": {
                                "row": 68,
                                "column": 30
                              },
                              "text": "data"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 68,
                                "column": 30
                              },
                              "end": {
                                "row": 68,
                                "column": 31
                              },
                              "text": ","
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 68,
                                "column": 32
                              },
                              "end": {
                                "row": 68,
                                "column": 47
                              },
                              "text": "\"foreach input\"",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 68,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 68,
                                    "column": 33
                                  },
                                  "text": "\""
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 68,
                                    "column": 33
                                  },
                                  "end": {
                                    "row": 68,
                                    "column": 46
                                  },
                                  "text": "foreach input"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 68,
                                    "column": 46
                                  },
                                  "end": {
                                    "row": 68,
                                    "column": 47
                                  },
                                  "text": "\""
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 68,
                                "column": 47
                              },
                              "end": {
                                "row": 68,
                                "column": 48
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 69,
                "column": 4
              },
              "end": {
                "row": 70,
                "column": 73
              },
              "text": "check_input(flatten, ndarray.NDArray,\n                \"data should be an NDArray or a nested list of NDArrays\")",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 69,
                    "column": 4
                  },
                  "end": {
                    "row": 70,
                    "column": 73
                  },
                  "text": "check_input(flatten, ndarray.NDArray,\n                \"data should be an NDArray or a nested list of NDArrays\")",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 69,
                        "column": 4
                      },
                      "end": {
                        "row": 69,
                        "column": 15
                      },
                      "text": "check_input"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 69,
                        "column": 15
                      },
                      "end": {
                        "row": 70,
                        "column": 73
                      },
                      "text": "(flatten, ndarray.NDArray,\n                \"data should be an NDArray or a nested list of NDArrays\")",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 69,
                            "column": 15
                          },
                          "end": {
                            "row": 69,
                            "column": 16
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 69,
                            "column": 16
                          },
                          "end": {
                            "row": 69,
                            "column": 23
                          },
                          "text": "flatten"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 69,
                            "column": 23
                          },
                          "end": {
                            "row": 69,
                            "column": 24
                          },
                          "text": ","
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 69,
                            "column": 25
                          },
                          "end": {
                            "row": 69,
                            "column": 40
                          },
                          "text": "ndarray.NDArray",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 69,
                                "column": 25
                              },
                              "end": {
                                "row": 69,
                                "column": 32
                              },
                              "text": "ndarray"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 69,
                                "column": 32
                              },
                              "end": {
                                "row": 69,
                                "column": 33
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 69,
                                "column": 33
                              },
                              "end": {
                                "row": 69,
                                "column": 40
                              },
                              "text": "NDArray"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 69,
                            "column": 40
                          },
                          "end": {
                            "row": 69,
                            "column": 41
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 70,
                            "column": 16
                          },
                          "end": {
                            "row": 70,
                            "column": 72
                          },
                          "text": "\"data should be an NDArray or a nested list of NDArrays\"",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 70,
                                "column": 16
                              },
                              "end": {
                                "row": 70,
                                "column": 17
                              },
                              "text": "\""
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 70,
                                "column": 17
                              },
                              "end": {
                                "row": 70,
                                "column": 71
                              },
                              "text": "data should be an NDArray or a nested list of NDArrays"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 70,
                                "column": 71
                              },
                              "end": {
                                "row": 70,
                                "column": 72
                              },
                              "text": "\""
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 70,
                            "column": 72
                          },
                          "end": {
                            "row": 70,
                            "column": 73
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 71,
                "column": 4
              },
              "end": {
                "row": 71,
                "column": 56
              },
              "text": "flatten, _ = _flatten(init_states, \"foreach states\")",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 71,
                    "column": 4
                  },
                  "end": {
                    "row": 71,
                    "column": 56
                  },
                  "text": "flatten, _ = _flatten(init_states, \"foreach states\")",
                  "children": [
                    {
                      "type": "pattern_list",
                      "start": {
                        "row": 71,
                        "column": 4
                      },
                      "end": {
                        "row": 71,
                        "column": 14
                      },
                      "text": "flatten, _",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 71,
                            "column": 4
                          },
                          "end": {
                            "row": 71,
                            "column": 11
                          },
                          "text": "flatten"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 71,
                            "column": 11
                          },
                          "end": {
                            "row": 71,
                            "column": 12
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 71,
                            "column": 13
                          },
                          "end": {
                            "row": 71,
                            "column": 14
                          },
                          "text": "_"
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 71,
                        "column": 15
                      },
                      "end": {
                        "row": 71,
                        "column": 16
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 71,
                        "column": 17
                      },
                      "end": {
                        "row": 71,
                        "column": 56
                      },
                      "text": "_flatten(init_states, \"foreach states\")",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 71,
                            "column": 17
                          },
                          "end": {
                            "row": 71,
                            "column": 25
                          },
                          "text": "_flatten"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 71,
                            "column": 25
                          },
                          "end": {
                            "row": 71,
                            "column": 56
                          },
                          "text": "(init_states, \"foreach states\")",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 71,
                                "column": 25
                              },
                              "end": {
                                "row": 71,
                                "column": 26
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 71,
                                "column": 26
                              },
                              "end": {
                                "row": 71,
                                "column": 37
                              },
                              "text": "init_states"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 71,
                                "column": 37
                              },
                              "end": {
                                "row": 71,
                                "column": 38
                              },
                              "text": ","
                            },
                            {
                              "type": "string",
                              "start": {
                                "row": 71,
                                "column": 39
                              },
                              "end": {
                                "row": 71,
                                "column": 55
                              },
                              "text": "\"foreach states\"",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 71,
                                    "column": 39
                                  },
                                  "end": {
                                    "row": 71,
                                    "column": 40
                                  },
                                  "text": "\""
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 71,
                                    "column": 40
                                  },
                                  "end": {
                                    "row": 71,
                                    "column": 54
                                  },
                                  "text": "foreach states"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 71,
                                    "column": 54
                                  },
                                  "end": {
                                    "row": 71,
                                    "column": 55
                                  },
                                  "text": "\""
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 71,
                                "column": 55
                              },
                              "end": {
                                "row": 71,
                                "column": 56
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 72,
                "column": 4
              },
              "end": {
                "row": 73,
                "column": 80
              },
              "text": "check_input(flatten, ndarray.NDArray,\n                \"init_states should be an NDArray or a nested list of NDArrays\")",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 72,
                    "column": 4
                  },
                  "end": {
                    "row": 73,
                    "column": 80
                  },
                  "text": "check_input(flatten, ndarray.NDArray,\n                \"init_states should be an NDArray or a nested list of NDArrays\")",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 72,
                        "column": 4
                      },
                      "end": {
                        "row": 72,
                        "column": 15
                      },
                      "text": "check_input"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 72,
                        "column": 15
                      },
                      "end": {
                        "row": 73,
                        "column": 80
                      },
                      "text": "(flatten, ndarray.NDArray,\n                \"init_states should be an NDArray or a nested list of NDArrays\")",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 72,
                            "column": 15
                          },
                          "end": {
                            "row": 72,
                            "column": 16
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 72,
                            "column": 16
                          },
                          "end": {
                            "row": 72,
                            "column": 23
                          },
                          "text": "flatten"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 72,
                            "column": 23
                          },
                          "end": {
                            "row": 72,
                            "column": 24
                          },
                          "text": ","
                        },
                        {
                          "type": "attribute",
                          "start": {
                            "row": 72,
                            "column": 25
                          },
                          "end": {
                            "row": 72,
                            "column": 40
                          },
                          "text": "ndarray.NDArray",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 72,
                                "column": 25
                              },
                              "end": {
                                "row": 72,
                                "column": 32
                              },
                              "text": "ndarray"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 72,
                                "column": 32
                              },
                              "end": {
                                "row": 72,
                                "column": 33
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 72,
                                "column": 33
                              },
                              "end": {
                                "row": 72,
                                "column": 40
                              },
                              "text": "NDArray"
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 72,
                            "column": 40
                          },
                          "end": {
                            "row": 72,
                            "column": 41
                          },
                          "text": ","
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 73,
                            "column": 16
                          },
                          "end": {
                            "row": 73,
                            "column": 79
                          },
                          "text": "\"init_states should be an NDArray or a nested list of NDArrays\"",
                          "children": [
                            {
                              "type": "string_start",
                              "start": {
                                "row": 73,
                                "column": 16
                              },
                              "end": {
                                "row": 73,
                                "column": 17
                              },
                              "text": "\""
                            },
                            {
                              "type": "string_content",
                              "start": {
                                "row": 73,
                                "column": 17
                              },
                              "end": {
                                "row": 73,
                                "column": 78
                              },
                              "text": "init_states should be an NDArray or a nested list of NDArrays"
                            },
                            {
                              "type": "string_end",
                              "start": {
                                "row": 73,
                                "column": 78
                              },
                              "end": {
                                "row": 73,
                                "column": 79
                              },
                              "text": "\""
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 73,
                            "column": 79
                          },
                          "end": {
                            "row": 73,
                            "column": 80
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 75,
                "column": 4
              },
              "end": {
                "row": 75,
                "column": 53
              },
              "text": "not_data_list = isinstance(data, ndarray.NDArray)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 75,
                    "column": 4
                  },
                  "end": {
                    "row": 75,
                    "column": 53
                  },
                  "text": "not_data_list = isinstance(data, ndarray.NDArray)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 75,
                        "column": 4
                      },
                      "end": {
                        "row": 75,
                        "column": 17
                      },
                      "text": "not_data_list"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 75,
                        "column": 18
                      },
                      "end": {
                        "row": 75,
                        "column": 19
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 75,
                        "column": 20
                      },
                      "end": {
                        "row": 75,
                        "column": 53
                      },
                      "text": "isinstance(data, ndarray.NDArray)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 75,
                            "column": 20
                          },
                          "end": {
                            "row": 75,
                            "column": 30
                          },
                          "text": "isinstance"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 75,
                            "column": 30
                          },
                          "end": {
                            "row": 75,
                            "column": 53
                          },
                          "text": "(data, ndarray.NDArray)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 75,
                                "column": 30
                              },
                              "end": {
                                "row": 75,
                                "column": 31
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 75,
                                "column": 31
                              },
                              "end": {
                                "row": 75,
                                "column": 35
                              },
                              "text": "data"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 75,
                                "column": 35
                              },
                              "end": {
                                "row": 75,
                                "column": 36
                              },
                              "text": ","
                            },
                            {
                              "type": "attribute",
                              "start": {
                                "row": 75,
                                "column": 37
                              },
                              "end": {
                                "row": 75,
                                "column": 52
                              },
                              "text": "ndarray.NDArray",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 75,
                                    "column": 37
                                  },
                                  "end": {
                                    "row": 75,
                                    "column": 44
                                  },
                                  "text": "ndarray"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 75,
                                    "column": 44
                                  },
                                  "end": {
                                    "row": 75,
                                    "column": 45
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 75,
                                    "column": 45
                                  },
                                  "end": {
                                    "row": 75,
                                    "column": 52
                                  },
                                  "text": "NDArray"
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 75,
                                "column": 52
                              },
                              "end": {
                                "row": 75,
                                "column": 53
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 76,
                "column": 4
              },
              "end": {
                "row": 76,
                "column": 68
              },
              "text": "num_iters = data.shape[0] if not_data_list else data[0].shape[0]",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 76,
                    "column": 4
                  },
                  "end": {
                    "row": 76,
                    "column": 68
                  },
                  "text": "num_iters = data.shape[0] if not_data_list else data[0].shape[0]",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 76,
                        "column": 4
                      },
                      "end": {
                        "row": 76,
                        "column": 13
                      },
                      "text": "num_iters"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 76,
                        "column": 14
                      },
                      "end": {
                        "row": 76,
                        "column": 15
                      },
                      "text": "="
                    },
                    {
                      "type": "conditional_expression",
                      "start": {
                        "row": 76,
                        "column": 16
                      },
                      "end": {
                        "row": 76,
                        "column": 68
                      },
                      "text": "data.shape[0] if not_data_list else data[0].shape[0]",
                      "children": [
                        {
                          "type": "subscript",
                          "start": {
                            "row": 76,
                            "column": 16
                          },
                          "end": {
                            "row": 76,
                            "column": 29
                          },
                          "text": "data.shape[0]",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 76,
                                "column": 16
                              },
                              "end": {
                                "row": 76,
                                "column": 26
                              },
                              "text": "data.shape",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 76,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 76,
                                    "column": 20
                                  },
                                  "text": "data"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 76,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 76,
                                    "column": 21
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 76,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 76,
                                    "column": 26
                                  },
                                  "text": "shape"
                                }
                              ]
                            },
                            {
                              "type": "[",
                              "start": {
                                "row": 76,
                                "column": 26
                              },
                              "end": {
                                "row": 76,
                                "column": 27
                              },
                              "text": "["
                            },
                            {
                              "type": "integer",
                              "start": {
                                "row": 76,
                                "column": 27
                              },
                              "end": {
                                "row": 76,
                                "column": 28
                              },
                              "text": "0"
                            },
                            {
                              "type": "]",
                              "start": {
                                "row": 76,
                                "column": 28
                              },
                              "end": {
                                "row": 76,
                                "column": 29
                              },
                              "text": "]"
                            }
                          ]
                        },
                        {
                          "type": "if",
                          "start": {
                            "row": 76,
                            "column": 30
                          },
                          "end": {
                            "row": 76,
                            "column": 32
                          },
                          "text": "if"
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 76,
                            "column": 33
                          },
                          "end": {
                            "row": 76,
                            "column": 46
                          },
                          "text": "not_data_list"
                        },
                        {
                          "type": "else",
                          "start": {
                            "row": 76,
                            "column": 47
                          },
                          "end": {
                            "row": 76,
                            "column": 51
                          },
                          "text": "else"
                        },
                        {
                          "type": "subscript",
                          "start": {
                            "row": 76,
                            "column": 52
                          },
                          "end": {
                            "row": 76,
                            "column": 68
                          },
                          "text": "data[0].shape[0]",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 76,
                                "column": 52
                              },
                              "end": {
                                "row": 76,
                                "column": 65
                              },
                              "text": "data[0].shape",
                              "children": [
                                {
                                  "type": "subscript",
                                  "start": {
                                    "row": 76,
                                    "column": 52
                                  },
                                  "end": {
                                    "row": 76,
                                    "column": 59
                                  },
                                  "text": "data[0]",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 76,
                                        "column": 52
                                      },
                                      "end": {
                                        "row": 76,
                                        "column": 56
                                      },
                                      "text": "data"
                                    },
                                    {
                                      "type": "[",
                                      "start": {
                                        "row": 76,
                                        "column": 56
                                      },
                                      "end": {
                                        "row": 76,
                                        "column": 57
                                      },
                                      "text": "["
                                    },
                                    {
                                      "type": "integer",
                                      "start": {
                                        "row": 76,
                                        "column": 57
                                      },
                                      "end": {
                                        "row": 76,
                                        "column": 58
                                      },
                                      "text": "0"
                                    },
                                    {
                                      "type": "]",
                                      "start": {
                                        "row": 76,
                                        "column": 58
                                      },
                                      "end": {
                                        "row": 76,
                                        "column": 59
                                      },
                                      "text": "]"
                                    }
                                  ]
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 76,
                                    "column": 59
                                  },
                                  "end": {
                                    "row": 76,
                                    "column": 60
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 76,
                                    "column": 60
                                  },
                                  "end": {
                                    "row": 76,
                                    "column": 65
                                  },
                                  "text": "shape"
                                }
                              ]
                            },
                            {
                              "type": "[",
                              "start": {
                                "row": 76,
                                "column": 65
                              },
                              "end": {
                                "row": 76,
                                "column": 66
                              },
                              "text": "["
                            },
                            {
                              "type": "integer",
                              "start": {
                                "row": 76,
                                "column": 66
                              },
                              "end": {
                                "row": 76,
                                "column": 67
                              },
                              "text": "0"
                            },
                            {
                              "type": "]",
                              "start": {
                                "row": 76,
                                "column": 67
                              },
                              "end": {
                                "row": 76,
                                "column": 68
                              },
                              "text": "]"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 77,
                "column": 4
              },
              "end": {
                "row": 77,
                "column": 24
              },
              "text": "states = init_states",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 77,
                    "column": 4
                  },
                  "end": {
                    "row": 77,
                    "column": 24
                  },
                  "text": "states = init_states",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 77,
                        "column": 4
                      },
                      "end": {
                        "row": 77,
                        "column": 10
                      },
                      "text": "states"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 77,
                        "column": 11
                      },
                      "end": {
                        "row": 77,
                        "column": 12
                      },
                      "text": "="
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 77,
                        "column": 13
                      },
                      "end": {
                        "row": 77,
                        "column": 24
                      },
                      "text": "init_states"
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 78,
                "column": 4
              },
              "end": {
                "row": 78,
                "column": 16
              },
              "text": "outputs = []",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 78,
                    "column": 4
                  },
                  "end": {
                    "row": 78,
                    "column": 16
                  },
                  "text": "outputs = []",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 78,
                        "column": 4
                      },
                      "end": {
                        "row": 78,
                        "column": 11
                      },
                      "text": "outputs"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 78,
                        "column": 12
                      },
                      "end": {
                        "row": 78,
                        "column": 13
                      },
                      "text": "="
                    },
                    {
                      "type": "list",
                      "start": {
                        "row": 78,
                        "column": 14
                      },
                      "end": {
                        "row": 78,
                        "column": 16
                      },
                      "text": "[]",
                      "children": [
                        {
                          "type": "[",
                          "start": {
                            "row": 78,
                            "column": 14
                          },
                          "end": {
                            "row": 78,
                            "column": 15
                          },
                          "text": "["
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 78,
                            "column": 15
                          },
                          "end": {
                            "row": 78,
                            "column": 16
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "for_statement",
              "start": {
                "row": 79,
                "column": 4
              },
              "end": {
                "row": 86,
                "column": 28
              },
              "text": "for i in range(num_iters):\n        if not_data_list:\n            eles = data[i]\n        else:\n            eles = [d[i] for d in data]\n        outs, states = body(eles, states)\n        outs, out_fmt = _flatten(outs, \"foreach output\")\n        outputs.append(outs)",
              "children": [
                {
                  "type": "for",
                  "start": {
                    "row": 79,
                    "column": 4
                  },
                  "end": {
                    "row": 79,
                    "column": 7
                  },
                  "text": "for"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 79,
                    "column": 8
                  },
                  "end": {
                    "row": 79,
                    "column": 9
                  },
                  "text": "i"
                },
                {
                  "type": "in",
                  "start": {
                    "row": 79,
                    "column": 10
                  },
                  "end": {
                    "row": 79,
                    "column": 12
                  },
                  "text": "in"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 79,
                    "column": 13
                  },
                  "end": {
                    "row": 79,
                    "column": 29
                  },
                  "text": "range(num_iters)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 79,
                        "column": 13
                      },
                      "end": {
                        "row": 79,
                        "column": 18
                      },
                      "text": "range"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 79,
                        "column": 18
                      },
                      "end": {
                        "row": 79,
                        "column": 29
                      },
                      "text": "(num_iters)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 79,
                            "column": 18
                          },
                          "end": {
                            "row": 79,
                            "column": 19
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 79,
                            "column": 19
                          },
                          "end": {
                            "row": 79,
                            "column": 28
                          },
                          "text": "num_iters"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 79,
                            "column": 28
                          },
                          "end": {
                            "row": 79,
                            "column": 29
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 79,
                    "column": 29
                  },
                  "end": {
                    "row": 79,
                    "column": 30
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 80,
                    "column": 8
                  },
                  "end": {
                    "row": 86,
                    "column": 28
                  },
                  "text": "if not_data_list:\n            eles = data[i]\n        else:\n            eles = [d[i] for d in data]\n        outs, states = body(eles, states)\n        outs, out_fmt = _flatten(outs, \"foreach output\")\n        outputs.append(outs)",
                  "children": [
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 80,
                        "column": 8
                      },
                      "end": {
                        "row": 83,
                        "column": 39
                      },
                      "text": "if not_data_list:\n            eles = data[i]\n        else:\n            eles = [d[i] for d in data]",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 80,
                            "column": 8
                          },
                          "end": {
                            "row": 80,
                            "column": 10
                          },
                          "text": "if"
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 80,
                            "column": 11
                          },
                          "end": {
                            "row": 80,
                            "column": 24
                          },
                          "text": "not_data_list"
                        },
                        {
                          "type": ":",
                          "start": {
                            "row": 80,
                            "column": 24
                          },
                          "end": {
                            "row": 80,
                            "column": 25
                          },
                          "text": ":"
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 81,
                            "column": 12
                          },
                          "end": {
                            "row": 81,
                            "column": 26
                          },
                          "text": "eles = data[i]",
                          "children": [
                            {
                              "type": "expression_statement",
                              "start": {
                                "row": 81,
                                "column": 12
                              },
                              "end": {
                                "row": 81,
                                "column": 26
                              },
                              "text": "eles = data[i]",
                              "children": [
                                {
                                  "type": "assignment",
                                  "start": {
                                    "row": 81,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 81,
                                    "column": 26
                                  },
                                  "text": "eles = data[i]",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 81,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 81,
                                        "column": 16
                                      },
                                      "text": "eles"
                                    },
                                    {
                                      "type": "=",
                                      "start": {
                                        "row": 81,
                                        "column": 17
                                      },
                                      "end": {
                                        "row": 81,
                                        "column": 18
                                      },
                                      "text": "="
                                    },
                                    {
                                      "type": "subscript",
                                      "start": {
                                        "row": 81,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 81,
                                        "column": 26
                                      },
                                      "text": "data[i]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 81,
                                            "column": 19
                                          },
                                          "end": {
                                            "row": 81,
                                            "column": 23
                                          },
                                          "text": "data"
                                        },
                                        {
                                          "type": "[",
                                          "start": {
                                            "row": 81,
                                            "column": 23
                                          },
                                          "end": {
                                            "row": 81,
                                            "column": 24
                                          },
                                          "text": "["
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 81,
                                            "column": 24
                                          },
                                          "end": {
                                            "row": 81,
                                            "column": 25
                                          },
                                          "text": "i"
                                        },
                                        {
                                          "type": "]",
                                          "start": {
                                            "row": 81,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 81,
                                            "column": 26
                                          },
                                          "text": "]"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "else_clause",
                          "start": {
                            "row": 82,
                            "column": 8
                          },
                          "end": {
                            "row": 83,
                            "column": 39
                          },
                          "text": "else:\n            eles = [d[i] for d in data]",
                          "children": [
                            {
                              "type": "else",
                              "start": {
                                "row": 82,
                                "column": 8
                              },
                              "end": {
                                "row": 82,
                                "column": 12
                              },
                              "text": "else"
                            },
                            {
                              "type": ":",
                              "start": {
                                "row": 82,
                                "column": 12
                              },
                              "end": {
                                "row": 82,
                                "column": 13
                              },
                              "text": ":"
                            },
                            {
                              "type": "block",
                              "start": {
                                "row": 83,
                                "column": 12
                              },
                              "end": {
                                "row": 83,
                                "column": 39
                              },
                              "text": "eles = [d[i] for d in data]",
                              "children": [
                                {
                                  "type": "expression_statement",
                                  "start": {
                                    "row": 83,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 83,
                                    "column": 39
                                  },
                                  "text": "eles = [d[i] for d in data]",
                                  "children": [
                                    {
                                      "type": "assignment",
                                      "start": {
                                        "row": 83,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 83,
                                        "column": 39
                                      },
                                      "text": "eles = [d[i] for d in data]",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 83,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 83,
                                            "column": 16
                                          },
                                          "text": "eles"
                                        },
                                        {
                                          "type": "=",
                                          "start": {
                                            "row": 83,
                                            "column": 17
                                          },
                                          "end": {
                                            "row": 83,
                                            "column": 18
                                          },
                                          "text": "="
                                        },
                                        {
                                          "type": "list_comprehension",
                                          "start": {
                                            "row": 83,
                                            "column": 19
                                          },
                                          "end": {
                                            "row": 83,
                                            "column": 39
                                          },
                                          "text": "[d[i] for d in data]",
                                          "children": [
                                            {
                                              "type": "[",
                                              "start": {
                                                "row": 83,
                                                "column": 19
                                              },
                                              "end": {
                                                "row": 83,
                                                "column": 20
                                              },
                                              "text": "["
                                            },
                                            {
                                              "type": "subscript",
                                              "start": {
                                                "row": 83,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 83,
                                                "column": 24
                                              },
                                              "text": "d[i]",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 83,
                                                    "column": 20
                                                  },
                                                  "end": {
                                                    "row": 83,
                                                    "column": 21
                                                  },
                                                  "text": "d"
                                                },
                                                {
                                                  "type": "[",
                                                  "start": {
                                                    "row": 83,
                                                    "column": 21
                                                  },
                                                  "end": {
                                                    "row": 83,
                                                    "column": 22
                                                  },
                                                  "text": "["
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 83,
                                                    "column": 22
                                                  },
                                                  "end": {
                                                    "row": 83,
                                                    "column": 23
                                                  },
                                                  "text": "i"
                                                },
                                                {
                                                  "type": "]",
                                                  "start": {
                                                    "row": 83,
                                                    "column": 23
                                                  },
                                                  "end": {
                                                    "row": 83,
                                                    "column": 24
                                                  },
                                                  "text": "]"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "for_in_clause",
                                              "start": {
                                                "row": 83,
                                                "column": 25
                                              },
                                              "end": {
                                                "row": 83,
                                                "column": 38
                                              },
                                              "text": "for d in data",
                                              "children": [
                                                {
                                                  "type": "for",
                                                  "start": {
                                                    "row": 83,
                                                    "column": 25
                                                  },
                                                  "end": {
                                                    "row": 83,
                                                    "column": 28
                                                  },
                                                  "text": "for"
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 83,
                                                    "column": 29
                                                  },
                                                  "end": {
                                                    "row": 83,
                                                    "column": 30
                                                  },
                                                  "text": "d"
                                                },
                                                {
                                                  "type": "in",
                                                  "start": {
                                                    "row": 83,
                                                    "column": 31
                                                  },
                                                  "end": {
                                                    "row": 83,
                                                    "column": 33
                                                  },
                                                  "text": "in"
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 83,
                                                    "column": 34
                                                  },
                                                  "end": {
                                                    "row": 83,
                                                    "column": 38
                                                  },
                                                  "text": "data"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "]",
                                              "start": {
                                                "row": 83,
                                                "column": 38
                                              },
                                              "end": {
                                                "row": 83,
                                                "column": 39
                                              },
                                              "text": "]"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 84,
                        "column": 8
                      },
                      "end": {
                        "row": 84,
                        "column": 41
                      },
                      "text": "outs, states = body(eles, states)",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 84,
                            "column": 8
                          },
                          "end": {
                            "row": 84,
                            "column": 41
                          },
                          "text": "outs, states = body(eles, states)",
                          "children": [
                            {
                              "type": "pattern_list",
                              "start": {
                                "row": 84,
                                "column": 8
                              },
                              "end": {
                                "row": 84,
                                "column": 20
                              },
                              "text": "outs, states",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 84,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 84,
                                    "column": 12
                                  },
                                  "text": "outs"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 84,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 84,
                                    "column": 13
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 84,
                                    "column": 14
                                  },
                                  "end": {
                                    "row": 84,
                                    "column": 20
                                  },
                                  "text": "states"
                                }
                              ]
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 84,
                                "column": 21
                              },
                              "end": {
                                "row": 84,
                                "column": 22
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 84,
                                "column": 23
                              },
                              "end": {
                                "row": 84,
                                "column": 41
                              },
                              "text": "body(eles, states)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 84,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 84,
                                    "column": 27
                                  },
                                  "text": "body"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 84,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 84,
                                    "column": 41
                                  },
                                  "text": "(eles, states)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 84,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 84,
                                        "column": 28
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 84,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 84,
                                        "column": 32
                                      },
                                      "text": "eles"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 84,
                                        "column": 32
                                      },
                                      "end": {
                                        "row": 84,
                                        "column": 33
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 84,
                                        "column": 34
                                      },
                                      "end": {
                                        "row": 84,
                                        "column": 40
                                      },
                                      "text": "states"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 84,
                                        "column": 40
                                      },
                                      "end": {
                                        "row": 84,
                                        "column": 41
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 85,
                        "column": 8
                      },
                      "end": {
                        "row": 85,
                        "column": 56
                      },
                      "text": "outs, out_fmt = _flatten(outs, \"foreach output\")",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 85,
                            "column": 8
                          },
                          "end": {
                            "row": 85,
                            "column": 56
                          },
                          "text": "outs, out_fmt = _flatten(outs, \"foreach output\")",
                          "children": [
                            {
                              "type": "pattern_list",
                              "start": {
                                "row": 85,
                                "column": 8
                              },
                              "end": {
                                "row": 85,
                                "column": 21
                              },
                              "text": "outs, out_fmt",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 85,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 85,
                                    "column": 12
                                  },
                                  "text": "outs"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 85,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 85,
                                    "column": 13
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 85,
                                    "column": 14
                                  },
                                  "end": {
                                    "row": 85,
                                    "column": 21
                                  },
                                  "text": "out_fmt"
                                }
                              ]
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 85,
                                "column": 22
                              },
                              "end": {
                                "row": 85,
                                "column": 23
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 85,
                                "column": 24
                              },
                              "end": {
                                "row": 85,
                                "column": 56
                              },
                              "text": "_flatten(outs, \"foreach output\")",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 85,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 85,
                                    "column": 32
                                  },
                                  "text": "_flatten"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 85,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 85,
                                    "column": 56
                                  },
                                  "text": "(outs, \"foreach output\")",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 85,
                                        "column": 32
                                      },
                                      "end": {
                                        "row": 85,
                                        "column": 33
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 85,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 85,
                                        "column": 37
                                      },
                                      "text": "outs"
                                    },
                                    {
                                      "type": ",",
                                      "start": {
                                        "row": 85,
                                        "column": 37
                                      },
                                      "end": {
                                        "row": 85,
                                        "column": 38
                                      },
                                      "text": ","
                                    },
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 85,
                                        "column": 39
                                      },
                                      "end": {
                                        "row": 85,
                                        "column": 55
                                      },
                                      "text": "\"foreach output\"",
                                      "children": [
                                        {
                                          "type": "string_start",
                                          "start": {
                                            "row": 85,
                                            "column": 39
                                          },
                                          "end": {
                                            "row": 85,
                                            "column": 40
                                          },
                                          "text": "\""
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 85,
                                            "column": 40
                                          },
                                          "end": {
                                            "row": 85,
                                            "column": 54
                                          },
                                          "text": "foreach output"
                                        },
                                        {
                                          "type": "string_end",
                                          "start": {
                                            "row": 85,
                                            "column": 54
                                          },
                                          "end": {
                                            "row": 85,
                                            "column": 55
                                          },
                                          "text": "\""
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 85,
                                        "column": 55
                                      },
                                      "end": {
                                        "row": 85,
                                        "column": 56
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 86,
                        "column": 8
                      },
                      "end": {
                        "row": 86,
                        "column": 28
                      },
                      "text": "outputs.append(outs)",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 86,
                            "column": 8
                          },
                          "end": {
                            "row": 86,
                            "column": 28
                          },
                          "text": "outputs.append(outs)",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 86,
                                "column": 8
                              },
                              "end": {
                                "row": 86,
                                "column": 22
                              },
                              "text": "outputs.append",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 86,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 86,
                                    "column": 15
                                  },
                                  "text": "outputs"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 86,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 86,
                                    "column": 16
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 86,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 86,
                                    "column": 22
                                  },
                                  "text": "append"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 86,
                                "column": 22
                              },
                              "end": {
                                "row": 86,
                                "column": 28
                              },
                              "text": "(outs)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 86,
                                    "column": 22
                                  },
                                  "end": {
                                    "row": 86,
                                    "column": 23
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 86,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 86,
                                    "column": 27
                                  },
                                  "text": "outs"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 86,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 86,
                                    "column": 28
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 87,
                "column": 4
              },
              "end": {
                "row": 87,
                "column": 27
              },
              "text": "outputs = zip(*outputs)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 87,
                    "column": 4
                  },
                  "end": {
                    "row": 87,
                    "column": 27
                  },
                  "text": "outputs = zip(*outputs)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 87,
                        "column": 4
                      },
                      "end": {
                        "row": 87,
                        "column": 11
                      },
                      "text": "outputs"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 87,
                        "column": 12
                      },
                      "end": {
                        "row": 87,
                        "column": 13
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 87,
                        "column": 14
                      },
                      "end": {
                        "row": 87,
                        "column": 27
                      },
                      "text": "zip(*outputs)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 87,
                            "column": 14
                          },
                          "end": {
                            "row": 87,
                            "column": 17
                          },
                          "text": "zip"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 87,
                            "column": 17
                          },
                          "end": {
                            "row": 87,
                            "column": 27
                          },
                          "text": "(*outputs)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 87,
                                "column": 17
                              },
                              "end": {
                                "row": 87,
                                "column": 18
                              },
                              "text": "("
                            },
                            {
                              "type": "list_splat",
                              "start": {
                                "row": 87,
                                "column": 18
                              },
                              "end": {
                                "row": 87,
                                "column": 26
                              },
                              "text": "*outputs",
                              "children": [
                                {
                                  "type": "*",
                                  "start": {
                                    "row": 87,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 87,
                                    "column": 19
                                  },
                                  "text": "*"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 87,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 87,
                                    "column": 26
                                  },
                                  "text": "outputs"
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 87,
                                "column": 26
                              },
                              "end": {
                                "row": 87,
                                "column": 27
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 88,
                "column": 4
              },
              "end": {
                "row": 88,
                "column": 20
              },
              "text": "tmp_outputs = []",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 88,
                    "column": 4
                  },
                  "end": {
                    "row": 88,
                    "column": 20
                  },
                  "text": "tmp_outputs = []",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 88,
                        "column": 4
                      },
                      "end": {
                        "row": 88,
                        "column": 15
                      },
                      "text": "tmp_outputs"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 88,
                        "column": 16
                      },
                      "end": {
                        "row": 88,
                        "column": 17
                      },
                      "text": "="
                    },
                    {
                      "type": "list",
                      "start": {
                        "row": 88,
                        "column": 18
                      },
                      "end": {
                        "row": 88,
                        "column": 20
                      },
                      "text": "[]",
                      "children": [
                        {
                          "type": "[",
                          "start": {
                            "row": 88,
                            "column": 18
                          },
                          "end": {
                            "row": 88,
                            "column": 19
                          },
                          "text": "["
                        },
                        {
                          "type": "]",
                          "start": {
                            "row": 88,
                            "column": 19
                          },
                          "end": {
                            "row": 88,
                            "column": 20
                          },
                          "text": "]"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "for_statement",
              "start": {
                "row": 89,
                "column": 4
              },
              "end": {
                "row": 90,
                "column": 50
              },
              "text": "for out in outputs:\n        tmp_outputs.append(ndarray.op.stack(*out))",
              "children": [
                {
                  "type": "for",
                  "start": {
                    "row": 89,
                    "column": 4
                  },
                  "end": {
                    "row": 89,
                    "column": 7
                  },
                  "text": "for"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 89,
                    "column": 8
                  },
                  "end": {
                    "row": 89,
                    "column": 11
                  },
                  "text": "out"
                },
                {
                  "type": "in",
                  "start": {
                    "row": 89,
                    "column": 12
                  },
                  "end": {
                    "row": 89,
                    "column": 14
                  },
                  "text": "in"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 89,
                    "column": 15
                  },
                  "end": {
                    "row": 89,
                    "column": 22
                  },
                  "text": "outputs"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 89,
                    "column": 22
                  },
                  "end": {
                    "row": 89,
                    "column": 23
                  },
                  "text": ":"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 90,
                    "column": 8
                  },
                  "end": {
                    "row": 90,
                    "column": 50
                  },
                  "text": "tmp_outputs.append(ndarray.op.stack(*out))",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 90,
                        "column": 8
                      },
                      "end": {
                        "row": 90,
                        "column": 50
                      },
                      "text": "tmp_outputs.append(ndarray.op.stack(*out))",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 90,
                            "column": 8
                          },
                          "end": {
                            "row": 90,
                            "column": 50
                          },
                          "text": "tmp_outputs.append(ndarray.op.stack(*out))",
                          "children": [
                            {
                              "type": "attribute",
                              "start": {
                                "row": 90,
                                "column": 8
                              },
                              "end": {
                                "row": 90,
                                "column": 26
                              },
                              "text": "tmp_outputs.append",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 90,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 90,
                                    "column": 19
                                  },
                                  "text": "tmp_outputs"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 90,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 90,
                                    "column": 20
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 90,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 90,
                                    "column": 26
                                  },
                                  "text": "append"
                                }
                              ]
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 90,
                                "column": 26
                              },
                              "end": {
                                "row": 90,
                                "column": 50
                              },
                              "text": "(ndarray.op.stack(*out))",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 90,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 90,
                                    "column": 27
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 90,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 90,
                                    "column": 49
                                  },
                                  "text": "ndarray.op.stack(*out)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 90,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 90,
                                        "column": 43
                                      },
                                      "text": "ndarray.op.stack",
                                      "children": [
                                        {
                                          "type": "attribute",
                                          "start": {
                                            "row": 90,
                                            "column": 27
                                          },
                                          "end": {
                                            "row": 90,
                                            "column": 37
                                          },
                                          "text": "ndarray.op",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 90,
                                                "column": 27
                                              },
                                              "end": {
                                                "row": 90,
                                                "column": 34
                                              },
                                              "text": "ndarray"
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 90,
                                                "column": 34
                                              },
                                              "end": {
                                                "row": 90,
                                                "column": 35
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 90,
                                                "column": 35
                                              },
                                              "end": {
                                                "row": 90,
                                                "column": 37
                                              },
                                              "text": "op"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 90,
                                            "column": 37
                                          },
                                          "end": {
                                            "row": 90,
                                            "column": 38
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 90,
                                            "column": 38
                                          },
                                          "end": {
                                            "row": 90,
                                            "column": 43
                                          },
                                          "text": "stack"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 90,
                                        "column": 43
                                      },
                                      "end": {
                                        "row": 90,
                                        "column": 49
                                      },
                                      "text": "(*out)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 90,
                                            "column": 43
                                          },
                                          "end": {
                                            "row": 90,
                                            "column": 44
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "list_splat",
                                          "start": {
                                            "row": 90,
                                            "column": 44
                                          },
                                          "end": {
                                            "row": 90,
                                            "column": 48
                                          },
                                          "text": "*out",
                                          "children": [
                                            {
                                              "type": "*",
                                              "start": {
                                                "row": 90,
                                                "column": 44
                                              },
                                              "end": {
                                                "row": 90,
                                                "column": 45
                                              },
                                              "text": "*"
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 90,
                                                "column": 45
                                              },
                                              "end": {
                                                "row": 90,
                                                "column": 48
                                              },
                                              "text": "out"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 90,
                                            "column": 48
                                          },
                                          "end": {
                                            "row": 90,
                                            "column": 49
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 90,
                                    "column": 49
                                  },
                                  "end": {
                                    "row": 90,
                                    "column": 50
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 91,
                "column": 4
              },
              "end": {
                "row": 91,
                "column": 25
              },
              "text": "outputs = tmp_outputs",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 91,
                    "column": 4
                  },
                  "end": {
                    "row": 91,
                    "column": 25
                  },
                  "text": "outputs = tmp_outputs",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 91,
                        "column": 4
                      },
                      "end": {
                        "row": 91,
                        "column": 11
                      },
                      "text": "outputs"
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 91,
                        "column": 12
                      },
                      "end": {
                        "row": 91,
                        "column": 13
                      },
                      "text": "="
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 91,
                        "column": 14
                      },
                      "end": {
                        "row": 91,
                        "column": 25
                      },
                      "text": "tmp_outputs"
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 92,
                "column": 4
              },
              "end": {
                "row": 92,
                "column": 43
              },
              "text": "outputs, _ = _regroup(outputs, out_fmt)",
              "children": [
                {
                  "type": "assignment",
                  "start": {
                    "row": 92,
                    "column": 4
                  },
                  "end": {
                    "row": 92,
                    "column": 43
                  },
                  "text": "outputs, _ = _regroup(outputs, out_fmt)",
                  "children": [
                    {
                      "type": "pattern_list",
                      "start": {
                        "row": 92,
                        "column": 4
                      },
                      "end": {
                        "row": 92,
                        "column": 14
                      },
                      "text": "outputs, _",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 92,
                            "column": 4
                          },
                          "end": {
                            "row": 92,
                            "column": 11
                          },
                          "text": "outputs"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 92,
                            "column": 11
                          },
                          "end": {
                            "row": 92,
                            "column": 12
                          },
                          "text": ","
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 92,
                            "column": 13
                          },
                          "end": {
                            "row": 92,
                            "column": 14
                          },
                          "text": "_"
                        }
                      ]
                    },
                    {
                      "type": "=",
                      "start": {
                        "row": 92,
                        "column": 15
                      },
                      "end": {
                        "row": 92,
                        "column": 16
                      },
                      "text": "="
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 92,
                        "column": 17
                      },
                      "end": {
                        "row": 92,
                        "column": 43
                      },
                      "text": "_regroup(outputs, out_fmt)",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 92,
                            "column": 17
                          },
                          "end": {
                            "row": 92,
                            "column": 25
                          },
                          "text": "_regroup"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 92,
                            "column": 25
                          },
                          "end": {
                            "row": 92,
                            "column": 43
                          },
                          "text": "(outputs, out_fmt)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 92,
                                "column": 25
                              },
                              "end": {
                                "row": 92,
                                "column": 26
                              },
                              "text": "("
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 92,
                                "column": 26
                              },
                              "end": {
                                "row": 92,
                                "column": 33
                              },
                              "text": "outputs"
                            },
                            {
                              "type": ",",
                              "start": {
                                "row": 92,
                                "column": 33
                              },
                              "end": {
                                "row": 92,
                                "column": 34
                              },
                              "text": ","
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 92,
                                "column": 35
                              },
                              "end": {
                                "row": 92,
                                "column": 42
                              },
                              "text": "out_fmt"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 92,
                                "column": 42
                              },
                              "end": {
                                "row": 92,
                                "column": 43
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 94,
                "column": 4
              },
              "end": {
                "row": 94,
                "column": 28
              },
              "text": "return (outputs, states)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 94,
                    "column": 4
                  },
                  "end": {
                    "row": 94,
                    "column": 10
                  },
                  "text": "return"
                },
                {
                  "type": "tuple",
                  "start": {
                    "row": 94,
                    "column": 11
                  },
                  "end": {
                    "row": 94,
                    "column": 28
                  },
                  "text": "(outputs, states)",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 94,
                        "column": 11
                      },
                      "end": {
                        "row": 94,
                        "column": 12
                      },
                      "text": "("
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 94,
                        "column": 12
                      },
                      "end": {
                        "row": 94,
                        "column": 19
                      },
                      "text": "outputs"
                    },
                    {
                      "type": ",",
                      "start": {
                        "row": 94,
                        "column": 19
                      },
                      "end": {
                        "row": 94,
                        "column": 20
                      },
                      "text": ","
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 94,
                        "column": 21
                      },
                      "end": {
                        "row": 94,
                        "column": 27
                      },
                      "text": "states"
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 94,
                        "column": 27
                      },
                      "end": {
                        "row": 94,
                        "column": 28
                      },
                      "text": ")"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}