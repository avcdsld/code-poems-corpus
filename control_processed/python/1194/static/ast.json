{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 96,
    "column": 48
  },
  "text": "def transpose(self, *args, **kwargs):\n        \"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            If True, the underlying data is copied. Otherwise (default), no\n            copy is made if possible.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"\n        nv.validate_transpose(args, dict())\n        return super().transpose(1, 0, **kwargs)",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 96,
        "column": 48
      },
      "text": "def transpose(self, *args, **kwargs):\n        \"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            If True, the underlying data is copied. Otherwise (default), no\n            copy is made if possible.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"\n        nv.validate_transpose(args, dict())\n        return super().transpose(1, 0, **kwargs)",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 13
          },
          "text": "transpose"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 13
          },
          "end": {
            "row": 0,
            "column": 36
          },
          "text": "(self, *args, **kwargs)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 13
              },
              "end": {
                "row": 0,
                "column": 14
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 14
              },
              "end": {
                "row": 0,
                "column": 18
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 18
              },
              "end": {
                "row": 0,
                "column": 19
              },
              "text": ","
            },
            {
              "type": "list_splat_pattern",
              "start": {
                "row": 0,
                "column": 20
              },
              "end": {
                "row": 0,
                "column": 25
              },
              "text": "*args",
              "children": [
                {
                  "type": "*",
                  "start": {
                    "row": 0,
                    "column": 20
                  },
                  "end": {
                    "row": 0,
                    "column": 21
                  },
                  "text": "*"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 21
                  },
                  "end": {
                    "row": 0,
                    "column": 25
                  },
                  "text": "args"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 25
              },
              "end": {
                "row": 0,
                "column": 26
              },
              "text": ","
            },
            {
              "type": "dictionary_splat_pattern",
              "start": {
                "row": 0,
                "column": 27
              },
              "end": {
                "row": 0,
                "column": 35
              },
              "text": "**kwargs",
              "children": [
                {
                  "type": "**",
                  "start": {
                    "row": 0,
                    "column": 27
                  },
                  "end": {
                    "row": 0,
                    "column": 29
                  },
                  "text": "**"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 29
                  },
                  "end": {
                    "row": 0,
                    "column": 35
                  },
                  "text": "kwargs"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 35
              },
              "end": {
                "row": 0,
                "column": 36
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 36
          },
          "end": {
            "row": 0,
            "column": 37
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 96,
            "column": 48
          },
          "text": "\"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            If True, the underlying data is copied. Otherwise (default), no\n            copy is made if possible.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"\n        nv.validate_transpose(args, dict())\n        return super().transpose(1, 0, **kwargs)",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 94,
                "column": 11
              },
              "text": "\"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            If True, the underlying data is copied. Otherwise (default), no\n            copy is made if possible.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 94,
                    "column": 11
                  },
                  "text": "\"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            If True, the underlying data is copied. Otherwise (default), no\n            copy is made if possible.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 94,
                        "column": 8
                      },
                      "text": "\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            If True, the underlying data is copied. Otherwise (default), no\n            copy is made if possible.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        "
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 94,
                        "column": 8
                      },
                      "end": {
                        "row": 94,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 95,
                "column": 8
              },
              "end": {
                "row": 95,
                "column": 43
              },
              "text": "nv.validate_transpose(args, dict())",
              "children": [
                {
                  "type": "call",
                  "start": {
                    "row": 95,
                    "column": 8
                  },
                  "end": {
                    "row": 95,
                    "column": 43
                  },
                  "text": "nv.validate_transpose(args, dict())",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 95,
                        "column": 8
                      },
                      "end": {
                        "row": 95,
                        "column": 29
                      },
                      "text": "nv.validate_transpose",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 95,
                            "column": 8
                          },
                          "end": {
                            "row": 95,
                            "column": 10
                          },
                          "text": "nv"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 95,
                            "column": 10
                          },
                          "end": {
                            "row": 95,
                            "column": 11
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 95,
                            "column": 11
                          },
                          "end": {
                            "row": 95,
                            "column": 29
                          },
                          "text": "validate_transpose"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 95,
                        "column": 29
                      },
                      "end": {
                        "row": 95,
                        "column": 43
                      },
                      "text": "(args, dict())",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 95,
                            "column": 29
                          },
                          "end": {
                            "row": 95,
                            "column": 30
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 95,
                            "column": 30
                          },
                          "end": {
                            "row": 95,
                            "column": 34
                          },
                          "text": "args"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 95,
                            "column": 34
                          },
                          "end": {
                            "row": 95,
                            "column": 35
                          },
                          "text": ","
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 95,
                            "column": 36
                          },
                          "end": {
                            "row": 95,
                            "column": 42
                          },
                          "text": "dict()",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 95,
                                "column": 36
                              },
                              "end": {
                                "row": 95,
                                "column": 40
                              },
                              "text": "dict"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 95,
                                "column": 40
                              },
                              "end": {
                                "row": 95,
                                "column": 42
                              },
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 95,
                                    "column": 40
                                  },
                                  "end": {
                                    "row": 95,
                                    "column": 41
                                  },
                                  "text": "("
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 95,
                                    "column": 41
                                  },
                                  "end": {
                                    "row": 95,
                                    "column": 42
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 95,
                            "column": 42
                          },
                          "end": {
                            "row": 95,
                            "column": 43
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start": {
                "row": 96,
                "column": 8
              },
              "end": {
                "row": 96,
                "column": 48
              },
              "text": "return super().transpose(1, 0, **kwargs)",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 96,
                    "column": 8
                  },
                  "end": {
                    "row": 96,
                    "column": 14
                  },
                  "text": "return"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 96,
                    "column": 15
                  },
                  "end": {
                    "row": 96,
                    "column": 48
                  },
                  "text": "super().transpose(1, 0, **kwargs)",
                  "children": [
                    {
                      "type": "attribute",
                      "start": {
                        "row": 96,
                        "column": 15
                      },
                      "end": {
                        "row": 96,
                        "column": 32
                      },
                      "text": "super().transpose",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 96,
                            "column": 15
                          },
                          "end": {
                            "row": 96,
                            "column": 22
                          },
                          "text": "super()",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 96,
                                "column": 15
                              },
                              "end": {
                                "row": 96,
                                "column": 20
                              },
                              "text": "super"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 96,
                                "column": 20
                              },
                              "end": {
                                "row": 96,
                                "column": 22
                              },
                              "text": "()",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 96,
                                    "column": 20
                                  },
                                  "end": {
                                    "row": 96,
                                    "column": 21
                                  },
                                  "text": "("
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 96,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 96,
                                    "column": 22
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 96,
                            "column": 22
                          },
                          "end": {
                            "row": 96,
                            "column": 23
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 96,
                            "column": 23
                          },
                          "end": {
                            "row": 96,
                            "column": 32
                          },
                          "text": "transpose"
                        }
                      ]
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 96,
                        "column": 32
                      },
                      "end": {
                        "row": 96,
                        "column": 48
                      },
                      "text": "(1, 0, **kwargs)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 96,
                            "column": 32
                          },
                          "end": {
                            "row": 96,
                            "column": 33
                          },
                          "text": "("
                        },
                        {
                          "type": "integer",
                          "start": {
                            "row": 96,
                            "column": 33
                          },
                          "end": {
                            "row": 96,
                            "column": 34
                          },
                          "text": "1"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 96,
                            "column": 34
                          },
                          "end": {
                            "row": 96,
                            "column": 35
                          },
                          "text": ","
                        },
                        {
                          "type": "integer",
                          "start": {
                            "row": 96,
                            "column": 36
                          },
                          "end": {
                            "row": 96,
                            "column": 37
                          },
                          "text": "0"
                        },
                        {
                          "type": ",",
                          "start": {
                            "row": 96,
                            "column": 37
                          },
                          "end": {
                            "row": 96,
                            "column": 38
                          },
                          "text": ","
                        },
                        {
                          "type": "dictionary_splat",
                          "start": {
                            "row": 96,
                            "column": 39
                          },
                          "end": {
                            "row": 96,
                            "column": 47
                          },
                          "text": "**kwargs",
                          "children": [
                            {
                              "type": "**",
                              "start": {
                                "row": 96,
                                "column": 39
                              },
                              "end": {
                                "row": 96,
                                "column": 41
                              },
                              "text": "**"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 96,
                                "column": 41
                              },
                              "end": {
                                "row": 96,
                                "column": 47
                              },
                              "text": "kwargs"
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 96,
                            "column": 47
                          },
                          "end": {
                            "row": 96,
                            "column": 48
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}