{
  "type": "module",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 54,
    "column": 93
  },
  "text": "def set_gradient_compression(self, compression_params):\n        \"\"\" Specifies type of low-bit quantization for gradient compression \\\n         and additional arguments depending on the type of compression being used.\n\n        2bit Gradient Compression takes a positive float `threshold`.\n        The technique works by thresholding values such that positive values in the\n        gradient above threshold will be set to threshold. Negative values whose absolute\n        values are higher than threshold, will be set to the negative of threshold.\n        Values whose absolute values are less than threshold will be set to 0.\n        By doing so, each value in the gradient is in one of three states. 2bits are\n        used to represent these states, and every 16 float values in the original\n        gradient can be represented using one float. This compressed representation\n        can reduce communication costs. The difference between these thresholded values and\n        original values is stored at the sender's end as residual and added to the\n        gradient in the next iteration.\n\n        When kvstore is 'local', gradient compression is used to reduce communication\n        between multiple devices (gpus). Gradient is quantized on each GPU which\n        computed the gradients, then sent to the GPU which merges the gradients. This\n        receiving GPU dequantizes the gradients and merges them. Note that this\n        increases memory usage on each GPU because of the residual array stored.\n\n        When kvstore is 'dist', gradient compression is used to reduce communication\n        from worker to sender. Gradient is quantized on each worker which\n        computed the gradients, then sent to the server which dequantizes\n        this data and merges the gradients from each worker. Note that this\n        increases CPU memory usage on each worker because of the residual array stored.\n        Only worker to server communication is compressed in this setting.\n        If each machine has multiple GPUs, currently this GPU to GPU or GPU to CPU communication\n        is not compressed. Server to worker communication (in the case of pull)\n        is also not compressed.\n\n        To use 2bit compression, we need to specify `type` as `2bit`.\n        Only specifying `type` would use default value for the threshold.\n        To completely specify the arguments for 2bit compression, we would need to pass\n        a dictionary which includes `threshold` like:\n        {'type': '2bit', 'threshold': 0.5}\n\n        Parameters\n        ----------\n        compression_params : dict\n            A dictionary specifying the type and parameters for gradient compression.\n            The key `type` in this dictionary is a\n            required string argument and specifies the type of gradient compression.\n            Currently `type` can be only `2bit`\n            Other keys in this dictionary are optional and specific to the type\n            of gradient compression.\n        \"\"\"\n        if ('device' in self.type) or ('dist' in self.type): # pylint: disable=unsupported-membership-test\n            ckeys, cvals = _ctype_dict(compression_params)\n            check_call(_LIB.MXKVStoreSetGradientCompression(self.handle,\n                                                            mx_uint(len(compression_params)),\n                                                            ckeys, cvals))\n        else:\n            raise Exception('Gradient compression is not supported for this type of kvstore')",
  "children": [
    {
      "type": "function_definition",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 54,
        "column": 93
      },
      "text": "def set_gradient_compression(self, compression_params):\n        \"\"\" Specifies type of low-bit quantization for gradient compression \\\n         and additional arguments depending on the type of compression being used.\n\n        2bit Gradient Compression takes a positive float `threshold`.\n        The technique works by thresholding values such that positive values in the\n        gradient above threshold will be set to threshold. Negative values whose absolute\n        values are higher than threshold, will be set to the negative of threshold.\n        Values whose absolute values are less than threshold will be set to 0.\n        By doing so, each value in the gradient is in one of three states. 2bits are\n        used to represent these states, and every 16 float values in the original\n        gradient can be represented using one float. This compressed representation\n        can reduce communication costs. The difference between these thresholded values and\n        original values is stored at the sender's end as residual and added to the\n        gradient in the next iteration.\n\n        When kvstore is 'local', gradient compression is used to reduce communication\n        between multiple devices (gpus). Gradient is quantized on each GPU which\n        computed the gradients, then sent to the GPU which merges the gradients. This\n        receiving GPU dequantizes the gradients and merges them. Note that this\n        increases memory usage on each GPU because of the residual array stored.\n\n        When kvstore is 'dist', gradient compression is used to reduce communication\n        from worker to sender. Gradient is quantized on each worker which\n        computed the gradients, then sent to the server which dequantizes\n        this data and merges the gradients from each worker. Note that this\n        increases CPU memory usage on each worker because of the residual array stored.\n        Only worker to server communication is compressed in this setting.\n        If each machine has multiple GPUs, currently this GPU to GPU or GPU to CPU communication\n        is not compressed. Server to worker communication (in the case of pull)\n        is also not compressed.\n\n        To use 2bit compression, we need to specify `type` as `2bit`.\n        Only specifying `type` would use default value for the threshold.\n        To completely specify the arguments for 2bit compression, we would need to pass\n        a dictionary which includes `threshold` like:\n        {'type': '2bit', 'threshold': 0.5}\n\n        Parameters\n        ----------\n        compression_params : dict\n            A dictionary specifying the type and parameters for gradient compression.\n            The key `type` in this dictionary is a\n            required string argument and specifies the type of gradient compression.\n            Currently `type` can be only `2bit`\n            Other keys in this dictionary are optional and specific to the type\n            of gradient compression.\n        \"\"\"\n        if ('device' in self.type) or ('dist' in self.type): # pylint: disable=unsupported-membership-test\n            ckeys, cvals = _ctype_dict(compression_params)\n            check_call(_LIB.MXKVStoreSetGradientCompression(self.handle,\n                                                            mx_uint(len(compression_params)),\n                                                            ckeys, cvals))\n        else:\n            raise Exception('Gradient compression is not supported for this type of kvstore')",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 28
          },
          "text": "set_gradient_compression"
        },
        {
          "type": "parameters",
          "start": {
            "row": 0,
            "column": 28
          },
          "end": {
            "row": 0,
            "column": 54
          },
          "text": "(self, compression_params)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 28
              },
              "end": {
                "row": 0,
                "column": 29
              },
              "text": "("
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 29
              },
              "end": {
                "row": 0,
                "column": 33
              },
              "text": "self"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 33
              },
              "end": {
                "row": 0,
                "column": 34
              },
              "text": ","
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 35
              },
              "end": {
                "row": 0,
                "column": 53
              },
              "text": "compression_params"
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 53
              },
              "end": {
                "row": 0,
                "column": 54
              },
              "text": ")"
            }
          ]
        },
        {
          "type": ":",
          "start": {
            "row": 0,
            "column": 54
          },
          "end": {
            "row": 0,
            "column": 55
          },
          "text": ":"
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 8
          },
          "end": {
            "row": 54,
            "column": 93
          },
          "text": "\"\"\" Specifies type of low-bit quantization for gradient compression \\\n         and additional arguments depending on the type of compression being used.\n\n        2bit Gradient Compression takes a positive float `threshold`.\n        The technique works by thresholding values such that positive values in the\n        gradient above threshold will be set to threshold. Negative values whose absolute\n        values are higher than threshold, will be set to the negative of threshold.\n        Values whose absolute values are less than threshold will be set to 0.\n        By doing so, each value in the gradient is in one of three states. 2bits are\n        used to represent these states, and every 16 float values in the original\n        gradient can be represented using one float. This compressed representation\n        can reduce communication costs. The difference between these thresholded values and\n        original values is stored at the sender's end as residual and added to the\n        gradient in the next iteration.\n\n        When kvstore is 'local', gradient compression is used to reduce communication\n        between multiple devices (gpus). Gradient is quantized on each GPU which\n        computed the gradients, then sent to the GPU which merges the gradients. This\n        receiving GPU dequantizes the gradients and merges them. Note that this\n        increases memory usage on each GPU because of the residual array stored.\n\n        When kvstore is 'dist', gradient compression is used to reduce communication\n        from worker to sender. Gradient is quantized on each worker which\n        computed the gradients, then sent to the server which dequantizes\n        this data and merges the gradients from each worker. Note that this\n        increases CPU memory usage on each worker because of the residual array stored.\n        Only worker to server communication is compressed in this setting.\n        If each machine has multiple GPUs, currently this GPU to GPU or GPU to CPU communication\n        is not compressed. Server to worker communication (in the case of pull)\n        is also not compressed.\n\n        To use 2bit compression, we need to specify `type` as `2bit`.\n        Only specifying `type` would use default value for the threshold.\n        To completely specify the arguments for 2bit compression, we would need to pass\n        a dictionary which includes `threshold` like:\n        {'type': '2bit', 'threshold': 0.5}\n\n        Parameters\n        ----------\n        compression_params : dict\n            A dictionary specifying the type and parameters for gradient compression.\n            The key `type` in this dictionary is a\n            required string argument and specifies the type of gradient compression.\n            Currently `type` can be only `2bit`\n            Other keys in this dictionary are optional and specific to the type\n            of gradient compression.\n        \"\"\"\n        if ('device' in self.type) or ('dist' in self.type): # pylint: disable=unsupported-membership-test\n            ckeys, cvals = _ctype_dict(compression_params)\n            check_call(_LIB.MXKVStoreSetGradientCompression(self.handle,\n                                                            mx_uint(len(compression_params)),\n                                                            ckeys, cvals))\n        else:\n            raise Exception('Gradient compression is not supported for this type of kvstore')",
          "children": [
            {
              "type": "expression_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 47,
                "column": 11
              },
              "text": "\"\"\" Specifies type of low-bit quantization for gradient compression \\\n         and additional arguments depending on the type of compression being used.\n\n        2bit Gradient Compression takes a positive float `threshold`.\n        The technique works by thresholding values such that positive values in the\n        gradient above threshold will be set to threshold. Negative values whose absolute\n        values are higher than threshold, will be set to the negative of threshold.\n        Values whose absolute values are less than threshold will be set to 0.\n        By doing so, each value in the gradient is in one of three states. 2bits are\n        used to represent these states, and every 16 float values in the original\n        gradient can be represented using one float. This compressed representation\n        can reduce communication costs. The difference between these thresholded values and\n        original values is stored at the sender's end as residual and added to the\n        gradient in the next iteration.\n\n        When kvstore is 'local', gradient compression is used to reduce communication\n        between multiple devices (gpus). Gradient is quantized on each GPU which\n        computed the gradients, then sent to the GPU which merges the gradients. This\n        receiving GPU dequantizes the gradients and merges them. Note that this\n        increases memory usage on each GPU because of the residual array stored.\n\n        When kvstore is 'dist', gradient compression is used to reduce communication\n        from worker to sender. Gradient is quantized on each worker which\n        computed the gradients, then sent to the server which dequantizes\n        this data and merges the gradients from each worker. Note that this\n        increases CPU memory usage on each worker because of the residual array stored.\n        Only worker to server communication is compressed in this setting.\n        If each machine has multiple GPUs, currently this GPU to GPU or GPU to CPU communication\n        is not compressed. Server to worker communication (in the case of pull)\n        is also not compressed.\n\n        To use 2bit compression, we need to specify `type` as `2bit`.\n        Only specifying `type` would use default value for the threshold.\n        To completely specify the arguments for 2bit compression, we would need to pass\n        a dictionary which includes `threshold` like:\n        {'type': '2bit', 'threshold': 0.5}\n\n        Parameters\n        ----------\n        compression_params : dict\n            A dictionary specifying the type and parameters for gradient compression.\n            The key `type` in this dictionary is a\n            required string argument and specifies the type of gradient compression.\n            Currently `type` can be only `2bit`\n            Other keys in this dictionary are optional and specific to the type\n            of gradient compression.\n        \"\"\"",
              "children": [
                {
                  "type": "string",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 47,
                    "column": 11
                  },
                  "text": "\"\"\" Specifies type of low-bit quantization for gradient compression \\\n         and additional arguments depending on the type of compression being used.\n\n        2bit Gradient Compression takes a positive float `threshold`.\n        The technique works by thresholding values such that positive values in the\n        gradient above threshold will be set to threshold. Negative values whose absolute\n        values are higher than threshold, will be set to the negative of threshold.\n        Values whose absolute values are less than threshold will be set to 0.\n        By doing so, each value in the gradient is in one of three states. 2bits are\n        used to represent these states, and every 16 float values in the original\n        gradient can be represented using one float. This compressed representation\n        can reduce communication costs. The difference between these thresholded values and\n        original values is stored at the sender's end as residual and added to the\n        gradient in the next iteration.\n\n        When kvstore is 'local', gradient compression is used to reduce communication\n        between multiple devices (gpus). Gradient is quantized on each GPU which\n        computed the gradients, then sent to the GPU which merges the gradients. This\n        receiving GPU dequantizes the gradients and merges them. Note that this\n        increases memory usage on each GPU because of the residual array stored.\n\n        When kvstore is 'dist', gradient compression is used to reduce communication\n        from worker to sender. Gradient is quantized on each worker which\n        computed the gradients, then sent to the server which dequantizes\n        this data and merges the gradients from each worker. Note that this\n        increases CPU memory usage on each worker because of the residual array stored.\n        Only worker to server communication is compressed in this setting.\n        If each machine has multiple GPUs, currently this GPU to GPU or GPU to CPU communication\n        is not compressed. Server to worker communication (in the case of pull)\n        is also not compressed.\n\n        To use 2bit compression, we need to specify `type` as `2bit`.\n        Only specifying `type` would use default value for the threshold.\n        To completely specify the arguments for 2bit compression, we would need to pass\n        a dictionary which includes `threshold` like:\n        {'type': '2bit', 'threshold': 0.5}\n\n        Parameters\n        ----------\n        compression_params : dict\n            A dictionary specifying the type and parameters for gradient compression.\n            The key `type` in this dictionary is a\n            required string argument and specifies the type of gradient compression.\n            Currently `type` can be only `2bit`\n            Other keys in this dictionary are optional and specific to the type\n            of gradient compression.\n        \"\"\"",
                  "children": [
                    {
                      "type": "string_start",
                      "start": {
                        "row": 1,
                        "column": 8
                      },
                      "end": {
                        "row": 1,
                        "column": 11
                      },
                      "text": "\"\"\""
                    },
                    {
                      "type": "string_content",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 47,
                        "column": 8
                      },
                      "text": " Specifies type of low-bit quantization for gradient compression \\\n         and additional arguments depending on the type of compression being used.\n\n        2bit Gradient Compression takes a positive float `threshold`.\n        The technique works by thresholding values such that positive values in the\n        gradient above threshold will be set to threshold. Negative values whose absolute\n        values are higher than threshold, will be set to the negative of threshold.\n        Values whose absolute values are less than threshold will be set to 0.\n        By doing so, each value in the gradient is in one of three states. 2bits are\n        used to represent these states, and every 16 float values in the original\n        gradient can be represented using one float. This compressed representation\n        can reduce communication costs. The difference between these thresholded values and\n        original values is stored at the sender's end as residual and added to the\n        gradient in the next iteration.\n\n        When kvstore is 'local', gradient compression is used to reduce communication\n        between multiple devices (gpus). Gradient is quantized on each GPU which\n        computed the gradients, then sent to the GPU which merges the gradients. This\n        receiving GPU dequantizes the gradients and merges them. Note that this\n        increases memory usage on each GPU because of the residual array stored.\n\n        When kvstore is 'dist', gradient compression is used to reduce communication\n        from worker to sender. Gradient is quantized on each worker which\n        computed the gradients, then sent to the server which dequantizes\n        this data and merges the gradients from each worker. Note that this\n        increases CPU memory usage on each worker because of the residual array stored.\n        Only worker to server communication is compressed in this setting.\n        If each machine has multiple GPUs, currently this GPU to GPU or GPU to CPU communication\n        is not compressed. Server to worker communication (in the case of pull)\n        is also not compressed.\n\n        To use 2bit compression, we need to specify `type` as `2bit`.\n        Only specifying `type` would use default value for the threshold.\n        To completely specify the arguments for 2bit compression, we would need to pass\n        a dictionary which includes `threshold` like:\n        {'type': '2bit', 'threshold': 0.5}\n\n        Parameters\n        ----------\n        compression_params : dict\n            A dictionary specifying the type and parameters for gradient compression.\n            The key `type` in this dictionary is a\n            required string argument and specifies the type of gradient compression.\n            Currently `type` can be only `2bit`\n            Other keys in this dictionary are optional and specific to the type\n            of gradient compression.\n        ",
                      "children": [
                        {
                          "type": "escape_sequence",
                          "start": {
                            "row": 1,
                            "column": 76
                          },
                          "end": {
                            "row": 2,
                            "column": 0
                          },
                          "text": "\\\n"
                        }
                      ]
                    },
                    {
                      "type": "string_end",
                      "start": {
                        "row": 47,
                        "column": 8
                      },
                      "end": {
                        "row": 47,
                        "column": 11
                      },
                      "text": "\"\"\""
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 48,
                "column": 8
              },
              "end": {
                "row": 54,
                "column": 93
              },
              "text": "if ('device' in self.type) or ('dist' in self.type): # pylint: disable=unsupported-membership-test\n            ckeys, cvals = _ctype_dict(compression_params)\n            check_call(_LIB.MXKVStoreSetGradientCompression(self.handle,\n                                                            mx_uint(len(compression_params)),\n                                                            ckeys, cvals))\n        else:\n            raise Exception('Gradient compression is not supported for this type of kvstore')",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 48,
                    "column": 8
                  },
                  "end": {
                    "row": 48,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "boolean_operator",
                  "start": {
                    "row": 48,
                    "column": 11
                  },
                  "end": {
                    "row": 48,
                    "column": 59
                  },
                  "text": "('device' in self.type) or ('dist' in self.type)",
                  "children": [
                    {
                      "type": "parenthesized_expression",
                      "start": {
                        "row": 48,
                        "column": 11
                      },
                      "end": {
                        "row": 48,
                        "column": 34
                      },
                      "text": "('device' in self.type)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 48,
                            "column": 11
                          },
                          "end": {
                            "row": 48,
                            "column": 12
                          },
                          "text": "("
                        },
                        {
                          "type": "comparison_operator",
                          "start": {
                            "row": 48,
                            "column": 12
                          },
                          "end": {
                            "row": 48,
                            "column": 33
                          },
                          "text": "'device' in self.type",
                          "children": [
                            {
                              "type": "string",
                              "start": {
                                "row": 48,
                                "column": 12
                              },
                              "end": {
                                "row": 48,
                                "column": 20
                              },
                              "text": "'device'",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 48,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 13
                                  },
                                  "text": "'"
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 48,
                                    "column": 13
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 19
                                  },
                                  "text": "device"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 48,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 20
                                  },
                                  "text": "'"
                                }
                              ]
                            },
                            {
                              "type": "in",
                              "start": {
                                "row": 48,
                                "column": 21
                              },
                              "end": {
                                "row": 48,
                                "column": 23
                              },
                              "text": "in"
                            },
                            {
                              "type": "attribute",
                              "start": {
                                "row": 48,
                                "column": 24
                              },
                              "end": {
                                "row": 48,
                                "column": 33
                              },
                              "text": "self.type",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 48,
                                    "column": 24
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 28
                                  },
                                  "text": "self"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 48,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 29
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 48,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 33
                                  },
                                  "text": "type"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 48,
                            "column": 33
                          },
                          "end": {
                            "row": 48,
                            "column": 34
                          },
                          "text": ")"
                        }
                      ]
                    },
                    {
                      "type": "or",
                      "start": {
                        "row": 48,
                        "column": 35
                      },
                      "end": {
                        "row": 48,
                        "column": 37
                      },
                      "text": "or"
                    },
                    {
                      "type": "parenthesized_expression",
                      "start": {
                        "row": 48,
                        "column": 38
                      },
                      "end": {
                        "row": 48,
                        "column": 59
                      },
                      "text": "('dist' in self.type)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 48,
                            "column": 38
                          },
                          "end": {
                            "row": 48,
                            "column": 39
                          },
                          "text": "("
                        },
                        {
                          "type": "comparison_operator",
                          "start": {
                            "row": 48,
                            "column": 39
                          },
                          "end": {
                            "row": 48,
                            "column": 58
                          },
                          "text": "'dist' in self.type",
                          "children": [
                            {
                              "type": "string",
                              "start": {
                                "row": 48,
                                "column": 39
                              },
                              "end": {
                                "row": 48,
                                "column": 45
                              },
                              "text": "'dist'",
                              "children": [
                                {
                                  "type": "string_start",
                                  "start": {
                                    "row": 48,
                                    "column": 39
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 40
                                  },
                                  "text": "'"
                                },
                                {
                                  "type": "string_content",
                                  "start": {
                                    "row": 48,
                                    "column": 40
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 44
                                  },
                                  "text": "dist"
                                },
                                {
                                  "type": "string_end",
                                  "start": {
                                    "row": 48,
                                    "column": 44
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 45
                                  },
                                  "text": "'"
                                }
                              ]
                            },
                            {
                              "type": "in",
                              "start": {
                                "row": 48,
                                "column": 46
                              },
                              "end": {
                                "row": 48,
                                "column": 48
                              },
                              "text": "in"
                            },
                            {
                              "type": "attribute",
                              "start": {
                                "row": 48,
                                "column": 49
                              },
                              "end": {
                                "row": 48,
                                "column": 58
                              },
                              "text": "self.type",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 48,
                                    "column": 49
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 53
                                  },
                                  "text": "self"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 48,
                                    "column": 53
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 54
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 48,
                                    "column": 54
                                  },
                                  "end": {
                                    "row": 48,
                                    "column": 58
                                  },
                                  "text": "type"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 48,
                            "column": 58
                          },
                          "end": {
                            "row": 48,
                            "column": 59
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ":",
                  "start": {
                    "row": 48,
                    "column": 59
                  },
                  "end": {
                    "row": 48,
                    "column": 60
                  },
                  "text": ":"
                },
                {
                  "type": "comment",
                  "start": {
                    "row": 48,
                    "column": 61
                  },
                  "end": {
                    "row": 48,
                    "column": 106
                  },
                  "text": "# pylint: disable=unsupported-membership-test"
                },
                {
                  "type": "block",
                  "start": {
                    "row": 49,
                    "column": 12
                  },
                  "end": {
                    "row": 52,
                    "column": 74
                  },
                  "text": "ckeys, cvals = _ctype_dict(compression_params)\n            check_call(_LIB.MXKVStoreSetGradientCompression(self.handle,\n                                                            mx_uint(len(compression_params)),\n                                                            ckeys, cvals))",
                  "children": [
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 49,
                        "column": 12
                      },
                      "end": {
                        "row": 49,
                        "column": 58
                      },
                      "text": "ckeys, cvals = _ctype_dict(compression_params)",
                      "children": [
                        {
                          "type": "assignment",
                          "start": {
                            "row": 49,
                            "column": 12
                          },
                          "end": {
                            "row": 49,
                            "column": 58
                          },
                          "text": "ckeys, cvals = _ctype_dict(compression_params)",
                          "children": [
                            {
                              "type": "pattern_list",
                              "start": {
                                "row": 49,
                                "column": 12
                              },
                              "end": {
                                "row": 49,
                                "column": 24
                              },
                              "text": "ckeys, cvals",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 49,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 49,
                                    "column": 17
                                  },
                                  "text": "ckeys"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 49,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 49,
                                    "column": 18
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 49,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 49,
                                    "column": 24
                                  },
                                  "text": "cvals"
                                }
                              ]
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 49,
                                "column": 25
                              },
                              "end": {
                                "row": 49,
                                "column": 26
                              },
                              "text": "="
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 49,
                                "column": 27
                              },
                              "end": {
                                "row": 49,
                                "column": 58
                              },
                              "text": "_ctype_dict(compression_params)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 49,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 49,
                                    "column": 38
                                  },
                                  "text": "_ctype_dict"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 49,
                                    "column": 38
                                  },
                                  "end": {
                                    "row": 49,
                                    "column": 58
                                  },
                                  "text": "(compression_params)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 49,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 49,
                                        "column": 39
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 49,
                                        "column": 39
                                      },
                                      "end": {
                                        "row": 49,
                                        "column": 57
                                      },
                                      "text": "compression_params"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 49,
                                        "column": 57
                                      },
                                      "end": {
                                        "row": 49,
                                        "column": 58
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 50,
                        "column": 12
                      },
                      "end": {
                        "row": 52,
                        "column": 74
                      },
                      "text": "check_call(_LIB.MXKVStoreSetGradientCompression(self.handle,\n                                                            mx_uint(len(compression_params)),\n                                                            ckeys, cvals))",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 50,
                            "column": 12
                          },
                          "end": {
                            "row": 52,
                            "column": 74
                          },
                          "text": "check_call(_LIB.MXKVStoreSetGradientCompression(self.handle,\n                                                            mx_uint(len(compression_params)),\n                                                            ckeys, cvals))",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 50,
                                "column": 12
                              },
                              "end": {
                                "row": 50,
                                "column": 22
                              },
                              "text": "check_call"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 50,
                                "column": 22
                              },
                              "end": {
                                "row": 52,
                                "column": 74
                              },
                              "text": "(_LIB.MXKVStoreSetGradientCompression(self.handle,\n                                                            mx_uint(len(compression_params)),\n                                                            ckeys, cvals))",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 50,
                                    "column": 22
                                  },
                                  "end": {
                                    "row": 50,
                                    "column": 23
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "call",
                                  "start": {
                                    "row": 50,
                                    "column": 23
                                  },
                                  "end": {
                                    "row": 52,
                                    "column": 73
                                  },
                                  "text": "_LIB.MXKVStoreSetGradientCompression(self.handle,\n                                                            mx_uint(len(compression_params)),\n                                                            ckeys, cvals)",
                                  "children": [
                                    {
                                      "type": "attribute",
                                      "start": {
                                        "row": 50,
                                        "column": 23
                                      },
                                      "end": {
                                        "row": 50,
                                        "column": 59
                                      },
                                      "text": "_LIB.MXKVStoreSetGradientCompression",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 50,
                                            "column": 23
                                          },
                                          "end": {
                                            "row": 50,
                                            "column": 27
                                          },
                                          "text": "_LIB"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 50,
                                            "column": 27
                                          },
                                          "end": {
                                            "row": 50,
                                            "column": 28
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 50,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 50,
                                            "column": 59
                                          },
                                          "text": "MXKVStoreSetGradientCompression"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "argument_list",
                                      "start": {
                                        "row": 50,
                                        "column": 59
                                      },
                                      "end": {
                                        "row": 52,
                                        "column": 73
                                      },
                                      "text": "(self.handle,\n                                                            mx_uint(len(compression_params)),\n                                                            ckeys, cvals)",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start": {
                                            "row": 50,
                                            "column": 59
                                          },
                                          "end": {
                                            "row": 50,
                                            "column": 60
                                          },
                                          "text": "("
                                        },
                                        {
                                          "type": "attribute",
                                          "start": {
                                            "row": 50,
                                            "column": 60
                                          },
                                          "end": {
                                            "row": 50,
                                            "column": 71
                                          },
                                          "text": "self.handle",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 50,
                                                "column": 60
                                              },
                                              "end": {
                                                "row": 50,
                                                "column": 64
                                              },
                                              "text": "self"
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 50,
                                                "column": 64
                                              },
                                              "end": {
                                                "row": 50,
                                                "column": 65
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 50,
                                                "column": 65
                                              },
                                              "end": {
                                                "row": 50,
                                                "column": 71
                                              },
                                              "text": "handle"
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 50,
                                            "column": 71
                                          },
                                          "end": {
                                            "row": 50,
                                            "column": 72
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": "call",
                                          "start": {
                                            "row": 51,
                                            "column": 60
                                          },
                                          "end": {
                                            "row": 51,
                                            "column": 92
                                          },
                                          "text": "mx_uint(len(compression_params))",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 51,
                                                "column": 60
                                              },
                                              "end": {
                                                "row": 51,
                                                "column": 67
                                              },
                                              "text": "mx_uint"
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 51,
                                                "column": 67
                                              },
                                              "end": {
                                                "row": 51,
                                                "column": 92
                                              },
                                              "text": "(len(compression_params))",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 51,
                                                    "column": 67
                                                  },
                                                  "end": {
                                                    "row": 51,
                                                    "column": 68
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": "call",
                                                  "start": {
                                                    "row": 51,
                                                    "column": 68
                                                  },
                                                  "end": {
                                                    "row": 51,
                                                    "column": 91
                                                  },
                                                  "text": "len(compression_params)",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 51,
                                                        "column": 68
                                                      },
                                                      "end": {
                                                        "row": 51,
                                                        "column": 71
                                                      },
                                                      "text": "len"
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "start": {
                                                        "row": 51,
                                                        "column": 71
                                                      },
                                                      "end": {
                                                        "row": 51,
                                                        "column": 91
                                                      },
                                                      "text": "(compression_params)",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "start": {
                                                            "row": 51,
                                                            "column": 71
                                                          },
                                                          "end": {
                                                            "row": 51,
                                                            "column": 72
                                                          },
                                                          "text": "("
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 51,
                                                            "column": 72
                                                          },
                                                          "end": {
                                                            "row": 51,
                                                            "column": 90
                                                          },
                                                          "text": "compression_params"
                                                        },
                                                        {
                                                          "type": ")",
                                                          "start": {
                                                            "row": 51,
                                                            "column": 90
                                                          },
                                                          "end": {
                                                            "row": 51,
                                                            "column": 91
                                                          },
                                                          "text": ")"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 51,
                                                    "column": 91
                                                  },
                                                  "end": {
                                                    "row": 51,
                                                    "column": 92
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 51,
                                            "column": 92
                                          },
                                          "end": {
                                            "row": 51,
                                            "column": 93
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 52,
                                            "column": 60
                                          },
                                          "end": {
                                            "row": 52,
                                            "column": 65
                                          },
                                          "text": "ckeys"
                                        },
                                        {
                                          "type": ",",
                                          "start": {
                                            "row": 52,
                                            "column": 65
                                          },
                                          "end": {
                                            "row": 52,
                                            "column": 66
                                          },
                                          "text": ","
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 52,
                                            "column": 67
                                          },
                                          "end": {
                                            "row": 52,
                                            "column": 72
                                          },
                                          "text": "cvals"
                                        },
                                        {
                                          "type": ")",
                                          "start": {
                                            "row": 52,
                                            "column": 72
                                          },
                                          "end": {
                                            "row": 52,
                                            "column": 73
                                          },
                                          "text": ")"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 52,
                                    "column": 73
                                  },
                                  "end": {
                                    "row": 52,
                                    "column": 74
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start": {
                    "row": 53,
                    "column": 8
                  },
                  "end": {
                    "row": 54,
                    "column": 93
                  },
                  "text": "else:\n            raise Exception('Gradient compression is not supported for this type of kvstore')",
                  "children": [
                    {
                      "type": "else",
                      "start": {
                        "row": 53,
                        "column": 8
                      },
                      "end": {
                        "row": 53,
                        "column": 12
                      },
                      "text": "else"
                    },
                    {
                      "type": ":",
                      "start": {
                        "row": 53,
                        "column": 12
                      },
                      "end": {
                        "row": 53,
                        "column": 13
                      },
                      "text": ":"
                    },
                    {
                      "type": "block",
                      "start": {
                        "row": 54,
                        "column": 12
                      },
                      "end": {
                        "row": 54,
                        "column": 93
                      },
                      "text": "raise Exception('Gradient compression is not supported for this type of kvstore')",
                      "children": [
                        {
                          "type": "raise_statement",
                          "start": {
                            "row": 54,
                            "column": 12
                          },
                          "end": {
                            "row": 54,
                            "column": 93
                          },
                          "text": "raise Exception('Gradient compression is not supported for this type of kvstore')",
                          "children": [
                            {
                              "type": "raise",
                              "start": {
                                "row": 54,
                                "column": 12
                              },
                              "end": {
                                "row": 54,
                                "column": 17
                              },
                              "text": "raise"
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 54,
                                "column": 18
                              },
                              "end": {
                                "row": 54,
                                "column": 93
                              },
                              "text": "Exception('Gradient compression is not supported for this type of kvstore')",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 54,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 54,
                                    "column": 27
                                  },
                                  "text": "Exception"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 54,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 54,
                                    "column": 93
                                  },
                                  "text": "('Gradient compression is not supported for this type of kvstore')",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 54,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 54,
                                        "column": 28
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 54,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 54,
                                        "column": 92
                                      },
                                      "text": "'Gradient compression is not supported for this type of kvstore'",
                                      "children": [
                                        {
                                          "type": "string_start",
                                          "start": {
                                            "row": 54,
                                            "column": 28
                                          },
                                          "end": {
                                            "row": 54,
                                            "column": 29
                                          },
                                          "text": "'"
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 54,
                                            "column": 29
                                          },
                                          "end": {
                                            "row": 54,
                                            "column": 91
                                          },
                                          "text": "Gradient compression is not supported for this type of kvstore"
                                        },
                                        {
                                          "type": "string_end",
                                          "start": {
                                            "row": 54,
                                            "column": 91
                                          },
                                          "end": {
                                            "row": 54,
                                            "column": 92
                                          },
                                          "text": "'"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 54,
                                        "column": 92
                                      },
                                      "end": {
                                        "row": 54,
                                        "column": 93
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}