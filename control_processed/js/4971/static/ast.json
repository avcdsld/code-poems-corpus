{
  "type": "program",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 27,
    "column": 1
  },
  "text": "function isEquivalentType(typeA: GraphQLType, typeB: GraphQLType): boolean {\n  // Easy short-circuit: equal types are equal.\n  if (typeA === typeB) {\n    return true;\n  }\n\n  // If either type is non-null, the other must also be non-null.\n  if (typeA instanceof GraphQLNonNull && typeB instanceof GraphQLNonNull) {\n    return isEquivalentType(typeA.ofType, typeB.ofType);\n  }\n\n  // If either type is a list, the other must also be a list.\n  if (typeA instanceof GraphQLList && typeB instanceof GraphQLList) {\n    return isEquivalentType(typeA.ofType, typeB.ofType);\n  }\n\n  // Make sure the two types are of the same class\n  if (typeA.constructor.name === typeB.constructor.name) {\n    const rawA = getRawType(typeA);\n    const rawB = getRawType(typeB);\n\n    // And they must have the exact same name\n    return rawA.name === rawB.name;\n  }\n\n  // Otherwise the types are not equal.\n  return false;\n}",
  "children": [
    {
      "type": "function_declaration",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 27,
        "column": 1
      },
      "text": "function isEquivalentType(typeA: GraphQLType, typeB: GraphQLType): boolean {\n  // Easy short-circuit: equal types are equal.\n  if (typeA === typeB) {\n    return true;\n  }\n\n  // If either type is non-null, the other must also be non-null.\n  if (typeA instanceof GraphQLNonNull && typeB instanceof GraphQLNonNull) {\n    return isEquivalentType(typeA.ofType, typeB.ofType);\n  }\n\n  // If either type is a list, the other must also be a list.\n  if (typeA instanceof GraphQLList && typeB instanceof GraphQLList) {\n    return isEquivalentType(typeA.ofType, typeB.ofType);\n  }\n\n  // Make sure the two types are of the same class\n  if (typeA.constructor.name === typeB.constructor.name) {\n    const rawA = getRawType(typeA);\n    const rawB = getRawType(typeB);\n\n    // And they must have the exact same name\n    return rawA.name === rawB.name;\n  }\n\n  // Otherwise the types are not equal.\n  return false;\n}",
      "children": [
        {
          "type": "function",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 8
          },
          "text": "function"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 9
          },
          "end": {
            "row": 0,
            "column": 25
          },
          "text": "isEquivalentType"
        },
        {
          "type": "formal_parameters",
          "start": {
            "row": 0,
            "column": 25
          },
          "end": {
            "row": 0,
            "column": 65
          },
          "text": "(typeA: GraphQLType, typeB: GraphQLType)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 25
              },
              "end": {
                "row": 0,
                "column": 26
              },
              "text": "("
            },
            {
              "type": "ERROR",
              "start": {
                "row": 0,
                "column": 26
              },
              "end": {
                "row": 0,
                "column": 32
              },
              "text": "typeA:",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 26
                  },
                  "end": {
                    "row": 0,
                    "column": 31
                  },
                  "text": "typeA"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 0,
                    "column": 31
                  },
                  "end": {
                    "row": 0,
                    "column": 32
                  },
                  "text": ":"
                }
              ]
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 33
              },
              "end": {
                "row": 0,
                "column": 44
              },
              "text": "GraphQLType"
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 44
              },
              "end": {
                "row": 0,
                "column": 45
              },
              "text": ","
            },
            {
              "type": "ERROR",
              "start": {
                "row": 0,
                "column": 46
              },
              "end": {
                "row": 0,
                "column": 52
              },
              "text": "typeB:",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 46
                  },
                  "end": {
                    "row": 0,
                    "column": 51
                  },
                  "text": "typeB"
                },
                {
                  "type": ":",
                  "start": {
                    "row": 0,
                    "column": 51
                  },
                  "end": {
                    "row": 0,
                    "column": 52
                  },
                  "text": ":"
                }
              ]
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 53
              },
              "end": {
                "row": 0,
                "column": 64
              },
              "text": "GraphQLType"
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 64
              },
              "end": {
                "row": 0,
                "column": 65
              },
              "text": ")"
            }
          ]
        },
        {
          "type": "ERROR",
          "start": {
            "row": 0,
            "column": 65
          },
          "end": {
            "row": 0,
            "column": 74
          },
          "text": ": boolean",
          "children": [
            {
              "type": ":",
              "start": {
                "row": 0,
                "column": 65
              },
              "end": {
                "row": 0,
                "column": 66
              },
              "text": ":"
            },
            {
              "type": "identifier",
              "start": {
                "row": 0,
                "column": 67
              },
              "end": {
                "row": 0,
                "column": 74
              },
              "text": "boolean"
            }
          ]
        },
        {
          "type": "statement_block",
          "start": {
            "row": 0,
            "column": 75
          },
          "end": {
            "row": 27,
            "column": 1
          },
          "text": "{\n  // Easy short-circuit: equal types are equal.\n  if (typeA === typeB) {\n    return true;\n  }\n\n  // If either type is non-null, the other must also be non-null.\n  if (typeA instanceof GraphQLNonNull && typeB instanceof GraphQLNonNull) {\n    return isEquivalentType(typeA.ofType, typeB.ofType);\n  }\n\n  // If either type is a list, the other must also be a list.\n  if (typeA instanceof GraphQLList && typeB instanceof GraphQLList) {\n    return isEquivalentType(typeA.ofType, typeB.ofType);\n  }\n\n  // Make sure the two types are of the same class\n  if (typeA.constructor.name === typeB.constructor.name) {\n    const rawA = getRawType(typeA);\n    const rawB = getRawType(typeB);\n\n    // And they must have the exact same name\n    return rawA.name === rawB.name;\n  }\n\n  // Otherwise the types are not equal.\n  return false;\n}",
          "children": [
            {
              "type": "{",
              "start": {
                "row": 0,
                "column": 75
              },
              "end": {
                "row": 0,
                "column": 76
              },
              "text": "{"
            },
            {
              "type": "comment",
              "start": {
                "row": 1,
                "column": 2
              },
              "end": {
                "row": 1,
                "column": 47
              },
              "text": "// Easy short-circuit: equal types are equal."
            },
            {
              "type": "if_statement",
              "start": {
                "row": 2,
                "column": 2
              },
              "end": {
                "row": 4,
                "column": 3
              },
              "text": "if (typeA === typeB) {\n    return true;\n  }",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 2,
                    "column": 2
                  },
                  "end": {
                    "row": 2,
                    "column": 4
                  },
                  "text": "if"
                },
                {
                  "type": "parenthesized_expression",
                  "start": {
                    "row": 2,
                    "column": 5
                  },
                  "end": {
                    "row": 2,
                    "column": 22
                  },
                  "text": "(typeA === typeB)",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 2,
                        "column": 5
                      },
                      "end": {
                        "row": 2,
                        "column": 6
                      },
                      "text": "("
                    },
                    {
                      "type": "binary_expression",
                      "start": {
                        "row": 2,
                        "column": 6
                      },
                      "end": {
                        "row": 2,
                        "column": 21
                      },
                      "text": "typeA === typeB",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 2,
                            "column": 6
                          },
                          "end": {
                            "row": 2,
                            "column": 11
                          },
                          "text": "typeA"
                        },
                        {
                          "type": "===",
                          "start": {
                            "row": 2,
                            "column": 12
                          },
                          "end": {
                            "row": 2,
                            "column": 15
                          },
                          "text": "==="
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 2,
                            "column": 16
                          },
                          "end": {
                            "row": 2,
                            "column": 21
                          },
                          "text": "typeB"
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 2,
                        "column": 21
                      },
                      "end": {
                        "row": 2,
                        "column": 22
                      },
                      "text": ")"
                    }
                  ]
                },
                {
                  "type": "statement_block",
                  "start": {
                    "row": 2,
                    "column": 23
                  },
                  "end": {
                    "row": 4,
                    "column": 3
                  },
                  "text": "{\n    return true;\n  }",
                  "children": [
                    {
                      "type": "{",
                      "start": {
                        "row": 2,
                        "column": 23
                      },
                      "end": {
                        "row": 2,
                        "column": 24
                      },
                      "text": "{"
                    },
                    {
                      "type": "return_statement",
                      "start": {
                        "row": 3,
                        "column": 4
                      },
                      "end": {
                        "row": 3,
                        "column": 16
                      },
                      "text": "return true;",
                      "children": [
                        {
                          "type": "return",
                          "start": {
                            "row": 3,
                            "column": 4
                          },
                          "end": {
                            "row": 3,
                            "column": 10
                          },
                          "text": "return"
                        },
                        {
                          "type": "true",
                          "start": {
                            "row": 3,
                            "column": 11
                          },
                          "end": {
                            "row": 3,
                            "column": 15
                          },
                          "text": "true"
                        },
                        {
                          "type": ";",
                          "start": {
                            "row": 3,
                            "column": 15
                          },
                          "end": {
                            "row": 3,
                            "column": 16
                          },
                          "text": ";"
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start": {
                        "row": 4,
                        "column": 2
                      },
                      "end": {
                        "row": 4,
                        "column": 3
                      },
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 6,
                "column": 2
              },
              "end": {
                "row": 6,
                "column": 65
              },
              "text": "// If either type is non-null, the other must also be non-null."
            },
            {
              "type": "if_statement",
              "start": {
                "row": 7,
                "column": 2
              },
              "end": {
                "row": 9,
                "column": 3
              },
              "text": "if (typeA instanceof GraphQLNonNull && typeB instanceof GraphQLNonNull) {\n    return isEquivalentType(typeA.ofType, typeB.ofType);\n  }",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 7,
                    "column": 2
                  },
                  "end": {
                    "row": 7,
                    "column": 4
                  },
                  "text": "if"
                },
                {
                  "type": "parenthesized_expression",
                  "start": {
                    "row": 7,
                    "column": 5
                  },
                  "end": {
                    "row": 7,
                    "column": 73
                  },
                  "text": "(typeA instanceof GraphQLNonNull && typeB instanceof GraphQLNonNull)",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 7,
                        "column": 5
                      },
                      "end": {
                        "row": 7,
                        "column": 6
                      },
                      "text": "("
                    },
                    {
                      "type": "binary_expression",
                      "start": {
                        "row": 7,
                        "column": 6
                      },
                      "end": {
                        "row": 7,
                        "column": 72
                      },
                      "text": "typeA instanceof GraphQLNonNull && typeB instanceof GraphQLNonNull",
                      "children": [
                        {
                          "type": "binary_expression",
                          "start": {
                            "row": 7,
                            "column": 6
                          },
                          "end": {
                            "row": 7,
                            "column": 37
                          },
                          "text": "typeA instanceof GraphQLNonNull",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 7,
                                "column": 6
                              },
                              "end": {
                                "row": 7,
                                "column": 11
                              },
                              "text": "typeA"
                            },
                            {
                              "type": "instanceof",
                              "start": {
                                "row": 7,
                                "column": 12
                              },
                              "end": {
                                "row": 7,
                                "column": 22
                              },
                              "text": "instanceof"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 7,
                                "column": 23
                              },
                              "end": {
                                "row": 7,
                                "column": 37
                              },
                              "text": "GraphQLNonNull"
                            }
                          ]
                        },
                        {
                          "type": "&&",
                          "start": {
                            "row": 7,
                            "column": 38
                          },
                          "end": {
                            "row": 7,
                            "column": 40
                          },
                          "text": "&&"
                        },
                        {
                          "type": "binary_expression",
                          "start": {
                            "row": 7,
                            "column": 41
                          },
                          "end": {
                            "row": 7,
                            "column": 72
                          },
                          "text": "typeB instanceof GraphQLNonNull",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 7,
                                "column": 41
                              },
                              "end": {
                                "row": 7,
                                "column": 46
                              },
                              "text": "typeB"
                            },
                            {
                              "type": "instanceof",
                              "start": {
                                "row": 7,
                                "column": 47
                              },
                              "end": {
                                "row": 7,
                                "column": 57
                              },
                              "text": "instanceof"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 7,
                                "column": 58
                              },
                              "end": {
                                "row": 7,
                                "column": 72
                              },
                              "text": "GraphQLNonNull"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 7,
                        "column": 72
                      },
                      "end": {
                        "row": 7,
                        "column": 73
                      },
                      "text": ")"
                    }
                  ]
                },
                {
                  "type": "statement_block",
                  "start": {
                    "row": 7,
                    "column": 74
                  },
                  "end": {
                    "row": 9,
                    "column": 3
                  },
                  "text": "{\n    return isEquivalentType(typeA.ofType, typeB.ofType);\n  }",
                  "children": [
                    {
                      "type": "{",
                      "start": {
                        "row": 7,
                        "column": 74
                      },
                      "end": {
                        "row": 7,
                        "column": 75
                      },
                      "text": "{"
                    },
                    {
                      "type": "return_statement",
                      "start": {
                        "row": 8,
                        "column": 4
                      },
                      "end": {
                        "row": 8,
                        "column": 56
                      },
                      "text": "return isEquivalentType(typeA.ofType, typeB.ofType);",
                      "children": [
                        {
                          "type": "return",
                          "start": {
                            "row": 8,
                            "column": 4
                          },
                          "end": {
                            "row": 8,
                            "column": 10
                          },
                          "text": "return"
                        },
                        {
                          "type": "call_expression",
                          "start": {
                            "row": 8,
                            "column": 11
                          },
                          "end": {
                            "row": 8,
                            "column": 55
                          },
                          "text": "isEquivalentType(typeA.ofType, typeB.ofType)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 8,
                                "column": 11
                              },
                              "end": {
                                "row": 8,
                                "column": 27
                              },
                              "text": "isEquivalentType"
                            },
                            {
                              "type": "arguments",
                              "start": {
                                "row": 8,
                                "column": 27
                              },
                              "end": {
                                "row": 8,
                                "column": 55
                              },
                              "text": "(typeA.ofType, typeB.ofType)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 8,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 8,
                                    "column": 28
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "member_expression",
                                  "start": {
                                    "row": 8,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 8,
                                    "column": 40
                                  },
                                  "text": "typeA.ofType",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 8,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 8,
                                        "column": 33
                                      },
                                      "text": "typeA"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 8,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 8,
                                        "column": 34
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "property_identifier",
                                      "start": {
                                        "row": 8,
                                        "column": 34
                                      },
                                      "end": {
                                        "row": 8,
                                        "column": 40
                                      },
                                      "text": "ofType"
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 8,
                                    "column": 40
                                  },
                                  "end": {
                                    "row": 8,
                                    "column": 41
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "member_expression",
                                  "start": {
                                    "row": 8,
                                    "column": 42
                                  },
                                  "end": {
                                    "row": 8,
                                    "column": 54
                                  },
                                  "text": "typeB.ofType",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 8,
                                        "column": 42
                                      },
                                      "end": {
                                        "row": 8,
                                        "column": 47
                                      },
                                      "text": "typeB"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 8,
                                        "column": 47
                                      },
                                      "end": {
                                        "row": 8,
                                        "column": 48
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "property_identifier",
                                      "start": {
                                        "row": 8,
                                        "column": 48
                                      },
                                      "end": {
                                        "row": 8,
                                        "column": 54
                                      },
                                      "text": "ofType"
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 8,
                                    "column": 54
                                  },
                                  "end": {
                                    "row": 8,
                                    "column": 55
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start": {
                            "row": 8,
                            "column": 55
                          },
                          "end": {
                            "row": 8,
                            "column": 56
                          },
                          "text": ";"
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start": {
                        "row": 9,
                        "column": 2
                      },
                      "end": {
                        "row": 9,
                        "column": 3
                      },
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 11,
                "column": 2
              },
              "end": {
                "row": 11,
                "column": 61
              },
              "text": "// If either type is a list, the other must also be a list."
            },
            {
              "type": "if_statement",
              "start": {
                "row": 12,
                "column": 2
              },
              "end": {
                "row": 14,
                "column": 3
              },
              "text": "if (typeA instanceof GraphQLList && typeB instanceof GraphQLList) {\n    return isEquivalentType(typeA.ofType, typeB.ofType);\n  }",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 12,
                    "column": 2
                  },
                  "end": {
                    "row": 12,
                    "column": 4
                  },
                  "text": "if"
                },
                {
                  "type": "parenthesized_expression",
                  "start": {
                    "row": 12,
                    "column": 5
                  },
                  "end": {
                    "row": 12,
                    "column": 67
                  },
                  "text": "(typeA instanceof GraphQLList && typeB instanceof GraphQLList)",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 12,
                        "column": 5
                      },
                      "end": {
                        "row": 12,
                        "column": 6
                      },
                      "text": "("
                    },
                    {
                      "type": "binary_expression",
                      "start": {
                        "row": 12,
                        "column": 6
                      },
                      "end": {
                        "row": 12,
                        "column": 66
                      },
                      "text": "typeA instanceof GraphQLList && typeB instanceof GraphQLList",
                      "children": [
                        {
                          "type": "binary_expression",
                          "start": {
                            "row": 12,
                            "column": 6
                          },
                          "end": {
                            "row": 12,
                            "column": 34
                          },
                          "text": "typeA instanceof GraphQLList",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 12,
                                "column": 6
                              },
                              "end": {
                                "row": 12,
                                "column": 11
                              },
                              "text": "typeA"
                            },
                            {
                              "type": "instanceof",
                              "start": {
                                "row": 12,
                                "column": 12
                              },
                              "end": {
                                "row": 12,
                                "column": 22
                              },
                              "text": "instanceof"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 12,
                                "column": 23
                              },
                              "end": {
                                "row": 12,
                                "column": 34
                              },
                              "text": "GraphQLList"
                            }
                          ]
                        },
                        {
                          "type": "&&",
                          "start": {
                            "row": 12,
                            "column": 35
                          },
                          "end": {
                            "row": 12,
                            "column": 37
                          },
                          "text": "&&"
                        },
                        {
                          "type": "binary_expression",
                          "start": {
                            "row": 12,
                            "column": 38
                          },
                          "end": {
                            "row": 12,
                            "column": 66
                          },
                          "text": "typeB instanceof GraphQLList",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 12,
                                "column": 38
                              },
                              "end": {
                                "row": 12,
                                "column": 43
                              },
                              "text": "typeB"
                            },
                            {
                              "type": "instanceof",
                              "start": {
                                "row": 12,
                                "column": 44
                              },
                              "end": {
                                "row": 12,
                                "column": 54
                              },
                              "text": "instanceof"
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 12,
                                "column": 55
                              },
                              "end": {
                                "row": 12,
                                "column": 66
                              },
                              "text": "GraphQLList"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 12,
                        "column": 66
                      },
                      "end": {
                        "row": 12,
                        "column": 67
                      },
                      "text": ")"
                    }
                  ]
                },
                {
                  "type": "statement_block",
                  "start": {
                    "row": 12,
                    "column": 68
                  },
                  "end": {
                    "row": 14,
                    "column": 3
                  },
                  "text": "{\n    return isEquivalentType(typeA.ofType, typeB.ofType);\n  }",
                  "children": [
                    {
                      "type": "{",
                      "start": {
                        "row": 12,
                        "column": 68
                      },
                      "end": {
                        "row": 12,
                        "column": 69
                      },
                      "text": "{"
                    },
                    {
                      "type": "return_statement",
                      "start": {
                        "row": 13,
                        "column": 4
                      },
                      "end": {
                        "row": 13,
                        "column": 56
                      },
                      "text": "return isEquivalentType(typeA.ofType, typeB.ofType);",
                      "children": [
                        {
                          "type": "return",
                          "start": {
                            "row": 13,
                            "column": 4
                          },
                          "end": {
                            "row": 13,
                            "column": 10
                          },
                          "text": "return"
                        },
                        {
                          "type": "call_expression",
                          "start": {
                            "row": 13,
                            "column": 11
                          },
                          "end": {
                            "row": 13,
                            "column": 55
                          },
                          "text": "isEquivalentType(typeA.ofType, typeB.ofType)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 13,
                                "column": 11
                              },
                              "end": {
                                "row": 13,
                                "column": 27
                              },
                              "text": "isEquivalentType"
                            },
                            {
                              "type": "arguments",
                              "start": {
                                "row": 13,
                                "column": 27
                              },
                              "end": {
                                "row": 13,
                                "column": 55
                              },
                              "text": "(typeA.ofType, typeB.ofType)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 13,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 13,
                                    "column": 28
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "member_expression",
                                  "start": {
                                    "row": 13,
                                    "column": 28
                                  },
                                  "end": {
                                    "row": 13,
                                    "column": 40
                                  },
                                  "text": "typeA.ofType",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 13,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 13,
                                        "column": 33
                                      },
                                      "text": "typeA"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 13,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 13,
                                        "column": 34
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "property_identifier",
                                      "start": {
                                        "row": 13,
                                        "column": 34
                                      },
                                      "end": {
                                        "row": 13,
                                        "column": 40
                                      },
                                      "text": "ofType"
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 13,
                                    "column": 40
                                  },
                                  "end": {
                                    "row": 13,
                                    "column": 41
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "member_expression",
                                  "start": {
                                    "row": 13,
                                    "column": 42
                                  },
                                  "end": {
                                    "row": 13,
                                    "column": 54
                                  },
                                  "text": "typeB.ofType",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 13,
                                        "column": 42
                                      },
                                      "end": {
                                        "row": 13,
                                        "column": 47
                                      },
                                      "text": "typeB"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 13,
                                        "column": 47
                                      },
                                      "end": {
                                        "row": 13,
                                        "column": 48
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "property_identifier",
                                      "start": {
                                        "row": 13,
                                        "column": 48
                                      },
                                      "end": {
                                        "row": 13,
                                        "column": 54
                                      },
                                      "text": "ofType"
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 13,
                                    "column": 54
                                  },
                                  "end": {
                                    "row": 13,
                                    "column": 55
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start": {
                            "row": 13,
                            "column": 55
                          },
                          "end": {
                            "row": 13,
                            "column": 56
                          },
                          "text": ";"
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start": {
                        "row": 14,
                        "column": 2
                      },
                      "end": {
                        "row": 14,
                        "column": 3
                      },
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 16,
                "column": 2
              },
              "end": {
                "row": 16,
                "column": 50
              },
              "text": "// Make sure the two types are of the same class"
            },
            {
              "type": "if_statement",
              "start": {
                "row": 17,
                "column": 2
              },
              "end": {
                "row": 23,
                "column": 3
              },
              "text": "if (typeA.constructor.name === typeB.constructor.name) {\n    const rawA = getRawType(typeA);\n    const rawB = getRawType(typeB);\n\n    // And they must have the exact same name\n    return rawA.name === rawB.name;\n  }",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 17,
                    "column": 2
                  },
                  "end": {
                    "row": 17,
                    "column": 4
                  },
                  "text": "if"
                },
                {
                  "type": "parenthesized_expression",
                  "start": {
                    "row": 17,
                    "column": 5
                  },
                  "end": {
                    "row": 17,
                    "column": 56
                  },
                  "text": "(typeA.constructor.name === typeB.constructor.name)",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 17,
                        "column": 5
                      },
                      "end": {
                        "row": 17,
                        "column": 6
                      },
                      "text": "("
                    },
                    {
                      "type": "binary_expression",
                      "start": {
                        "row": 17,
                        "column": 6
                      },
                      "end": {
                        "row": 17,
                        "column": 55
                      },
                      "text": "typeA.constructor.name === typeB.constructor.name",
                      "children": [
                        {
                          "type": "member_expression",
                          "start": {
                            "row": 17,
                            "column": 6
                          },
                          "end": {
                            "row": 17,
                            "column": 28
                          },
                          "text": "typeA.constructor.name",
                          "children": [
                            {
                              "type": "member_expression",
                              "start": {
                                "row": 17,
                                "column": 6
                              },
                              "end": {
                                "row": 17,
                                "column": 23
                              },
                              "text": "typeA.constructor",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 17,
                                    "column": 6
                                  },
                                  "end": {
                                    "row": 17,
                                    "column": 11
                                  },
                                  "text": "typeA"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 17,
                                    "column": 11
                                  },
                                  "end": {
                                    "row": 17,
                                    "column": 12
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "property_identifier",
                                  "start": {
                                    "row": 17,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 17,
                                    "column": 23
                                  },
                                  "text": "constructor"
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 17,
                                "column": 23
                              },
                              "end": {
                                "row": 17,
                                "column": 24
                              },
                              "text": "."
                            },
                            {
                              "type": "property_identifier",
                              "start": {
                                "row": 17,
                                "column": 24
                              },
                              "end": {
                                "row": 17,
                                "column": 28
                              },
                              "text": "name"
                            }
                          ]
                        },
                        {
                          "type": "===",
                          "start": {
                            "row": 17,
                            "column": 29
                          },
                          "end": {
                            "row": 17,
                            "column": 32
                          },
                          "text": "==="
                        },
                        {
                          "type": "member_expression",
                          "start": {
                            "row": 17,
                            "column": 33
                          },
                          "end": {
                            "row": 17,
                            "column": 55
                          },
                          "text": "typeB.constructor.name",
                          "children": [
                            {
                              "type": "member_expression",
                              "start": {
                                "row": 17,
                                "column": 33
                              },
                              "end": {
                                "row": 17,
                                "column": 50
                              },
                              "text": "typeB.constructor",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 17,
                                    "column": 33
                                  },
                                  "end": {
                                    "row": 17,
                                    "column": 38
                                  },
                                  "text": "typeB"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 17,
                                    "column": 38
                                  },
                                  "end": {
                                    "row": 17,
                                    "column": 39
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "property_identifier",
                                  "start": {
                                    "row": 17,
                                    "column": 39
                                  },
                                  "end": {
                                    "row": 17,
                                    "column": 50
                                  },
                                  "text": "constructor"
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 17,
                                "column": 50
                              },
                              "end": {
                                "row": 17,
                                "column": 51
                              },
                              "text": "."
                            },
                            {
                              "type": "property_identifier",
                              "start": {
                                "row": 17,
                                "column": 51
                              },
                              "end": {
                                "row": 17,
                                "column": 55
                              },
                              "text": "name"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 17,
                        "column": 55
                      },
                      "end": {
                        "row": 17,
                        "column": 56
                      },
                      "text": ")"
                    }
                  ]
                },
                {
                  "type": "statement_block",
                  "start": {
                    "row": 17,
                    "column": 57
                  },
                  "end": {
                    "row": 23,
                    "column": 3
                  },
                  "text": "{\n    const rawA = getRawType(typeA);\n    const rawB = getRawType(typeB);\n\n    // And they must have the exact same name\n    return rawA.name === rawB.name;\n  }",
                  "children": [
                    {
                      "type": "{",
                      "start": {
                        "row": 17,
                        "column": 57
                      },
                      "end": {
                        "row": 17,
                        "column": 58
                      },
                      "text": "{"
                    },
                    {
                      "type": "lexical_declaration",
                      "start": {
                        "row": 18,
                        "column": 4
                      },
                      "end": {
                        "row": 18,
                        "column": 35
                      },
                      "text": "const rawA = getRawType(typeA);",
                      "children": [
                        {
                          "type": "const",
                          "start": {
                            "row": 18,
                            "column": 4
                          },
                          "end": {
                            "row": 18,
                            "column": 9
                          },
                          "text": "const"
                        },
                        {
                          "type": "variable_declarator",
                          "start": {
                            "row": 18,
                            "column": 10
                          },
                          "end": {
                            "row": 18,
                            "column": 34
                          },
                          "text": "rawA = getRawType(typeA)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 18,
                                "column": 10
                              },
                              "end": {
                                "row": 18,
                                "column": 14
                              },
                              "text": "rawA"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 18,
                                "column": 15
                              },
                              "end": {
                                "row": 18,
                                "column": 16
                              },
                              "text": "="
                            },
                            {
                              "type": "call_expression",
                              "start": {
                                "row": 18,
                                "column": 17
                              },
                              "end": {
                                "row": 18,
                                "column": 34
                              },
                              "text": "getRawType(typeA)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 18,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 18,
                                    "column": 27
                                  },
                                  "text": "getRawType"
                                },
                                {
                                  "type": "arguments",
                                  "start": {
                                    "row": 18,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 18,
                                    "column": 34
                                  },
                                  "text": "(typeA)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 18,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 18,
                                        "column": 28
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 18,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 18,
                                        "column": 33
                                      },
                                      "text": "typeA"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 18,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 18,
                                        "column": 34
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start": {
                            "row": 18,
                            "column": 34
                          },
                          "end": {
                            "row": 18,
                            "column": 35
                          },
                          "text": ";"
                        }
                      ]
                    },
                    {
                      "type": "lexical_declaration",
                      "start": {
                        "row": 19,
                        "column": 4
                      },
                      "end": {
                        "row": 19,
                        "column": 35
                      },
                      "text": "const rawB = getRawType(typeB);",
                      "children": [
                        {
                          "type": "const",
                          "start": {
                            "row": 19,
                            "column": 4
                          },
                          "end": {
                            "row": 19,
                            "column": 9
                          },
                          "text": "const"
                        },
                        {
                          "type": "variable_declarator",
                          "start": {
                            "row": 19,
                            "column": 10
                          },
                          "end": {
                            "row": 19,
                            "column": 34
                          },
                          "text": "rawB = getRawType(typeB)",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 19,
                                "column": 10
                              },
                              "end": {
                                "row": 19,
                                "column": 14
                              },
                              "text": "rawB"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 19,
                                "column": 15
                              },
                              "end": {
                                "row": 19,
                                "column": 16
                              },
                              "text": "="
                            },
                            {
                              "type": "call_expression",
                              "start": {
                                "row": 19,
                                "column": 17
                              },
                              "end": {
                                "row": 19,
                                "column": 34
                              },
                              "text": "getRawType(typeB)",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 19,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 19,
                                    "column": 27
                                  },
                                  "text": "getRawType"
                                },
                                {
                                  "type": "arguments",
                                  "start": {
                                    "row": 19,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 19,
                                    "column": 34
                                  },
                                  "text": "(typeB)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 19,
                                        "column": 27
                                      },
                                      "end": {
                                        "row": 19,
                                        "column": 28
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 19,
                                        "column": 28
                                      },
                                      "end": {
                                        "row": 19,
                                        "column": 33
                                      },
                                      "text": "typeB"
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 19,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 19,
                                        "column": 34
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start": {
                            "row": 19,
                            "column": 34
                          },
                          "end": {
                            "row": 19,
                            "column": 35
                          },
                          "text": ";"
                        }
                      ]
                    },
                    {
                      "type": "comment",
                      "start": {
                        "row": 21,
                        "column": 4
                      },
                      "end": {
                        "row": 21,
                        "column": 45
                      },
                      "text": "// And they must have the exact same name"
                    },
                    {
                      "type": "return_statement",
                      "start": {
                        "row": 22,
                        "column": 4
                      },
                      "end": {
                        "row": 22,
                        "column": 35
                      },
                      "text": "return rawA.name === rawB.name;",
                      "children": [
                        {
                          "type": "return",
                          "start": {
                            "row": 22,
                            "column": 4
                          },
                          "end": {
                            "row": 22,
                            "column": 10
                          },
                          "text": "return"
                        },
                        {
                          "type": "binary_expression",
                          "start": {
                            "row": 22,
                            "column": 11
                          },
                          "end": {
                            "row": 22,
                            "column": 34
                          },
                          "text": "rawA.name === rawB.name",
                          "children": [
                            {
                              "type": "member_expression",
                              "start": {
                                "row": 22,
                                "column": 11
                              },
                              "end": {
                                "row": 22,
                                "column": 20
                              },
                              "text": "rawA.name",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 11
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 15
                                  },
                                  "text": "rawA"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 22,
                                    "column": 15
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 16
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "property_identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 20
                                  },
                                  "text": "name"
                                }
                              ]
                            },
                            {
                              "type": "===",
                              "start": {
                                "row": 22,
                                "column": 21
                              },
                              "end": {
                                "row": 22,
                                "column": 24
                              },
                              "text": "==="
                            },
                            {
                              "type": "member_expression",
                              "start": {
                                "row": 22,
                                "column": 25
                              },
                              "end": {
                                "row": 22,
                                "column": 34
                              },
                              "text": "rawB.name",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 25
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 29
                                  },
                                  "text": "rawB"
                                },
                                {
                                  "type": ".",
                                  "start": {
                                    "row": 22,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 30
                                  },
                                  "text": "."
                                },
                                {
                                  "type": "property_identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 30
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 34
                                  },
                                  "text": "name"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start": {
                            "row": 22,
                            "column": 34
                          },
                          "end": {
                            "row": 22,
                            "column": 35
                          },
                          "text": ";"
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start": {
                        "row": 23,
                        "column": 2
                      },
                      "end": {
                        "row": 23,
                        "column": 3
                      },
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "comment",
              "start": {
                "row": 25,
                "column": 2
              },
              "end": {
                "row": 25,
                "column": 39
              },
              "text": "// Otherwise the types are not equal."
            },
            {
              "type": "return_statement",
              "start": {
                "row": 26,
                "column": 2
              },
              "end": {
                "row": 26,
                "column": 15
              },
              "text": "return false;",
              "children": [
                {
                  "type": "return",
                  "start": {
                    "row": 26,
                    "column": 2
                  },
                  "end": {
                    "row": 26,
                    "column": 8
                  },
                  "text": "return"
                },
                {
                  "type": "false",
                  "start": {
                    "row": 26,
                    "column": 9
                  },
                  "end": {
                    "row": 26,
                    "column": 14
                  },
                  "text": "false"
                },
                {
                  "type": ";",
                  "start": {
                    "row": 26,
                    "column": 14
                  },
                  "end": {
                    "row": 26,
                    "column": 15
                  },
                  "text": ";"
                }
              ]
            },
            {
              "type": "}",
              "start": {
                "row": 27,
                "column": 0
              },
              "end": {
                "row": 27,
                "column": 1
              },
              "text": "}"
            }
          ]
        }
      ]
    }
  ]
}