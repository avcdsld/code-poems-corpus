{
  "type": "program",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 32,
    "column": 3
  },
  "text": "@Override\n  public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n    if (evt instanceof IdleStateEvent) {\n      IdleStateEvent e = (IdleStateEvent) evt;\n      // See class comment for timeout semantics. In addition to ensuring we only timeout while\n      // there are outstanding requests, we also do a secondary consistency check to ensure\n      // there's no race between the idle timeout and incrementing the numOutstandingRequests\n      // (see SPARK-7003).\n      //\n      // To avoid a race between TransportClientFactory.createClient() and this code which could\n      // result in an inactive client being returned, this needs to run in a synchronized block.\n      synchronized (this) {\n        boolean hasInFlightRequests = responseHandler.numOutstandingRequests() > 0;\n        boolean isActuallyOverdue =\n          System.nanoTime() - responseHandler.getTimeOfLastRequestNs() > requestTimeoutNs;\n        if (e.state() == IdleState.ALL_IDLE && isActuallyOverdue) {\n          if (hasInFlightRequests) {\n            String address = getRemoteAddress(ctx.channel());\n            logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000);\n            client.timeOut();\n            ctx.close();\n          } else if (closeIdleConnections) {\n            // While CloseIdleConnections is enable, we also close idle connection\n            client.timeOut();\n            ctx.close();\n          }\n        }\n      }\n    }\n    ctx.fireUserEventTriggered(evt);\n  }",
  "children": [
    {
      "type": "method_declaration",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 32,
        "column": 3
      },
      "text": "@Override\n  public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n    if (evt instanceof IdleStateEvent) {\n      IdleStateEvent e = (IdleStateEvent) evt;\n      // See class comment for timeout semantics. In addition to ensuring we only timeout while\n      // there are outstanding requests, we also do a secondary consistency check to ensure\n      // there's no race between the idle timeout and incrementing the numOutstandingRequests\n      // (see SPARK-7003).\n      //\n      // To avoid a race between TransportClientFactory.createClient() and this code which could\n      // result in an inactive client being returned, this needs to run in a synchronized block.\n      synchronized (this) {\n        boolean hasInFlightRequests = responseHandler.numOutstandingRequests() > 0;\n        boolean isActuallyOverdue =\n          System.nanoTime() - responseHandler.getTimeOfLastRequestNs() > requestTimeoutNs;\n        if (e.state() == IdleState.ALL_IDLE && isActuallyOverdue) {\n          if (hasInFlightRequests) {\n            String address = getRemoteAddress(ctx.channel());\n            logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000);\n            client.timeOut();\n            ctx.close();\n          } else if (closeIdleConnections) {\n            // While CloseIdleConnections is enable, we also close idle connection\n            client.timeOut();\n            ctx.close();\n          }\n        }\n      }\n    }\n    ctx.fireUserEventTriggered(evt);\n  }",
      "children": [
        {
          "type": "modifiers",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 1,
            "column": 8
          },
          "text": "@Override\n  public",
          "children": [
            {
              "type": "marker_annotation",
              "start": {
                "row": 0,
                "column": 0
              },
              "end": {
                "row": 0,
                "column": 9
              },
              "text": "@Override",
              "children": [
                {
                  "type": "@",
                  "start": {
                    "row": 0,
                    "column": 0
                  },
                  "end": {
                    "row": 0,
                    "column": 1
                  },
                  "text": "@"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 1
                  },
                  "end": {
                    "row": 0,
                    "column": 9
                  },
                  "text": "Override"
                }
              ]
            },
            {
              "type": "public",
              "start": {
                "row": 1,
                "column": 2
              },
              "end": {
                "row": 1,
                "column": 8
              },
              "text": "public"
            }
          ]
        },
        {
          "type": "void_type",
          "start": {
            "row": 1,
            "column": 9
          },
          "end": {
            "row": 1,
            "column": 13
          },
          "text": "void"
        },
        {
          "type": "identifier",
          "start": {
            "row": 1,
            "column": 14
          },
          "end": {
            "row": 1,
            "column": 32
          },
          "text": "userEventTriggered"
        },
        {
          "type": "formal_parameters",
          "start": {
            "row": 1,
            "column": 32
          },
          "end": {
            "row": 1,
            "column": 71
          },
          "text": "(ChannelHandlerContext ctx, Object evt)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 1,
                "column": 32
              },
              "end": {
                "row": 1,
                "column": 33
              },
              "text": "("
            },
            {
              "type": "formal_parameter",
              "start": {
                "row": 1,
                "column": 33
              },
              "end": {
                "row": 1,
                "column": 58
              },
              "text": "ChannelHandlerContext ctx",
              "children": [
                {
                  "type": "type_identifier",
                  "start": {
                    "row": 1,
                    "column": 33
                  },
                  "end": {
                    "row": 1,
                    "column": 54
                  },
                  "text": "ChannelHandlerContext"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 1,
                    "column": 55
                  },
                  "end": {
                    "row": 1,
                    "column": 58
                  },
                  "text": "ctx"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 1,
                "column": 58
              },
              "end": {
                "row": 1,
                "column": 59
              },
              "text": ","
            },
            {
              "type": "formal_parameter",
              "start": {
                "row": 1,
                "column": 60
              },
              "end": {
                "row": 1,
                "column": 70
              },
              "text": "Object evt",
              "children": [
                {
                  "type": "type_identifier",
                  "start": {
                    "row": 1,
                    "column": 60
                  },
                  "end": {
                    "row": 1,
                    "column": 66
                  },
                  "text": "Object"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 1,
                    "column": 67
                  },
                  "end": {
                    "row": 1,
                    "column": 70
                  },
                  "text": "evt"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 1,
                "column": 70
              },
              "end": {
                "row": 1,
                "column": 71
              },
              "text": ")"
            }
          ]
        },
        {
          "type": "throws",
          "start": {
            "row": 1,
            "column": 72
          },
          "end": {
            "row": 1,
            "column": 88
          },
          "text": "throws Exception",
          "children": [
            {
              "type": "throws",
              "start": {
                "row": 1,
                "column": 72
              },
              "end": {
                "row": 1,
                "column": 78
              },
              "text": "throws"
            },
            {
              "type": "type_identifier",
              "start": {
                "row": 1,
                "column": 79
              },
              "end": {
                "row": 1,
                "column": 88
              },
              "text": "Exception"
            }
          ]
        },
        {
          "type": "block",
          "start": {
            "row": 1,
            "column": 89
          },
          "end": {
            "row": 32,
            "column": 3
          },
          "text": "{\n    if (evt instanceof IdleStateEvent) {\n      IdleStateEvent e = (IdleStateEvent) evt;\n      // See class comment for timeout semantics. In addition to ensuring we only timeout while\n      // there are outstanding requests, we also do a secondary consistency check to ensure\n      // there's no race between the idle timeout and incrementing the numOutstandingRequests\n      // (see SPARK-7003).\n      //\n      // To avoid a race between TransportClientFactory.createClient() and this code which could\n      // result in an inactive client being returned, this needs to run in a synchronized block.\n      synchronized (this) {\n        boolean hasInFlightRequests = responseHandler.numOutstandingRequests() > 0;\n        boolean isActuallyOverdue =\n          System.nanoTime() - responseHandler.getTimeOfLastRequestNs() > requestTimeoutNs;\n        if (e.state() == IdleState.ALL_IDLE && isActuallyOverdue) {\n          if (hasInFlightRequests) {\n            String address = getRemoteAddress(ctx.channel());\n            logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000);\n            client.timeOut();\n            ctx.close();\n          } else if (closeIdleConnections) {\n            // While CloseIdleConnections is enable, we also close idle connection\n            client.timeOut();\n            ctx.close();\n          }\n        }\n      }\n    }\n    ctx.fireUserEventTriggered(evt);\n  }",
          "children": [
            {
              "type": "{",
              "start": {
                "row": 1,
                "column": 89
              },
              "end": {
                "row": 1,
                "column": 90
              },
              "text": "{"
            },
            {
              "type": "if_statement",
              "start": {
                "row": 2,
                "column": 4
              },
              "end": {
                "row": 30,
                "column": 5
              },
              "text": "if (evt instanceof IdleStateEvent) {\n      IdleStateEvent e = (IdleStateEvent) evt;\n      // See class comment for timeout semantics. In addition to ensuring we only timeout while\n      // there are outstanding requests, we also do a secondary consistency check to ensure\n      // there's no race between the idle timeout and incrementing the numOutstandingRequests\n      // (see SPARK-7003).\n      //\n      // To avoid a race between TransportClientFactory.createClient() and this code which could\n      // result in an inactive client being returned, this needs to run in a synchronized block.\n      synchronized (this) {\n        boolean hasInFlightRequests = responseHandler.numOutstandingRequests() > 0;\n        boolean isActuallyOverdue =\n          System.nanoTime() - responseHandler.getTimeOfLastRequestNs() > requestTimeoutNs;\n        if (e.state() == IdleState.ALL_IDLE && isActuallyOverdue) {\n          if (hasInFlightRequests) {\n            String address = getRemoteAddress(ctx.channel());\n            logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000);\n            client.timeOut();\n            ctx.close();\n          } else if (closeIdleConnections) {\n            // While CloseIdleConnections is enable, we also close idle connection\n            client.timeOut();\n            ctx.close();\n          }\n        }\n      }\n    }",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 2,
                    "column": 4
                  },
                  "end": {
                    "row": 2,
                    "column": 6
                  },
                  "text": "if"
                },
                {
                  "type": "condition",
                  "start": {
                    "row": 2,
                    "column": 7
                  },
                  "end": {
                    "row": 2,
                    "column": 38
                  },
                  "text": "(evt instanceof IdleStateEvent)",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 2,
                        "column": 7
                      },
                      "end": {
                        "row": 2,
                        "column": 8
                      },
                      "text": "("
                    },
                    {
                      "type": "instanceof_expression",
                      "start": {
                        "row": 2,
                        "column": 8
                      },
                      "end": {
                        "row": 2,
                        "column": 37
                      },
                      "text": "evt instanceof IdleStateEvent",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 2,
                            "column": 8
                          },
                          "end": {
                            "row": 2,
                            "column": 11
                          },
                          "text": "evt"
                        },
                        {
                          "type": "instanceof",
                          "start": {
                            "row": 2,
                            "column": 12
                          },
                          "end": {
                            "row": 2,
                            "column": 22
                          },
                          "text": "instanceof"
                        },
                        {
                          "type": "type_identifier",
                          "start": {
                            "row": 2,
                            "column": 23
                          },
                          "end": {
                            "row": 2,
                            "column": 37
                          },
                          "text": "IdleStateEvent"
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 2,
                        "column": 37
                      },
                      "end": {
                        "row": 2,
                        "column": 38
                      },
                      "text": ")"
                    }
                  ]
                },
                {
                  "type": "block",
                  "start": {
                    "row": 2,
                    "column": 39
                  },
                  "end": {
                    "row": 30,
                    "column": 5
                  },
                  "text": "{\n      IdleStateEvent e = (IdleStateEvent) evt;\n      // See class comment for timeout semantics. In addition to ensuring we only timeout while\n      // there are outstanding requests, we also do a secondary consistency check to ensure\n      // there's no race between the idle timeout and incrementing the numOutstandingRequests\n      // (see SPARK-7003).\n      //\n      // To avoid a race between TransportClientFactory.createClient() and this code which could\n      // result in an inactive client being returned, this needs to run in a synchronized block.\n      synchronized (this) {\n        boolean hasInFlightRequests = responseHandler.numOutstandingRequests() > 0;\n        boolean isActuallyOverdue =\n          System.nanoTime() - responseHandler.getTimeOfLastRequestNs() > requestTimeoutNs;\n        if (e.state() == IdleState.ALL_IDLE && isActuallyOverdue) {\n          if (hasInFlightRequests) {\n            String address = getRemoteAddress(ctx.channel());\n            logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000);\n            client.timeOut();\n            ctx.close();\n          } else if (closeIdleConnections) {\n            // While CloseIdleConnections is enable, we also close idle connection\n            client.timeOut();\n            ctx.close();\n          }\n        }\n      }\n    }",
                  "children": [
                    {
                      "type": "{",
                      "start": {
                        "row": 2,
                        "column": 39
                      },
                      "end": {
                        "row": 2,
                        "column": 40
                      },
                      "text": "{"
                    },
                    {
                      "type": "local_variable_declaration",
                      "start": {
                        "row": 3,
                        "column": 6
                      },
                      "end": {
                        "row": 3,
                        "column": 46
                      },
                      "text": "IdleStateEvent e = (IdleStateEvent) evt;",
                      "children": [
                        {
                          "type": "type_identifier",
                          "start": {
                            "row": 3,
                            "column": 6
                          },
                          "end": {
                            "row": 3,
                            "column": 20
                          },
                          "text": "IdleStateEvent"
                        },
                        {
                          "type": "variable_declarator",
                          "start": {
                            "row": 3,
                            "column": 21
                          },
                          "end": {
                            "row": 3,
                            "column": 45
                          },
                          "text": "e = (IdleStateEvent) evt",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 3,
                                "column": 21
                              },
                              "end": {
                                "row": 3,
                                "column": 22
                              },
                              "text": "e"
                            },
                            {
                              "type": "=",
                              "start": {
                                "row": 3,
                                "column": 23
                              },
                              "end": {
                                "row": 3,
                                "column": 24
                              },
                              "text": "="
                            },
                            {
                              "type": "cast_expression",
                              "start": {
                                "row": 3,
                                "column": 25
                              },
                              "end": {
                                "row": 3,
                                "column": 45
                              },
                              "text": "(IdleStateEvent) evt",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 3,
                                    "column": 25
                                  },
                                  "end": {
                                    "row": 3,
                                    "column": 26
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "type_identifier",
                                  "start": {
                                    "row": 3,
                                    "column": 26
                                  },
                                  "end": {
                                    "row": 3,
                                    "column": 40
                                  },
                                  "text": "IdleStateEvent"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 3,
                                    "column": 40
                                  },
                                  "end": {
                                    "row": 3,
                                    "column": 41
                                  },
                                  "text": ")"
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 3,
                                    "column": 42
                                  },
                                  "end": {
                                    "row": 3,
                                    "column": 45
                                  },
                                  "text": "evt"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start": {
                            "row": 3,
                            "column": 45
                          },
                          "end": {
                            "row": 3,
                            "column": 46
                          },
                          "text": ";"
                        }
                      ]
                    },
                    {
                      "type": "line_comment",
                      "start": {
                        "row": 4,
                        "column": 6
                      },
                      "end": {
                        "row": 4,
                        "column": 95
                      },
                      "text": "// See class comment for timeout semantics. In addition to ensuring we only timeout while"
                    },
                    {
                      "type": "line_comment",
                      "start": {
                        "row": 5,
                        "column": 6
                      },
                      "end": {
                        "row": 5,
                        "column": 91
                      },
                      "text": "// there are outstanding requests, we also do a secondary consistency check to ensure"
                    },
                    {
                      "type": "line_comment",
                      "start": {
                        "row": 6,
                        "column": 6
                      },
                      "end": {
                        "row": 6,
                        "column": 93
                      },
                      "text": "// there's no race between the idle timeout and incrementing the numOutstandingRequests"
                    },
                    {
                      "type": "line_comment",
                      "start": {
                        "row": 7,
                        "column": 6
                      },
                      "end": {
                        "row": 7,
                        "column": 26
                      },
                      "text": "// (see SPARK-7003)."
                    },
                    {
                      "type": "line_comment",
                      "start": {
                        "row": 8,
                        "column": 6
                      },
                      "end": {
                        "row": 8,
                        "column": 8
                      },
                      "text": "//"
                    },
                    {
                      "type": "line_comment",
                      "start": {
                        "row": 9,
                        "column": 6
                      },
                      "end": {
                        "row": 9,
                        "column": 96
                      },
                      "text": "// To avoid a race between TransportClientFactory.createClient() and this code which could"
                    },
                    {
                      "type": "line_comment",
                      "start": {
                        "row": 10,
                        "column": 6
                      },
                      "end": {
                        "row": 10,
                        "column": 96
                      },
                      "text": "// result in an inactive client being returned, this needs to run in a synchronized block."
                    },
                    {
                      "type": "synchronized_statement",
                      "start": {
                        "row": 11,
                        "column": 6
                      },
                      "end": {
                        "row": 29,
                        "column": 7
                      },
                      "text": "synchronized (this) {\n        boolean hasInFlightRequests = responseHandler.numOutstandingRequests() > 0;\n        boolean isActuallyOverdue =\n          System.nanoTime() - responseHandler.getTimeOfLastRequestNs() > requestTimeoutNs;\n        if (e.state() == IdleState.ALL_IDLE && isActuallyOverdue) {\n          if (hasInFlightRequests) {\n            String address = getRemoteAddress(ctx.channel());\n            logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000);\n            client.timeOut();\n            ctx.close();\n          } else if (closeIdleConnections) {\n            // While CloseIdleConnections is enable, we also close idle connection\n            client.timeOut();\n            ctx.close();\n          }\n        }\n      }",
                      "children": [
                        {
                          "type": "synchronized",
                          "start": {
                            "row": 11,
                            "column": 6
                          },
                          "end": {
                            "row": 11,
                            "column": 18
                          },
                          "text": "synchronized"
                        },
                        {
                          "type": "parenthesized_expression",
                          "start": {
                            "row": 11,
                            "column": 19
                          },
                          "end": {
                            "row": 11,
                            "column": 25
                          },
                          "text": "(this)",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 11,
                                "column": 19
                              },
                              "end": {
                                "row": 11,
                                "column": 20
                              },
                              "text": "("
                            },
                            {
                              "type": "this",
                              "start": {
                                "row": 11,
                                "column": 20
                              },
                              "end": {
                                "row": 11,
                                "column": 24
                              },
                              "text": "this"
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 11,
                                "column": 24
                              },
                              "end": {
                                "row": 11,
                                "column": 25
                              },
                              "text": ")"
                            }
                          ]
                        },
                        {
                          "type": "block",
                          "start": {
                            "row": 11,
                            "column": 26
                          },
                          "end": {
                            "row": 29,
                            "column": 7
                          },
                          "text": "{\n        boolean hasInFlightRequests = responseHandler.numOutstandingRequests() > 0;\n        boolean isActuallyOverdue =\n          System.nanoTime() - responseHandler.getTimeOfLastRequestNs() > requestTimeoutNs;\n        if (e.state() == IdleState.ALL_IDLE && isActuallyOverdue) {\n          if (hasInFlightRequests) {\n            String address = getRemoteAddress(ctx.channel());\n            logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000);\n            client.timeOut();\n            ctx.close();\n          } else if (closeIdleConnections) {\n            // While CloseIdleConnections is enable, we also close idle connection\n            client.timeOut();\n            ctx.close();\n          }\n        }\n      }",
                          "children": [
                            {
                              "type": "{",
                              "start": {
                                "row": 11,
                                "column": 26
                              },
                              "end": {
                                "row": 11,
                                "column": 27
                              },
                              "text": "{"
                            },
                            {
                              "type": "local_variable_declaration",
                              "start": {
                                "row": 12,
                                "column": 8
                              },
                              "end": {
                                "row": 12,
                                "column": 83
                              },
                              "text": "boolean hasInFlightRequests = responseHandler.numOutstandingRequests() > 0;",
                              "children": [
                                {
                                  "type": "boolean_type",
                                  "start": {
                                    "row": 12,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 15
                                  },
                                  "text": "boolean"
                                },
                                {
                                  "type": "variable_declarator",
                                  "start": {
                                    "row": 12,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 82
                                  },
                                  "text": "hasInFlightRequests = responseHandler.numOutstandingRequests() > 0",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 12,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 12,
                                        "column": 35
                                      },
                                      "text": "hasInFlightRequests"
                                    },
                                    {
                                      "type": "=",
                                      "start": {
                                        "row": 12,
                                        "column": 36
                                      },
                                      "end": {
                                        "row": 12,
                                        "column": 37
                                      },
                                      "text": "="
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start": {
                                        "row": 12,
                                        "column": 38
                                      },
                                      "end": {
                                        "row": 12,
                                        "column": 82
                                      },
                                      "text": "responseHandler.numOutstandingRequests() > 0",
                                      "children": [
                                        {
                                          "type": "method_invocation",
                                          "start": {
                                            "row": 12,
                                            "column": 38
                                          },
                                          "end": {
                                            "row": 12,
                                            "column": 78
                                          },
                                          "text": "responseHandler.numOutstandingRequests()",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 12,
                                                "column": 38
                                              },
                                              "end": {
                                                "row": 12,
                                                "column": 53
                                              },
                                              "text": "responseHandler"
                                            },
                                            {
                                              "type": ".",
                                              "start": {
                                                "row": 12,
                                                "column": 53
                                              },
                                              "end": {
                                                "row": 12,
                                                "column": 54
                                              },
                                              "text": "."
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 12,
                                                "column": 54
                                              },
                                              "end": {
                                                "row": 12,
                                                "column": 76
                                              },
                                              "text": "numOutstandingRequests"
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 12,
                                                "column": 76
                                              },
                                              "end": {
                                                "row": 12,
                                                "column": 78
                                              },
                                              "text": "()",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 12,
                                                    "column": 76
                                                  },
                                                  "end": {
                                                    "row": 12,
                                                    "column": 77
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 12,
                                                    "column": 77
                                                  },
                                                  "end": {
                                                    "row": 12,
                                                    "column": 78
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ">",
                                          "start": {
                                            "row": 12,
                                            "column": 79
                                          },
                                          "end": {
                                            "row": 12,
                                            "column": 80
                                          },
                                          "text": ">"
                                        },
                                        {
                                          "type": "decimal_integer_literal",
                                          "start": {
                                            "row": 12,
                                            "column": 81
                                          },
                                          "end": {
                                            "row": 12,
                                            "column": 82
                                          },
                                          "text": "0"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start": {
                                    "row": 12,
                                    "column": 82
                                  },
                                  "end": {
                                    "row": 12,
                                    "column": 83
                                  },
                                  "text": ";"
                                }
                              ]
                            },
                            {
                              "type": "local_variable_declaration",
                              "start": {
                                "row": 13,
                                "column": 8
                              },
                              "end": {
                                "row": 14,
                                "column": 90
                              },
                              "text": "boolean isActuallyOverdue =\n          System.nanoTime() - responseHandler.getTimeOfLastRequestNs() > requestTimeoutNs;",
                              "children": [
                                {
                                  "type": "boolean_type",
                                  "start": {
                                    "row": 13,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 13,
                                    "column": 15
                                  },
                                  "text": "boolean"
                                },
                                {
                                  "type": "variable_declarator",
                                  "start": {
                                    "row": 13,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 14,
                                    "column": 89
                                  },
                                  "text": "isActuallyOverdue =\n          System.nanoTime() - responseHandler.getTimeOfLastRequestNs() > requestTimeoutNs",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 13,
                                        "column": 16
                                      },
                                      "end": {
                                        "row": 13,
                                        "column": 33
                                      },
                                      "text": "isActuallyOverdue"
                                    },
                                    {
                                      "type": "=",
                                      "start": {
                                        "row": 13,
                                        "column": 34
                                      },
                                      "end": {
                                        "row": 13,
                                        "column": 35
                                      },
                                      "text": "="
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start": {
                                        "row": 14,
                                        "column": 10
                                      },
                                      "end": {
                                        "row": 14,
                                        "column": 89
                                      },
                                      "text": "System.nanoTime() - responseHandler.getTimeOfLastRequestNs() > requestTimeoutNs",
                                      "children": [
                                        {
                                          "type": "binary_expression",
                                          "start": {
                                            "row": 14,
                                            "column": 10
                                          },
                                          "end": {
                                            "row": 14,
                                            "column": 70
                                          },
                                          "text": "System.nanoTime() - responseHandler.getTimeOfLastRequestNs()",
                                          "children": [
                                            {
                                              "type": "method_invocation",
                                              "start": {
                                                "row": 14,
                                                "column": 10
                                              },
                                              "end": {
                                                "row": 14,
                                                "column": 27
                                              },
                                              "text": "System.nanoTime()",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 14,
                                                    "column": 10
                                                  },
                                                  "end": {
                                                    "row": 14,
                                                    "column": 16
                                                  },
                                                  "text": "System"
                                                },
                                                {
                                                  "type": ".",
                                                  "start": {
                                                    "row": 14,
                                                    "column": 16
                                                  },
                                                  "end": {
                                                    "row": 14,
                                                    "column": 17
                                                  },
                                                  "text": "."
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 14,
                                                    "column": 17
                                                  },
                                                  "end": {
                                                    "row": 14,
                                                    "column": 25
                                                  },
                                                  "text": "nanoTime"
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "start": {
                                                    "row": 14,
                                                    "column": 25
                                                  },
                                                  "end": {
                                                    "row": 14,
                                                    "column": 27
                                                  },
                                                  "text": "()",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "start": {
                                                        "row": 14,
                                                        "column": 25
                                                      },
                                                      "end": {
                                                        "row": 14,
                                                        "column": 26
                                                      },
                                                      "text": "("
                                                    },
                                                    {
                                                      "type": ")",
                                                      "start": {
                                                        "row": 14,
                                                        "column": 26
                                                      },
                                                      "end": {
                                                        "row": 14,
                                                        "column": 27
                                                      },
                                                      "text": ")"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "-",
                                              "start": {
                                                "row": 14,
                                                "column": 28
                                              },
                                              "end": {
                                                "row": 14,
                                                "column": 29
                                              },
                                              "text": "-"
                                            },
                                            {
                                              "type": "method_invocation",
                                              "start": {
                                                "row": 14,
                                                "column": 30
                                              },
                                              "end": {
                                                "row": 14,
                                                "column": 70
                                              },
                                              "text": "responseHandler.getTimeOfLastRequestNs()",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 14,
                                                    "column": 30
                                                  },
                                                  "end": {
                                                    "row": 14,
                                                    "column": 45
                                                  },
                                                  "text": "responseHandler"
                                                },
                                                {
                                                  "type": ".",
                                                  "start": {
                                                    "row": 14,
                                                    "column": 45
                                                  },
                                                  "end": {
                                                    "row": 14,
                                                    "column": 46
                                                  },
                                                  "text": "."
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 14,
                                                    "column": 46
                                                  },
                                                  "end": {
                                                    "row": 14,
                                                    "column": 68
                                                  },
                                                  "text": "getTimeOfLastRequestNs"
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "start": {
                                                    "row": 14,
                                                    "column": 68
                                                  },
                                                  "end": {
                                                    "row": 14,
                                                    "column": 70
                                                  },
                                                  "text": "()",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "start": {
                                                        "row": 14,
                                                        "column": 68
                                                      },
                                                      "end": {
                                                        "row": 14,
                                                        "column": 69
                                                      },
                                                      "text": "("
                                                    },
                                                    {
                                                      "type": ")",
                                                      "start": {
                                                        "row": 14,
                                                        "column": 69
                                                      },
                                                      "end": {
                                                        "row": 14,
                                                        "column": 70
                                                      },
                                                      "text": ")"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ">",
                                          "start": {
                                            "row": 14,
                                            "column": 71
                                          },
                                          "end": {
                                            "row": 14,
                                            "column": 72
                                          },
                                          "text": ">"
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 14,
                                            "column": 73
                                          },
                                          "end": {
                                            "row": 14,
                                            "column": 89
                                          },
                                          "text": "requestTimeoutNs"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start": {
                                    "row": 14,
                                    "column": 89
                                  },
                                  "end": {
                                    "row": 14,
                                    "column": 90
                                  },
                                  "text": ";"
                                }
                              ]
                            },
                            {
                              "type": "if_statement",
                              "start": {
                                "row": 15,
                                "column": 8
                              },
                              "end": {
                                "row": 28,
                                "column": 9
                              },
                              "text": "if (e.state() == IdleState.ALL_IDLE && isActuallyOverdue) {\n          if (hasInFlightRequests) {\n            String address = getRemoteAddress(ctx.channel());\n            logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000);\n            client.timeOut();\n            ctx.close();\n          } else if (closeIdleConnections) {\n            // While CloseIdleConnections is enable, we also close idle connection\n            client.timeOut();\n            ctx.close();\n          }\n        }",
                              "children": [
                                {
                                  "type": "if",
                                  "start": {
                                    "row": 15,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 15,
                                    "column": 10
                                  },
                                  "text": "if"
                                },
                                {
                                  "type": "condition",
                                  "start": {
                                    "row": 15,
                                    "column": 11
                                  },
                                  "end": {
                                    "row": 15,
                                    "column": 65
                                  },
                                  "text": "(e.state() == IdleState.ALL_IDLE && isActuallyOverdue)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 15,
                                        "column": 11
                                      },
                                      "end": {
                                        "row": 15,
                                        "column": 12
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start": {
                                        "row": 15,
                                        "column": 12
                                      },
                                      "end": {
                                        "row": 15,
                                        "column": 64
                                      },
                                      "text": "e.state() == IdleState.ALL_IDLE && isActuallyOverdue",
                                      "children": [
                                        {
                                          "type": "binary_expression",
                                          "start": {
                                            "row": 15,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 15,
                                            "column": 43
                                          },
                                          "text": "e.state() == IdleState.ALL_IDLE",
                                          "children": [
                                            {
                                              "type": "method_invocation",
                                              "start": {
                                                "row": 15,
                                                "column": 12
                                              },
                                              "end": {
                                                "row": 15,
                                                "column": 21
                                              },
                                              "text": "e.state()",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 15,
                                                    "column": 12
                                                  },
                                                  "end": {
                                                    "row": 15,
                                                    "column": 13
                                                  },
                                                  "text": "e"
                                                },
                                                {
                                                  "type": ".",
                                                  "start": {
                                                    "row": 15,
                                                    "column": 13
                                                  },
                                                  "end": {
                                                    "row": 15,
                                                    "column": 14
                                                  },
                                                  "text": "."
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 15,
                                                    "column": 14
                                                  },
                                                  "end": {
                                                    "row": 15,
                                                    "column": 19
                                                  },
                                                  "text": "state"
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "start": {
                                                    "row": 15,
                                                    "column": 19
                                                  },
                                                  "end": {
                                                    "row": 15,
                                                    "column": 21
                                                  },
                                                  "text": "()",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "start": {
                                                        "row": 15,
                                                        "column": 19
                                                      },
                                                      "end": {
                                                        "row": 15,
                                                        "column": 20
                                                      },
                                                      "text": "("
                                                    },
                                                    {
                                                      "type": ")",
                                                      "start": {
                                                        "row": 15,
                                                        "column": 20
                                                      },
                                                      "end": {
                                                        "row": 15,
                                                        "column": 21
                                                      },
                                                      "text": ")"
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "==",
                                              "start": {
                                                "row": 15,
                                                "column": 22
                                              },
                                              "end": {
                                                "row": 15,
                                                "column": 24
                                              },
                                              "text": "=="
                                            },
                                            {
                                              "type": "field_access",
                                              "start": {
                                                "row": 15,
                                                "column": 25
                                              },
                                              "end": {
                                                "row": 15,
                                                "column": 43
                                              },
                                              "text": "IdleState.ALL_IDLE",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 15,
                                                    "column": 25
                                                  },
                                                  "end": {
                                                    "row": 15,
                                                    "column": 34
                                                  },
                                                  "text": "IdleState"
                                                },
                                                {
                                                  "type": ".",
                                                  "start": {
                                                    "row": 15,
                                                    "column": 34
                                                  },
                                                  "end": {
                                                    "row": 15,
                                                    "column": 35
                                                  },
                                                  "text": "."
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 15,
                                                    "column": 35
                                                  },
                                                  "end": {
                                                    "row": 15,
                                                    "column": 43
                                                  },
                                                  "text": "ALL_IDLE"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "&&",
                                          "start": {
                                            "row": 15,
                                            "column": 44
                                          },
                                          "end": {
                                            "row": 15,
                                            "column": 46
                                          },
                                          "text": "&&"
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 15,
                                            "column": 47
                                          },
                                          "end": {
                                            "row": 15,
                                            "column": 64
                                          },
                                          "text": "isActuallyOverdue"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 15,
                                        "column": 64
                                      },
                                      "end": {
                                        "row": 15,
                                        "column": 65
                                      },
                                      "text": ")"
                                    }
                                  ]
                                },
                                {
                                  "type": "block",
                                  "start": {
                                    "row": 15,
                                    "column": 66
                                  },
                                  "end": {
                                    "row": 28,
                                    "column": 9
                                  },
                                  "text": "{\n          if (hasInFlightRequests) {\n            String address = getRemoteAddress(ctx.channel());\n            logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000);\n            client.timeOut();\n            ctx.close();\n          } else if (closeIdleConnections) {\n            // While CloseIdleConnections is enable, we also close idle connection\n            client.timeOut();\n            ctx.close();\n          }\n        }",
                                  "children": [
                                    {
                                      "type": "{",
                                      "start": {
                                        "row": 15,
                                        "column": 66
                                      },
                                      "end": {
                                        "row": 15,
                                        "column": 67
                                      },
                                      "text": "{"
                                    },
                                    {
                                      "type": "if_statement",
                                      "start": {
                                        "row": 16,
                                        "column": 10
                                      },
                                      "end": {
                                        "row": 27,
                                        "column": 11
                                      },
                                      "text": "if (hasInFlightRequests) {\n            String address = getRemoteAddress(ctx.channel());\n            logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000);\n            client.timeOut();\n            ctx.close();\n          } else if (closeIdleConnections) {\n            // While CloseIdleConnections is enable, we also close idle connection\n            client.timeOut();\n            ctx.close();\n          }",
                                      "children": [
                                        {
                                          "type": "if",
                                          "start": {
                                            "row": 16,
                                            "column": 10
                                          },
                                          "end": {
                                            "row": 16,
                                            "column": 12
                                          },
                                          "text": "if"
                                        },
                                        {
                                          "type": "condition",
                                          "start": {
                                            "row": 16,
                                            "column": 13
                                          },
                                          "end": {
                                            "row": 16,
                                            "column": 34
                                          },
                                          "text": "(hasInFlightRequests)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start": {
                                                "row": 16,
                                                "column": 13
                                              },
                                              "end": {
                                                "row": 16,
                                                "column": 14
                                              },
                                              "text": "("
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 16,
                                                "column": 14
                                              },
                                              "end": {
                                                "row": 16,
                                                "column": 33
                                              },
                                              "text": "hasInFlightRequests"
                                            },
                                            {
                                              "type": ")",
                                              "start": {
                                                "row": 16,
                                                "column": 33
                                              },
                                              "end": {
                                                "row": 16,
                                                "column": 34
                                              },
                                              "text": ")"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "block",
                                          "start": {
                                            "row": 16,
                                            "column": 35
                                          },
                                          "end": {
                                            "row": 23,
                                            "column": 11
                                          },
                                          "text": "{\n            String address = getRemoteAddress(ctx.channel());\n            logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000);\n            client.timeOut();\n            ctx.close();\n          }",
                                          "children": [
                                            {
                                              "type": "{",
                                              "start": {
                                                "row": 16,
                                                "column": 35
                                              },
                                              "end": {
                                                "row": 16,
                                                "column": 36
                                              },
                                              "text": "{"
                                            },
                                            {
                                              "type": "local_variable_declaration",
                                              "start": {
                                                "row": 17,
                                                "column": 12
                                              },
                                              "end": {
                                                "row": 17,
                                                "column": 61
                                              },
                                              "text": "String address = getRemoteAddress(ctx.channel());",
                                              "children": [
                                                {
                                                  "type": "type_identifier",
                                                  "start": {
                                                    "row": 17,
                                                    "column": 12
                                                  },
                                                  "end": {
                                                    "row": 17,
                                                    "column": 18
                                                  },
                                                  "text": "String"
                                                },
                                                {
                                                  "type": "variable_declarator",
                                                  "start": {
                                                    "row": 17,
                                                    "column": 19
                                                  },
                                                  "end": {
                                                    "row": 17,
                                                    "column": 60
                                                  },
                                                  "text": "address = getRemoteAddress(ctx.channel())",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 17,
                                                        "column": 19
                                                      },
                                                      "end": {
                                                        "row": 17,
                                                        "column": 26
                                                      },
                                                      "text": "address"
                                                    },
                                                    {
                                                      "type": "=",
                                                      "start": {
                                                        "row": 17,
                                                        "column": 27
                                                      },
                                                      "end": {
                                                        "row": 17,
                                                        "column": 28
                                                      },
                                                      "text": "="
                                                    },
                                                    {
                                                      "type": "method_invocation",
                                                      "start": {
                                                        "row": 17,
                                                        "column": 29
                                                      },
                                                      "end": {
                                                        "row": 17,
                                                        "column": 60
                                                      },
                                                      "text": "getRemoteAddress(ctx.channel())",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 17,
                                                            "column": 29
                                                          },
                                                          "end": {
                                                            "row": 17,
                                                            "column": 45
                                                          },
                                                          "text": "getRemoteAddress"
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "start": {
                                                            "row": 17,
                                                            "column": 45
                                                          },
                                                          "end": {
                                                            "row": 17,
                                                            "column": 60
                                                          },
                                                          "text": "(ctx.channel())",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "start": {
                                                                "row": 17,
                                                                "column": 45
                                                              },
                                                              "end": {
                                                                "row": 17,
                                                                "column": 46
                                                              },
                                                              "text": "("
                                                            },
                                                            {
                                                              "type": "method_invocation",
                                                              "start": {
                                                                "row": 17,
                                                                "column": 46
                                                              },
                                                              "end": {
                                                                "row": 17,
                                                                "column": 59
                                                              },
                                                              "text": "ctx.channel()",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 17,
                                                                    "column": 46
                                                                  },
                                                                  "end": {
                                                                    "row": 17,
                                                                    "column": 49
                                                                  },
                                                                  "text": "ctx"
                                                                },
                                                                {
                                                                  "type": ".",
                                                                  "start": {
                                                                    "row": 17,
                                                                    "column": 49
                                                                  },
                                                                  "end": {
                                                                    "row": 17,
                                                                    "column": 50
                                                                  },
                                                                  "text": "."
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 17,
                                                                    "column": 50
                                                                  },
                                                                  "end": {
                                                                    "row": 17,
                                                                    "column": 57
                                                                  },
                                                                  "text": "channel"
                                                                },
                                                                {
                                                                  "type": "argument_list",
                                                                  "start": {
                                                                    "row": 17,
                                                                    "column": 57
                                                                  },
                                                                  "end": {
                                                                    "row": 17,
                                                                    "column": 59
                                                                  },
                                                                  "text": "()",
                                                                  "children": [
                                                                    {
                                                                      "type": "(",
                                                                      "start": {
                                                                        "row": 17,
                                                                        "column": 57
                                                                      },
                                                                      "end": {
                                                                        "row": 17,
                                                                        "column": 58
                                                                      },
                                                                      "text": "("
                                                                    },
                                                                    {
                                                                      "type": ")",
                                                                      "start": {
                                                                        "row": 17,
                                                                        "column": 58
                                                                      },
                                                                      "end": {
                                                                        "row": 17,
                                                                        "column": 59
                                                                      },
                                                                      "text": ")"
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": ")",
                                                              "start": {
                                                                "row": 17,
                                                                "column": 59
                                                              },
                                                              "end": {
                                                                "row": 17,
                                                                "column": 60
                                                              },
                                                              "text": ")"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ";",
                                                  "start": {
                                                    "row": 17,
                                                    "column": 60
                                                  },
                                                  "end": {
                                                    "row": 17,
                                                    "column": 61
                                                  },
                                                  "text": ";"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "expression_statement",
                                              "start": {
                                                "row": 18,
                                                "column": 12
                                              },
                                              "end": {
                                                "row": 20,
                                                "column": 73
                                              },
                                              "text": "logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000);",
                                              "children": [
                                                {
                                                  "type": "method_invocation",
                                                  "start": {
                                                    "row": 18,
                                                    "column": 12
                                                  },
                                                  "end": {
                                                    "row": 20,
                                                    "column": 72
                                                  },
                                                  "text": "logger.error(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000)",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 18,
                                                        "column": 12
                                                      },
                                                      "end": {
                                                        "row": 18,
                                                        "column": 18
                                                      },
                                                      "text": "logger"
                                                    },
                                                    {
                                                      "type": ".",
                                                      "start": {
                                                        "row": 18,
                                                        "column": 18
                                                      },
                                                      "end": {
                                                        "row": 18,
                                                        "column": 19
                                                      },
                                                      "text": "."
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 18,
                                                        "column": 19
                                                      },
                                                      "end": {
                                                        "row": 18,
                                                        "column": 24
                                                      },
                                                      "text": "error"
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "start": {
                                                        "row": 18,
                                                        "column": 24
                                                      },
                                                      "end": {
                                                        "row": 20,
                                                        "column": 72
                                                      },
                                                      "text": "(\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\", address, requestTimeoutNs / 1000 / 1000)",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "start": {
                                                            "row": 18,
                                                            "column": 24
                                                          },
                                                          "end": {
                                                            "row": 18,
                                                            "column": 25
                                                          },
                                                          "text": "("
                                                        },
                                                        {
                                                          "type": "binary_expression",
                                                          "start": {
                                                            "row": 18,
                                                            "column": 25
                                                          },
                                                          "end": {
                                                            "row": 20,
                                                            "column": 30
                                                          },
                                                          "text": "\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \" +\n              \"this is wrong.\"",
                                                          "children": [
                                                            {
                                                              "type": "binary_expression",
                                                              "start": {
                                                                "row": 18,
                                                                "column": 25
                                                              },
                                                              "end": {
                                                                "row": 19,
                                                                "column": 94
                                                              },
                                                              "text": "\"Connection to {} has been quiet for {} ms while there are outstanding \" +\n              \"requests. Assuming connection is dead; please adjust spark.network.timeout if \"",
                                                              "children": [
                                                                {
                                                                  "type": "string_literal",
                                                                  "start": {
                                                                    "row": 18,
                                                                    "column": 25
                                                                  },
                                                                  "end": {
                                                                    "row": 18,
                                                                    "column": 97
                                                                  },
                                                                  "text": "\"Connection to {} has been quiet for {} ms while there are outstanding \"",
                                                                  "children": [
                                                                    {
                                                                      "type": "\"",
                                                                      "start": {
                                                                        "row": 18,
                                                                        "column": 25
                                                                      },
                                                                      "end": {
                                                                        "row": 18,
                                                                        "column": 26
                                                                      },
                                                                      "text": "\""
                                                                    },
                                                                    {
                                                                      "type": "string_fragment",
                                                                      "start": {
                                                                        "row": 18,
                                                                        "column": 26
                                                                      },
                                                                      "end": {
                                                                        "row": 18,
                                                                        "column": 96
                                                                      },
                                                                      "text": "Connection to {} has been quiet for {} ms while there are outstanding "
                                                                    },
                                                                    {
                                                                      "type": "\"",
                                                                      "start": {
                                                                        "row": 18,
                                                                        "column": 96
                                                                      },
                                                                      "end": {
                                                                        "row": 18,
                                                                        "column": 97
                                                                      },
                                                                      "text": "\""
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "type": "+",
                                                                  "start": {
                                                                    "row": 18,
                                                                    "column": 98
                                                                  },
                                                                  "end": {
                                                                    "row": 18,
                                                                    "column": 99
                                                                  },
                                                                  "text": "+"
                                                                },
                                                                {
                                                                  "type": "string_literal",
                                                                  "start": {
                                                                    "row": 19,
                                                                    "column": 14
                                                                  },
                                                                  "end": {
                                                                    "row": 19,
                                                                    "column": 94
                                                                  },
                                                                  "text": "\"requests. Assuming connection is dead; please adjust spark.network.timeout if \"",
                                                                  "children": [
                                                                    {
                                                                      "type": "\"",
                                                                      "start": {
                                                                        "row": 19,
                                                                        "column": 14
                                                                      },
                                                                      "end": {
                                                                        "row": 19,
                                                                        "column": 15
                                                                      },
                                                                      "text": "\""
                                                                    },
                                                                    {
                                                                      "type": "string_fragment",
                                                                      "start": {
                                                                        "row": 19,
                                                                        "column": 15
                                                                      },
                                                                      "end": {
                                                                        "row": 19,
                                                                        "column": 93
                                                                      },
                                                                      "text": "requests. Assuming connection is dead; please adjust spark.network.timeout if "
                                                                    },
                                                                    {
                                                                      "type": "\"",
                                                                      "start": {
                                                                        "row": 19,
                                                                        "column": 93
                                                                      },
                                                                      "end": {
                                                                        "row": 19,
                                                                        "column": 94
                                                                      },
                                                                      "text": "\""
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "+",
                                                              "start": {
                                                                "row": 19,
                                                                "column": 95
                                                              },
                                                              "end": {
                                                                "row": 19,
                                                                "column": 96
                                                              },
                                                              "text": "+"
                                                            },
                                                            {
                                                              "type": "string_literal",
                                                              "start": {
                                                                "row": 20,
                                                                "column": 14
                                                              },
                                                              "end": {
                                                                "row": 20,
                                                                "column": 30
                                                              },
                                                              "text": "\"this is wrong.\"",
                                                              "children": [
                                                                {
                                                                  "type": "\"",
                                                                  "start": {
                                                                    "row": 20,
                                                                    "column": 14
                                                                  },
                                                                  "end": {
                                                                    "row": 20,
                                                                    "column": 15
                                                                  },
                                                                  "text": "\""
                                                                },
                                                                {
                                                                  "type": "string_fragment",
                                                                  "start": {
                                                                    "row": 20,
                                                                    "column": 15
                                                                  },
                                                                  "end": {
                                                                    "row": 20,
                                                                    "column": 29
                                                                  },
                                                                  "text": "this is wrong."
                                                                },
                                                                {
                                                                  "type": "\"",
                                                                  "start": {
                                                                    "row": 20,
                                                                    "column": 29
                                                                  },
                                                                  "end": {
                                                                    "row": 20,
                                                                    "column": 30
                                                                  },
                                                                  "text": "\""
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": ",",
                                                          "start": {
                                                            "row": 20,
                                                            "column": 30
                                                          },
                                                          "end": {
                                                            "row": 20,
                                                            "column": 31
                                                          },
                                                          "text": ","
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 20,
                                                            "column": 32
                                                          },
                                                          "end": {
                                                            "row": 20,
                                                            "column": 39
                                                          },
                                                          "text": "address"
                                                        },
                                                        {
                                                          "type": ",",
                                                          "start": {
                                                            "row": 20,
                                                            "column": 39
                                                          },
                                                          "end": {
                                                            "row": 20,
                                                            "column": 40
                                                          },
                                                          "text": ","
                                                        },
                                                        {
                                                          "type": "binary_expression",
                                                          "start": {
                                                            "row": 20,
                                                            "column": 41
                                                          },
                                                          "end": {
                                                            "row": 20,
                                                            "column": 71
                                                          },
                                                          "text": "requestTimeoutNs / 1000 / 1000",
                                                          "children": [
                                                            {
                                                              "type": "binary_expression",
                                                              "start": {
                                                                "row": 20,
                                                                "column": 41
                                                              },
                                                              "end": {
                                                                "row": 20,
                                                                "column": 64
                                                              },
                                                              "text": "requestTimeoutNs / 1000",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "start": {
                                                                    "row": 20,
                                                                    "column": 41
                                                                  },
                                                                  "end": {
                                                                    "row": 20,
                                                                    "column": 57
                                                                  },
                                                                  "text": "requestTimeoutNs"
                                                                },
                                                                {
                                                                  "type": "/",
                                                                  "start": {
                                                                    "row": 20,
                                                                    "column": 58
                                                                  },
                                                                  "end": {
                                                                    "row": 20,
                                                                    "column": 59
                                                                  },
                                                                  "text": "/"
                                                                },
                                                                {
                                                                  "type": "decimal_integer_literal",
                                                                  "start": {
                                                                    "row": 20,
                                                                    "column": 60
                                                                  },
                                                                  "end": {
                                                                    "row": 20,
                                                                    "column": 64
                                                                  },
                                                                  "text": "1000"
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "/",
                                                              "start": {
                                                                "row": 20,
                                                                "column": 65
                                                              },
                                                              "end": {
                                                                "row": 20,
                                                                "column": 66
                                                              },
                                                              "text": "/"
                                                            },
                                                            {
                                                              "type": "decimal_integer_literal",
                                                              "start": {
                                                                "row": 20,
                                                                "column": 67
                                                              },
                                                              "end": {
                                                                "row": 20,
                                                                "column": 71
                                                              },
                                                              "text": "1000"
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": ")",
                                                          "start": {
                                                            "row": 20,
                                                            "column": 71
                                                          },
                                                          "end": {
                                                            "row": 20,
                                                            "column": 72
                                                          },
                                                          "text": ")"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ";",
                                                  "start": {
                                                    "row": 20,
                                                    "column": 72
                                                  },
                                                  "end": {
                                                    "row": 20,
                                                    "column": 73
                                                  },
                                                  "text": ";"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "expression_statement",
                                              "start": {
                                                "row": 21,
                                                "column": 12
                                              },
                                              "end": {
                                                "row": 21,
                                                "column": 29
                                              },
                                              "text": "client.timeOut();",
                                              "children": [
                                                {
                                                  "type": "method_invocation",
                                                  "start": {
                                                    "row": 21,
                                                    "column": 12
                                                  },
                                                  "end": {
                                                    "row": 21,
                                                    "column": 28
                                                  },
                                                  "text": "client.timeOut()",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 21,
                                                        "column": 12
                                                      },
                                                      "end": {
                                                        "row": 21,
                                                        "column": 18
                                                      },
                                                      "text": "client"
                                                    },
                                                    {
                                                      "type": ".",
                                                      "start": {
                                                        "row": 21,
                                                        "column": 18
                                                      },
                                                      "end": {
                                                        "row": 21,
                                                        "column": 19
                                                      },
                                                      "text": "."
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 21,
                                                        "column": 19
                                                      },
                                                      "end": {
                                                        "row": 21,
                                                        "column": 26
                                                      },
                                                      "text": "timeOut"
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "start": {
                                                        "row": 21,
                                                        "column": 26
                                                      },
                                                      "end": {
                                                        "row": 21,
                                                        "column": 28
                                                      },
                                                      "text": "()",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "start": {
                                                            "row": 21,
                                                            "column": 26
                                                          },
                                                          "end": {
                                                            "row": 21,
                                                            "column": 27
                                                          },
                                                          "text": "("
                                                        },
                                                        {
                                                          "type": ")",
                                                          "start": {
                                                            "row": 21,
                                                            "column": 27
                                                          },
                                                          "end": {
                                                            "row": 21,
                                                            "column": 28
                                                          },
                                                          "text": ")"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ";",
                                                  "start": {
                                                    "row": 21,
                                                    "column": 28
                                                  },
                                                  "end": {
                                                    "row": 21,
                                                    "column": 29
                                                  },
                                                  "text": ";"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "expression_statement",
                                              "start": {
                                                "row": 22,
                                                "column": 12
                                              },
                                              "end": {
                                                "row": 22,
                                                "column": 24
                                              },
                                              "text": "ctx.close();",
                                              "children": [
                                                {
                                                  "type": "method_invocation",
                                                  "start": {
                                                    "row": 22,
                                                    "column": 12
                                                  },
                                                  "end": {
                                                    "row": 22,
                                                    "column": 23
                                                  },
                                                  "text": "ctx.close()",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 22,
                                                        "column": 12
                                                      },
                                                      "end": {
                                                        "row": 22,
                                                        "column": 15
                                                      },
                                                      "text": "ctx"
                                                    },
                                                    {
                                                      "type": ".",
                                                      "start": {
                                                        "row": 22,
                                                        "column": 15
                                                      },
                                                      "end": {
                                                        "row": 22,
                                                        "column": 16
                                                      },
                                                      "text": "."
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start": {
                                                        "row": 22,
                                                        "column": 16
                                                      },
                                                      "end": {
                                                        "row": 22,
                                                        "column": 21
                                                      },
                                                      "text": "close"
                                                    },
                                                    {
                                                      "type": "argument_list",
                                                      "start": {
                                                        "row": 22,
                                                        "column": 21
                                                      },
                                                      "end": {
                                                        "row": 22,
                                                        "column": 23
                                                      },
                                                      "text": "()",
                                                      "children": [
                                                        {
                                                          "type": "(",
                                                          "start": {
                                                            "row": 22,
                                                            "column": 21
                                                          },
                                                          "end": {
                                                            "row": 22,
                                                            "column": 22
                                                          },
                                                          "text": "("
                                                        },
                                                        {
                                                          "type": ")",
                                                          "start": {
                                                            "row": 22,
                                                            "column": 22
                                                          },
                                                          "end": {
                                                            "row": 22,
                                                            "column": 23
                                                          },
                                                          "text": ")"
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ";",
                                                  "start": {
                                                    "row": 22,
                                                    "column": 23
                                                  },
                                                  "end": {
                                                    "row": 22,
                                                    "column": 24
                                                  },
                                                  "text": ";"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "}",
                                              "start": {
                                                "row": 23,
                                                "column": 10
                                              },
                                              "end": {
                                                "row": 23,
                                                "column": 11
                                              },
                                              "text": "}"
                                            }
                                          ]
                                        },
                                        {
                                          "type": "else",
                                          "start": {
                                            "row": 23,
                                            "column": 12
                                          },
                                          "end": {
                                            "row": 23,
                                            "column": 16
                                          },
                                          "text": "else"
                                        },
                                        {
                                          "type": "if_statement",
                                          "start": {
                                            "row": 23,
                                            "column": 17
                                          },
                                          "end": {
                                            "row": 27,
                                            "column": 11
                                          },
                                          "text": "if (closeIdleConnections) {\n            // While CloseIdleConnections is enable, we also close idle connection\n            client.timeOut();\n            ctx.close();\n          }",
                                          "children": [
                                            {
                                              "type": "if",
                                              "start": {
                                                "row": 23,
                                                "column": 17
                                              },
                                              "end": {
                                                "row": 23,
                                                "column": 19
                                              },
                                              "text": "if"
                                            },
                                            {
                                              "type": "condition",
                                              "start": {
                                                "row": 23,
                                                "column": 20
                                              },
                                              "end": {
                                                "row": 23,
                                                "column": 42
                                              },
                                              "text": "(closeIdleConnections)",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 23,
                                                    "column": 20
                                                  },
                                                  "end": {
                                                    "row": 23,
                                                    "column": 21
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start": {
                                                    "row": 23,
                                                    "column": 21
                                                  },
                                                  "end": {
                                                    "row": 23,
                                                    "column": 41
                                                  },
                                                  "text": "closeIdleConnections"
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 23,
                                                    "column": 41
                                                  },
                                                  "end": {
                                                    "row": 23,
                                                    "column": 42
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "block",
                                              "start": {
                                                "row": 23,
                                                "column": 43
                                              },
                                              "end": {
                                                "row": 27,
                                                "column": 11
                                              },
                                              "text": "{\n            // While CloseIdleConnections is enable, we also close idle connection\n            client.timeOut();\n            ctx.close();\n          }",
                                              "children": [
                                                {
                                                  "type": "{",
                                                  "start": {
                                                    "row": 23,
                                                    "column": 43
                                                  },
                                                  "end": {
                                                    "row": 23,
                                                    "column": 44
                                                  },
                                                  "text": "{"
                                                },
                                                {
                                                  "type": "line_comment",
                                                  "start": {
                                                    "row": 24,
                                                    "column": 12
                                                  },
                                                  "end": {
                                                    "row": 24,
                                                    "column": 82
                                                  },
                                                  "text": "// While CloseIdleConnections is enable, we also close idle connection"
                                                },
                                                {
                                                  "type": "expression_statement",
                                                  "start": {
                                                    "row": 25,
                                                    "column": 12
                                                  },
                                                  "end": {
                                                    "row": 25,
                                                    "column": 29
                                                  },
                                                  "text": "client.timeOut();",
                                                  "children": [
                                                    {
                                                      "type": "method_invocation",
                                                      "start": {
                                                        "row": 25,
                                                        "column": 12
                                                      },
                                                      "end": {
                                                        "row": 25,
                                                        "column": 28
                                                      },
                                                      "text": "client.timeOut()",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 25,
                                                            "column": 12
                                                          },
                                                          "end": {
                                                            "row": 25,
                                                            "column": 18
                                                          },
                                                          "text": "client"
                                                        },
                                                        {
                                                          "type": ".",
                                                          "start": {
                                                            "row": 25,
                                                            "column": 18
                                                          },
                                                          "end": {
                                                            "row": 25,
                                                            "column": 19
                                                          },
                                                          "text": "."
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 25,
                                                            "column": 19
                                                          },
                                                          "end": {
                                                            "row": 25,
                                                            "column": 26
                                                          },
                                                          "text": "timeOut"
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "start": {
                                                            "row": 25,
                                                            "column": 26
                                                          },
                                                          "end": {
                                                            "row": 25,
                                                            "column": 28
                                                          },
                                                          "text": "()",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "start": {
                                                                "row": 25,
                                                                "column": 26
                                                              },
                                                              "end": {
                                                                "row": 25,
                                                                "column": 27
                                                              },
                                                              "text": "("
                                                            },
                                                            {
                                                              "type": ")",
                                                              "start": {
                                                                "row": 25,
                                                                "column": 27
                                                              },
                                                              "end": {
                                                                "row": 25,
                                                                "column": 28
                                                              },
                                                              "text": ")"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ";",
                                                      "start": {
                                                        "row": 25,
                                                        "column": 28
                                                      },
                                                      "end": {
                                                        "row": 25,
                                                        "column": 29
                                                      },
                                                      "text": ";"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "expression_statement",
                                                  "start": {
                                                    "row": 26,
                                                    "column": 12
                                                  },
                                                  "end": {
                                                    "row": 26,
                                                    "column": 24
                                                  },
                                                  "text": "ctx.close();",
                                                  "children": [
                                                    {
                                                      "type": "method_invocation",
                                                      "start": {
                                                        "row": 26,
                                                        "column": 12
                                                      },
                                                      "end": {
                                                        "row": 26,
                                                        "column": 23
                                                      },
                                                      "text": "ctx.close()",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 26,
                                                            "column": 12
                                                          },
                                                          "end": {
                                                            "row": 26,
                                                            "column": 15
                                                          },
                                                          "text": "ctx"
                                                        },
                                                        {
                                                          "type": ".",
                                                          "start": {
                                                            "row": 26,
                                                            "column": 15
                                                          },
                                                          "end": {
                                                            "row": 26,
                                                            "column": 16
                                                          },
                                                          "text": "."
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start": {
                                                            "row": 26,
                                                            "column": 16
                                                          },
                                                          "end": {
                                                            "row": 26,
                                                            "column": 21
                                                          },
                                                          "text": "close"
                                                        },
                                                        {
                                                          "type": "argument_list",
                                                          "start": {
                                                            "row": 26,
                                                            "column": 21
                                                          },
                                                          "end": {
                                                            "row": 26,
                                                            "column": 23
                                                          },
                                                          "text": "()",
                                                          "children": [
                                                            {
                                                              "type": "(",
                                                              "start": {
                                                                "row": 26,
                                                                "column": 21
                                                              },
                                                              "end": {
                                                                "row": 26,
                                                                "column": 22
                                                              },
                                                              "text": "("
                                                            },
                                                            {
                                                              "type": ")",
                                                              "start": {
                                                                "row": 26,
                                                                "column": 22
                                                              },
                                                              "end": {
                                                                "row": 26,
                                                                "column": 23
                                                              },
                                                              "text": ")"
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ";",
                                                      "start": {
                                                        "row": 26,
                                                        "column": 23
                                                      },
                                                      "end": {
                                                        "row": 26,
                                                        "column": 24
                                                      },
                                                      "text": ";"
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "}",
                                                  "start": {
                                                    "row": 27,
                                                    "column": 10
                                                  },
                                                  "end": {
                                                    "row": 27,
                                                    "column": 11
                                                  },
                                                  "text": "}"
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "}",
                                      "start": {
                                        "row": 28,
                                        "column": 8
                                      },
                                      "end": {
                                        "row": 28,
                                        "column": 9
                                      },
                                      "text": "}"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start": {
                                "row": 29,
                                "column": 6
                              },
                              "end": {
                                "row": 29,
                                "column": 7
                              },
                              "text": "}"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start": {
                        "row": 30,
                        "column": 4
                      },
                      "end": {
                        "row": 30,
                        "column": 5
                      },
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start": {
                "row": 31,
                "column": 4
              },
              "end": {
                "row": 31,
                "column": 36
              },
              "text": "ctx.fireUserEventTriggered(evt);",
              "children": [
                {
                  "type": "method_invocation",
                  "start": {
                    "row": 31,
                    "column": 4
                  },
                  "end": {
                    "row": 31,
                    "column": 35
                  },
                  "text": "ctx.fireUserEventTriggered(evt)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 31,
                        "column": 4
                      },
                      "end": {
                        "row": 31,
                        "column": 7
                      },
                      "text": "ctx"
                    },
                    {
                      "type": ".",
                      "start": {
                        "row": 31,
                        "column": 7
                      },
                      "end": {
                        "row": 31,
                        "column": 8
                      },
                      "text": "."
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 31,
                        "column": 8
                      },
                      "end": {
                        "row": 31,
                        "column": 30
                      },
                      "text": "fireUserEventTriggered"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 31,
                        "column": 30
                      },
                      "end": {
                        "row": 31,
                        "column": 35
                      },
                      "text": "(evt)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 31,
                            "column": 30
                          },
                          "end": {
                            "row": 31,
                            "column": 31
                          },
                          "text": "("
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 31,
                            "column": 31
                          },
                          "end": {
                            "row": 31,
                            "column": 34
                          },
                          "text": "evt"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 31,
                            "column": 34
                          },
                          "end": {
                            "row": 31,
                            "column": 35
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start": {
                    "row": 31,
                    "column": 35
                  },
                  "end": {
                    "row": 31,
                    "column": 36
                  },
                  "text": ";"
                }
              ]
            },
            {
              "type": "}",
              "start": {
                "row": 32,
                "column": 2
              },
              "end": {
                "row": 32,
                "column": 3
              },
              "text": "}"
            }
          ]
        }
      ]
    }
  ]
}