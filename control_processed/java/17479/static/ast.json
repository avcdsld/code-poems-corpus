{
  "type": "program",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 33,
    "column": 5
  },
  "text": "public void setLayerMaskArrays(INDArray featuresMaskArray, INDArray labelsMaskArray) {\n        if (featuresMaskArray != null) {\n\n            // FIXME: int cast\n            //New approach: use feedForwardMaskArray method\n            feedForwardMaskArray(featuresMaskArray, MaskState.Active, (int) featuresMaskArray.size(0));\n\n\n            /*\n            //feedforward layers below a RNN layer: need the input (features) mask array\n            //Reason: even if the time series input is zero padded, the output from the dense layers are\n            // non-zero (i.e., activationFunction(0*weights + bias) != 0 in general)\n            //This assumes that the time series input is masked - i.e., values are 0 at the padded time steps,\n            // so we don't need to do anything for the recurrent layer\n            \n            //Now, if mask array is 2d -> need to reshape to 1d (column vector) in the exact same order\n            // as is done for 3d -> 2d time series reshaping\n            INDArray reshapedFeaturesMask = TimeSeriesUtils.reshapeTimeSeriesMaskToVector(featuresMaskArray);\n            \n            for( int i=0; i<layers.length-1; i++ ){\n                Type t = layers[i].type();\n                if( t == Type.CONVOLUTIONAL || t == Type.FEED_FORWARD ){\n                    layers[i].setMaskArray(reshapedFeaturesMask);\n                } else if( t == Type.RECURRENT ) break;\n            \n            }\n            */\n        }\n        if (labelsMaskArray != null) {\n            if (!(getOutputLayer() instanceof IOutputLayer))\n                return;\n            layers[layers.length - 1].setMaskArray(labelsMaskArray);\n        }\n    }",
  "children": [
    {
      "type": "method_declaration",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 33,
        "column": 5
      },
      "text": "public void setLayerMaskArrays(INDArray featuresMaskArray, INDArray labelsMaskArray) {\n        if (featuresMaskArray != null) {\n\n            // FIXME: int cast\n            //New approach: use feedForwardMaskArray method\n            feedForwardMaskArray(featuresMaskArray, MaskState.Active, (int) featuresMaskArray.size(0));\n\n\n            /*\n            //feedforward layers below a RNN layer: need the input (features) mask array\n            //Reason: even if the time series input is zero padded, the output from the dense layers are\n            // non-zero (i.e., activationFunction(0*weights + bias) != 0 in general)\n            //This assumes that the time series input is masked - i.e., values are 0 at the padded time steps,\n            // so we don't need to do anything for the recurrent layer\n            \n            //Now, if mask array is 2d -> need to reshape to 1d (column vector) in the exact same order\n            // as is done for 3d -> 2d time series reshaping\n            INDArray reshapedFeaturesMask = TimeSeriesUtils.reshapeTimeSeriesMaskToVector(featuresMaskArray);\n            \n            for( int i=0; i<layers.length-1; i++ ){\n                Type t = layers[i].type();\n                if( t == Type.CONVOLUTIONAL || t == Type.FEED_FORWARD ){\n                    layers[i].setMaskArray(reshapedFeaturesMask);\n                } else if( t == Type.RECURRENT ) break;\n            \n            }\n            */\n        }\n        if (labelsMaskArray != null) {\n            if (!(getOutputLayer() instanceof IOutputLayer))\n                return;\n            layers[layers.length - 1].setMaskArray(labelsMaskArray);\n        }\n    }",
      "children": [
        {
          "type": "modifiers",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 6
          },
          "text": "public",
          "children": [
            {
              "type": "public",
              "start": {
                "row": 0,
                "column": 0
              },
              "end": {
                "row": 0,
                "column": 6
              },
              "text": "public"
            }
          ]
        },
        {
          "type": "void_type",
          "start": {
            "row": 0,
            "column": 7
          },
          "end": {
            "row": 0,
            "column": 11
          },
          "text": "void"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 12
          },
          "end": {
            "row": 0,
            "column": 30
          },
          "text": "setLayerMaskArrays"
        },
        {
          "type": "formal_parameters",
          "start": {
            "row": 0,
            "column": 30
          },
          "end": {
            "row": 0,
            "column": 84
          },
          "text": "(INDArray featuresMaskArray, INDArray labelsMaskArray)",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 30
              },
              "end": {
                "row": 0,
                "column": 31
              },
              "text": "("
            },
            {
              "type": "formal_parameter",
              "start": {
                "row": 0,
                "column": 31
              },
              "end": {
                "row": 0,
                "column": 57
              },
              "text": "INDArray featuresMaskArray",
              "children": [
                {
                  "type": "type_identifier",
                  "start": {
                    "row": 0,
                    "column": 31
                  },
                  "end": {
                    "row": 0,
                    "column": 39
                  },
                  "text": "INDArray"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 40
                  },
                  "end": {
                    "row": 0,
                    "column": 57
                  },
                  "text": "featuresMaskArray"
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 57
              },
              "end": {
                "row": 0,
                "column": 58
              },
              "text": ","
            },
            {
              "type": "formal_parameter",
              "start": {
                "row": 0,
                "column": 59
              },
              "end": {
                "row": 0,
                "column": 83
              },
              "text": "INDArray labelsMaskArray",
              "children": [
                {
                  "type": "type_identifier",
                  "start": {
                    "row": 0,
                    "column": 59
                  },
                  "end": {
                    "row": 0,
                    "column": 67
                  },
                  "text": "INDArray"
                },
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 68
                  },
                  "end": {
                    "row": 0,
                    "column": 83
                  },
                  "text": "labelsMaskArray"
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 83
              },
              "end": {
                "row": 0,
                "column": 84
              },
              "text": ")"
            }
          ]
        },
        {
          "type": "block",
          "start": {
            "row": 0,
            "column": 85
          },
          "end": {
            "row": 33,
            "column": 5
          },
          "text": "{\n        if (featuresMaskArray != null) {\n\n            // FIXME: int cast\n            //New approach: use feedForwardMaskArray method\n            feedForwardMaskArray(featuresMaskArray, MaskState.Active, (int) featuresMaskArray.size(0));\n\n\n            /*\n            //feedforward layers below a RNN layer: need the input (features) mask array\n            //Reason: even if the time series input is zero padded, the output from the dense layers are\n            // non-zero (i.e., activationFunction(0*weights + bias) != 0 in general)\n            //This assumes that the time series input is masked - i.e., values are 0 at the padded time steps,\n            // so we don't need to do anything for the recurrent layer\n            \n            //Now, if mask array is 2d -> need to reshape to 1d (column vector) in the exact same order\n            // as is done for 3d -> 2d time series reshaping\n            INDArray reshapedFeaturesMask = TimeSeriesUtils.reshapeTimeSeriesMaskToVector(featuresMaskArray);\n            \n            for( int i=0; i<layers.length-1; i++ ){\n                Type t = layers[i].type();\n                if( t == Type.CONVOLUTIONAL || t == Type.FEED_FORWARD ){\n                    layers[i].setMaskArray(reshapedFeaturesMask);\n                } else if( t == Type.RECURRENT ) break;\n            \n            }\n            */\n        }\n        if (labelsMaskArray != null) {\n            if (!(getOutputLayer() instanceof IOutputLayer))\n                return;\n            layers[layers.length - 1].setMaskArray(labelsMaskArray);\n        }\n    }",
          "children": [
            {
              "type": "{",
              "start": {
                "row": 0,
                "column": 85
              },
              "end": {
                "row": 0,
                "column": 86
              },
              "text": "{"
            },
            {
              "type": "if_statement",
              "start": {
                "row": 1,
                "column": 8
              },
              "end": {
                "row": 27,
                "column": 9
              },
              "text": "if (featuresMaskArray != null) {\n\n            // FIXME: int cast\n            //New approach: use feedForwardMaskArray method\n            feedForwardMaskArray(featuresMaskArray, MaskState.Active, (int) featuresMaskArray.size(0));\n\n\n            /*\n            //feedforward layers below a RNN layer: need the input (features) mask array\n            //Reason: even if the time series input is zero padded, the output from the dense layers are\n            // non-zero (i.e., activationFunction(0*weights + bias) != 0 in general)\n            //This assumes that the time series input is masked - i.e., values are 0 at the padded time steps,\n            // so we don't need to do anything for the recurrent layer\n            \n            //Now, if mask array is 2d -> need to reshape to 1d (column vector) in the exact same order\n            // as is done for 3d -> 2d time series reshaping\n            INDArray reshapedFeaturesMask = TimeSeriesUtils.reshapeTimeSeriesMaskToVector(featuresMaskArray);\n            \n            for( int i=0; i<layers.length-1; i++ ){\n                Type t = layers[i].type();\n                if( t == Type.CONVOLUTIONAL || t == Type.FEED_FORWARD ){\n                    layers[i].setMaskArray(reshapedFeaturesMask);\n                } else if( t == Type.RECURRENT ) break;\n            \n            }\n            */\n        }",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 1,
                    "column": 8
                  },
                  "end": {
                    "row": 1,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "condition",
                  "start": {
                    "row": 1,
                    "column": 11
                  },
                  "end": {
                    "row": 1,
                    "column": 38
                  },
                  "text": "(featuresMaskArray != null)",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 1,
                        "column": 11
                      },
                      "end": {
                        "row": 1,
                        "column": 12
                      },
                      "text": "("
                    },
                    {
                      "type": "binary_expression",
                      "start": {
                        "row": 1,
                        "column": 12
                      },
                      "end": {
                        "row": 1,
                        "column": 37
                      },
                      "text": "featuresMaskArray != null",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 1,
                            "column": 12
                          },
                          "end": {
                            "row": 1,
                            "column": 29
                          },
                          "text": "featuresMaskArray"
                        },
                        {
                          "type": "!=",
                          "start": {
                            "row": 1,
                            "column": 30
                          },
                          "end": {
                            "row": 1,
                            "column": 32
                          },
                          "text": "!="
                        },
                        {
                          "type": "null_literal",
                          "start": {
                            "row": 1,
                            "column": 33
                          },
                          "end": {
                            "row": 1,
                            "column": 37
                          },
                          "text": "null"
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 1,
                        "column": 37
                      },
                      "end": {
                        "row": 1,
                        "column": 38
                      },
                      "text": ")"
                    }
                  ]
                },
                {
                  "type": "block",
                  "start": {
                    "row": 1,
                    "column": 39
                  },
                  "end": {
                    "row": 27,
                    "column": 9
                  },
                  "text": "{\n\n            // FIXME: int cast\n            //New approach: use feedForwardMaskArray method\n            feedForwardMaskArray(featuresMaskArray, MaskState.Active, (int) featuresMaskArray.size(0));\n\n\n            /*\n            //feedforward layers below a RNN layer: need the input (features) mask array\n            //Reason: even if the time series input is zero padded, the output from the dense layers are\n            // non-zero (i.e., activationFunction(0*weights + bias) != 0 in general)\n            //This assumes that the time series input is masked - i.e., values are 0 at the padded time steps,\n            // so we don't need to do anything for the recurrent layer\n            \n            //Now, if mask array is 2d -> need to reshape to 1d (column vector) in the exact same order\n            // as is done for 3d -> 2d time series reshaping\n            INDArray reshapedFeaturesMask = TimeSeriesUtils.reshapeTimeSeriesMaskToVector(featuresMaskArray);\n            \n            for( int i=0; i<layers.length-1; i++ ){\n                Type t = layers[i].type();\n                if( t == Type.CONVOLUTIONAL || t == Type.FEED_FORWARD ){\n                    layers[i].setMaskArray(reshapedFeaturesMask);\n                } else if( t == Type.RECURRENT ) break;\n            \n            }\n            */\n        }",
                  "children": [
                    {
                      "type": "{",
                      "start": {
                        "row": 1,
                        "column": 39
                      },
                      "end": {
                        "row": 1,
                        "column": 40
                      },
                      "text": "{"
                    },
                    {
                      "type": "line_comment",
                      "start": {
                        "row": 3,
                        "column": 12
                      },
                      "end": {
                        "row": 3,
                        "column": 30
                      },
                      "text": "// FIXME: int cast"
                    },
                    {
                      "type": "line_comment",
                      "start": {
                        "row": 4,
                        "column": 12
                      },
                      "end": {
                        "row": 4,
                        "column": 59
                      },
                      "text": "//New approach: use feedForwardMaskArray method"
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 5,
                        "column": 12
                      },
                      "end": {
                        "row": 5,
                        "column": 103
                      },
                      "text": "feedForwardMaskArray(featuresMaskArray, MaskState.Active, (int) featuresMaskArray.size(0));",
                      "children": [
                        {
                          "type": "method_invocation",
                          "start": {
                            "row": 5,
                            "column": 12
                          },
                          "end": {
                            "row": 5,
                            "column": 102
                          },
                          "text": "feedForwardMaskArray(featuresMaskArray, MaskState.Active, (int) featuresMaskArray.size(0))",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 5,
                                "column": 12
                              },
                              "end": {
                                "row": 5,
                                "column": 32
                              },
                              "text": "feedForwardMaskArray"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 5,
                                "column": 32
                              },
                              "end": {
                                "row": 5,
                                "column": 102
                              },
                              "text": "(featuresMaskArray, MaskState.Active, (int) featuresMaskArray.size(0))",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 5,
                                    "column": 32
                                  },
                                  "end": {
                                    "row": 5,
                                    "column": 33
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 5,
                                    "column": 33
                                  },
                                  "end": {
                                    "row": 5,
                                    "column": 50
                                  },
                                  "text": "featuresMaskArray"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 5,
                                    "column": 50
                                  },
                                  "end": {
                                    "row": 5,
                                    "column": 51
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "field_access",
                                  "start": {
                                    "row": 5,
                                    "column": 52
                                  },
                                  "end": {
                                    "row": 5,
                                    "column": 68
                                  },
                                  "text": "MaskState.Active",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 5,
                                        "column": 52
                                      },
                                      "end": {
                                        "row": 5,
                                        "column": 61
                                      },
                                      "text": "MaskState"
                                    },
                                    {
                                      "type": ".",
                                      "start": {
                                        "row": 5,
                                        "column": 61
                                      },
                                      "end": {
                                        "row": 5,
                                        "column": 62
                                      },
                                      "text": "."
                                    },
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 5,
                                        "column": 62
                                      },
                                      "end": {
                                        "row": 5,
                                        "column": 68
                                      },
                                      "text": "Active"
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 5,
                                    "column": 68
                                  },
                                  "end": {
                                    "row": 5,
                                    "column": 69
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "cast_expression",
                                  "start": {
                                    "row": 5,
                                    "column": 70
                                  },
                                  "end": {
                                    "row": 5,
                                    "column": 101
                                  },
                                  "text": "(int) featuresMaskArray.size(0)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 5,
                                        "column": 70
                                      },
                                      "end": {
                                        "row": 5,
                                        "column": 71
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "integral_type",
                                      "start": {
                                        "row": 5,
                                        "column": 71
                                      },
                                      "end": {
                                        "row": 5,
                                        "column": 74
                                      },
                                      "text": "int",
                                      "children": [
                                        {
                                          "type": "int",
                                          "start": {
                                            "row": 5,
                                            "column": 71
                                          },
                                          "end": {
                                            "row": 5,
                                            "column": 74
                                          },
                                          "text": "int"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 5,
                                        "column": 74
                                      },
                                      "end": {
                                        "row": 5,
                                        "column": 75
                                      },
                                      "text": ")"
                                    },
                                    {
                                      "type": "method_invocation",
                                      "start": {
                                        "row": 5,
                                        "column": 76
                                      },
                                      "end": {
                                        "row": 5,
                                        "column": 101
                                      },
                                      "text": "featuresMaskArray.size(0)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 5,
                                            "column": 76
                                          },
                                          "end": {
                                            "row": 5,
                                            "column": 93
                                          },
                                          "text": "featuresMaskArray"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 5,
                                            "column": 93
                                          },
                                          "end": {
                                            "row": 5,
                                            "column": 94
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 5,
                                            "column": 94
                                          },
                                          "end": {
                                            "row": 5,
                                            "column": 98
                                          },
                                          "text": "size"
                                        },
                                        {
                                          "type": "argument_list",
                                          "start": {
                                            "row": 5,
                                            "column": 98
                                          },
                                          "end": {
                                            "row": 5,
                                            "column": 101
                                          },
                                          "text": "(0)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start": {
                                                "row": 5,
                                                "column": 98
                                              },
                                              "end": {
                                                "row": 5,
                                                "column": 99
                                              },
                                              "text": "("
                                            },
                                            {
                                              "type": "decimal_integer_literal",
                                              "start": {
                                                "row": 5,
                                                "column": 99
                                              },
                                              "end": {
                                                "row": 5,
                                                "column": 100
                                              },
                                              "text": "0"
                                            },
                                            {
                                              "type": ")",
                                              "start": {
                                                "row": 5,
                                                "column": 100
                                              },
                                              "end": {
                                                "row": 5,
                                                "column": 101
                                              },
                                              "text": ")"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 5,
                                    "column": 101
                                  },
                                  "end": {
                                    "row": 5,
                                    "column": 102
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start": {
                            "row": 5,
                            "column": 102
                          },
                          "end": {
                            "row": 5,
                            "column": 103
                          },
                          "text": ";"
                        }
                      ]
                    },
                    {
                      "type": "block_comment",
                      "start": {
                        "row": 8,
                        "column": 12
                      },
                      "end": {
                        "row": 26,
                        "column": 14
                      },
                      "text": "/*\n            //feedforward layers below a RNN layer: need the input (features) mask array\n            //Reason: even if the time series input is zero padded, the output from the dense layers are\n            // non-zero (i.e., activationFunction(0*weights + bias) != 0 in general)\n            //This assumes that the time series input is masked - i.e., values are 0 at the padded time steps,\n            // so we don't need to do anything for the recurrent layer\n            \n            //Now, if mask array is 2d -> need to reshape to 1d (column vector) in the exact same order\n            // as is done for 3d -> 2d time series reshaping\n            INDArray reshapedFeaturesMask = TimeSeriesUtils.reshapeTimeSeriesMaskToVector(featuresMaskArray);\n            \n            for( int i=0; i<layers.length-1; i++ ){\n                Type t = layers[i].type();\n                if( t == Type.CONVOLUTIONAL || t == Type.FEED_FORWARD ){\n                    layers[i].setMaskArray(reshapedFeaturesMask);\n                } else if( t == Type.RECURRENT ) break;\n            \n            }\n            */"
                    },
                    {
                      "type": "}",
                      "start": {
                        "row": 27,
                        "column": 8
                      },
                      "end": {
                        "row": 27,
                        "column": 9
                      },
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "if_statement",
              "start": {
                "row": 28,
                "column": 8
              },
              "end": {
                "row": 32,
                "column": 9
              },
              "text": "if (labelsMaskArray != null) {\n            if (!(getOutputLayer() instanceof IOutputLayer))\n                return;\n            layers[layers.length - 1].setMaskArray(labelsMaskArray);\n        }",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 28,
                    "column": 8
                  },
                  "end": {
                    "row": 28,
                    "column": 10
                  },
                  "text": "if"
                },
                {
                  "type": "condition",
                  "start": {
                    "row": 28,
                    "column": 11
                  },
                  "end": {
                    "row": 28,
                    "column": 36
                  },
                  "text": "(labelsMaskArray != null)",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 28,
                        "column": 11
                      },
                      "end": {
                        "row": 28,
                        "column": 12
                      },
                      "text": "("
                    },
                    {
                      "type": "binary_expression",
                      "start": {
                        "row": 28,
                        "column": 12
                      },
                      "end": {
                        "row": 28,
                        "column": 35
                      },
                      "text": "labelsMaskArray != null",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 28,
                            "column": 12
                          },
                          "end": {
                            "row": 28,
                            "column": 27
                          },
                          "text": "labelsMaskArray"
                        },
                        {
                          "type": "!=",
                          "start": {
                            "row": 28,
                            "column": 28
                          },
                          "end": {
                            "row": 28,
                            "column": 30
                          },
                          "text": "!="
                        },
                        {
                          "type": "null_literal",
                          "start": {
                            "row": 28,
                            "column": 31
                          },
                          "end": {
                            "row": 28,
                            "column": 35
                          },
                          "text": "null"
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 28,
                        "column": 35
                      },
                      "end": {
                        "row": 28,
                        "column": 36
                      },
                      "text": ")"
                    }
                  ]
                },
                {
                  "type": "block",
                  "start": {
                    "row": 28,
                    "column": 37
                  },
                  "end": {
                    "row": 32,
                    "column": 9
                  },
                  "text": "{\n            if (!(getOutputLayer() instanceof IOutputLayer))\n                return;\n            layers[layers.length - 1].setMaskArray(labelsMaskArray);\n        }",
                  "children": [
                    {
                      "type": "{",
                      "start": {
                        "row": 28,
                        "column": 37
                      },
                      "end": {
                        "row": 28,
                        "column": 38
                      },
                      "text": "{"
                    },
                    {
                      "type": "if_statement",
                      "start": {
                        "row": 29,
                        "column": 12
                      },
                      "end": {
                        "row": 30,
                        "column": 23
                      },
                      "text": "if (!(getOutputLayer() instanceof IOutputLayer))\n                return;",
                      "children": [
                        {
                          "type": "if",
                          "start": {
                            "row": 29,
                            "column": 12
                          },
                          "end": {
                            "row": 29,
                            "column": 14
                          },
                          "text": "if"
                        },
                        {
                          "type": "condition",
                          "start": {
                            "row": 29,
                            "column": 15
                          },
                          "end": {
                            "row": 29,
                            "column": 60
                          },
                          "text": "(!(getOutputLayer() instanceof IOutputLayer))",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 29,
                                "column": 15
                              },
                              "end": {
                                "row": 29,
                                "column": 16
                              },
                              "text": "("
                            },
                            {
                              "type": "unary_expression",
                              "start": {
                                "row": 29,
                                "column": 16
                              },
                              "end": {
                                "row": 29,
                                "column": 59
                              },
                              "text": "!(getOutputLayer() instanceof IOutputLayer)",
                              "children": [
                                {
                                  "type": "!",
                                  "start": {
                                    "row": 29,
                                    "column": 16
                                  },
                                  "end": {
                                    "row": 29,
                                    "column": 17
                                  },
                                  "text": "!"
                                },
                                {
                                  "type": "parenthesized_expression",
                                  "start": {
                                    "row": 29,
                                    "column": 17
                                  },
                                  "end": {
                                    "row": 29,
                                    "column": 59
                                  },
                                  "text": "(getOutputLayer() instanceof IOutputLayer)",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 29,
                                        "column": 17
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 18
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "instanceof_expression",
                                      "start": {
                                        "row": 29,
                                        "column": 18
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 58
                                      },
                                      "text": "getOutputLayer() instanceof IOutputLayer",
                                      "children": [
                                        {
                                          "type": "method_invocation",
                                          "start": {
                                            "row": 29,
                                            "column": 18
                                          },
                                          "end": {
                                            "row": 29,
                                            "column": 34
                                          },
                                          "text": "getOutputLayer()",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 29,
                                                "column": 18
                                              },
                                              "end": {
                                                "row": 29,
                                                "column": 32
                                              },
                                              "text": "getOutputLayer"
                                            },
                                            {
                                              "type": "argument_list",
                                              "start": {
                                                "row": 29,
                                                "column": 32
                                              },
                                              "end": {
                                                "row": 29,
                                                "column": 34
                                              },
                                              "text": "()",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start": {
                                                    "row": 29,
                                                    "column": 32
                                                  },
                                                  "end": {
                                                    "row": 29,
                                                    "column": 33
                                                  },
                                                  "text": "("
                                                },
                                                {
                                                  "type": ")",
                                                  "start": {
                                                    "row": 29,
                                                    "column": 33
                                                  },
                                                  "end": {
                                                    "row": 29,
                                                    "column": 34
                                                  },
                                                  "text": ")"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": "instanceof",
                                          "start": {
                                            "row": 29,
                                            "column": 35
                                          },
                                          "end": {
                                            "row": 29,
                                            "column": 45
                                          },
                                          "text": "instanceof"
                                        },
                                        {
                                          "type": "type_identifier",
                                          "start": {
                                            "row": 29,
                                            "column": 46
                                          },
                                          "end": {
                                            "row": 29,
                                            "column": 58
                                          },
                                          "text": "IOutputLayer"
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 29,
                                        "column": 58
                                      },
                                      "end": {
                                        "row": 29,
                                        "column": 59
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 29,
                                "column": 59
                              },
                              "end": {
                                "row": 29,
                                "column": 60
                              },
                              "text": ")"
                            }
                          ]
                        },
                        {
                          "type": "return_statement",
                          "start": {
                            "row": 30,
                            "column": 16
                          },
                          "end": {
                            "row": 30,
                            "column": 23
                          },
                          "text": "return;",
                          "children": [
                            {
                              "type": "return",
                              "start": {
                                "row": 30,
                                "column": 16
                              },
                              "end": {
                                "row": 30,
                                "column": 22
                              },
                              "text": "return"
                            },
                            {
                              "type": ";",
                              "start": {
                                "row": 30,
                                "column": 22
                              },
                              "end": {
                                "row": 30,
                                "column": 23
                              },
                              "text": ";"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start": {
                        "row": 31,
                        "column": 12
                      },
                      "end": {
                        "row": 31,
                        "column": 68
                      },
                      "text": "layers[layers.length - 1].setMaskArray(labelsMaskArray);",
                      "children": [
                        {
                          "type": "method_invocation",
                          "start": {
                            "row": 31,
                            "column": 12
                          },
                          "end": {
                            "row": 31,
                            "column": 67
                          },
                          "text": "layers[layers.length - 1].setMaskArray(labelsMaskArray)",
                          "children": [
                            {
                              "type": "array_access",
                              "start": {
                                "row": 31,
                                "column": 12
                              },
                              "end": {
                                "row": 31,
                                "column": 37
                              },
                              "text": "layers[layers.length - 1]",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 31,
                                    "column": 12
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 18
                                  },
                                  "text": "layers"
                                },
                                {
                                  "type": "[",
                                  "start": {
                                    "row": 31,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 19
                                  },
                                  "text": "["
                                },
                                {
                                  "type": "binary_expression",
                                  "start": {
                                    "row": 31,
                                    "column": 19
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 36
                                  },
                                  "text": "layers.length - 1",
                                  "children": [
                                    {
                                      "type": "field_access",
                                      "start": {
                                        "row": 31,
                                        "column": 19
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 32
                                      },
                                      "text": "layers.length",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 31,
                                            "column": 19
                                          },
                                          "end": {
                                            "row": 31,
                                            "column": 25
                                          },
                                          "text": "layers"
                                        },
                                        {
                                          "type": ".",
                                          "start": {
                                            "row": 31,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 31,
                                            "column": 26
                                          },
                                          "text": "."
                                        },
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 31,
                                            "column": 26
                                          },
                                          "end": {
                                            "row": 31,
                                            "column": 32
                                          },
                                          "text": "length"
                                        }
                                      ]
                                    },
                                    {
                                      "type": "-",
                                      "start": {
                                        "row": 31,
                                        "column": 33
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 34
                                      },
                                      "text": "-"
                                    },
                                    {
                                      "type": "decimal_integer_literal",
                                      "start": {
                                        "row": 31,
                                        "column": 35
                                      },
                                      "end": {
                                        "row": 31,
                                        "column": 36
                                      },
                                      "text": "1"
                                    }
                                  ]
                                },
                                {
                                  "type": "]",
                                  "start": {
                                    "row": 31,
                                    "column": 36
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 37
                                  },
                                  "text": "]"
                                }
                              ]
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 31,
                                "column": 37
                              },
                              "end": {
                                "row": 31,
                                "column": 38
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 31,
                                "column": 38
                              },
                              "end": {
                                "row": 31,
                                "column": 50
                              },
                              "text": "setMaskArray"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 31,
                                "column": 50
                              },
                              "end": {
                                "row": 31,
                                "column": 67
                              },
                              "text": "(labelsMaskArray)",
                              "children": [
                                {
                                  "type": "(",
                                  "start": {
                                    "row": 31,
                                    "column": 50
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 51
                                  },
                                  "text": "("
                                },
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 31,
                                    "column": 51
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 66
                                  },
                                  "text": "labelsMaskArray"
                                },
                                {
                                  "type": ")",
                                  "start": {
                                    "row": 31,
                                    "column": 66
                                  },
                                  "end": {
                                    "row": 31,
                                    "column": 67
                                  },
                                  "text": ")"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start": {
                            "row": 31,
                            "column": 67
                          },
                          "end": {
                            "row": 31,
                            "column": 68
                          },
                          "text": ";"
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start": {
                        "row": 32,
                        "column": 8
                      },
                      "end": {
                        "row": 32,
                        "column": 9
                      },
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "}",
              "start": {
                "row": 33,
                "column": 4
              },
              "end": {
                "row": 33,
                "column": 5
              },
              "text": "}"
            }
          ]
        }
      ]
    }
  ]
}