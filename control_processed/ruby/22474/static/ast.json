{
  "type": "program",
  "start": {
    "row": 0,
    "column": 0
  },
  "end": {
    "row": 27,
    "column": 7
  },
  "text": "def javascript(value = nil, attributes = {})\n      if value.is_a?(Hash)\n        attributes = value\n        value      = nil\n      elsif block_given? && value\n        raise ArgumentError, \"You can't pass both a block and a value to javascript -- please choose one.\"\n      end\n\n      script(attributes.merge(:type => \"text/javascript\")) do\n        # Shouldn't this be a \"cdata\" HtmlPart?\n        # (maybe, but the syntax is specific to javascript; it isn't\n        # really a generic XML CDATA section.  Specifically,\n        # ]]> within value is not treated as ending the\n        # CDATA section by Firefox2 when parsing text/html,\n        # although I guess we could refuse to generate ]]>\n        # there, for the benefit of XML/XHTML parsers).\n        output << raw(\"\\n// <![CDATA[\\n\")\n        if block_given?\n          yield\n        else\n          output << raw(value)\n        end\n        output << raw(\"\\n// ]]>\")\n        output.append_newline # this forces a newline even if we're not in pretty mode\n      end\n\n      output << raw(\"\\n\")\n    end",
  "children": [
    {
      "type": "method",
      "start": {
        "row": 0,
        "column": 0
      },
      "end": {
        "row": 27,
        "column": 7
      },
      "text": "def javascript(value = nil, attributes = {})\n      if value.is_a?(Hash)\n        attributes = value\n        value      = nil\n      elsif block_given? && value\n        raise ArgumentError, \"You can't pass both a block and a value to javascript -- please choose one.\"\n      end\n\n      script(attributes.merge(:type => \"text/javascript\")) do\n        # Shouldn't this be a \"cdata\" HtmlPart?\n        # (maybe, but the syntax is specific to javascript; it isn't\n        # really a generic XML CDATA section.  Specifically,\n        # ]]> within value is not treated as ending the\n        # CDATA section by Firefox2 when parsing text/html,\n        # although I guess we could refuse to generate ]]>\n        # there, for the benefit of XML/XHTML parsers).\n        output << raw(\"\\n// <![CDATA[\\n\")\n        if block_given?\n          yield\n        else\n          output << raw(value)\n        end\n        output << raw(\"\\n// ]]>\")\n        output.append_newline # this forces a newline even if we're not in pretty mode\n      end\n\n      output << raw(\"\\n\")\n    end",
      "children": [
        {
          "type": "def",
          "start": {
            "row": 0,
            "column": 0
          },
          "end": {
            "row": 0,
            "column": 3
          },
          "text": "def"
        },
        {
          "type": "identifier",
          "start": {
            "row": 0,
            "column": 4
          },
          "end": {
            "row": 0,
            "column": 14
          },
          "text": "javascript"
        },
        {
          "type": "method_parameters",
          "start": {
            "row": 0,
            "column": 14
          },
          "end": {
            "row": 0,
            "column": 44
          },
          "text": "(value = nil, attributes = {})",
          "children": [
            {
              "type": "(",
              "start": {
                "row": 0,
                "column": 14
              },
              "end": {
                "row": 0,
                "column": 15
              },
              "text": "("
            },
            {
              "type": "optional_parameter",
              "start": {
                "row": 0,
                "column": 15
              },
              "end": {
                "row": 0,
                "column": 26
              },
              "text": "value = nil",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 15
                  },
                  "end": {
                    "row": 0,
                    "column": 20
                  },
                  "text": "value"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 21
                  },
                  "end": {
                    "row": 0,
                    "column": 22
                  },
                  "text": "="
                },
                {
                  "type": "nil",
                  "start": {
                    "row": 0,
                    "column": 23
                  },
                  "end": {
                    "row": 0,
                    "column": 26
                  },
                  "text": "nil",
                  "children": [
                    {
                      "type": "nil",
                      "start": {
                        "row": 0,
                        "column": 23
                      },
                      "end": {
                        "row": 0,
                        "column": 26
                      },
                      "text": "nil"
                    }
                  ]
                }
              ]
            },
            {
              "type": ",",
              "start": {
                "row": 0,
                "column": 26
              },
              "end": {
                "row": 0,
                "column": 27
              },
              "text": ","
            },
            {
              "type": "optional_parameter",
              "start": {
                "row": 0,
                "column": 28
              },
              "end": {
                "row": 0,
                "column": 43
              },
              "text": "attributes = {}",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 0,
                    "column": 28
                  },
                  "end": {
                    "row": 0,
                    "column": 38
                  },
                  "text": "attributes"
                },
                {
                  "type": "=",
                  "start": {
                    "row": 0,
                    "column": 39
                  },
                  "end": {
                    "row": 0,
                    "column": 40
                  },
                  "text": "="
                },
                {
                  "type": "hash",
                  "start": {
                    "row": 0,
                    "column": 41
                  },
                  "end": {
                    "row": 0,
                    "column": 43
                  },
                  "text": "{}",
                  "children": [
                    {
                      "type": "{",
                      "start": {
                        "row": 0,
                        "column": 41
                      },
                      "end": {
                        "row": 0,
                        "column": 42
                      },
                      "text": "{"
                    },
                    {
                      "type": "}",
                      "start": {
                        "row": 0,
                        "column": 42
                      },
                      "end": {
                        "row": 0,
                        "column": 43
                      },
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": ")",
              "start": {
                "row": 0,
                "column": 43
              },
              "end": {
                "row": 0,
                "column": 44
              },
              "text": ")"
            }
          ]
        },
        {
          "type": "body_statement",
          "start": {
            "row": 1,
            "column": 6
          },
          "end": {
            "row": 26,
            "column": 25
          },
          "text": "if value.is_a?(Hash)\n        attributes = value\n        value      = nil\n      elsif block_given? && value\n        raise ArgumentError, \"You can't pass both a block and a value to javascript -- please choose one.\"\n      end\n\n      script(attributes.merge(:type => \"text/javascript\")) do\n        # Shouldn't this be a \"cdata\" HtmlPart?\n        # (maybe, but the syntax is specific to javascript; it isn't\n        # really a generic XML CDATA section.  Specifically,\n        # ]]> within value is not treated as ending the\n        # CDATA section by Firefox2 when parsing text/html,\n        # although I guess we could refuse to generate ]]>\n        # there, for the benefit of XML/XHTML parsers).\n        output << raw(\"\\n// <![CDATA[\\n\")\n        if block_given?\n          yield\n        else\n          output << raw(value)\n        end\n        output << raw(\"\\n// ]]>\")\n        output.append_newline # this forces a newline even if we're not in pretty mode\n      end\n\n      output << raw(\"\\n\")",
          "children": [
            {
              "type": "if",
              "start": {
                "row": 1,
                "column": 6
              },
              "end": {
                "row": 6,
                "column": 9
              },
              "text": "if value.is_a?(Hash)\n        attributes = value\n        value      = nil\n      elsif block_given? && value\n        raise ArgumentError, \"You can't pass both a block and a value to javascript -- please choose one.\"\n      end",
              "children": [
                {
                  "type": "if",
                  "start": {
                    "row": 1,
                    "column": 6
                  },
                  "end": {
                    "row": 1,
                    "column": 8
                  },
                  "text": "if"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 1,
                    "column": 9
                  },
                  "end": {
                    "row": 1,
                    "column": 26
                  },
                  "text": "value.is_a?(Hash)",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 1,
                        "column": 9
                      },
                      "end": {
                        "row": 1,
                        "column": 14
                      },
                      "text": "value"
                    },
                    {
                      "type": ".",
                      "start": {
                        "row": 1,
                        "column": 14
                      },
                      "end": {
                        "row": 1,
                        "column": 15
                      },
                      "text": "."
                    },
                    {
                      "type": "identifier",
                      "start": {
                        "row": 1,
                        "column": 15
                      },
                      "end": {
                        "row": 1,
                        "column": 20
                      },
                      "text": "is_a?"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 1,
                        "column": 20
                      },
                      "end": {
                        "row": 1,
                        "column": 26
                      },
                      "text": "(Hash)",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 1,
                            "column": 20
                          },
                          "end": {
                            "row": 1,
                            "column": 21
                          },
                          "text": "("
                        },
                        {
                          "type": "constant",
                          "start": {
                            "row": 1,
                            "column": 21
                          },
                          "end": {
                            "row": 1,
                            "column": 25
                          },
                          "text": "Hash"
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 1,
                            "column": 25
                          },
                          "end": {
                            "row": 1,
                            "column": 26
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "then",
                  "start": {
                    "row": 1,
                    "column": 26
                  },
                  "end": {
                    "row": 3,
                    "column": 24
                  },
                  "text": "\n        attributes = value\n        value      = nil",
                  "children": [
                    {
                      "type": "assignment",
                      "start": {
                        "row": 2,
                        "column": 8
                      },
                      "end": {
                        "row": 2,
                        "column": 26
                      },
                      "text": "attributes = value",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 2,
                            "column": 8
                          },
                          "end": {
                            "row": 2,
                            "column": 18
                          },
                          "text": "attributes"
                        },
                        {
                          "type": "=",
                          "start": {
                            "row": 2,
                            "column": 19
                          },
                          "end": {
                            "row": 2,
                            "column": 20
                          },
                          "text": "="
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 2,
                            "column": 21
                          },
                          "end": {
                            "row": 2,
                            "column": 26
                          },
                          "text": "value"
                        }
                      ]
                    },
                    {
                      "type": "assignment",
                      "start": {
                        "row": 3,
                        "column": 8
                      },
                      "end": {
                        "row": 3,
                        "column": 24
                      },
                      "text": "value      = nil",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 3,
                            "column": 8
                          },
                          "end": {
                            "row": 3,
                            "column": 13
                          },
                          "text": "value"
                        },
                        {
                          "type": "=",
                          "start": {
                            "row": 3,
                            "column": 19
                          },
                          "end": {
                            "row": 3,
                            "column": 20
                          },
                          "text": "="
                        },
                        {
                          "type": "nil",
                          "start": {
                            "row": 3,
                            "column": 21
                          },
                          "end": {
                            "row": 3,
                            "column": 24
                          },
                          "text": "nil",
                          "children": [
                            {
                              "type": "nil",
                              "start": {
                                "row": 3,
                                "column": 21
                              },
                              "end": {
                                "row": 3,
                                "column": 24
                              },
                              "text": "nil"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "elsif",
                  "start": {
                    "row": 4,
                    "column": 6
                  },
                  "end": {
                    "row": 5,
                    "column": 106
                  },
                  "text": "elsif block_given? && value\n        raise ArgumentError, \"You can't pass both a block and a value to javascript -- please choose one.\"",
                  "children": [
                    {
                      "type": "elsif",
                      "start": {
                        "row": 4,
                        "column": 6
                      },
                      "end": {
                        "row": 4,
                        "column": 11
                      },
                      "text": "elsif"
                    },
                    {
                      "type": "binary",
                      "start": {
                        "row": 4,
                        "column": 12
                      },
                      "end": {
                        "row": 4,
                        "column": 33
                      },
                      "text": "block_given? && value",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 4,
                            "column": 12
                          },
                          "end": {
                            "row": 4,
                            "column": 24
                          },
                          "text": "block_given?",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 4,
                                "column": 12
                              },
                              "end": {
                                "row": 4,
                                "column": 24
                              },
                              "text": "block_given?"
                            }
                          ]
                        },
                        {
                          "type": "&&",
                          "start": {
                            "row": 4,
                            "column": 25
                          },
                          "end": {
                            "row": 4,
                            "column": 27
                          },
                          "text": "&&"
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 4,
                            "column": 28
                          },
                          "end": {
                            "row": 4,
                            "column": 33
                          },
                          "text": "value"
                        }
                      ]
                    },
                    {
                      "type": "then",
                      "start": {
                        "row": 4,
                        "column": 33
                      },
                      "end": {
                        "row": 5,
                        "column": 106
                      },
                      "text": "\n        raise ArgumentError, \"You can't pass both a block and a value to javascript -- please choose one.\"",
                      "children": [
                        {
                          "type": "call",
                          "start": {
                            "row": 5,
                            "column": 8
                          },
                          "end": {
                            "row": 5,
                            "column": 106
                          },
                          "text": "raise ArgumentError, \"You can't pass both a block and a value to javascript -- please choose one.\"",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 5,
                                "column": 8
                              },
                              "end": {
                                "row": 5,
                                "column": 13
                              },
                              "text": "raise"
                            },
                            {
                              "type": "argument_list",
                              "start": {
                                "row": 5,
                                "column": 14
                              },
                              "end": {
                                "row": 5,
                                "column": 106
                              },
                              "text": "ArgumentError, \"You can't pass both a block and a value to javascript -- please choose one.\"",
                              "children": [
                                {
                                  "type": "constant",
                                  "start": {
                                    "row": 5,
                                    "column": 14
                                  },
                                  "end": {
                                    "row": 5,
                                    "column": 27
                                  },
                                  "text": "ArgumentError"
                                },
                                {
                                  "type": ",",
                                  "start": {
                                    "row": 5,
                                    "column": 27
                                  },
                                  "end": {
                                    "row": 5,
                                    "column": 28
                                  },
                                  "text": ","
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 5,
                                    "column": 29
                                  },
                                  "end": {
                                    "row": 5,
                                    "column": 106
                                  },
                                  "text": "\"You can't pass both a block and a value to javascript -- please choose one.\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start": {
                                        "row": 5,
                                        "column": 29
                                      },
                                      "end": {
                                        "row": 5,
                                        "column": 30
                                      },
                                      "text": "\""
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 5,
                                        "column": 30
                                      },
                                      "end": {
                                        "row": 5,
                                        "column": 105
                                      },
                                      "text": "You can't pass both a block and a value to javascript -- please choose one."
                                    },
                                    {
                                      "type": "\"",
                                      "start": {
                                        "row": 5,
                                        "column": 105
                                      },
                                      "end": {
                                        "row": 5,
                                        "column": 106
                                      },
                                      "text": "\""
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "end",
                  "start": {
                    "row": 6,
                    "column": 6
                  },
                  "end": {
                    "row": 6,
                    "column": 9
                  },
                  "text": "end"
                }
              ]
            },
            {
              "type": "call",
              "start": {
                "row": 8,
                "column": 6
              },
              "end": {
                "row": 24,
                "column": 9
              },
              "text": "script(attributes.merge(:type => \"text/javascript\")) do\n        # Shouldn't this be a \"cdata\" HtmlPart?\n        # (maybe, but the syntax is specific to javascript; it isn't\n        # really a generic XML CDATA section.  Specifically,\n        # ]]> within value is not treated as ending the\n        # CDATA section by Firefox2 when parsing text/html,\n        # although I guess we could refuse to generate ]]>\n        # there, for the benefit of XML/XHTML parsers).\n        output << raw(\"\\n// <![CDATA[\\n\")\n        if block_given?\n          yield\n        else\n          output << raw(value)\n        end\n        output << raw(\"\\n// ]]>\")\n        output.append_newline # this forces a newline even if we're not in pretty mode\n      end",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 8,
                    "column": 6
                  },
                  "end": {
                    "row": 8,
                    "column": 12
                  },
                  "text": "script"
                },
                {
                  "type": "argument_list",
                  "start": {
                    "row": 8,
                    "column": 12
                  },
                  "end": {
                    "row": 8,
                    "column": 58
                  },
                  "text": "(attributes.merge(:type => \"text/javascript\"))",
                  "children": [
                    {
                      "type": "(",
                      "start": {
                        "row": 8,
                        "column": 12
                      },
                      "end": {
                        "row": 8,
                        "column": 13
                      },
                      "text": "("
                    },
                    {
                      "type": "call",
                      "start": {
                        "row": 8,
                        "column": 13
                      },
                      "end": {
                        "row": 8,
                        "column": 57
                      },
                      "text": "attributes.merge(:type => \"text/javascript\")",
                      "children": [
                        {
                          "type": "identifier",
                          "start": {
                            "row": 8,
                            "column": 13
                          },
                          "end": {
                            "row": 8,
                            "column": 23
                          },
                          "text": "attributes"
                        },
                        {
                          "type": ".",
                          "start": {
                            "row": 8,
                            "column": 23
                          },
                          "end": {
                            "row": 8,
                            "column": 24
                          },
                          "text": "."
                        },
                        {
                          "type": "identifier",
                          "start": {
                            "row": 8,
                            "column": 24
                          },
                          "end": {
                            "row": 8,
                            "column": 29
                          },
                          "text": "merge"
                        },
                        {
                          "type": "argument_list",
                          "start": {
                            "row": 8,
                            "column": 29
                          },
                          "end": {
                            "row": 8,
                            "column": 57
                          },
                          "text": "(:type => \"text/javascript\")",
                          "children": [
                            {
                              "type": "(",
                              "start": {
                                "row": 8,
                                "column": 29
                              },
                              "end": {
                                "row": 8,
                                "column": 30
                              },
                              "text": "("
                            },
                            {
                              "type": "pair",
                              "start": {
                                "row": 8,
                                "column": 30
                              },
                              "end": {
                                "row": 8,
                                "column": 56
                              },
                              "text": ":type => \"text/javascript\"",
                              "children": [
                                {
                                  "type": "simple_symbol",
                                  "start": {
                                    "row": 8,
                                    "column": 30
                                  },
                                  "end": {
                                    "row": 8,
                                    "column": 35
                                  },
                                  "text": ":type"
                                },
                                {
                                  "type": "=>",
                                  "start": {
                                    "row": 8,
                                    "column": 36
                                  },
                                  "end": {
                                    "row": 8,
                                    "column": 38
                                  },
                                  "text": "=>"
                                },
                                {
                                  "type": "string",
                                  "start": {
                                    "row": 8,
                                    "column": 39
                                  },
                                  "end": {
                                    "row": 8,
                                    "column": 56
                                  },
                                  "text": "\"text/javascript\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start": {
                                        "row": 8,
                                        "column": 39
                                      },
                                      "end": {
                                        "row": 8,
                                        "column": 40
                                      },
                                      "text": "\""
                                    },
                                    {
                                      "type": "string_content",
                                      "start": {
                                        "row": 8,
                                        "column": 40
                                      },
                                      "end": {
                                        "row": 8,
                                        "column": 55
                                      },
                                      "text": "text/javascript"
                                    },
                                    {
                                      "type": "\"",
                                      "start": {
                                        "row": 8,
                                        "column": 55
                                      },
                                      "end": {
                                        "row": 8,
                                        "column": 56
                                      },
                                      "text": "\""
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start": {
                                "row": 8,
                                "column": 56
                              },
                              "end": {
                                "row": 8,
                                "column": 57
                              },
                              "text": ")"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start": {
                        "row": 8,
                        "column": 57
                      },
                      "end": {
                        "row": 8,
                        "column": 58
                      },
                      "text": ")"
                    }
                  ]
                },
                {
                  "type": "do_block",
                  "start": {
                    "row": 8,
                    "column": 59
                  },
                  "end": {
                    "row": 24,
                    "column": 9
                  },
                  "text": "do\n        # Shouldn't this be a \"cdata\" HtmlPart?\n        # (maybe, but the syntax is specific to javascript; it isn't\n        # really a generic XML CDATA section.  Specifically,\n        # ]]> within value is not treated as ending the\n        # CDATA section by Firefox2 when parsing text/html,\n        # although I guess we could refuse to generate ]]>\n        # there, for the benefit of XML/XHTML parsers).\n        output << raw(\"\\n// <![CDATA[\\n\")\n        if block_given?\n          yield\n        else\n          output << raw(value)\n        end\n        output << raw(\"\\n// ]]>\")\n        output.append_newline # this forces a newline even if we're not in pretty mode\n      end",
                  "children": [
                    {
                      "type": "do",
                      "start": {
                        "row": 8,
                        "column": 59
                      },
                      "end": {
                        "row": 8,
                        "column": 61
                      },
                      "text": "do"
                    },
                    {
                      "type": "comment",
                      "start": {
                        "row": 9,
                        "column": 8
                      },
                      "end": {
                        "row": 9,
                        "column": 47
                      },
                      "text": "# Shouldn't this be a \"cdata\" HtmlPart?"
                    },
                    {
                      "type": "comment",
                      "start": {
                        "row": 10,
                        "column": 8
                      },
                      "end": {
                        "row": 10,
                        "column": 68
                      },
                      "text": "# (maybe, but the syntax is specific to javascript; it isn't"
                    },
                    {
                      "type": "comment",
                      "start": {
                        "row": 11,
                        "column": 8
                      },
                      "end": {
                        "row": 11,
                        "column": 60
                      },
                      "text": "# really a generic XML CDATA section.  Specifically,"
                    },
                    {
                      "type": "comment",
                      "start": {
                        "row": 12,
                        "column": 8
                      },
                      "end": {
                        "row": 12,
                        "column": 55
                      },
                      "text": "# ]]> within value is not treated as ending the"
                    },
                    {
                      "type": "comment",
                      "start": {
                        "row": 13,
                        "column": 8
                      },
                      "end": {
                        "row": 13,
                        "column": 59
                      },
                      "text": "# CDATA section by Firefox2 when parsing text/html,"
                    },
                    {
                      "type": "comment",
                      "start": {
                        "row": 14,
                        "column": 8
                      },
                      "end": {
                        "row": 14,
                        "column": 58
                      },
                      "text": "# although I guess we could refuse to generate ]]>"
                    },
                    {
                      "type": "comment",
                      "start": {
                        "row": 15,
                        "column": 8
                      },
                      "end": {
                        "row": 15,
                        "column": 55
                      },
                      "text": "# there, for the benefit of XML/XHTML parsers)."
                    },
                    {
                      "type": "body_statement",
                      "start": {
                        "row": 16,
                        "column": 8
                      },
                      "end": {
                        "row": 23,
                        "column": 86
                      },
                      "text": "output << raw(\"\\n// <![CDATA[\\n\")\n        if block_given?\n          yield\n        else\n          output << raw(value)\n        end\n        output << raw(\"\\n// ]]>\")\n        output.append_newline # this forces a newline even if we're not in pretty mode",
                      "children": [
                        {
                          "type": "binary",
                          "start": {
                            "row": 16,
                            "column": 8
                          },
                          "end": {
                            "row": 16,
                            "column": 41
                          },
                          "text": "output << raw(\"\\n// <![CDATA[\\n\")",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 16,
                                "column": 8
                              },
                              "end": {
                                "row": 16,
                                "column": 14
                              },
                              "text": "output"
                            },
                            {
                              "type": "<<",
                              "start": {
                                "row": 16,
                                "column": 15
                              },
                              "end": {
                                "row": 16,
                                "column": 17
                              },
                              "text": "<<"
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 16,
                                "column": 18
                              },
                              "end": {
                                "row": 16,
                                "column": 41
                              },
                              "text": "raw(\"\\n// <![CDATA[\\n\")",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 16,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 16,
                                    "column": 21
                                  },
                                  "text": "raw"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 16,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 16,
                                    "column": 41
                                  },
                                  "text": "(\"\\n// <![CDATA[\\n\")",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 16,
                                        "column": 21
                                      },
                                      "end": {
                                        "row": 16,
                                        "column": 22
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 16,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 16,
                                        "column": 40
                                      },
                                      "text": "\"\\n// <![CDATA[\\n\"",
                                      "children": [
                                        {
                                          "type": "\"",
                                          "start": {
                                            "row": 16,
                                            "column": 22
                                          },
                                          "end": {
                                            "row": 16,
                                            "column": 23
                                          },
                                          "text": "\""
                                        },
                                        {
                                          "type": "escape_sequence",
                                          "start": {
                                            "row": 16,
                                            "column": 23
                                          },
                                          "end": {
                                            "row": 16,
                                            "column": 25
                                          },
                                          "text": "\\n"
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 16,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 16,
                                            "column": 37
                                          },
                                          "text": "// <![CDATA["
                                        },
                                        {
                                          "type": "escape_sequence",
                                          "start": {
                                            "row": 16,
                                            "column": 37
                                          },
                                          "end": {
                                            "row": 16,
                                            "column": 39
                                          },
                                          "text": "\\n"
                                        },
                                        {
                                          "type": "\"",
                                          "start": {
                                            "row": 16,
                                            "column": 39
                                          },
                                          "end": {
                                            "row": 16,
                                            "column": 40
                                          },
                                          "text": "\""
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 16,
                                        "column": 40
                                      },
                                      "end": {
                                        "row": 16,
                                        "column": 41
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "if",
                          "start": {
                            "row": 17,
                            "column": 8
                          },
                          "end": {
                            "row": 21,
                            "column": 11
                          },
                          "text": "if block_given?\n          yield\n        else\n          output << raw(value)\n        end",
                          "children": [
                            {
                              "type": "if",
                              "start": {
                                "row": 17,
                                "column": 8
                              },
                              "end": {
                                "row": 17,
                                "column": 10
                              },
                              "text": "if"
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 17,
                                "column": 11
                              },
                              "end": {
                                "row": 17,
                                "column": 23
                              },
                              "text": "block_given?",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 17,
                                    "column": 11
                                  },
                                  "end": {
                                    "row": 17,
                                    "column": 23
                                  },
                                  "text": "block_given?"
                                }
                              ]
                            },
                            {
                              "type": "then",
                              "start": {
                                "row": 17,
                                "column": 23
                              },
                              "end": {
                                "row": 18,
                                "column": 15
                              },
                              "text": "\n          yield",
                              "children": [
                                {
                                  "type": "yield",
                                  "start": {
                                    "row": 18,
                                    "column": 10
                                  },
                                  "end": {
                                    "row": 18,
                                    "column": 15
                                  },
                                  "text": "yield",
                                  "children": [
                                    {
                                      "type": "yield",
                                      "start": {
                                        "row": 18,
                                        "column": 10
                                      },
                                      "end": {
                                        "row": 18,
                                        "column": 15
                                      },
                                      "text": "yield"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "else",
                              "start": {
                                "row": 19,
                                "column": 8
                              },
                              "end": {
                                "row": 20,
                                "column": 30
                              },
                              "text": "else\n          output << raw(value)",
                              "children": [
                                {
                                  "type": "else",
                                  "start": {
                                    "row": 19,
                                    "column": 8
                                  },
                                  "end": {
                                    "row": 19,
                                    "column": 12
                                  },
                                  "text": "else"
                                },
                                {
                                  "type": "binary",
                                  "start": {
                                    "row": 20,
                                    "column": 10
                                  },
                                  "end": {
                                    "row": 20,
                                    "column": 30
                                  },
                                  "text": "output << raw(value)",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start": {
                                        "row": 20,
                                        "column": 10
                                      },
                                      "end": {
                                        "row": 20,
                                        "column": 16
                                      },
                                      "text": "output"
                                    },
                                    {
                                      "type": "<<",
                                      "start": {
                                        "row": 20,
                                        "column": 17
                                      },
                                      "end": {
                                        "row": 20,
                                        "column": 19
                                      },
                                      "text": "<<"
                                    },
                                    {
                                      "type": "call",
                                      "start": {
                                        "row": 20,
                                        "column": 20
                                      },
                                      "end": {
                                        "row": 20,
                                        "column": 30
                                      },
                                      "text": "raw(value)",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start": {
                                            "row": 20,
                                            "column": 20
                                          },
                                          "end": {
                                            "row": 20,
                                            "column": 23
                                          },
                                          "text": "raw"
                                        },
                                        {
                                          "type": "argument_list",
                                          "start": {
                                            "row": 20,
                                            "column": 23
                                          },
                                          "end": {
                                            "row": 20,
                                            "column": 30
                                          },
                                          "text": "(value)",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start": {
                                                "row": 20,
                                                "column": 23
                                              },
                                              "end": {
                                                "row": 20,
                                                "column": 24
                                              },
                                              "text": "("
                                            },
                                            {
                                              "type": "identifier",
                                              "start": {
                                                "row": 20,
                                                "column": 24
                                              },
                                              "end": {
                                                "row": 20,
                                                "column": 29
                                              },
                                              "text": "value"
                                            },
                                            {
                                              "type": ")",
                                              "start": {
                                                "row": 20,
                                                "column": 29
                                              },
                                              "end": {
                                                "row": 20,
                                                "column": 30
                                              },
                                              "text": ")"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "end",
                              "start": {
                                "row": 21,
                                "column": 8
                              },
                              "end": {
                                "row": 21,
                                "column": 11
                              },
                              "text": "end"
                            }
                          ]
                        },
                        {
                          "type": "binary",
                          "start": {
                            "row": 22,
                            "column": 8
                          },
                          "end": {
                            "row": 22,
                            "column": 33
                          },
                          "text": "output << raw(\"\\n// ]]>\")",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 22,
                                "column": 8
                              },
                              "end": {
                                "row": 22,
                                "column": 14
                              },
                              "text": "output"
                            },
                            {
                              "type": "<<",
                              "start": {
                                "row": 22,
                                "column": 15
                              },
                              "end": {
                                "row": 22,
                                "column": 17
                              },
                              "text": "<<"
                            },
                            {
                              "type": "call",
                              "start": {
                                "row": 22,
                                "column": 18
                              },
                              "end": {
                                "row": 22,
                                "column": 33
                              },
                              "text": "raw(\"\\n// ]]>\")",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start": {
                                    "row": 22,
                                    "column": 18
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 21
                                  },
                                  "text": "raw"
                                },
                                {
                                  "type": "argument_list",
                                  "start": {
                                    "row": 22,
                                    "column": 21
                                  },
                                  "end": {
                                    "row": 22,
                                    "column": 33
                                  },
                                  "text": "(\"\\n// ]]>\")",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start": {
                                        "row": 22,
                                        "column": 21
                                      },
                                      "end": {
                                        "row": 22,
                                        "column": 22
                                      },
                                      "text": "("
                                    },
                                    {
                                      "type": "string",
                                      "start": {
                                        "row": 22,
                                        "column": 22
                                      },
                                      "end": {
                                        "row": 22,
                                        "column": 32
                                      },
                                      "text": "\"\\n// ]]>\"",
                                      "children": [
                                        {
                                          "type": "\"",
                                          "start": {
                                            "row": 22,
                                            "column": 22
                                          },
                                          "end": {
                                            "row": 22,
                                            "column": 23
                                          },
                                          "text": "\""
                                        },
                                        {
                                          "type": "escape_sequence",
                                          "start": {
                                            "row": 22,
                                            "column": 23
                                          },
                                          "end": {
                                            "row": 22,
                                            "column": 25
                                          },
                                          "text": "\\n"
                                        },
                                        {
                                          "type": "string_content",
                                          "start": {
                                            "row": 22,
                                            "column": 25
                                          },
                                          "end": {
                                            "row": 22,
                                            "column": 31
                                          },
                                          "text": "// ]]>"
                                        },
                                        {
                                          "type": "\"",
                                          "start": {
                                            "row": 22,
                                            "column": 31
                                          },
                                          "end": {
                                            "row": 22,
                                            "column": 32
                                          },
                                          "text": "\""
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start": {
                                        "row": 22,
                                        "column": 32
                                      },
                                      "end": {
                                        "row": 22,
                                        "column": 33
                                      },
                                      "text": ")"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "call",
                          "start": {
                            "row": 23,
                            "column": 8
                          },
                          "end": {
                            "row": 23,
                            "column": 29
                          },
                          "text": "output.append_newline",
                          "children": [
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 8
                              },
                              "end": {
                                "row": 23,
                                "column": 14
                              },
                              "text": "output"
                            },
                            {
                              "type": ".",
                              "start": {
                                "row": 23,
                                "column": 14
                              },
                              "end": {
                                "row": 23,
                                "column": 15
                              },
                              "text": "."
                            },
                            {
                              "type": "identifier",
                              "start": {
                                "row": 23,
                                "column": 15
                              },
                              "end": {
                                "row": 23,
                                "column": 29
                              },
                              "text": "append_newline"
                            }
                          ]
                        },
                        {
                          "type": "comment",
                          "start": {
                            "row": 23,
                            "column": 30
                          },
                          "end": {
                            "row": 23,
                            "column": 86
                          },
                          "text": "# this forces a newline even if we're not in pretty mode"
                        }
                      ]
                    },
                    {
                      "type": "end",
                      "start": {
                        "row": 24,
                        "column": 6
                      },
                      "end": {
                        "row": 24,
                        "column": 9
                      },
                      "text": "end"
                    }
                  ]
                }
              ]
            },
            {
              "type": "binary",
              "start": {
                "row": 26,
                "column": 6
              },
              "end": {
                "row": 26,
                "column": 25
              },
              "text": "output << raw(\"\\n\")",
              "children": [
                {
                  "type": "identifier",
                  "start": {
                    "row": 26,
                    "column": 6
                  },
                  "end": {
                    "row": 26,
                    "column": 12
                  },
                  "text": "output"
                },
                {
                  "type": "<<",
                  "start": {
                    "row": 26,
                    "column": 13
                  },
                  "end": {
                    "row": 26,
                    "column": 15
                  },
                  "text": "<<"
                },
                {
                  "type": "call",
                  "start": {
                    "row": 26,
                    "column": 16
                  },
                  "end": {
                    "row": 26,
                    "column": 25
                  },
                  "text": "raw(\"\\n\")",
                  "children": [
                    {
                      "type": "identifier",
                      "start": {
                        "row": 26,
                        "column": 16
                      },
                      "end": {
                        "row": 26,
                        "column": 19
                      },
                      "text": "raw"
                    },
                    {
                      "type": "argument_list",
                      "start": {
                        "row": 26,
                        "column": 19
                      },
                      "end": {
                        "row": 26,
                        "column": 25
                      },
                      "text": "(\"\\n\")",
                      "children": [
                        {
                          "type": "(",
                          "start": {
                            "row": 26,
                            "column": 19
                          },
                          "end": {
                            "row": 26,
                            "column": 20
                          },
                          "text": "("
                        },
                        {
                          "type": "string",
                          "start": {
                            "row": 26,
                            "column": 20
                          },
                          "end": {
                            "row": 26,
                            "column": 24
                          },
                          "text": "\"\\n\"",
                          "children": [
                            {
                              "type": "\"",
                              "start": {
                                "row": 26,
                                "column": 20
                              },
                              "end": {
                                "row": 26,
                                "column": 21
                              },
                              "text": "\""
                            },
                            {
                              "type": "escape_sequence",
                              "start": {
                                "row": 26,
                                "column": 21
                              },
                              "end": {
                                "row": 26,
                                "column": 23
                              },
                              "text": "\\n"
                            },
                            {
                              "type": "\"",
                              "start": {
                                "row": 26,
                                "column": 23
                              },
                              "end": {
                                "row": 26,
                                "column": 24
                              },
                              "text": "\""
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start": {
                            "row": 26,
                            "column": 24
                          },
                          "end": {
                            "row": 26,
                            "column": 25
                          },
                          "text": ")"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "end",
          "start": {
            "row": 27,
            "column": 4
          },
          "end": {
            "row": 27,
            "column": 7
          },
          "text": "end"
        }
      ]
    }
  ]
}